<?php

require_once(dirname(__FILE__) . '/Helpers.php');

/* edited (OdooApi class added to reach Odoo APIs in the path: /usr/lib/python3/dist-packages/odoo/addons/custom_account/controllers, which contains functions to get the financial-transactions) */
class OdooApi
{
    protected $_cookieFileLocation = './Odoocookie.txt';
    protected $_header     = array(
        'Content-Type: application/json'
    );
    protected $cr; // curl cursor
    protected $url;

    public function __destruct()
    {
        curl_close($this->cr);
    }

    public function __construct()
    {
        $this->_cookieFileLocation = dirname(__FILE__) . '/Odoocookie.txt';
        $this->cr = curl_init();
        $this->url = "http://46.253.95.70";

        // suthenticate:

        $params = json_encode(array(
            "jsonrpc" => "2.0",
            "params" => array("db" => "ToGo", "login" => "admin", "password" => "admin")
        ));

        $this->callOdooUrl("/web/session/authenticate", "POST", $params);
    }

    public function callOdooUrl($url = null, $method = null, $params = null)
    {
        if (!$url) {
            throw new Exception('You should set an URL to call.');
        }
        if (!$method)
            throw new Exception('You should set a method to call.');
        curl_setopt($this->cr, CURLOPT_URL, $this->url . $url);
        curl_setopt($this->cr, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($this->cr, CURLOPT_ENCODING, '');
        curl_setopt($this->cr, CURLOPT_MAXREDIRS, 30);
        curl_setopt($this->cr, CURLOPT_MAXREDIRS, 0);
        curl_setopt($this->cr, CURLOPT_COOKIEFILE, $this->_cookieFileLocation);
        curl_setopt($this->cr, CURLOPT_COOKIEJAR, $this->_cookieFileLocation);
        curl_setopt($this->cr, CURLOPT_FOLLOWLOCATION, true);
        curl_setopt($this->cr, CURLOPT_POSTFIELDS, $params);
        curl_setopt($this->cr, CURLOPT_HTTP_VERSION, true);
        curl_setopt($this->cr, CURLOPT_FAILONERROR, true);
        curl_setopt($this->cr, CURLOPT_HTTPHEADER, $this->_header);
        curl_setopt($this->cr, CURLOPT_CUSTOMREQUEST, $method);
        $data = curl_exec($this->cr);
        $status = curl_getinfo($this->cr, CURLINFO_HTTP_CODE);
        if (curl_errno($this->cr)) {
            $msg = curl_error($this->cr);
            return [
                'status' => 0,
                'message' => $msg
            ];
        } else {
            return [
                'status' => 1,
                'data' => json_decode($data)
            ];
        }
    }
}

class ToGo
{

    // test odoo
    public function testOddoInvoice()
    {
        $odooApi = new OdooApi();

        $params = json_encode(array(
            "jsonrpc" => "2.0",
            "params" => array("db" => "ToGo", "login" => "admin", "password" => "admin")
        ));
        $data = $odooApi->callOdooUrl("/web/session/authenticate", "POST", $params);

        /* $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("customer_id" => $idCustomere)
                )); */

        // $data = $odooApi->callOdooUrl("/partner/entries", "POST", $params);
        // print_r($data);

        /*$params = json_encode(array("jsonrpc"=>"2.0",
                "params"=> array("partner_id"=>105)));
                $data = $odooApi->callOdooUrl("/my/invoice", "GET", $params);
                // print_r($data);*/

        $params2 = json_encode(array(
            "jsonrpc" => "2.0",
            "params" => array("partner_id" => 97, "price_unit" => 1, "tax" => 16)
        ));

        $data2 = $odooApi->callOdooUrl("/create/invoice", "POST", $params2);

        echo json_encode(array("server_response" => $data2));
    }


    /* edited (financial transactions added) */
    public function getFinancialTransactions($idCustomere, $TokenDevice)
    {

        if ($this->CheckToken($idCustomere, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($idCustomere) == false) {

                $odooApi = new OdooApi();

                /* $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("db" => "ToGo", "login" => "admin", "password" => "admin")
                ));
                $data = $odooApi->callOdooUrl("/web/session/authenticate", "POST", $params); */

                $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("customer_id" => $idCustomere)
                ));

                $data = $odooApi->callOdooUrl("/partner/entries", "POST", $params);
                // print_r($data);

                echo json_encode(array("server_response" => $data));

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105)));
        $data = $odooApi->callOdooUrl("/my/invoice", "GET", $params);
        // print_r($data);*/

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105, "price_unit"=>1, "tax"=>16)));
        $data = $odooApi->callOdooUrl("/create/invoice", "POST", $params);
        // print_r($data);*/
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getFinancialTransactionsTest($idCustomere)
    {


                $odooApi = new OdooApi();

                /* $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("db" => "ToGo", "login" => "admin", "password" => "admin")
                ));
                $data = $odooApi->callOdooUrl("/web/session/authenticate", "POST", $params); */

                $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("customer_id" => $idCustomere)
                ));

                $data = $odooApi->callOdooUrl("/partner/entries", "POST", $params);
                // print_r($data);

                echo json_encode(array("server_response" => $data));

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105)));
        $data = $odooApi->callOdooUrl("/my/invoice", "GET", $params);
        // print_r($data);*/

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105, "price_unit"=>1, "tax"=>16)));
        $data = $odooApi->callOdooUrl("/create/invoice", "POST", $params);
        // print_r($data);*/
    }

    /* all customers will be able to request money withdrawals using this API */
    public function requestWithdraw($customerId, $tokenDevice, $amount)
    {
        if ($this->CheckToken($customerId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {

                // 1. check balance ------------------------------------------------------------------------

                $varr = $this->BalanceIsEnough($customerId, $amount);
                if ($varr == 1) {
                    echo "sufficient";
                } else {
                    echo "insufficient error";
                    return;
                }

                // get customer name by id (id client -> client business name, if transporter -> transporter account name)
                $query_getCustomerType = "select IsClient from togo.customer where id = '$customerId'";
                $result_getCustomerType = $this->dataBase->query($query_getCustomerType);
                $row_getCustomerType = $this->dataBase->fetchArray($result_getCustomerType);
                $customerType = $row_getCustomerType['IsClient'];

                $customer_name = "unkown";

                if ($customerType == 1){
                    // get client business name
                    $query_get_client_business_name = "SELECT bus.BusinessName as customerName from togo.clientbusinesstable as bus where bus.CustomerId = '$customerId'";
                    $result_client_business_name = $this->dataBase->query($query_get_client_business_name);
                    $row_client_business_name = $this->dataBase->fetchArray($result_client_business_name);
                    $customer_name = $row_client_business_name['customerName'];
                } else {
                    // get transporter account name
                    $query_get_trnasporter_account_name = "SELECT tr.AccountName as customerName from togo.transportertable as tr where tr.CustomerId = '$customerId'";
                    $result_trnasporter_account_name = $this->dataBase->query($query_get_trnasporter_account_name);
                    $row_trnasporter_account_name = $this->dataBase->fetchArray($result_trnasporter_account_name);
                    $customer_name = $row_trnasporter_account_name['customerName'];
                }

                $msg = urlencode($customer_name . "requested to withdraw " . $amount . " NIS");

                /* $amobile = "+972592325932";
                $amobile . "Mobile";
                $Code_Verify = $Code_Verify;
                $ch = curl_init();
                // $Code_Verify1 = "Withdrawal%20Request";
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch); */

                // send message to Husam
                $amobile = "+972599040022";
                $amobile . "Mobile";
                $Code_Verify = $Code_Verify;
                $ch = curl_init();
                // $Code_Verify1 = "Withdrawal%20Request";
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);
    
                /* if ($reslt_Send != "Message Sent Successfully!") {
                    echo "message error!";
                } else {
                    // echo "code sent";
                } */

                // send message to Maan
                $amobile = "+972599658113";
                $amobile . "Mobile";
                $Code_Verify = $Code_Verify;
                $ch = curl_init();
                // $Code_Verify1 = "Withdrawal%20Request";
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);
    
                /* if ($reslt_Send != "Message Sent Successfully!") {
                    echo "message error!";
                } else {
                    // echo "code sent";
                } */

                // send message to Murad
                $amobile = "+972599201899";
                $amobile . "Mobile";
                $Code_Verify = $Code_Verify;
                $ch = curl_init();
                // $Code_Verify1 = "Withdrawal%20Request";
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);
    
                /* if ($reslt_Send != "Message Sent Successfully!") {
                    echo "message error!";
                } else {
                    // echo "code sent";
                } */

                // 2. send request to admin & move to bank temp account ------------------------------------

                // get customer type (client/transporter)

                $query_getCustomerType = "select IsTransporter, IsClient from togo.customer where id = '$customerId'";
                $result_getCustomerType = $this->dataBase->query($query_getCustomerType);

                if ($result_getCustomerType) {
                    $row_getCustomerType = $this->dataBase->fetchArray($result_getCustomerType);
                } else {
                    echo "user not found error";
                    return;
                }

                // get customer name

                $customerName = "";

                if ($row_getCustomerType['IsTransporter'] == 1) {
                    $query_getTransporterAccountName = "select AccountName from togo.transportertable where CustomerId = '$customerId'";
                    $result_getTransporterAccountName = $this->dataBase->query($query_getTransporterAccountName);
                    $row_getTransporterAccountName = $this->dataBase->fetchArray($result_getTransporterAccountName);
                    $customerName = $row_getTransporterAccountName['AccountName'];
                } else if ($row_getCustomerType['IsClient'] == 1) {
                    $query_getClientBusinessName = "select BusinessName from togo.clientbusinesstable where CustomerId = '$customerId'";
                    $result_getClientBusinessName = $this->dataBase->query($query_getClientBusinessName);
                    $row_getClientBusinessName = $this->dataBase->fetchArray($result_getClientBusinessName);
                    $customerName = $row_getClientBusinessName['BusinessName'];
                } else {
                    echo "customer type undefined error";
                    return;
                }

                $res = $this->move_to_transfer_out_temp($customerId, $amount);

                if ($res == 1) {
                    echo "moved to transfer out temp sucessfully";

                    $query_addRequest = "insert into togo.withdrawrequeststb (customerId, customerName, amount) values ('$customerId', '$customerName', '$amount')";
                    $result_addRequest = $this->dataBase->query($query_addRequest);

                    if ($result_addRequest) {
                        echo " - request inserted sucessfully";

                        // send notification to the admins

                        $webTokens = array();

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $customerName  = $this->getCustomerGeneralName($customerId);

                        $data = array(
                            'customerName' => $customerName,
                            'intent' => 'withdrawRequest'
                        );

                        $title = "Withdrawal Requested";
                        $body = $customerName . " requested a withdrawal of " . $amount . " NIS";

                        $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
                    } else {
                        echo " - request insert error";
                    }
                } else {
                    echo " error moving to transfer out temp";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getCustomerWithdrawRequests($idCustomer, $TokenDevice)
    {

        if ($this->CheckToken($idCustomer, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($idCustomer) == false) {

                $query_getRequests = "select * from togo.withdrawrequeststb where customerId = '$idCustomer' order by time_requested desc";
                $result_getRequests = $this->dataBase->query($query_getRequests);

                if ($result_getRequests) {

                    $requests = array();

                    while ($row_getRequests = $this->dataBase->fetchArray($result_getRequests)) {
                        array_push($requests, array("id" => $row_getRequests['id'], "requestTime" => $row_getRequests['time_requested'], "amount" => $row_getRequests['amount'], "isCanceled" => $row_getRequests['isCanceled'], "isApproved" => $row_getRequests['isApproved'], "isRejected" => $row_getRequests['isRejected']));
                    }

                    echo json_encode(array("server_response" => $requests));
                } else {
                    echo "error fetching withdrawal requests";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (financial transactions for a specific order added) */
    public function transactionsByOrder($idCustomere, $idOrder, $TokenDevice)
    {
        if ($this->CheckToken($idCustomere, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($idCustomere) == false) {

                $customerId = intval($idCustomere);
                $orderId = intval($idOrder);

                $odooApi = new OdooApi();

                $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("db" => "ToGo", "login" => "admin", "password" => "admin")
                ));
                $data = $odooApi->callOdooUrl("/web/session/authenticate", "POST", $params);

                $params = json_encode(array("jsonrpc" => "2.0", "params" => array("customer_id" => $customerId, "order_id" => $orderId)));
                $data = $odooApi->callOdooUrl("/partner_order/entries", "POST", $params);
                // print_r($data);

                echo json_encode(array("server_response" => $data));

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105)));
        $data = $odooApi->callOdooUrl("/my/invoice", "GET", $params);
        // print_r($data);*/

                /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105, "price_unit"=>1, "tax"=>16)));
        $data = $odooApi->callOdooUrl("/create/invoice", "POST", $params);
        // print_r($data);*/
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (invoices added) */
    public function invoicesTest($idCustomere)
    {

        $odooApi = new OdooApi();

        /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("db"=>"ToGo", "login"=>"admin","password"=>"admin")));
        $data = $odooApi->callOdooUrl("/web/session/authenticate", "POST", $params);*/

        /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>$idCustomere)));
        $data = $odooApi->callOdooUrl("/partner/entries", "GET", $params);
        // print_r($data);*/

        $params = json_encode(array(
            "jsonrpc" => "2.0",
            "params" => array("partner_id" => $idCustomere)
        ));
        $data = $odooApi->callOdooUrl("/my/invoice", "GET", $params);
        // print_r($data);

        echo json_encode(array("server_response" => $data));

        /*$params = json_encode(array("jsonrpc"=>"2.0",
        "params"=> array("partner_id"=>105, "price_unit"=>1, "tax"=>16)));
        $data = $odooApi->callOdooUrl("/create/invoice", "POST", $params);
        // print_r($data);*/
    }

    public $params = array();
    public $options = array("Scrollable" => null);

    private $dataBase;
    public $response = array();

    private $url;
    private $db;
    private $username;
    private $password;
    private $common;

    private $uid;
    private $models;


    public function Configration()
    {
    }

    /****** Odooo Functions ***********/
    public function OdooDb()
    {
        try {
            require_once('ripcord-master/ripcord.php');
            $this->url = "http://46.253.95.70";
            $url = "http://46.253.95.70";
            $this->db = "ToGo";
            $this->username = "admin";
            $this->password = "admin";
            $this->common = ripcord::client("$url/xmlrpc/2/common");
            $this->uid = $this->common->authenticate($this->db, $this->username, $this->password, array());
            $this->models = ripcord::client("$url/xmlrpc/2/object");
        } catch (Exception $e) {
            echo 'Caught exception: ',  $e->getMessage(), "\n";
        }
    }

    // get temp balance
    public function getTempBalance()
    {
        $this->OdooDb();
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_temp_balance', array('self'));
        return $result;
        // echo json_encode($result);
    }

    public function getUserTempBalance($id)
    {
        $this->OdooDb();
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_user_temp_balance', array('self', $id));
        return $result;
        // echo json_encode($result);
    }

    //diala odoo code
    // Customer Get Balanace From Youre Account {Transporter or client}
    public function getBalance($idCustomere)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_balance', array('self', $id));
        return $result;
    }

    public function NISToJOD($amount)
    {
        $this->OdooDb();
        $shekel_amount = $amount;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_JOD_exchange_rate', array('self', $shekel_amount));
        echo $result;
        // return $result;
    }

    public function JODtoILS($amount)
    {
        $this->OdooDb();
        $dinar_amount = $amount;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'JOD_to_ILS', array('self', $dinar_amount));
        // echo $result;
        return $result;
    }

    public function getBalanceTest($idCustomere)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_balance', array('self', $id));
        echo $result;
    }

    public function rechargeBalance($idCustomere, $amount)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'recharge_customer_balance', array('self', $id, 'cash', $amount));

        return $result;
    }

    public function editCustomerInfo($idCustomere, $identityno, $email, $fname, $lname)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $editresult = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'edit_partner_data', array('self', $id, array('identity_no' => $identityno, 'email' => $email, 'name' => $fname . " " . $lname)));
        return $editresult;
    }

    public function delivToTrans($idCustomere, $amount)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $am = $amount;
        $editresult = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'deliver_to_transporter', array('self', $id, $am));
    }

    public function BalanceIsEnough($idCustomere, $amount)
    {
        $this->OdooDb();
        $id = $idCustomere;
        $ama = $amount;
        $resultt = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'can_request', array('self', $id, $ama));

        return $resultt;
    }

    public function confirm_request($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'confirm_request', array('self', $id, $am));
        print_r($conreq);
    }

    public function move_to_escrow($customerid, $orderId, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'move_to_escrow', array('self', $id, $orderId, $am));
        // print_r($conreq);
    }

    // added, when request withdraw and move to bank temp account
    public function move_to_transfer_out_temp($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'move_to_transfer_out_temp', array('self', $id, $am));
        return $conreq;
    }

    // added, when reject request withdraw and move from bank temp account to client
    public function reverse_move_to_transfer_out_temp($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'reverse_move_to_transfer_out_temp', array('self', $id, $am));
        return $conreq;
    }

    // added, when confirm withdraw and move to bank
    public function move_to_transfer_out_final($customerid, $amount, $ref)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'move_to_transfer_out_final', array('self', $id, $am, $ref));
        return $conreq;
    }

    ////////////////////////////////////////////////

    public function lendToPartner($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'move_from_temp_to_partner', array('self', $id, $am));
        return $conreq;
    }

    public function collectFromPartner($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'move_from_partner_to_temp', array('self', $id, $am));
        return $conreq;
    }

    public function getPartenrTempTransactions($customerid)
    {
        $this->OdooDb();
        $id = $customerid;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_user_temp_transactions', array('self', $id));
        return $conreq;
    }

    ////////////////////////////////////////////////

    public function release_escrow($TransporterId, $orderId, $amount, $discount_ratio)
    {
        $this->OdooDb();
        $id = $TransporterId;
        $am = $amount;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'release_escrow', array('self', $id, $discount_ratio, $orderId, $am));
        // print_r($conreq);
    }

    public function release_escrow_deal_noneCOD($clientId, $orderId, $delivery_cost)
    {
        $this->OdooDb();
        $id = $clientId;
        $am = $delivery_cost;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'release_escrow_deal_noneCOD', array('self', $id, $orderId, $am));
        // print_r($conreq);
    }

    public function release_escrow_deal_COD($TransporterId, $orderId, $amount, $discount_ratio, $delivery_cost)
    {
        $this->OdooDb();
        $id = $TransporterId;
        $am = $amount;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'release_escrow_deal_COD', array('self', $id, $discount_ratio, $orderId, $am, $delivery_cost));
        // print_r($conreq);
    }

    public function release_escrow_deal_delivery_price($merchant_id, $orderId, $costDelivery)
    {
        $this->OdooDb();
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'release_escrow_deal_delivery_price', array('self', $merchant_id, $orderId, $costDelivery));
        // print_r($conreq);
    }

    public function create_in_invoice($transporter_id, $order_id, $foreign_order_barcode, $amount)
    {
        $this->OdooDb();
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'create_in_invoice', array('self', $transporter_id, $order_id, $foreign_order_barcode, $amount));
        // print_r($conreq);
        echo json_encode($result);
    }

    public function exchange_cod_owner($fromCustomer, $toCustomer, $orderId, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $am = $amount;
        $conreq = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'exchange_cod_owner', array('self', $fromCustomer, $toCustomer, $orderId, $am));
        print_r($conreq);
    }


    public function delivery_request($TransporterId, $amount, $discount_ratio)
    {
        $this->OdooDb();
        $id = $TransporterId;
        $am = $amount;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'delivery_request', array('self', $id, $discount_ratio, $am));
        return $result;
    }

    //delete customer
    public function deleteCustomer($customerid, $amount)
    {
        $this->OdooDb();
        $id = $customerid;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'delete_partner', array('self', $id));
    }

    //cancel request odoo method
    public function deleteOrderRequest($idCustomere, $amount)
    {

        $this->OdooDb();
        $id = $idCustomere;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'cancel_request', array('self', $id, $amount));
        print_r($result);
        return $result;
    }

    public function cancellationfee($idCustomere)
    {

        $this->OdooDb();
        $id = $idCustomere;
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'cancellation_fees_discount', array('self', $id));
        print_r($result);
        return $result;
    }

    public function cancellationValue($regionId)
    {

        $this->OdooDb();
        $result = $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'get_cancellation_fees_amount', array('self'));
        $value = $result;
        echo json_encode(array("server_response" => $value));
    }
    //end of diala odoo code
    // Customer Get Odoo Id {Transporter or Client}
    public function getOdooId($idCustomere)
    {
        $query = "Select OdooId from togo.customer Where id='$idCustomere'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);

        return $row['OdooId'];
    }


    public function getPhoneCustomer($idCustomere)
    {
        $query = "Select PhoneNumber from togo.customer Where id='$idCustomere'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);

        return $row['PhoneNumber'];
    }


    public function GetClientBidEnginOdoo($OrderId)
    {
        $OrderId = $OrderId;
        $query = "Select CustomerId from togo.orderBidEngin where id='$OrderId'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);


        return $row['CustomerId'];
    }


    public function connectDatabase()
    {
        require_once('database.php');
        $this->dataBase = $database;
    }


    public function setDatabase($dataBase)
    {
        $this->dataBase = $dataBase;
    }

    public function getCostFromDB($orderid)
    {

        $orderIdDb = $this->dataBase->escape($orderid);
        $query = "select CostDelivery , IdTransporter from togo.deliveryAcceptOrderTable where IdOrder='$orderIdDb'";
        $result = $this->dataBase->query($query);
        $row_count = $this->dataBase->numRows($result);
        $r = $this->dataBase->fetchArray($result);
        echo "hi";
        if ($row_count > 0) {
            return array('CostDelivery' => $r['CostDelivery'], 'idtransporter' => $r['IdTransporter']);
        } else {
            return false;
        }
    }

    public function getClientId($orderid)
    {
        echo "here";

        $orderIdDb = $this->dataBase->escape($orderid);
        $query = "Select CustomerId , deliveryWay ,CostLoad From togo.OrderBidEngin Where id='$orderIdDb'";
        $result = $this->dataBase->query($query);
        $r = $this->dataBase->fetchArray($result);

        return array('customerid' => $r['CustomerId'], 'delivaryw' => $r['deliveryWay'], 'CostLoad' => $r['CostLoad']);
    }

    public function send_SMS($numbers, $msg)
    {
        $msg = urlencode($msg);

        $ch = curl_init();

        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$numbers&msg=$msg");
        curl_setopt($ch, CURLOPT_HEADER, 0);

        ob_start();
        $reslt_Send = curl_exec($ch);
        ob_end_clean();

        curl_close($ch);

        if ($reslt_Send != "Message Sent Successfully!") {
            return "message not sent";
        }

        return "message sent";
    }


    /***    Checkd Flags ***/

    public function CheckToken($CustomerId, $Token)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $Token = $this->dataBase->escape($Token);

        $query = "Select * from togo.customer Where TokenDevice='$Token' AND id='$CustomerId'";
        $result = $this->dataBase->query($query);
        $row_count = $this->dataBase->numRows($result);
        if ($row_count > 0) {
            return true;
        } else {
            return false;
        }
    }

    /* edited (add AdminCheckToken) */
    public function AdminCheckToken($id, $token)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        $query = "Select * from togo.admin Where Token='$token' AND id='$id' AND deleted=0";
        $result = $this->dataBase->query($query);
        $row_count = $this->dataBase->numRows($result);
        if ($row_count > 0) {
            return true;
        } else {
            return false;
        }
    }

    public function CheckSbytaniToken($CustomerId, $Token)
    {
        if ($Token == "1213141516") {
            return true;
        } else {
            return false;
        }
    }

    public function CheckBlockedCustomer($CustomerId)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $query = "Select IsBlocked, deleted From togo.customer Where id='$CustomerId'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);
        if ($row['IsBlocked'] == 1 || $row['deleted']) {
            return true;
        } else {
            return false;
        }
    }

    public function CheckAcceptedTransporter($CustomerId)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $query = "Select IsAccepted,IsTransporter From togo.customer Where id='$CustomerId'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);

        if ($row['IsTransporter'] == 1) {
            if ($row['IsAccepted'] == 1) {
                return true;
            } else {
                return true; // ????!!!!!
            }
        } else {
            return true;
        }
    }

    public function CheckExistClient($clientMobileNumber)
    {
        $mobileNumber = $this->dataBase->escape($clientMobileNumber);
        $query = "Select IsClient From togo.customer where PhoneNumber = '$clientMobileNumber'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);

        if ($row['IsClient'] == 1) {
            return true;
        } else {
            return false;
        }
    }

    public function GetCountRows($query)
    {
        $result = $this->dataBase->query($query);
        $row_count_phone = $this->dataBase->numRows($result);

        return $row_count_phone;
    }

    public function GetTokenCustomer($IdCustomer)
    {
        $Query_Get_Token = "Select Token From togo.customer Where id='$IdCustomer'";
        $result = $this->dataBase->query($Query_Get_Token);
        if ($result == true) {
            $row = $this->dataBase->fetchArray($result);
            return $row['Token'];
        }
    }

    public function GetDeliveryCost($OrderId, $TransporterId)
    {
        $Query_Get_Token = "Select CostDelivery from togo.deliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
        $result = $this->dataBase->query($Query_Get_Token);
        if ($result == true) {
            $row = $this->dataBase->fetchArray($result);
            return $row['CostDelivery'];
        } else return 'null';
    }


    public function getDateFormat($dateParameter, $dateFormat)
    {
        $date_Param = strtotime($dateParameter);
        $DateFormat = date($dateFormat, $date_Param);

        return $DateFormat;
    }


    public function CustomerCheckRateTrip($CustomerId, $OrderId)
    {
        $query = "Select * from togo.tripRating where CustomerId='$CustomerId' AND TripId='$OrderId'";
        $result = $this->dataBase->query($query);
        $countRow = $this->dataBase->numRows($result);
        if ($countRow > 0) {
            return '1';
        } else {
            return '2';
        }
    }

    /***   End Checkd Flags ***/

    //** Start Apis Functions **//
    public function GetAllLanguages()
    {
        $LangArray = array();
        $query_Get_All_Languages = "Select * from togo.language where deleted=0";

        $result_Get_Lang = $this->dataBase->query($query_Get_All_Languages);
        while ($row = $this->dataBase->fetchArray($result_Get_Lang)) {
            array_push($LangArray, array("id" => $row['id'], "Name" => $row['LangName'], "Orintation" => $row['LangOrintation']));
        }
        echo json_encode(array("server_response" => $LangArray));
    }

    public function getdiscountvalue($orderid)
    {
        $queryy = "select Exchange_Rate from togo.region, togo.OrderBidAddress as OrderBidAddress where OrderBidAddress.IdOrderBidEngin=$orderid ";
        $result = $this->dataBase->query($queryy);
        $numRows = $this->dataBase->numRows($result);
        $result = $this->dataBase->fetchArray($result);
        if ($numRows > 0) {
            return $result['Exchange_Rate'];
        } else return 0;
    }

    /* public function getClientShareValue()
    {
        return 1;
    } */
    
    public function getClientShareValue($clientId)
    {
        // get client togo share value

        $query_get_togo_share_value = "SELECT togo_share_value FROM togo.clienttable WHERE CustomerId = '$clientId'";
        $result_get_togo_share_value = $this->dataBase->query($query_get_togo_share_value);
        $row_get_togo_share_value = $this->dataBase->fetchArray($result_get_togo_share_value);
        $togo_share_value = $row_get_togo_share_value['togo_share_value'];

        return floatval($togo_share_value);
    }

    public function GetAllRegions($IdLang)
    {
        $IdLang = $this->dataBase->escape($IdLang);
        $RegionArray = array();
        $query_Get_All_Region = "Select * from togo.RegName Where  deleted=0 AND LangId='$IdLang'";
        $result_Get_Reg = $this->dataBase->query($query_Get_All_Region);
        while ($row = $this->dataBase->fetchArray($result_Get_Reg)) {
            array_push($RegionArray, array("RegId" => $row['RegId'], "Name" => $row['RegName']));
        }
        echo json_encode(array("server_response" => $RegionArray));
    }

    public function GetRegionsAndIntroductions($IdLang)
    {
        $IdLang = $this->dataBase->escape($IdLang);
        $regionsAndIntroductions = array();
        $query = "Select reg_name.regName, post_region.postValue, reg_name.regId from togo.RegName as reg_name inner join togo.postregion as post_region on reg_name.RegId = post_region.RegionId and reg_name.deleted=0 AND reg_name.LangId='$IdLang'";
        $result = $this->dataBase->query($query);
        while ($row = $this->dataBase->fetchArray($result)) {
            array_push($regionsAndIntroductions, array("regId" => $row['regId'], "postValue" => $row['postValue'], "regName" => $row['regName']));
        }
        echo json_encode(array("server_response" => $regionsAndIntroductions));
    }


    public function GetPostRegions($IdReg)
    {
        $IdReg = $this->dataBase->escape($IdReg);
        $PostRegionArray = array();
        $query_Get_All_Post_Region = "Select * from togo.PostRegion Where RegionId='$IdReg' AND deleted=0";
        $result_Get_Post_Reg = $this->dataBase->query($query_Get_All_Post_Region);
        while ($row = $this->dataBase->fetchArray($result_Get_Post_Reg)) {
            array_push($PostRegionArray, array("id" => $row['id'], "PostValue" => $row['PostValue']));
        }
        echo json_encode(array("server_response" => $PostRegionArray));
    }

    public function Log_Order($OrderId, $TransporterId, $TeamMemberId, $ClientId, $Description)
    {
        $query = "INSERT INTO togo.order_logs_track (OrderId,TransporterId,TeamMemberId,ClientId,Description) VALUES ('$OrderId','$TransporterId','$TeamMemberId','$ClientId','$Description');";
        $result = $this->dataBase->query($query);
    }

    public function Login($PhoneNumber, $TypeCustomer)
    {

        $data = "Login API entered ------- " . "PhoneNumber: " . $PhoneNumber . " - TypeCustomer: " . $TypeCustomer;
        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $this->OdooDb();
        $PhoneNumber = $this->dataBase->escape($PhoneNumber);
        $TypeCustomer = $this->dataBase->escape($TypeCustomer);

        if ($TypeCustomer == "Client") {
            $typeCustomer = 1;
        } else if ($TypeCustomer == "Transporter") {
            $typeCustomer = 2;
        } else {
            $typeCustomer = 0;
        }

        $data = "typeCustomer: " . $typeCustomer;
        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $phoneNumberQuery = Helpers::getPhoneNumerQuery($PhoneNumber);

        $data = "phoneNumberQuery: " . $phoneNumberQuery;
        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $Check_phone = "Select * from togo.customer Where PhoneNumber = '$PhoneNumber' AND IsVerified=1";

        $result_check_Phone = $this->dataBase->query($Check_phone);
        $row_count_phone = $this->dataBase->numRows($result_check_Phone);

        if ($row_count_phone > 0) {

            $data = "customer found";
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            if ($typeCustomer == 1) {
                $query_Check_Customer = "Select * from togo.customer Where IsClient=1";
            } else  if ($typeCustomer == 2) {
                $query_Check_Customer = "Select * from togo.customer Where IsTransporter=1";
            } else {
                echo "TypeCustomer_Error";
                return;
            }

            if ($typeCustomer != 1 && $typeCustomer != 2) {
            } else {
                $result_check_CustomerType = $this->dataBase->query($query_Check_Customer);
                $row_count_Customer = $this->dataBase->numRows($result_check_CustomerType);

                if ($row_count_Customer > 0) {

                    $data = "type customer found";
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    $Code_Verify = mt_rand(1000, 9999);
                    //$Code_Verify=5555;

                    /* echo $PhoneNumber;
                    return; */

                    if ($PhoneNumber == "+972598062708" || $PhoneNumber == "+972598450491") {
                        $Code_Verify = 4856;
                    } else if ($PhoneNumber == "+972592325932" || $PhoneNumber == "+972567471692" || $PhoneNumber == "0566330280") {
                        $Code_Verify = 8888;
                    } else if ($PhoneNumber == "+972528614919") {
                        $Code_Verify = 4444;
                    }

                    $data = "code: " . $Code_Verify;
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    $query_Update_Code = "Update togo.customer Set VerifiedKey='$Code_Verify' Where PhoneNumber $phoneNumberQuery";
                    $result_Update_Phone = $this->dataBase->query($query_Update_Code);

                    if ($result_Update_Phone == true) {
                        //Send SMS
                        //echo "Updated";

                        $data = "customer updated";
                        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                        if ($PhoneNumber == "+972528614919" || $PhoneNumber == "+972598062708" || $PhoneNumber == "+972598450491" || $PhoneNumber == "+972592325932" || $PhoneNumber == "+972567471692" || $PhoneNumber == "0566330280") {
                            $reslt_Send = "Message Sent Successfully!";
                            echo "Message Sent Successfully!";
                        } else {
                            $amobile = $PhoneNumber;
                            $amobile . "Mobile";
                            $Code_Verify = $Code_Verify;
                            // $Code_Verify=5555;
                            $ch = curl_init();
                            $Code_Verify1 = "ToGo%20Code%20Is:%20" . $Code_Verify;
    
                            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                            curl_setopt($ch, CURLOPT_HEADER, 0);
                            $reslt_Send = curl_exec($ch);
    
                            curl_close($ch);
                        }

                        if ($reslt_Send != "Message Sent Successfully!") {
                            echo "NotUpdated";
                            $data = "message error";
                            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                        } else {

                            /* edited, add verification code record */
                            $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                            values ('$Code_Verify', '$amobile', 'Login')";
                            $result_recordCode = $this->dataBase->query($query_recordCode);

                            $data = "message sent (done)";
                            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                            echo "Updated";
                        }
                    } else {
                        $data = "customer not updated";
                        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                        echo "NotUpdated";
                    }
                } else {
                    $data = "type customer error";
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    echo "TypeCustomerError";
                }
            }
        } else {

            $data = "customer not found";
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            $query_delete_exists_Number = "delete from togo.customer where PhoneNumber='$PhoneNumber'";
            $query_Get_Odoo_Id = "Select OdooId From togo.customer Where PhoneNumber='$PhoneNumber'";
            $result_Get_Id = $this->dataBase->query($query_Get_Odoo_Id);

            $row_Get_Id = $this->dataBase->fetchArray($result_Get_Id);
            $OdooId = $row_Get_Id['OdooId'];

            $data = "OdooId: " . $OdooId;
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            $this->models->execute_kw(
                $this->db,
                $this->uid,
                $this->password,
                'res.partner',
                'unlink',
                array((int)$OdooId)
            );

            $result_delete_customer = $this->dataBase->query($query_delete_exists_Number);

            $Code_Verify = mt_rand(1000, 9999);
            ///$Code_Verify=5555;
            $data = "Code_Verify: " . $Code_Verify;
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            if ($typeCustomer == 1) {
                $query_Add_Phone = "Insert into togo.customer (PhoneNumber,VerifiedKey,IsAccepted,IsClient) Values (N'$PhoneNumber','$Code_Verify',0,1)";
            } else if ($typeCustomer == 2) {
                $query_Add_Phone = "Insert into togo.customer (PhoneNumber,VerifiedKey,IsAccepted,IsTransporter) Values (N'$PhoneNumber','$Code_Verify',0,1)";
            } else {
                $data = "customer type error";
                file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                echo "Error_Type";
            }

            if ($typeCustomer != 1 && $typeCustomer != 2) {
            } else {

                // add new user !!!

                $result_Add_Phone = $this->dataBase->query($query_Add_Phone);
                if ($result_Add_Phone == true) {
                    // Send By SMS

                    $data = "new customer inserted";
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    $query_Get_Last_Id = "SELECT id FROM togo.customer WHERE createdAt=(SELECT MAX(createdAt)FROM togo.Customer)";
                    $result_Last_Id = $this->dataBase->query($query_Get_Last_Id);
                    $row_Last_Id = $this->dataBase->fetchArray($result_Last_Id);
                    $CustomerId = $row_Last_Id['id'];

                    $data = "CustomerId: " . $CustomerId;
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    //diala area
                    $id = $this->models->execute_kw(
                        $this->db,
                        $this->uid,
                        $this->password,
                        'res.partner',
                        'create_partner',
                        array('self', $CustomerId, $PhoneNumber, $typeCustomer)
                    );

                    $data = "new odoo partner added, odoo id: " . $id;
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    // $id = 194;

                    $query_Update_Customer = "Update togo.customer set OdooId='$id' where id='$CustomerId'";
                    $result_Update = $this->dataBase->query($query_Update_Customer);

                    $amobile = $PhoneNumber;
                    $amobile . "Mobile";
                    $Code_Verify = $Code_Verify;
                    $ch = curl_init();
                    $Code_Verify1 = "ToGo%20Code%20Is:%20" . $Code_Verify;

                    curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                    curl_setopt($ch, CURLOPT_HEADER, 0);
                    $reslt_Send = curl_exec($ch);

                    curl_close($ch);


                    if ($reslt_Send != "Message Sent Successfully!") {
                        echo "NotUpdated";
                        $data = "message error";
                        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                    } else {
                        /* edited, add verification code record */
                        $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                        values ('$Code_Verify', '$amobile', 'Sign Up')";
                        $result_recordCode = $this->dataBase->query($query_recordCode);

                        $data = "message sent (done) - code: " . $Code_Verify;
                        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                        echo "Updated";
                    }
                    echo "inserted";
                } else {
                    $data = "error insert customer";
                    file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                    echo $result_Add_Phone;
                    echo "Not_Insert";
                }
            }
        }
    }

    // edited (send verification code)
    public function sendVerificationCode($PhoneNumber)
    {

        /* echo "PhoneNumber: " . $PhoneNumber;
        return; */
       

        $PhoneNumber = $this->dataBase->escape($PhoneNumber);
        $rplcPhone = $PhoneNumber;

        // $phoneNumberQuery = Helpers::getPhoneNumerQuery($PhoneNumber);

        // Prefix to check
        $prefix = "+972";

        // Use substr to get the first strlen($prefix) characters from the input string
        $startsWithPrefix = substr($input, 0, strlen($prefix)) === $prefix;

        // if (!$startsWithPrefix) {
            $PhoneNumber = substr_replace($PhoneNumber, '+972', 0, 1);
        // }

        $searcMobile = substr($rplcPhone, 1);

        // echo $PhoneNumber;

        $conn1 = new mysqli("192.168.14.35:3306", "root", "adm9n@Z0ne", "togo") or die("no connect");

        $query = "Select * from togo.customer where PhoneNumber like '%" . $searcMobile . "%'"; //  AND IsVerified=1

        $result = mysqli_query($conn1, $query);

        mysqli_set_charset($conn1, "utf8");

        if (!$conn1) {
            echo "Connection could not be established.\n";
            //die( print_r( sqlsrv_errors(), true));
        } else {
            echo "connected!!!";
        }

        // $result = $this->dataBase->query($query);
        $count_Num = mysqli_num_rows($result);
        if ($count_Num > 0) {
            $row = mysqli_fetch_assoc($result);

            $Code_Verify = mt_rand(1000, 9999);

            if ($PhoneNumber == "+972598062708" || $PhoneNumber == "+972598450491") {
                $Code_Verify = 4856;
            } else if ($PhoneNumber == "+972592325932" || $PhoneNumber == "+972567471692" || $PhoneNumber == "+972566330280") {
                $Code_Verify = 8888;
            } else if ($PhoneNumber == "+972528614919") {
                $Code_Verify = 4444;
            }

            $query_Update_Code = "Update togo.customer Set VerifiedKey='$Code_Verify' Where PhoneNumber like '%" . $searcMobile . "%'";

            $result_Update_Phone = mysqli_query($conn1, $query_Update_Code);
            if ($result_Update_Phone == true) {
                //Send SMS
                //echo "Updated";
                if ($PhoneNumber == "+972528614919" || $PhoneNumber == "+972598062708" || $PhoneNumber == "+972598450491" || $PhoneNumber == "+972592325932" || $PhoneNumber == "+972567471692" || $PhoneNumber == "+972566330280") {
                    $reslt_Send = "Message Sent Successfully!";
                    echo "Message Sent Successfully!";
                } else {
                    $amobile = $PhoneNumber;
                    $amobile . "Mobile";
                    $Code_Verify = $Code_Verify;
                    $ch = curl_init();
                    $Code_Verify1 = "ToGo%20Code%20Is:%20" . $Code_Verify;
    
                    curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                    curl_setopt($ch, CURLOPT_HEADER, 0);
                    $reslt_Send = curl_exec($ch);
    
                    curl_close($ch);
                }

                echo "code sent-" . $row['id'] . " --> " . $Code_Verify;

                if ($reslt_Send != "Message Sent Successfully!") {
                    echo "NotUpdatedSendCodeSMS";
                } else {
                    // edited, add verification code record
                    $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                    values ('$Code_Verify', '$amobile', 'Login')";
                    $result_recordCode = $this->dataBase->query($query_recordCode);

                    // echo "code sent: " . $Code_Verify . "-" . $row['id'];
                    echo "code sent-" . $row['id'] . " ---> " . $Code_Verify;
                }
            } else {
                echo "NotUpdatedPhoneNumber";
            }
        } else
            echo "MobileNotFound";
    }

    // edited (send verification code for new users)
    public function sendVerificationCodeForNewUser($PhoneNumber)
    {
        $PhoneNumber = $this->dataBase->escape($PhoneNumber);

        // $phoneNumberQuery = Helpers::getPhoneNumerQuery($PhoneNumber);

        $PhoneNumber = substr_replace($PhoneNumber, '+972', 0, 1);

        $query = "Select * from togo.customer where PhoneNumber='$PhoneNumber'";
        $result = $this->dataBase->query($query);
        $count_Num = $this->dataBase->numRows($result);

        if ($count_Num > 0) {
            echo "User with this phone number already exists!";
        } else {
            // echo $PhoneNumber;

            $Code_Verify = mt_rand(1000, 9999);
            // $Code_Verify = 4444;
            //Send SMS
            //echo "Updated";

            $amobile = $PhoneNumber;
            $amobile . "Mobile";
            $Code_Verify = $Code_Verify;
            $ch = curl_init();
            $Code_Verify1 = "ToGo%20Code%20Is:%20" . $Code_Verify;

            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
            curl_setopt($ch, CURLOPT_HEADER, 0);
            $reslt_Send = curl_exec($ch);

            curl_close($ch);

            // return;

            if ($reslt_Send != "Message Sent Successfully!") {
                echo "message error!";
            } else {
                /* edited, add verification code record */
                $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                values ('$Code_Verify', '$amobile', 'Sign Up')";
                $result_recordCode = $this->dataBase->query($query_recordCode);

                // echo "sent code: " . $Code_Verify;
                echo "sent code";
            }
        }
    }

    // edited (login using phone number)

    public function loginWithNumber($customerId, $code)
    {
        $code = $this->dataBase->escape($code);
        $customerId = $this->dataBase->escape($customerId);

        $query_get_customer = "select * from togo.customer where id='$customerId'";
        $result_get_customer = $this->dataBase->query($query_get_customer);

        if ($result_get_customer) {

            $row = $this->dataBase->fetchArray($result_get_customer);

            // TODO
            // this logic needs to be performed when user login/logout from both mobile and web
            // loggedIn field will be changed when login/logout
            /* if ($row['loggedIn']) {
                // get token and info and login
            } else {
                // generate new token and get info and login
            } */

            if ($row['IsClient'] == 1) {
                if ($row['VerifiedKey'] == $code) {

                    /* $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                    $charactersLength = strlen($characters);
                    $randomString = '';
                    for ($i = 0; $i < 10; $i++) {
                        $randomString .= $characters[rand(0, $charactersLength - 1)];
                    }

                    $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

                    $query_update_token = "update customer set IsVerified=1, TokenDevice='$hashed_token' where id='$customerId'";
                    $result_update_token = $this->dataBase->query($query_update_token); */

                    if (/* $result_update_token */true) {
                        // echo "login";

                        $user_type = "client";

                        $query_get_info = "SELECT
                         concat(cl.FirstName, ' ', cl.LastName) as fullName, cu.TokenDevice, client_network.TransporterId as transId
                         from togo.clienttable as cl 
                         inner join togo.customer as cu on cu.id=cl.CustomerId 
                         left outer join togo.client_network on cu.id = client_network.ClientId
                         where CustomerId='$customerId'";
                        $result_get_info = $this->dataBase->query($query_get_info);

                        if ($result_get_info) {
                            $row_info = $this->dataBase->fetchArray($result_get_info);

                            // if current token is null then generate new token (temp, must be removed and replaced with the commented code above)
                            // -----------------------------------------

                            $token = $row_info['TokenDevice'];

                            if ($row_info['TokenDevice'] == null) {
                                $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                                $charactersLength = strlen($characters);
                                $randomString = '';
                                for ($i = 0; $i < 10; $i++) {
                                    $randomString .= $characters[rand(0, $charactersLength - 1)];
                                }

                                $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

                                $query_update_token = "update togo.customer set IsVerified=1, TokenDevice='$hashed_token' where id='$customerId'";
                                $result_update_token = $this->dataBase->query($query_update_token);

                                $token = $hashed_token;
                            }

                            // -----------------------------------------

                            $isFoodClient = 0;
                            if ($row['isFoodClient'] == 1) {
                                $isFoodClient = 1;
                            }

                            echo json_encode(array("fullName" => $row_info['fullName'], "userId" => $customerId, "tokenDevice" => $token, "userType" => $user_type, "transId" => $row_info['transId'], "isFoodClient" => $isFoodClient));
                        } else {
                            echo "Error Fetching Info!";
                        }
                    } else {
                        echo "Token Update Error!";
                    }
                } else {
                    echo "Wrong Code!";
                }
            } else {
                // echo "Not Client Account!";

                if ($row['VerifiedKey'] == $code) {

                    /* $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                    $charactersLength = strlen($characters);
                    $randomString = '';
                    for ($i = 0; $i < 10; $i++) {
                        $randomString .= $characters[rand(0, $charactersLength - 1)];
                    }

                    $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

                    $query_update_token = "update customer set IsVerified=1, TokenDevice='$hashed_token' where id='$customerId'";
                    $result_update_token = $this->dataBase->query($query_update_token); */

                    if (/* $result_update_token */true) {
                        // echo "login";

                        $user_type = "transporter";

                        $query_get_info = "select concat(tr.FirstName, ' ', tr.LastName) as fullName, cu.TokenDevice from togo.transportertable as tr inner join togo.customer as cu on cu.id = tr.CustomerId where CustomerId='$customerId'";
                        $result_get_info = $this->dataBase->query($query_get_info);

                        if ($result_get_info) {
                            $row_info = $this->dataBase->fetchArray($result_get_info);

                            // if current token is null then generate new token (temp, must be removed and replaced with the commented code above)
                            // -----------------------------------------

                            $token = $row_info['TokenDevice'];

                            if ($row_info['TokenDevice'] == null) {
                                $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                                $charactersLength = strlen($characters);
                                $randomString = '';
                                for ($i = 0; $i < 10; $i++) {
                                    $randomString .= $characters[rand(0, $charactersLength - 1)];
                                }

                                $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

                                $query_update_token = "update togo.customer set IsVerified=1, TokenDevice='$hashed_token' where id='$customerId'";
                                $result_update_token = $this->dataBase->query($query_update_token);

                                $token = $hashed_token;
                            }

                            // -----------------------------------------

                            echo json_encode(array("fullName" => $row_info['fullName'], "userId" => $customerId, "tokenDevice" => $token, "userType" => $user_type));
                        } else {
                            echo "Error Fetching Info!";
                        }
                    } else {
                        echo "Token Update Error!";
                    }
                } else {
                    echo "Wrong Code!";
                }
            }
        } else {
            echo "customer not found!";
        }
    }

    public function mobileLogout($userId, $token)
    {
        /* echo "called";
        return; */

        if ($this->CheckToken($userId, $token) == true) {
            if ($this->CheckBlockedCustomer($userId) == false) {

                $query_clearToken = "update togo.customer set TokenDevice = null, Token = null, loggedIn = 0 where id = '$userId'";
                $result_clearToken = $this->dataBase->query($query_clearToken);

                if ($result_clearToken) {
                    echo "cleared";
                } else {
                    echo "errorClearingToken";
                }

                ////////////////

                // $this->recordAction($userId, -1, -1, -1, "title", "logout", 2);

                $query_getTokens = "select Token, WebToken from togo.customer where id = '$userId'";
                $result_getTokens = $this->dataBase->query($query_getTokens);

                if ($result_getTokens) {

                    $row_getTokens = $this->dataBase->fetchArray($result_getTokens);

                    // $tokens = array();
                    $webTokens = array();

                    /* if ($row_getTokens['Token'] != null) {
                        array_push($tokens, $row_getTokens['Token']);
                    } */

                    if ($row_getTokens['WebToken'] != null) {
                        array_push($webTokens, $row_getTokens['WebToken']);
                    }

                    $data = array(
                        'userId' => $userId,
                        'intent' => 'logout'
                    );

                    $title = "Logged Out";
                    $body = "You have been logged out";

                    $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
                } else {
                    echo "errorFetchingTokens";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // edited (register client using phone number)
    public function registerClientByPhoneNumber($infoArr, $imageName, $imageCode, $verifiCode)
    {

        file_put_contents("temp_register_log.log", "\n *************************** \n", FILE_APPEND);
        file_put_contents("temp_register_log.log", var_export($infoArr, true) . "\n ================ \n", FILE_APPEND);
        file_put_contents("temp_register_log.log", var_export($imageName, true) . "\n ================ \n", FILE_APPEND);
        // file_put_contents("temp_register_log.log", var_export($imageCode, true) . "\n ================ \n", FILE_APPEND);
        // return;

        $this->OdooDb();
        $infoArr = $this->dataBase->escape($infoArr);
        $imageName = $this->dataBase->escape($imageName);
        $imageCode = $this->dataBase->escape($imageCode);

        /* echo $infoArr;
        return; */

        // firstName, lastName, phoneNumber, email, idNumber, businessName, businessLocation, businessType
        $infoArr = explode(",", $infoArr);

        /* echo $infoArr[2];
        return; */

        $phoneNumber = strval($infoArr[2]);
        $tempPhoneNumber = substr_replace($phoneNumber, '+972', 0, 1);

        // check code

        $query_getCode = "select code from togo.verifycodestable where mobile = '$tempPhoneNumber' order by id desc limit 1";
        $result_getCode = $this->dataBase->query($query_getCode);
        $row_getCode = $this->dataBase->fetchArray($result_getCode);
        $code = $row_getCode['code'];

        /* echo "phone: " . $tempPhoneNumber . " --- code: " . $code;
        return; */

        if ($code != $verifiCode) {
            echo "error, wrong code!";
            return;
        }

        //echo json_encode($infoArr);
        // echo "image name: " . $imageName . " ------- image code: " . $imageCode . " :::";

        // ---------------------------------------------------------------

        // 0- add new odoo user
        // 1- insert new customer record
        // 2- insert new clienttable record
        // 3- insert new clientbusinesstable record
        // 4- upload image

        $query_Add_Phone = "Insert into togo.customer (PhoneNumber,IsAccepted,IsClient,IsVerified) values ('$tempPhoneNumber',0,1,1)";

        $result_Add_Phone = $this->dataBase->query($query_Add_Phone);
        if ($result_Add_Phone == true) {
            // Send By SMS

            // WHERE createdAt=(SELECT MAX(createdAt)FROM togo.Customer)
            $query_Get_Last_Id = "SELECT id FROM togo.customer WHERE PhoneNumber='$tempPhoneNumber'";
            $result_Last_Id = $this->dataBase->query($query_Get_Last_Id);
            $row_Last_Id = $this->dataBase->fetchArray($result_Last_Id);
            $CustomerId = $row_Last_Id['id'];

            // echo $CustomerId;

            // $phoneNumber = substr_replace($infoArr[2], '', 0, 1);

            $id = $this->models->execute_kw( // zozo
                $this->db,
                $this->uid,
                $this->password,
                'res.partner',
                'create_partner',
                array('self', $CustomerId, $tempPhoneNumber, 1)
            );

            // $id = 223;

            // echo $id;

            $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            $charactersLength = strlen($characters);
            $randomString = '';
            for ($i = 0; $i < 10; $i++) {
                $randomString .= $characters[rand(0, $charactersLength - 1)];
            }

            $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

            $query_Update_Customer = "Update togo.customer set OdooId='$id', TokenDevice='$hashed_token' where id='$CustomerId'";
            $result_Update = $this->dataBase->query($query_Update_Customer);

            if ($result_Update) {

                $this->SetPersonalInfo($CustomerId, $infoArr[0], $infoArr[1], $infoArr[4], $infoArr[3], $hashed_token);

                if (strpos($imageCode, ",")) {
                    $data = explode(',', $imageCode);
                    $imageCode = $data[1];
                }

                $this->SetBusinessInfo($CustomerId, $infoArr[5], $infoArr[6], $infoArr[7], $imageName, $imageCode, $hashed_token);
            } else {
                echo "customer update error!";
            }
        } else {
            echo $result_Add_Phone;
            echo "Not_Insert_error";
        }
    }

    // edited (register transporter using phone number)
    public function registerTransporterByPhoneNumber($infoArr, $imageName, $imageCode, $verifiCode)
    {

        // firstName, lastName, phoneNumber, email, idNumber, businessName, businessLocation, businessType
        $infoArr = explode(",", $infoArr);

        $phoneNumber = $infoArr[2];
        $tempPhoneNumber = substr_replace($infoArr[2], '+972', 0, 1);

        // check code

        $query_getCode = "SELECT code FROM togo.verifycodestable WHERE mobile = '$tempPhoneNumber' ORDER BY id DESC LIMIT 1";
        $result_getCode = $this->dataBase->query($query_getCode);
        $row_getCode = $this->dataBase->fetchArray($result_getCode);
        $code = $row_getCode['code'];

        /* echo "(error) verifiCode: " . $verifiCode . " -- code: " . $code . " -- tempPhoneNumber: " . $tempPhoneNumber;
        return; */

        if ($code != $verifiCode) {
            echo "error, wrong code!";
            return;
        }

        $this->OdooDb();
        $infoArr = $this->dataBase->escape($infoArr);
        $imageName = $this->dataBase->escape($imageName);
        $imageCode = $this->dataBase->escape($imageCode);

        /* echo json_encode($infoArr);
        echo "   ------------------------------------------   ";
        echo "image name: " . $imageName . " ------- image code: " . $imageCode . " :::";
        return; */

        // ---------------------------------------------------------------]

        /* for ($i = 0; $i < count($infoArr); $i++) {
            echo "(" . $i . ") " . $infoArr[$i] . " ---------------------------- ";
        }
        return; */

        // 0- add new odoo user
        // 1- insert new customer record
        // 2- insert new clienttable record
        // 3- insert new clientbusinesstable record
        // 4- upload image

        $query_Add_Phone = "Insert into togo.customer (PhoneNumber,IsAccepted,IsTransporter,IsVerified) values ('$tempPhoneNumber',0,1,1)";

        $result_Add_Phone = $this->dataBase->query($query_Add_Phone);
        if ($result_Add_Phone == true) {
            // Send By SMS

            $query_Get_Last_Id = "SELECT id FROM togo.customer WHERE createdAt=(SELECT MAX(createdAt)FROM togo.Customer)";
            $result_Last_Id = $this->dataBase->query($query_Get_Last_Id);
            $row_Last_Id = $this->dataBase->fetchArray($result_Last_Id);
            $CustomerId = $row_Last_Id['id'];

            $id = $this->models->execute_kw(
                $this->db,
                $this->uid,
                $this->password,
                'res.partner',
                'create_partner',
                array('self', $CustomerId, $tempPhoneNumber, 1)
            );

            $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
            $charactersLength = strlen($characters);
            $randomString = '';
            for ($i = 0; $i < 10; $i++) {
                $randomString .= $characters[rand(0, $charactersLength - 1)];
            }

            $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

            $query_Update_Customer = "Update togo.customer set OdooId='$id', TokenDevice='$hashed_token' where id='$CustomerId'";
            $result_Update = $this->dataBase->query($query_Update_Customer);

            if ($result_Update) {

                /*
                    0- first name
                    1- last name
                    2- phone
                    3- email
                    4- id number
                    5- business name
                */

                $data = explode(',', $imageCode);
                $imageCode = $data[1];

                $this->SetTransporterSignupInfo($CustomerId, $infoArr[0], $infoArr[1], $infoArr[5], $infoArr[4], $infoArr[3], $hashed_token, $imageCode, $imageName);
            } else {
                echo "customer update error!";
            }
        } else {
            echo $result_Add_Phone;
            echo "Not_Insert_error";
        }
    }

    public function SetTransporterSignupInfo($customerId, $firstName, $lastName, $businessName, $ID, $Email, $tokenDevice, $imageCode, $imageName)
    {
        $decoded_string = base64_decode($imageCode);
        $path = '../img/PersonalImg/' . $imageName;
        $ImageName = 'img/PersonalImg/' . $imageName;
        $file = fopen($path, 'wb');

        $is_written = fwrite($file, $decoded_string);
        fclose($file);

        if ($is_written > 0) {
            ///////////////////////////////////////// transportertale

            $editres = $this->editCustomerInfo($customerId, $ID, $Email, $firstName, $lastName);

            $query_addTransporter = "insert into togo.transportertable (IDPlace, IDNumber, LicenceNumber, TypeLicence, Email, AccountName, PersonalImgPath, CustomerId, FirstName, LastName) 
            values (1, '$ID', '00000', 1, '$Email', '$businessName', '$ImageName', '$customerId', '$firstName', '$lastName')";

            $result_addTransporter = $this->dataBase->query($query_addTransporter);

            if (!$result_addTransporter) {
                echo "transportertable insert error";
                return;
            }

            ///////////////////////////////////////// transporter_delivery_types
            $res = 0;
            for ($i = 1; $i < 5; $i++) {
                $query_addDelliveryTypes = "insert into togo.transporter_delivery_types (transporter_id, type) 
                values ('$customerId', '$i')";

                $result_addDelliveryTypes = $this->dataBase->query($query_addDelliveryTypes);

                if (!$result_addDelliveryTypes) {
                    $res = 1;
                }
            }

            if ($res == 1) {
                echo "transporter_delivery_types insert error";
                return;
            }

            ///////////////////////////////////////// transportercarinfo
            $query_addCar = "insert into togo.transportercarinfo (CustomerId, RegistrationNumber, LicenceCarNumber, CarColorId) 
            values ($customerId, '11111', '22222', 7)";

            $result_addCar = $this->dataBase->query($query_addCar);

            if (!$result_addCar) {
                echo "transportercarinfo insert error";
                return;
            }

            ///////////////////////////////////////// transporterworkcity
            $query_getCities = "select id, name from togo.citytable";
            $result_getCities = $this->dataBase->query($query_getCities);

            $citiesArr = array();

            if ($result_getCities) {
                while ($row_getCities = $this->dataBase->fetchArray($result_getCities)) {
                    array_push($citiesArr, array("id" => $row_getCities['id'], "name" => $row_getCities['name']));
                }
            } else {
                echo "get cities error";
                return;
            }

            $res = 0;

            for ($i = 0; $i < count($citiesArr); $i++) {
                $IdCity = $citiesArr[$i]['id'];
                $query_insertWorkCities = "Insert Into togo.TransporterWorkCity (CustomerId,CityId) Values ('$customerId','$IdCity')";
                $result_insertWorkCities = $this->dataBase->query($query_insertWorkCities);

                if (!$result_insertWorkCities) {
                    $res = 1;
                }
            }

            if ($res == 1) {
                echo "TransporterWorkCity insert error";
                return;
            }

            ///////////////////////////////////////// workdaystime
            $SatTimeStart = '2018-10-23 12:15:00';
            $SatTimeFinish = '2018-10-23 12:15:00';
            $SunTimeStart = '2018-10-23 12:15:00';
            $SunTimeFinish = '2018-10-23 12:15:00';
            $MonTimeStart = '2018-10-23 12:15:00';
            $MonTimeFinish = '2018-10-23 12:15:00';
            $TueTimeStart = '2018-10-23 12:15:00';
            $TueTimeFinish = '2018-10-23 12:15:00';
            $WenTimeStart = '2018-10-23 12:15:00';
            $WenTimeFinish = '2018-10-23 12:15:00';
            $ThuTimeStart = '2018-10-23 12:15:00';
            $ThuTimeFinish = '2018-10-23 12:15:00';
            $FriTimeStart = '2018-10-23 12:15:00';
            $FriTimeFinish = '2018-10-23 12:15:00';

            $query_Set_Work_Day = "Insert into togo.WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$customerId','$SatTimeStart','$SatTimeFinish','$SunTimeStart','$SunTimeFinish','$MonTimeStart','$MonTimeFinish','$TueTimeStart','$TueTimeFinish','$WenTimeStart','$WenTimeFinish','$ThuTimeStart','$ThuTimeFinish','$FriTimeStart','$FriTimeFinish') ";

            $result_Set_Work_Day = $this->dataBase->query($query_Set_Work_Day);

            if (!$result_Set_Work_Day) {
                echo "workdaystime insert error";
                return;
            }

            ///////////////////////////////////////// roadpricestable + city_id

            return; ///////////

            $res = 0;

            for ($i = 0; $i < count($citiesArr); $i++) { // nonououo
                $transId = $customerId;
                $tempCityId = $citiesArr[$i]['id'];
                $query_addRecordPrice = "insert into togo.roadpricestable" . $tempCityId . " (transporterId) values ('$transId')";

                $result_addRecordPrice = $this->dataBase->query($query_addRecordPrice);

                if (!$result_addRecordPrice) {
                    $res = 1;
                }
            }

            if ($res == 1) {
                echo "roadpricestable insert error";
                return;
            }
        } else {
            echo "image upload error";
        }
    }

    public function RecendCode($PhoneNumber)
    {
        $PhoneNumber = $this->dataBase->escape($PhoneNumber);


        $query_Get_Code = "Select * from togo.customer where PhoneNumber='$PhoneNumber'";
        $result = $this->dataBase->query($query_Get_Code);
        $count_Num = $this->dataBase->numRows($result);
        if ($count_Num > 0) {
            $row = $this->dataBase->fetchArray($result);
            $ActiveCode = $row['VerifiedKey'];


            $amobile = $PhoneNumber;
            //echo $amobile;
            $Code_Verify = $ActiveCode;
            $ch = curl_init();
            $Code_Verify1 = "ToGo%20Code%20Is:%20" . $Code_Verify;

            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
            curl_setopt($ch, CURLOPT_HEADER, 0);
            $reslt_Send = curl_exec($ch);

            curl_close($ch);


            if ($reslt_Send != "Message Sent Successfully!") {

                echo "CodeNotSend";
            } else
                /* edited, add verification code record */
                $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                values ('$Code_Verify', '$amobile', 'Login')";
            $result_recordCode = $this->dataBase->query($query_recordCode);

            echo "CodeSend";
        } else
            echo "MobileNotFound";
    }

    public function VerifiedAcount($PhoneNumber, $Code, $TokenNotifiy, $TokenDevice, $RegionId, $LangId)
    {

        /* echo "PhoneNumber: " . $PhoneNumber . " - Code: " . $Code;
        return; */

        $data = "VerifiedAcount API entered ------- " . "PhoneNumber: " . $PhoneNumber . " - Code: " . $Code . " - TokenNotifiy: " . $TokenNotifiy . " - TokenDevice: " . $TokenDevice . " - RegionId: " . $RegionId . " - LangId: " . $LangId;
        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $CustomerInfoArray = array();

        $PhoneNumber = $this->dataBase->escape($PhoneNumber);
        $Code = $this->dataBase->escape($Code);
        $TokenNotifiy = $this->dataBase->escape($TokenNotifiy);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $RegionId = $this->dataBase->escape($RegionId);
        $LangId = $this->dataBase->escape($LangId);

        $CompletRegistration = "";

        $phoneNumberQuery = Helpers::getPhoneNumerQuery($PhoneNumber);

        $data = "phoneNumberQuery: " . $phoneNumberQuery;

        $rplcPhone = $PhoneNumber;
        $searcMobile = substr($rplcPhone, 4);

        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $query_Verified = "Select * from togo.customer Where PhoneNumber like '%" . $searcMobile . "%' AND VerifiedKey='$Code'";
        $result_check_Phone = $this->dataBase->query($query_Verified);
        $row_count_phone = $this->dataBase->numRows($result_check_Phone);

        if ($row_count_phone > 0) {

            $data = "customer found";
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            //////////////////////////////////////////////////////////////////////////////////////////

            $row_getCustomerId = $row_getTokens = $this->dataBase->fetchArray($result_check_Phone);
            $userId = $row_getCustomerId['id'];

            $data = "userId: " . $userId;
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // $this->recordAction($userId, -1, -1, -1, "title", "logout", 2);

            $query_getTokens = "select Token, WebToken from togo.customer where id = '$userId'";
            $result_getTokens = $this->dataBase->query($query_getTokens);

            if ($result_getTokens) {

                $row_getTokens = $this->dataBase->fetchArray($result_getTokens);

                if ($TokenNotifiy != $row_getTokens['Token']) {
                    $tokens = array();
                    $webTokens = array();
    
                    if ($row_getTokens['Token'] != null) {
                        array_push($tokens, $row_getTokens['Token']);
                    }
    
                    if ($row_getTokens['WebToken'] != null) {
                        array_push($webTokens, $row_getTokens['WebToken']);
                    }
    
                    $data = array(
                        'userId' => $userId,
                        'intent' => 'logout'
                    );
    
                    $title = "Logged Out";
                    $body = "You have been logged out";
    
                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                }

            } else {
                echo "errorFetchingTokens";
            }

            /////////////////////////////////////////////////////////////////////////////////////////

            $query_Update_Activate = "Update togo.customer set IsVerified=1,Token='$TokenNotifiy',TokenDevice='$TokenDevice',RegionId='$RegionId',LanguageId='$LangId', loggedIn=1 Where PhoneNumber like '%" . $searcMobile . "%'";
            $result_Update_Activate = $this->dataBase->query($query_Update_Activate);
            if ($result_Update_Activate == true) {

                $data = "customer updated";
                file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                $query_GetData_Customer = "Select * from togo.customer Where PhoneNumber like '%" . $searcMobile . "%'";
                $result_DataCustomer = $this->dataBase->query($query_GetData_Customer);
                $row = $this->dataBase->fetchArray($result_DataCustomer);

                if (empty($row['IsClient']))
                    $row['IsClient'] = "0";

                if (empty($row['IsTransporter']))
                    $row['IsTransporter'] = "0";


                $CustomerId = $row['id'];


                if ($row['IsClient'] == "0" && $row['IsTransporter'] == "0") {
                    $CompletRegistration = "0";
                    array_push($CustomerInfoArray, array("id" => $row['id'], "PhoneNumber" => $row['PhoneNumber'], "IsClient" => $row['IsClient'], "isFoodClient" => $row['isFoodClient'], "IsTransporter" => $row['IsTransporter'], "IsAccepted" => $row['IsAccepted'], "FlagRegistration" => '0'));
                } else if ($row['IsClient'] == "1" && $row['IsTransporter'] == "1") {
                    $CompletRegistration = 'ErrorType';
                    array_push($CustomerInfoArray, array("id" => $row['id'], "PhoneNumber" => $row['PhoneNumber'], "IsClient" => $row['IsClient'], "isFoodClient" => $row['isFoodClient'], "IsTransporter" => $row['IsTransporter'], "IsAccepted" => $row['IsAccepted'], "FlagRegistration" => 'ErrorType'));
                } else if ($row['IsClient'] != "0") {
                    $query_Check_Client_Personal_Info = "Select * from togo.clientTable Where CustomerId='$CustomerId'";
                    $Count_Record = $this->GetCountRows($query_Check_Client_Personal_Info);
                    if ($Count_Record > 0) {

                        $query_Check_BuisnessClient = "Select * from togo.clientBusinessTable  Where CustomerId='$CustomerId'";
                        $Count_Record = $this->GetCountRows($query_Check_BuisnessClient);
                        if ($Count_Record > 0) {
                            $CompletRegistration = "ClientRegistration";
                            array_push($CustomerInfoArray, array("id" => $row['id'], "PhoneNumber" => $row['PhoneNumber'], "IsClient" => $row['IsClient'], "isFoodClient" => $row['isFoodClient'], "IsTransporter" => $row['IsTransporter'], "IsAccepted" => $row['IsAccepted'], "FlagRegistration" => $CompletRegistration));
                            echo json_encode(array("server_response" => $CustomerInfoArray));
                            return;
                        } else {
                            $CompletRegistration = "ClientBusinessTable";
                        }
                    } else {
                        $CompletRegistration = "ClientPersonalInfo";
                    }
                } else if ($row['IsTransporter'] != "0") {
                    $query_Check_Personal_Info = "Select * from togo.transporterTable Where CustomerId='$CustomerId'";
                    $Count_Record = $this->GetCountRows($query_Check_Personal_Info);
                    if ($Count_Record > 0) {
                        $query_Check_Buisness_Info = "Select * from togo.transporterCarInfo Where CustomerId ='$CustomerId'";
                        $Count_Record = $this->GetCountRows($query_Check_Buisness_Info);
                        if ($Count_Record > 0) {
                            $query_Get_Time_Transporter = "Select * from togo.workDaysTime Where CustomerId='$CustomerId'";
                            $Count_Record = $this->GetCountRows($query_Get_Time_Transporter);
                            if ($Count_Record > 0) {
                                $query_Check_BuisnessTransporter = "Select * from togo.transporterWorkCity Where CustomerId='$CustomerId'";
                                $Count_Record = $this->GetCountRows($query_Check_BuisnessTransporter);

                                if ($Count_Record > 0) {
                                    $CompletRegistration = "TransporterCompletedRegistration";
                                    $query_get_Transporter_Type = "SELECT TeamId, IsTeamActivated, AccountName, isFoodTransporter from togo.transportertable Where CustomerId='$CustomerId'";
                                    $result_Get_Transporter_Type = $this->dataBase->query($query_get_Transporter_Type);
                                    $row_Get_Transporter_Type = $this->dataBase->fetchArray($result_Get_Transporter_Type);
                                    $TeamId = $row_Get_Transporter_Type['TeamId'];
                                    $IsTeamActivated = $row_Get_Transporter_Type['IsTeamActivated'];
                                    $isFoodTransporter = $row_Get_Transporter_Type['isFoodTransporter'];
                                    $accountName = $row_Get_Transporter_Type['AccountName'];
                                    array_push($CustomerInfoArray, array("id" => $row['id'], "PhoneNumber" => $row['PhoneNumber'], "AccountName" => $accountName, "IsClient" => $row['IsClient'], "isFoodClient" => $row['isFoodClient'], "IsTransporter" => $row['IsTransporter'], "isFoodTransporter" => $isFoodTransporter, "TeamId" => $TeamId, "IsTeamActivated" => $IsTeamActivated, "IsAccepted" => $row['IsAccepted'], "FlagRegistration" => $CompletRegistration));
                                    echo json_encode(array("server_response" => $CustomerInfoArray));
                                    return;
                                } else {
                                    $CompletRegistration = "TransportreWorkCityInfo";
                                }
                            } else {
                                $CompletRegistration = "TransportreWorkTimeInfo";
                            }
                        } else {
                            $CompletRegistration = "TransportreCarInfo";
                        }
                    } else {
                        $CompletRegistration = "TransporterPersonalInfo";
                    }
                }
                array_push($CustomerInfoArray, array("id" => $row['id'], "PhoneNumber" => $row['PhoneNumber'], "IsClient" => $row['IsClient'], "isFoodClient" => $row['isFoodClient'], "IsTransporter" => $row['IsTransporter'], "IsAccepted" => $row['IsAccepted'], "FlagRegistration" => $CompletRegistration));
                echo json_encode(array("server_response" => $CustomerInfoArray));
            } else {
                $data = "customer update error";
                file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                echo "TryLater ";
            }
        } else {
            $data = "wrong code";
            file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
            echo "Wrong_Code";
        }
    }

    public function addExclusiveCustomer($transporterId, $token, $name, $email, $phone)
    {
        if (!$this->CheckToken($transporterId, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }
        
        if ($this->CheckBlockedCustomer($transporterId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // insert new customer -> PhoneNumber, IsClient, OdooId
        // insert new clienttable -> CustomerId, email, is_exclusive
        // insert new clientbusinesstable -> CustomerId, BusinessName, LogoUrl
        // insert new odoo partner
        
        // link transporter to new customer

        //////////////////////////////////////////////////

        $this->OdooDb();
        $name = $this->dataBase->escape($name);
        $email = $this->dataBase->escape($email);
        $phone = $this->dataBase->escape($phone);

        // ---------------------------------------------------------------

        // 0- add new odoo user
        // 1- insert new customer record
        // 2- insert new clienttable record
        // 3- insert new clientbusinesstable record
        // 4- upload image
        
        //////////////////////////////////////////////////

        // insert customer

        $query_add_customer = "INSERT INTO togo.customer (
            PhoneNumber,
            IsAccepted,
            IsClient,
            IsVerified
        ) values ('$phone', 0, 1, 1)";

        $result_add_customer = $this->dataBase->query($query_add_customer);

        if (!$result_add_customer) {
            echo json_encode(array("status" => "error", "error" => "add_customer query error"));
            return;
        }

        $query_get_last_inserted_customer_id = "SELECT id FROM togo.customer WHERE PhoneNumber='$phone'";
        $result_get_last_inserted_customer_id = $this->dataBase->query($query_get_last_inserted_customer_id);

        if (!$result_get_last_inserted_customer_id) {
            echo json_encode(array("status" => "error", "error" => "get_last_inserted_customer_id query error"));
            return;
        }

        $row_get_last_inserted_customer_id = $this->dataBase->fetchArray($result_get_last_inserted_customer_id);
        $CustomerId = $row_get_last_inserted_customer_id['id'];

        $odoo_id = $this->models->execute_kw(
            $this->db,
            $this->uid,
            $this->password,
            'res.partner',
            'create_partner',
            array('self', $CustomerId, $phone, 1)
        );

        $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $charactersLength = strlen($characters);
        $randomString = '';
        for ($i = 0; $i < 10; $i++) {
            $randomString .= $characters[rand(0, $charactersLength - 1)];
        }

        $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

        $query_update_customer = "UPDATE togo.customer SET OdooId = '$odoo_id', TokenDevice = '$hashed_token' WHERE id = '$CustomerId'";
        $result_update_customer = $this->dataBase->query($query_update_customer);

        if (!$result_update_customer) {
            echo json_encode(array("status" => "error", "error" => "update_customer query error"));
            return;
        }

        // insert clienttable & update odoo

        $query_check_if_client_added = "SELECT * FROM togo.clientTable WHERE CustomerId = '$CustomerId' ";
        $result_check_if_client_added = $this->dataBase->query($query_check_if_client_added);

        if (!$result_check_if_client_added) {
            echo json_encode(array("status" => "error", "error" => "check_if_client_added query error"));
            return;
        }

        $row_count_check_if_client_added = $this->dataBase->numRows($result_check_if_client_added);
        
        if ($row_count_check_if_client_added > 0) {
            echo json_encode(array("status" => "error", "error" => "client record found in clienttable error (customer record and odoo partner inserted!)"));
            return;
        }
        
        // $idCustomere, $identityno, $email, $fname, $lname
        $this->editCustomerInfo($CustomerId, "", $email, $name, "");

        $query_add_client = "INSERT INTO togo.ClientTable (
            CustomerId,
            Email,
            is_exclusive
        ) 
        VALUES (
            '$CustomerId',
            '$email',
            1
        )";

        $result_add_client = $this->dataBase->query($query_add_client);

        if (!$result_add_client) {
            echo json_encode(array("status" => "error", "error" => "add_client query error (customer record and odoo partner inserted!)"));
            return;
        }
        
        // insert clientbusinesstable

        $query_check_if_business_added = "SELECT * FROM togo.ClientBusinessTable WHERE CustomerId='$CustomerId'";
        $result_check_if_business_added = $this->dataBase->query($query_check_if_business_added);

        if (!$result_check_if_business_added) {
            echo json_encode(array("status" => "error", "error" => "check_if_business_added query error (customer record, clienttable record and odoo partner inserted!)"));
            return;
        }

        $row_count_check_if_business_added = $this->dataBase->numRows($result_check_if_business_added);

        if ($row_count > 0) {
            echo json_encode(array("status" => "error", "error" => "client record found in clientbusinesstable error (customer record, clienttable record and odoo partner inserted!)"));
            return;
        }

        $query_add_client_business = "INSERT INTO togo.ClientBusinessTable (
            CustomerId,
            BusinessName,
            LogoUrl
        ) VALUES (
            '$CustomerId',
            '$name',
            'img/BusinessLogo/BlankProfile.png'
        )";

        $result_add_client_business = $this->dataBase->query($query_add_client_business);

        if (!$result_add_client_business) {
            echo json_encode(array("status" => "error", "error" => "add_client_business query error (customer record, clienttable record and odoo partner inserted!)"));
            return;
        }
        
        $query_insert_prices = "INSERT INTO merchantpricelist (
            merchantId,
            WestbankToWestbank,
            WestbankToJerusalem,
            WestbankToAreas48,
            WestbankToJordan,
            JerusalemToJerusalem,
            JerusalemToWestbank,
            JerusalemToAreas48,
            JerusalemToJordan,
            Areas48ToAreas48,
            Areas48ToWestbank,
            Areas48ToJerusalem,
            Areas48ToJordan
        ) VALUES ('$CustomerId', 20, 30, 70, 70, 30, 30, 70, 70, 70, 70, 70, 70)";

        $result_insert_prices = $this->dataBase->query($query_insert_prices);
        
        if (!$result_insert_prices) {
            echo json_encode(array("status" => "error", "error" => "insert_prices query error (customer record, clienttable record, clientbusinesstable record and odoo partner inserted!)"));
            return;
        }

        // link to network

        $query_add_network = "INSERT INTO togo.client_network (
            ClientId,
            TransporterId
        ) VALUES (
            '$CustomerId',
            '$transporterId'
        )";

        $result_add_network = $this->dataBase->query($query_add_network);

        if (!$result_add_network) {
            echo json_encode(array("status" => "error", "error" => "add_network query error (customer record, clienttable record, clientbusinesstable record and odoo partner inserted!)"));
            return;
        }

        /////////////////////////////////

        echo json_encode(array("status" => "success", "response" => "customer added successfully"));
    }

    public function getExclusiveCustomers($transporterId, $token)
    {
        if (!$this->CheckToken($transporterId, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }
        
        if ($this->CheckBlockedCustomer($transporterId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        $query_get_customers = "SELECT 
        network.ClientId AS client_id,
        client_business.BusinessName AS client_name,
        client_customer.PhoneNumber AS client_phone,
        client_business.LogoUrl AS client_logo_path
        FROM togo.client_network AS network
        INNER JOIN togo.clientbusinesstable AS client_business ON network.ClientId = client_business.CustomerId
        INNER JOIN togo.customer AS client_customer ON network.ClientId = client_customer.id
        WHERE network.TransporterId = '$transporterId'";
        $result_get_customers = $this->dataBase->query($query_get_customers);
        
        if (!$result_get_customers) {
            echo json_encode(array("status" => "error", "error" => "get_customers query error"));
            return;
        }

        $row_count_get_customers = $this->dataBase->numRows($result_get_customers);

        if ($row_count_get_customers == 0) {
            echo json_encode(array("status" => "not-found", "response" => "customers not found"));
            return;
        }

        $customers = array();

        while ($row_get_customers = $this->dataBase->fetchArray($result_get_customers)) {
            array_push($customers, array(
                "client_id" => $row_get_customers['client_id'],
                "client_name" => $row_get_customers['client_name'],
                "client_phone" => $row_get_customers['client_phone'],
                "client_logo_path" => $row_get_customers['client_logo_path']
            ));
        }

        echo json_encode(array("status" => "success", "customers" => $customers));
    }

    public function ChangeNumber($PhoneNumber, $CustomerId, $TokenDevice)
    {
        $PhoneNumber = $this->dataBase->escape($PhoneNumber);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            $query = "update togo.customer set PhoneNumber='$PhoneNumber' where id='$CustomerId'";
            $result = $this->dataBase->query($query);
            if ($result == true) {
            }
        } else {
            echo "TokenError";
        }
    }

    public function SetTypeCustomer($CustomerId, $TypeCustomer, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TypeCustomer = $this->dataBase->escape($TypeCustomer);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            /* if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
            $typeCustomer;

            if ($TypeCustomer == "Client")
                $typeCustomer = 1;
            else
                if ($TypeCustomer == "Transporter")
                $typeCustomer = 2;
            else
                $typeCustomer = 0;

            if ($typeCustomer == 1)
                $query_SetType = "Update togo.customer Set IsClient=1 Where id='$CustomerId'";
            else
                if ($typeCustomer == 2)
                $query_SetType = "Update togo.customer Set IsTransporter=1 Where id='$CustomerId'";

            if ($typeCustomer == 0) {
                echo "Error_Type";
            } else {
                $result = $this->dataBase->query($query_SetType);
                if ($result == true)
                    echo "Updated";
                else
                    echo "NotUpdated";
            }
        } else {
            echo "TokenError";
        }
    }

    public function SetPersonalInfo($CustomerId, $FirstName, $LastName, $IdClient, $Email, $TokenDevice)

    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $FirstName = $this->dataBase->escape($FirstName);
        $LastName = $this->dataBase->escape($LastName);
        $IdClient = $this->dataBase->escape($IdClient);
        $Email = $this->dataBase->escape($Email);
        $TokenDevice = $this->dataBase->escape($TokenDevice);


        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                /*if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/

                $query_Check_Addedd = "Select * from togo.clientTable Where CustomerId='$CustomerId' ";
                $result_Check_addedd = $this->dataBase->query($query_Check_Addedd);
                $row_count_Check = $this->dataBase->numRows($result_Check_addedd);
                if ($row_count_Check > 0) {
                    echo "CustomerAddedd";
                    return;
                } else {
                    //diala area
                    $editres = $this->editCustomerInfo($CustomerId, $IdClient, $Email, $FirstName, $LastName); // $IdClient were $IDNumber

                    $query = "Insert Into togo.ClientTable (CustomerId,FirstName,LastName,IdClient,Email) Values ('$CustomerId',N'$FirstName',N'$LastName',N'$IdClient','$Email')";

                    $result = $this->dataBase->query($query);


                    if ($result == true) {
                        echo "Inserted";
                    } else
                        echo "NotInserted";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // to be checked and removed #################################################################
    public function chargeBalance($CustomerId, $TokenDevice, $chargeAmount)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $chargeAmount = $this->dataBase->escape($chargeAmount);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            $resuult = $this->rechargeBalance($CustomerId, $chargeAmount);

            if ($resuult == 1) {
                // edited (add record)

                $customer_info = $this->getCustomerNameAndType($CustomerId);
                $customer_name = $customer_info['FullName'];
                $customer_logoURL = $customer_info['LogoUrl'];
                $customer_type = $customer_info['type'];

                $query = "insert into togo.balance_charge_actions (customer_name, customer_type, amount) values ('$customer_name', '$customer_type', '$chargeAmount')";
                $result = $this->dataBase->query($query);

                echo "success";
            } else echo "fail";
        } else {
            echo "TokenError";
        }
    }

    /* public function testchargeBalance($CustomerId, $chargeAmount)
    {
        $customer_info = $this->getCustomerNameAndType($CustomerId);
        $customer_name = $customer_info['FullName'];
        $customer_logoURL = $customer_info['LogoUrl'];
        $customer_type = $customer_info['type'];

        $query = "insert into balance_charge_actions (customer_name, customer_type, amount) values ('$customer_name', '$customer_type', '$chargeAmount')";
        $result = $this->dataBase->query($query);

        echo "success";
    } */

    public function getCustomerNameAndType($customerId)
    {
        $query_get_customerType = "select IsClient from togo.customer where id='$customerId'";
        $result_get_customerType = $this->dataBase->query($query_get_customerType);
        $row = $this->dataBase->fetchArray($result_get_customerType);

        if ($row['IsClient'] == 1) {
            $query_get_customerInfo = "select bus.LogoUrl, concat(client.FirstName, ' ', client.LastName) as FullName from togo.clienttable as client inner join togo.clientbusinesstable as bus on client.CustomerId = bus.CustomerId where client.CustomerId='$customerId'";
            $result_get_customerInfo = $this->dataBase->query($query_get_customerInfo);
            $row = $this->dataBase->fetchArray($result_get_customerInfo);

            return array("logoURL" => $row['LogoUrl'], "FullName" => $row['FullName'], "type" => "Client");
        } else {
            $query_get_customerInfo = "select trans.PersonalImgPath as logoURL, concat(trans.FirstName, ' ', trans.LastName) as FullName from togo.transportertable as trans where CustomerId='$customerId'";
            $result_get_customerInfo = $this->dataBase->query($query_get_customerInfo);
            $row = $this->dataBase->fetchArray($result_get_customerInfo);

            return array("logoURL" => $row['LogoUrl'], "FullName" => $row['FullName'], "type" => "Transporter");
        }
    }

    public function getClientInvoices($CustomerId, $TokenDevice)
    {
        $invoicesData = array();
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {

            $query = "select amount,tax,invoiceTime,ToGoDiscount,invoiceDate,ToCustomerId as TransporterId,orderId, FirstName, LastName from togo.TransporterTable as TransporterTable
            inner join togo.invoicesTable as invoicesTable on invoicesTable.ToCustomerId=TransporterTable.CustomerId and invoicesTable.FromCustomerId=$CustomerId";
            $result = $this->dataBase->query($query);
            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($invoicesData, array("amount" => $row['amount'], "tax" => $row['tax'], "ToGoDiscount" => $row['ToGoDiscount'], "invoiceDate" => $row['invoiceDate'], "orderId" => $row['orderId'], "TransporterName" => $row['FirstName'] . " " . $row['LastName'], "invoiceTime" => $row['invoiceTime']));
            }
            echo json_encode(array("server_response" => $invoicesData));
        } else {

            echo "TokenError";
        }
    }

    public function getTransporterInvoices($CustomerId, $TokenDevice)
    {
        $invoicesData = array();

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            $query = "select amount,tax,invoiceTime,ToGoDiscount,invoiceDate,FromCustomerId as ClientId,orderId, FirstName ,LastName from togo.ClientTable as ClientTable
            inner join togo.invoicesTable as invoicesTable on invoicesTable.FromCustomerId=ClientTable.CustomerId and invoicesTable.ToCustomerId=$CustomerId";
            $result = $this->dataBase->query($query);
            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($invoicesData, array("amount" => $row['amount'], "tax" => $row['tax'], "ToGoDiscount" => $row['ToGoDiscount'], "invoiceDate" => $row['invoiceDate'], "orderId" => $row['orderId'], "ClientName" => $row['FirstName'] . " " . $row['LastName'], "invoiceTime" => $row['invoiceTime']));
            }
            echo json_encode(array("server_response" => $invoicesData));
        } else {
            echo "TokenError";
        }
    }

    public function addInvoice($amount, $tax, $togodiscount, $invoiceDate, $orderid, $FromCustomer, $ToCustomer, $invoiceTime)
    {
        echo $tax . "this's tax";

        $query = "Insert into togo.invoicesTable (amount,tax,ToGoDiscount,invoiceDate,orderId,FromCustomerId,ToCustomerId,invoiceTime) Values('$amount','$tax','$togodiscount','$invoiceDate','$orderid','$FromCustomer','$ToCustomer','$invoiceTime')";
        $result_Add_Client_Business = $this->dataBase->query($query);

        if ($result_Add_Client_Business == true) {
            echo "Inserted";
        } else {
            echo "NotInserted";
        }
    }

    public function addTeamTransaction($orderId, $fromCustomer, $toCustomer, $amount, $description)
    {
        $query = "insert into togo.teams_transaction (OrderId, FromCustomer, ToCustomer, Amount, Description)
		Values('$orderId','$fromCustomer','$toCustomer','$amount','$description')";
        $result_Add_TeamTransactions = $this->dataBase->query($query);

        if ($result_Add_TeamTransactions == true) {
            return "Inserted";
        } else {
            return "NotInserted";
        }
    }

    public function getTeamMemberTransaction($TransporterMasterId, $TeamMemberId, $TokenDevice)
    {
        $invoicesData = array();
        $sum = 0;
        if ($this->CheckToken($TransporterMasterId, $TokenDevice) == true) {
            $query = "select teams_transaction.FromCustomer, teams_transaction.ToCustomer, teams_transaction.Amount, teams_transaction.OrderId,
			teams_transaction.Description, teams_transaction.createdAt,
			CONCAT(fromTransporter.FirstName, ' ' ,fromTransporter.LastName) as FromName,
			CONCAT(toTransporter.FirstName, ' ' ,toTransporter.LastName) as ToName
			from togo.teams_transaction as teams_transaction
            left outer join togo.transportertable as fromTransporter on teams_transaction.FromCustomer = fromTransporter.CustomerId
			left outer join togo.transportertable as toTransporter on teams_transaction.ToCustomer = toTransporter.CustomerId
			where FromCustomer = '$TeamMemberId' or ToCustomer = '$TeamMemberId' order by createdAt desc;";

            $result = $this->dataBase->query($query);
            while ($row = $this->dataBase->fetchArray($result)) {
                if ($row['FromCustomer'] == $TeamMemberId) {
                    $sum = $sum - $row['Amount'];
                    array_push($invoicesData, array("Amount" => $row['Amount'], "OrderId" => $row['OrderId'], "Description" => $row['Description'], "TransactionDate" => $row['createdAt'], "FromCustomer" => $row['FromName'], "ToCustomer" => $row['ToName']));
                } elseif ($row['ToCustomer'] == $TeamMemberId) {
                    $sum = $sum + $row['Amount'];
                    array_push($invoicesData, array("Amount" => $row['Amount'], "OrderId" => $row['OrderId'], "Description" => $row['Description'], "TransactionDate" => $row['createdAt'], "FromCustomer" => $row['FromName'], "ToCustomer" => $row['ToName']));
                }
            }
            echo json_encode(array("transactions_list" => $invoicesData, "sum_of_balance" => $sum));
        } else {
            echo "TokenError";
        }
    }


    public function GetTypeBusiness($Idlanguage, $CustomerId, $TokenDevice)
    {
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            /*if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
            $BusinessArray = array();
            $query = "Select * from togo.BusinessType Where IdLanguage ='$Idlanguage'";
            $result = $this->dataBase->query($query);

            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($BusinessArray, array("id" => $row['id'], "Name" => $row['NameBusiness']));
            }
            echo json_encode(array("server_response" => $BusinessArray));
        } else {
            echo "TokenError";
        }
    }

    public function updateDeliveryTypes($transporterId, $deliveryTypes, $token)
    {
        $token = $this->dataBase->escape($token);
        $deliveryTypes = $this->dataBase->escape($deliveryTypes);
        $transporterId = $this->dataBase->escape($transporterId);
        if ($this->CheckToken($transporterId, $token) == true) {
            $deliveryTypes = str_replace("[", "", $deliveryTypes);
            $deliveryTypes = str_replace("]", "", $deliveryTypes);
            $deliveryTypes = explode(",", $deliveryTypes);
            $query = "Delete from togo.transporter_delivery_types where transporter_id = '$transporterId'";
            $result = $this->dataBase->query($query);
            foreach ($deliveryTypes as $deliveryType) {
                $query = "Insert into togo.transporter_delivery_types(transporter_id, type)
                            Values('$transporterId', '$deliveryType')
                            ON DUPLICATE KEY UPDATE type ='$deliveryType'";
                $result = $this->dataBase->query($query);
                if ($result != true)
                    echo "Delivery Types Not Inserted";
            }
            echo "updated";
        } else {
            echo "TokenError";
        }
    }

    public function GetCarInfo($Idlanguage, $TransporterId, $TokenDevice)
    {
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            /*if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
            $CarArray = array();
            $query = "Select VehicleNameLang.Name as VehicleName,VehicleNameLang.IdVehicle as vehicleid,TransporterCarInfo.LicenceCarNumber as LicenceNumber 
            from togo.TransporterCarInfo as TransporterCarInfo, togo.VehicleNameLang as VehicleNameLang 
            Where TransporterCarInfo.CarImgId = VehicleNameLang.IdVehicle AND  CustomerId ='$TransporterId' AND IdLanguage ='$Idlanguage'";
            $result = $this->dataBase->query($query);
            if ($this->dataBase->numRows($result) > 0) {
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($CarArray, array("LicenceNumber" => $row['LicenceNumber'], "Name" => $row['VehicleName']));
                }

                $query = "Select transporter_delivery_types.type from togo.transporter_delivery_types as transporter_delivery_types where transporter_id='$TransporterId'";
                $result = $this->dataBase->query($query);

                $typesArray = array();
                if ($this->dataBase->numRows($result) > 0) {
                    while ($row = $this->dataBase->fetchArray($result)) {
                        array_push($typesArray, $row['type']);
                    }
                }

                echo json_encode(array("carArray" => $CarArray, "types" => $typesArray));
            } else {
                echo json_encode(array("server_response" => "No Info Found"));
            }
        } else {
            echo "TokenError";
        }
    }

    public function SetBusinessInfo($CustomerId, $BusinessName, $BusinessPlace, $BusinessType, $ImgName, $ImgCode, $TokenDevice)
    {

        // file_put_contents("temp_img_code.log", var_export($ImgCode, true) . "\n ================ \n", FILE_APPEND);

        $CustomerId = $this->dataBase->escape($CustomerId);
        $BusinessName = $this->dataBase->escape($BusinessName);
        $BusinessPlace = $this->dataBase->escape($BusinessPlace);
        $BusinessType = $this->dataBase->escape($BusinessType);
        $ImgName = $this->dataBase->escape($ImgName);
        $ImgCode = $this->dataBase->escape($ImgCode);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                /*if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                $params = array();

                //Check Existss Or Not Customer Business Info

                $query_Check_Exists = "Select * from togo.ClientBusinessTable Where CustomerId='$CustomerId'";
                $result_check = $this->dataBase->query($query_Check_Exists);
                $row_count = $this->dataBase->numRows($result_check);

                if ($row_count > 0) {
                    echo "CustomerExists";
                } else {
                    //Upload Img


                    if ($ImgCode == "NoImage") {
                        $query_Add_Client_Business = "Insert into togo.ClientBusinessTable (CustomerId,BusinessName,BusinessPlace,BusinessType,LogoUrl) Values('$CustomerId',N'$BusinessName',N'$BusinessPlace',N'$BusinessType',N'$ImageName')";
                        $result_Add_Client_Business = $this->dataBase->query($query_Add_Client_Business);

                        if ($result_Add_Client_Business == true) {

                            echo "Inserted";

                            $query_insert_prices = "insert into merchantpricelist (merchantId, WestbankToWestbank, WestbankToJerusalem, WestbankToAreas48, WestbankToJordan, JerusalemToJerusalem, JerusalemToWestbank, JerusalemToAreas48, JerusalemToJordan, Areas48ToAreas48, Areas48ToWestbank, Areas48ToJerusalem, Areas48ToJordan) 
                            values ('$CustomerId', 20, 30, 70, 70, 30, 30, 70, 70, 70, 70, 70, 70)";

                            $result_insert_prices = $this->dataBase->query($query_insert_prices);
                        }
                        else
                            echo "NotInserted";
                    } else {
                        $decoded_string = base64_decode($ImgCode);
                        $path = '../img/BusinessLogo/' . $ImgName . '_' . $CustomerId;
                        $ImageName = 'img/BusinessLogo/' . $ImgName . '_' . $CustomerId;
                        $file = fopen($path, 'wb');

                        /* echo $decoded_string;
                        return; */

                        $is_written = fwrite($file, $decoded_string);
                        fclose($file);
                        if ($is_written > 0) {
                            $query_Add_Client_Business = "Insert into togo.ClientBusinessTable (CustomerId,BusinessName,BusinessPlace,BusinessType,LogoUrl) Values('$CustomerId',N'$BusinessName',N'$BusinessPlace',N'$BusinessType',N'$ImageName')";
                            $result_Add_Client_Business = $this->dataBase->query($query_Add_Client_Business);

                            if ($result_Add_Client_Business == true){
                                echo "Inserted";

                                $query_insert_prices = "insert into merchantpricelist (merchantId, WestbankToWestbank, WestbankToJerusalem, WestbankToAreas48, WestbankToJordan, JerusalemToJerusalem, JerusalemToWestbank, JerusalemToAreas48, JerusalemToJordan, Areas48ToAreas48, Areas48ToWestbank, Areas48ToJerusalem, Areas48ToJordan) 
                                values ('$CustomerId', 20, 30, 70, 70, 30, 30, 70, 70, 70, 70, 70, 70)";

                                $result_insert_prices = $this->dataBase->query($query_insert_prices);
                            }
                            else
                                echo "NotInserted";
                        } else
                            echo "ImgNotUpload";
                    }
                }
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    public function GetIdPlaceLicence($Idlanguage, $CustomerId, $TokenDevice)
    {
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            /* if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
            $IdPalceArray = array();
            $IdLicenceArray = array();
            $queryPlaces = "Select * from togo.IDPlaceLanguage Where IdLanguage ='$Idlanguage'";
            $queryLicence = "Select * from togo.TypeLicenceLanguage Where IdLanguage ='$Idlanguage'";
            $resultPlace = $this->dataBase->query($queryPlaces);
            $resultLicence = $this->dataBase->query($queryLicence);

            while ($row = $this->dataBase->fetchArray($resultPlace)) {
                array_push($IdPalceArray, array("IdPlace" => $row['IdPlace'], "NamePlace" => $row['NamePlace']));
            }

            while ($row = $this->dataBase->fetchArray($resultLicence)) {
                array_push($IdLicenceArray, array("IdTypeLicence" => $row['IdTypeLicence'], "TypeName" => $row['TypeName']));
            }
            $data = array("place" => $IdPalceArray, "license" => $IdLicenceArray);

            echo json_encode($data);
            /*}
                else
                    echo "NotAccepted";
            }
            else
                echo "Blocked";*/
        } else {
            echo "TokenError";
        }
    }

    public function SetTransporterInfo(
        $CustomerId,
        $FirstName,
        $LastName,
        $BirthDay,
        $IDPlace,
        $IDNumber,
        $LicenceNumber,
        $LicenceType,
        $Email,
        $AccountName,
        $PersonalImgName,
        $PersonalImgCode,
        $LicenceImgName,
        $LicenceImgCode,
        $TokenDevice,
        $isFoodTrans
    ) {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $FirstName = $this->dataBase->escape($FirstName);
        $LastName = $this->dataBase->escape($LastName);
        $BirthDay = $this->dataBase->escape($BirthDay);
        $IDPlace = $this->dataBase->escape($IDPlace);
        $IDNumber = $this->dataBase->escape($IDNumber);
        $LicenceNumber = $this->dataBase->escape($LicenceNumber);
        $LicenceType = $this->dataBase->escape($LicenceType);
        $Email = $this->dataBase->escape($Email);
        $AccountName = $this->dataBase->escape($AccountName);
        $PersonalImgName = $this->dataBase->escape($PersonalImgName);
        $PersonalImgCode = $this->dataBase->escape($PersonalImgCode);
        $LicenceImgName = $this->dataBase->escape($LicenceImgName);
        $LicenceImgCode = $this->dataBase->escape($LicenceImgCode);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            // if($this->CheckBlockedCustomer($CustomerId) == false)
            // {
            //     if($this->CheckAcceptedTransporter($CustomerId) == true)
            //     {
            $decoded_string_PersonalImg = base64_decode($PersonalImgCode);
            $decoded_string_LicenceImg = base64_decode($LicenceImgCode);

            $path_Personal = '../img/PersonalImg/' . $PersonalImgName;
            $path_Personal_url = 'img/PersonalImg/' . $PersonalImgName;
            $path_Licence = '../img/LicenceImg/' . $LicenceImgName;
            $path_Licence_Url = 'img/LicenceImg/' . $LicenceImgName;
            $file_Personal = fopen($path_Personal, 'wb');
            $file_Licence = fopen($path_Licence, 'wb');

            $is_written_Personal = fwrite($file_Personal, $decoded_string_PersonalImg);
            $is_written_Licence = fwrite($file_Licence, $decoded_string_LicenceImg);

            fclose($file_Personal);
            fclose($file_Licence);

            if ($is_written_Personal > 0 && $is_written_Licence > 0) {
                //diala area
                $editres = $this->editCustomerInfo($CustomerId, $IDNumber, $Email, $FirstName, $LastName);

                $isFoodTrans = intval($isFoodTrans);

                $query = "Insert Into togo.TransporterTable (CustomerId,FirstName,LastName,IDPlace,IDNumber,LicenceNumber,TypeLicence,Email,AccountName,PersonalImgPath,LicenceImgPath,BirthDay, isFoodTransporter) 
                            Values ('$CustomerId',N'$FirstName',N'$LastName',N'$IDPlace',N'$IDNumber',N'$LicenceNumber',N'$LicenceType','$Email',N'$AccountName',N'$path_Personal_url',N'$path_Licence_Url',N'$BirthDay', '$isFoodTrans')";

                $result = $this->dataBase->query($query);


                if ($result == true) {
                    echo "Inserted";
                } else {
                    echo "NotInserted";
                }
            } else {
                echo "ErrorImgUplode";
            }
        } else {
            echo "TokenError";
        }
    }

    public function GetColorPhotoCar($Idlanguage, $CustomerId, $TokenDevice)
    {
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            // if($this->CheckBlockedCustomer($CustomerId) == false)
            // {
            //     if($this->CheckAcceptedTransporter($CustomerId) == true)
            //     {
            $ColorArray = array();
            $PhotoArray = array();

            $query_Get_Color = "Select * from togo.ColorNameLang where IdLanguage='$Idlanguage'";
            $result = $this->dataBase->query($query_Get_Color);

            $query_Get_PhotoCar = "Select * from togo.VehicleNameLang Where IdLanguage='$Idlanguage'";
            $result_GetPhoto = $this->dataBase->query($query_Get_PhotoCar);

            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($ColorArray, array("ColorId" => $row['IdColor'], "Name" => $row['ColorName']));
            }

            while ($row = $this->dataBase->fetchArray($result_GetPhoto)) {
                $IdVehicle = $row['IdVehicle'];
                $query_Get_Url = "Select VehiclPhoto From togo.VehiclType  Where id='$IdVehicle' AND (IsHide IS NULL OR IsHide=0)";
                $result_Get_Photo = $this->dataBase->query($query_Get_Url);
                if ($this->dataBase->numRows($result_Get_Photo) > 0) {
                    $row_Photo_Url = $this->dataBase->fetchArray($result_Get_Photo);

                    array_push($PhotoArray, array("vehicleId" => $row['IdVehicle'], "Name" => $row['Name'], "PhotoUrl" => $row_Photo_Url['VehiclPhoto'] . ""));
                }

                //array_push($PhotoArray,array("vehicleId"=>""));
            }
            $data = array("Color" => $ColorArray, "Photos" => $PhotoArray);

            echo json_encode($data);
        } else {
            echo "TokenError";
        }
    }

    public function SetCarInfo($CustomerId, $RegistrationNumber, $RegistrationFinshDay, $LicenceCarNumber, $CarColorId, $CarImgName, $CarImgCode, $RegistrationImgName, $RegistrationImgCode, $CarImgId, $deliveryTypes, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $RegistrationNumber = $this->dataBase->escape($RegistrationNumber);
        $RegistrationFinshDay = $this->dataBase->escape($RegistrationFinshDay);
        $LicenceCarNumber = $this->dataBase->escape($LicenceCarNumber);
        $CarColorId = $this->dataBase->escape($CarColorId);
        $CarImgName = $this->dataBase->escape($CarImgName);
        $CarImgCode = $this->dataBase->escape($CarImgCode);
        $RegistrationImgName = $this->dataBase->escape($RegistrationImgName);
        $RegistrationImgCode = $this->dataBase->escape($RegistrationImgCode);
        $CarImgId = $this->dataBase->escape($CarImgId);
        $deliveryTypes = $this->dataBase->escape($deliveryTypes);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            // if($this->CheckBlockedCustomer($CustomerId) == false)
            // {
            //     if($this->CheckAcceptedTransporter($CustomerId) == true)
            //     {
            $params = array();
            //Check Existss Or Not Customer CarInfo Info

            $query_Check_Exists = "Select * from togo.TransporterCarInfo Where CustomerId='$CustomerId'";
            $result_check = $this->dataBase->query($query_Check_Exists);
            $row_count = $this->dataBase->numRows($result_check);

            if ($row_count > 0) {
                echo "CustomerExists";
            } else {
                //TODO:: images overrides each other if has the same file name
                $decoded_string_CarImg = base64_decode($CarImgCode);
                $decoded_string_RegistrationImg = base64_decode($RegistrationImgCode);

                $path_Car = '../img/CarImg/' . $CarImgName;
                $path_Car_Url = 'img/CarImg/' . $CarImgName;
                $path_Registration = '../img/RegistrationImg/' . $RegistrationImgName;
                $path_Registration_Url = 'img/RegistrationImg/' . $RegistrationImgName;
                $file_Car = fopen($path_Car, 'wb');
                $file_Registration = fopen($path_Registration, 'wb');

                $is_written_Car = fwrite($file_Car, $decoded_string_CarImg);
                $is_written_Registration = fwrite($file_Registration, $decoded_string_RegistrationImg);

                fclose($file_Car);
                fclose($file_Registration);

                if ($is_written_Car > 0 && $is_written_Registration > 0) {
                    $query = "Insert into togo.TransporterCarInfo (CustomerId,RegistrationNumber,RegistrationFinshDay,LicenceCarNumber,CarColorId,CarImgPath,RegistrationImgPath,CarImgId) 
                                Values ('$CustomerId',N'$RegistrationNumber','$RegistrationFinshDay',N'$LicenceCarNumber','$CarColorId',N'$path_Car_Url',N'$path_Registration_Url',N'$CarImgId')";

                    $result = $this->dataBase->query($query);

                    $deliveryTypes = str_replace("[", "", $deliveryTypes);
                    $deliveryTypes = str_replace("]", "", $deliveryTypes);
                    $deliveryTypes = explode(",", $deliveryTypes);
                    foreach ($deliveryTypes as $deliveryType) {
                        $query = "Insert into togo.transporter_delivery_types(transporter_id, type) Values('$CustomerId', '$deliveryType')";
                        $result = $this->dataBase->query($query);
                        if ($result != true)
                            echo "Delivery Types Not Inserted";
                    }

                    if ($result == true)
                        echo "Inserted";
                    else
                        echo "NotInserted";
                } else {
                    echo "ErrorImgUplode";
                }
            }
        } else {
            echo "TokenError";
        }
    }

    public function GetCityRegion($Idlanguage, $IdRegion, $CustomerId, $TokenDevice)
    {
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $IdRegion = $this->dataBase->escape($IdRegion);
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {

            $CityRegion = array();

            // $query = "Select Distinct areaId ,name from arealang Where languageId='$Idlanguage'";
            $query = "Select Distinct cityId ,name from togo.citylang Where languageId='$Idlanguage'";

            // $query="Select * from CityRegion Where RegionId='$IdRegion'";
            $result = $this->dataBase->query($query);
            while ($row = $this->dataBase->fetchArray($result)) {

                if (empty($row['LatRegion'])) {
                    $row['LatRegion'] = "0";
                }
                if (empty($row['LongRegion'])) {
                    $row['LongRegion'] = "0";
                }

                array_push($CityRegion, array("IdCity" => $row['areaId'], "Name" => $row['name'], "LatRegion" => "", "LongRegion" => ""));
            }

            echo json_encode(array("server_response" => $CityRegion));
        } else {
            echo "TokenError";
        }
    }

    public function GetRegDiscountValue($IdRegion)
    {
        $IdRegion = $this->dataBase->escape($IdRegion);


        $ExchangeRate = array();

        $query = "select Exchange_Rate FROM togo.Region where id=$IdRegion";

        // $query="Select * from CityRegion Where RegionId='$IdRegion'";
        $result = $this->dataBase->query($query);
        $numOFrow = $this->dataBase->numRows($result);
        $row = $this->dataBase->fetchArray($result);
        if ($numOFrow > 0) {

            array_push($ExchangeRate, array("Exchange_Rate" => $row['Exchange_Rate']));
            echo json_encode(array("server_response" => $ExchangeRate));
        } else echo "no data";
    }

    // $myarrayCity, $myarrayTime (removed)
    public function SetWorkTranspoterParameter($CustomerId, $TokenDevice) // nonofofo
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            // if($this->CheckBlockedCustomer($CustomerId) == false)
            // {
            //     if($this->CheckAcceptedTransporter($CustomerId) == true)
            //     {
            $CheckInsertCity = 1;
            $CheckInsertWork = 1;
            $CheckInsertCityFinshed = false;
            $CheckInsertWorkFinished = false;
            $Status = array();

            $query_getCities = "select id, name from togo.citytable";
            $result_getCities = $this->dataBase->query($query_getCities);

            $citiesArr = array();

            if ($result_getCities) {
                while ($row_getCities = $this->dataBase->fetchArray($result_getCities)) {
                    array_push($citiesArr, array("id" => $row_getCities['id'], "name" => $row_getCities['name']));
                }
            } else {
                echo "getCitiesError";
                return;
            }

            $query_Check_customer_Exists = "Select * from togo.TransporterWorkCity Where CustomerId='$CustomerId'";
            $result_check_Cistomer = $this->dataBase->query($query_Check_customer_Exists);
            $row_count = $this->dataBase->numRows($result_check_Cistomer);
            if ($row_count > 0) {
                $CheckInsertCityFinshed = true;
                $CheckInsertCity = 2;
            } else {
                /* foreach ($myarrayCity['TransportrCity'] as $Cityitem) {
                    $IdCity = $Cityitem['IdCity'];

                    $query = "Insert Into TransporterWorkCity (CustomerId,CityId) Values ('$CustomerId','$IdCity')";
                    $result = $this->dataBase->query($query);
                    if ($result == true) {
                        $CheckInsertCityFinshed = true;
                        $CheckInsertCity = $CheckInsertCity * 1;
                        // $CheckInsertCityFinshed=$CheckInsertCityFinshed*1;
                    } else {
                        $CheckInsertCityFinshed = true;
                        $CheckInsertCity = 0;
                        $CheckInsertCityFinshed = 0;
                    }
                } */

                /////////////////////////////////////

                // insert new TransporterWorkCity

                for ($i = 0; $i < count($citiesArr); $i++) {
                    $IdCity = $citiesArr[$i]['id'];
                    $query_insertWorkCities = "Insert Into togo.TransporterWorkCity (CustomerId,CityId) Values ('$CustomerId','$IdCity')";
                    $result_insertWorkCities = $this->dataBase->query($query_insertWorkCities);

                    if ($result_insertWorkCities == true) {
                        $CheckInsertCityFinshed = true;
                        $CheckInsertCity = $CheckInsertCity * 1;
                    } else {
                        $CheckInsertCityFinshed = true;
                        $CheckInsertCity = 0;
                        $CheckInsertCityFinshed = 0;
                    }
                }
            }

            $query_Check_customer_Exists_Work = "Select * from togo.WorkDaysTime Where CustomerId='$CustomerId'";
            $result_check_Customer_Work = $this->dataBase->query($query_Check_customer_Exists_Work);
            $row_count_Work = $this->dataBase->numRows($result_check_Customer_Work);

            if ($row_count_Work > 0) {
                $CheckInsertWorkFinished = true;
                $CheckInsertWork = 2;
            } else {
                /* foreach ($myarrayTime['TransportrTime'] as $WorkItem) {
                    $check_All_Time = $WorkItem['AllTimeFlag'];
                    if ($check_All_Time == "1") {
                        $From = $WorkItem['AllTimeStart'];
                        $End = $WorkItem['AllTimeFinish'];

                        $query_Set_Work_Day = "Insert into WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$CustomerId','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End') ";

                        $result_Set_Work_Day = $this->dataBase->query($query_Set_Work_Day);
                        if ($result_Set_Work_Day == true) {
                            $CheckInsertWorkFinished = true;
                            $CheckInsertWork = $CheckInsertWork * 1;
                        } else {
                            $CheckInsertWorkFinished = true;
                            $CheckInsertWork = 0;
                        }
                    } else {
                        $SatTimeStart = $WorkItem['SatTimeStart'];
                        $SatTimeFinish = $WorkItem['SatTimeFinish'];
                        $SunTimeStart = $WorkItem['SunTimeStart'];
                        $SunTimeFinish = $WorkItem['SunTimeFinish'];
                        $MonTimeStart = $WorkItem['MonTimeStart'];
                        $MonTimeFinish = $WorkItem['MonTimeFinish'];
                        $TueTimeStart = $WorkItem['TueTimeStart'];
                        $TueTimeFinish = $WorkItem['TueTimeFinish'];
                        $WenTimeStart = $WorkItem['WenTimeStart'];
                        $WenTimeFinish = $WorkItem['WenTimeFinish'];
                        $ThuTimeStart = $WorkItem['ThuTimeStart'];
                        $ThuTimeFinish = $WorkItem['ThuTimeFinish'];
                        $FriTimeStart = $WorkItem['FriTimeStart'];
                        $FriTimeFinish = $WorkItem['FriTimeFinish'];

                        $query_Set_Work_Day = "Insert into WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$CustomerId','$SatTimeStart','$SatTimeFinish','$SunTimeStart','$SunTimeFinish','$MonTimeStart','$MonTimeFinish','$TueTimeStart','$TueTimeFinish','$WenTimeStart','$WenTimeFinish','$ThuTimeStart','$ThuTimeFinish','$FriTimeStart','$FriTimeFinish') ";

                        $result_Set_Work_Day = $this->dataBase->query($query_Set_Work_Day);

                        if ($result_Set_Work_Day == true) {
                            $CheckInsertWorkFinished = true;
                            $CheckInsertWork = $CheckInsertWork * 1;
                        } else {
                            $CheckInsertWorkFinished = true;
                            $CheckInsertWork = 0;
                        }
                    }
                } */

                /////////////////////////////////////

                // insert new WorkDaysTime

                $SatTimeStart = '2018-10-23 12:15:00';
                $SatTimeFinish = '2018-10-23 12:15:00';
                $SunTimeStart = '2018-10-23 12:15:00';
                $SunTimeFinish = '2018-10-23 12:15:00';
                $MonTimeStart = '2018-10-23 12:15:00';
                $MonTimeFinish = '2018-10-23 12:15:00';
                $TueTimeStart = '2018-10-23 12:15:00';
                $TueTimeFinish = '2018-10-23 12:15:00';
                $WenTimeStart = '2018-10-23 12:15:00';
                $WenTimeFinish = '2018-10-23 12:15:00';
                $ThuTimeStart = '2018-10-23 12:15:00';
                $ThuTimeFinish = '2018-10-23 12:15:00';
                $FriTimeStart = '2018-10-23 12:15:00';
                $FriTimeFinish = '2018-10-23 12:15:00';

                $query_Set_Work_Day = "Insert into togo.WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$CustomerId','$SatTimeStart','$SatTimeFinish','$SunTimeStart','$SunTimeFinish','$MonTimeStart','$MonTimeFinish','$TueTimeStart','$TueTimeFinish','$WenTimeStart','$WenTimeFinish','$ThuTimeStart','$ThuTimeFinish','$FriTimeStart','$FriTimeFinish') ";

                $result_Set_Work_Day = $this->dataBase->query($query_Set_Work_Day);

                if ($result_Set_Work_Day == true) {
                    $CheckInsertWorkFinished = true;
                    $CheckInsertWork = $CheckInsertWork * 1;
                } else {
                    $CheckInsertWorkFinished = true;
                    $CheckInsertWork = 0;
                }
            }

            if ($CheckInsertCityFinshed == false) {
                $CheckInsertCity = 4;
            }

            if ($CheckInsertWorkFinished == false) {
                $CheckInsertWork = 4;
            }

            //////////////////////////////////////////

            // create initial cities prices table:

            /* for ($i = 0; $i < count($citiesArr); $i++) {
                for ($j = 0; $j < count($citiesArr); $j++) {

                    $transId = $CustomerId;
                    $id1 = $citiesArr[$i]['id'];
                    $name1 = $citiesArr[$i]['name'];
                    $id2 = $citiesArr[$j]['id'];
                    $name2 = $citiesArr[$j]['name'];

                    $query3 = "insert into transporterroadprice (transporterId, fromCityId, fromCityName, toCityId, toCityName, deliveryPrice) 
                    values ('$transId', '$id1', '$name1', '$id2', '$name2', 20)";
                    $result3 = $this->dataBase->query($query3);
                }
            } */

            $CheckAddRecordPrice = "1";

            for ($i = 0; $i < count($citiesArr); $i++) { // nonououo
                $transId = $CustomerId;
                $tempCityId = $citiesArr[$i]['id'];
                $query_addRecordPrice = "insert into togo.roadpricestable" . $tempCityId . " (transporterId) values ('$transId')";

                $result_addRecordPrice = $this->dataBase->query($query_addRecordPrice);

                if ($result_addRecordPrice == true) {
                    $CheckAddRecordPrice = "1";
                } else {
                    $CheckAddRecordPrice = "2";
                }
            }

            //////////////////////////////////////////

            array_push($Status, array("StatusCity" => $CheckInsertCity, "StatusWork" => $CheckInsertWork, "StatusPrices" => $CheckAddRecordPrice));
            echo json_encode(array("server_response" => $Status));
        } else {
            echo "TokenError";
        }
    }

    public function GetCityPhotosBidEngin($CustomerId, $TokenDevice, $Idlanguage, $IdRegion)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $Idlanguage = $this->dataBase->escape($Idlanguage);
        $IdRegion = $this->dataBase->escape($IdRegion);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {

            $PhotosArray = array();
            $CityArray = array();
            $query_Get_City = "Select Distinct cityId As CityId ,name as CityName from togo.citylang Where languageId='$Idlanguage'";

            // $query_Get_City="Select * from CityRegion where RegionId='$IdRegion' AND languageId='$Idlanguage'";
            $result_Get_City = $this->dataBase->query($query_Get_City);

            while ($row = $this->dataBase->fetchArray($result_Get_City)) {
                array_push($CityArray, array("IdCity" => $row['CityId'], "Name" => $row['CityName'], "LatRegion" => "", "LongRegion" => ""));
            }

            $query_Get_Vehicl = "Select * from togo.VehiclType Where (IsHide IS NULL OR IsHide=0)";
            $result_Get_Vehicl = $this->dataBase->query($query_Get_Vehicl);
            while ($row = $this->dataBase->fetchArray($result_Get_Vehicl)) {
                array_push($PhotosArray, array("vehicleId" => $row['id'], "PhotoUrl" => $row['VehiclPhoto'] . ""));
            }

            $data = array("Photos" => $PhotosArray, "Citys" => $CityArray);
            echo json_encode($data);
        } else {
            echo "TokenError";
        }
    }

    public function ClientAssignOrder($CustomerId, $TransporterId, $OrderId, $DeliveryCost, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                if ($this->CheckAcceptedTransporter($CustomerId) == true) {

                    /* edited (add order status -> "Order Assigned", clientAssigneeId) */
                    $query_Take_Order = "Update togo.OrderBidEngin set IsAcceptDelivery=0,DeliveryId='$TransporterId',OriginalDeliveryId='$TransporterId',ClientAssignAccepted=0,AssignedByClient=1, order_status='Order Assigned', clientAssigneeId='$TransporterId' Where id='$OrderId'";
                    $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                    $query_Set_Price = "Insert into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery) Values ('$OrderId','$TransporterId','$DeliveryCost')";
                    $result_Set_Price = $this->dataBase->query($query_Set_Price);
                    $query_Get_Token_Transporter = "Select Token As TokenNotify, WebToken As webTokenNotifiy From togo.Customer where id = '$TransporterId'";

                    /* edited (record the action) */
                    // $party_one_id, $party_two_id $order_id, $description, $action_id
                    $this->recordAction($CustomerId, $TransporterId, $OrderId, -1, '', "Order Assigned", 10);

                    $tokens = array();
                    $webTokens = array();

                    $Result_query = $this->dataBase->query($query_Get_Token_Transporter);

                    while ($row = $this->dataBase->fetchArray($Result_query)) {
                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $client = $this->getClientBusinessAndLogo($CustomerId);

                    if ($client['BusinessName'] == 'null') {
                        $client_names = $this->getClientName($CustomerId);
                        $client['BusinessName'] = $client_names['FullName'];
                    }

                    $data = array(
                        'orderId' => $OrderId,
                        'clientName' => $client['BusinessName'],
                        'clientImageUrl' => $client['LogoUrl'],
                        'intent' => 'newAssignedOrder'
                    );

                    $title = "Order Assigned";
                    $body = $client['BusinessName'] . " assigned order " . $OrderId . " to me";
                    // $image = $client['LogoUrl'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                    echo "Assigned";
                } else
                    echo "NotAccepted";
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    public function CreateAssignedOrder($DeliveryParams, $AddressClint, $CustomerId, $TransporterId, $DeliveryCost, $TokenDevice)
    {
        // temp
        echo "notWorking!";
        return;

        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if (
            $this->CheckToken($CustomerId, $TokenDevice) == true ||
            $this->CheckSbytaniToken($CustomerId, $TokenDevice) == true
        ) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                if ($this->CheckAcceptedTransporter($CustomerId) == true) {
                    $deliveryWay = $DeliveryParams['deliveryWay'];
                    $CostLoad = $DeliveryParams['CostLoad'];

                    if ($deliveryWay == 1) {
                        $varr = $this->BalanceIsEnough($CustomerId, $DeliveryCost);
                        if ($varr == 1) {
                            echo "have enough balance client";
                        } else {
                            echo "NoClientBalance";
                            return;
                        }
                    } else if ($deliveryWay == 2) {
                        $var = $this->BalanceIsEnough($CustomerId, $DeliveryCost);
                        if ($var == 1) {
                            $varr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                            if ($varr == 1) {
                                echo 'have enough balance transporter';
                            } else {
                                echo "NoTransporterBalance";
                                return;
                            }
                            echo 'have enough balance client';
                        } else {
                            echo "NoClientBalance";
                            return;
                        }
                    }
                    $DetailsLoad = $DeliveryParams['DetailsLoad'];
                    $LengthLoad = $DeliveryParams['LengthLoad'];
                    $WidthLoad = $DeliveryParams['WidthLoad'];
                    $HeightLoad = $DeliveryParams['HeightLoad'];
                    $WeightLoad = $DeliveryParams['WeightLoad'];
                    $DateLoad = "CURRENT_TIMESTAMP";
                    $TypeLoad = $DeliveryParams['TypeLoad'];
                    $qrCode = $DeliveryParams['qrCode'];

                    /* edited (add order status -> 'Order Assigned', clientAssigneeId) */
                    if (!empty($qrCode)) {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,DeliveryId,OriginalDeliveryId,AssignedByClient,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, qr_code, order_status, clientAssigneeId)
                                 Values ('$CustomerId','$TransporterId','$TransporterId',1,'$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$qrCode', 'Order Assigned', '$TransporterId')";
                    } else {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,DeliveryId,OriginalDeliveryId,AssignedByClient,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, order_status, clientAssigneeId)
                                  Values ('$CustomerId','$TransporterId','$TransporterId',1,'$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', 'Order Assigned', '$TransporterId')";
                    }


                    $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                    if ($result_Insert_Order == true) {
                        $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt)FROM togo.OrderBidEngin)";
                        $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                        /* edited (record the action) */
                        // $party_one_id, $party_two_id $order_id, $description, $action_id
                        $this->recordAction($CustomerId, $TransporterId, $row_LastId_Order['id'], $DeliveryCost, '', "Order Created and Assigned", 18);

                        $Id_Last_Order = $row_LastId_Order['id'];
                        $IdCity = $AddressClint['IdCity'];
                        $IdArea = $AddressClint['IdArea'];
                        $OtherDetails = $AddressClint['OtherDetails'];
                        $SenderAddressId = $AddressClint['SenderAddressId'];
                        $ReciverAddressId = $AddressClint['ReciverAddressId'];
                        $IdCityDes = $AddressClint['IdCityDes'];
                        $IdAreaDes = $AddressClint['IdAreaDes'];
                        $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                        $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                        $LatSender = $AddressClint['LatSender'];
                        $LongSender = $AddressClint['LongSender'];
                        $LatReciver = $AddressClint['LatReciver'];
                        $LongReciver = $AddressClint['LongReciver'];
                        $Code_Verify = mt_rand(1000, 9999);
                        //$Code_Verify=5555;
                        if (empty($LatSender))
                            $LatSender = "0";
                        if (empty($LongSender))
                            $LongSender = "0";
                        if (empty($LatReciver))
                            $LatReciver = "0";
                        if (empty($LongReciver))
                            $LongReciver = "0";

                        $query_Set_Address_Order = "Insert into togo.OrderBidAddress (IdOrderBidEngin,IdCity, IdArea,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes, IdAreaDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,SenderAddressId,ReciverAddressId)
								Values ('$Id_Last_Order','$IdCity','$IdArea',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes', '$IdAreaDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify','$SenderAddressId','$ReciverAddressId')";

                        $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                        $query_Set_Bar_Code = "Update togo.OrderBidEngin set qr_code = '$Id_Last_Order' where id = '$Id_Last_Order'";

                        $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                        $query_Set_Price = "Insert into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery) Values ('$Id_Last_Order','$TransporterId','$DeliveryCost')";
                        $result_Set_Price = $this->dataBase->query($query_Set_Price);

                        if ($result_Address_Order == true) {
                            $query_Get_Token_Transporter = "Select Token As TokenNotify, WebToken As webTokenNotifiy From togo.customer where id = '$TransporterId'";

                            $tokens = array();
                            $webTokens = array();

                            $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                            while ($row = $this->dataBase->fetchArray($Result_query)) {
                                if ($row['TokenNotify'] != null) {
                                    array_push($tokens, $row['TokenNotify']);
                                }

                                if ($row['webTokenNotifiy'] != null) {
                                    array_push($webTokens, $row['webTokenNotifiy']);
                                }
                            }

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $client = $this->getClientBusinessAndLogo($CustomerId);

                            if ($client['BusinessName'] == 'null') {
                                $client_names = $this->getClientName($CustomerId);
                                $client['BusinessName'] = $client_names['FullName'];
                            }

                            $data = array(
                                'orderId' => $Id_Last_Order,
                                'clientName' => $client['BusinessName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'newAssignedOrder'
                            );

                            $title = "Order Created and Assigned";
                            $body = $client['BusinessName'] . " created and assigned order " . $Id_Last_Order . " to me";
                            // $image = $client['LogoUrl'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            $OrderIdArray = array();
                            array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                            echo json_encode(array("server_response" => $OrderIdArray));
                        } else {
                            echo "ErrorInAddress";
                        }
                    } else {
                        echo "NotInserted";
                    }
                } else
                    echo "NotAccepted";
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    /* edited (add getClientPersonalInfo) */
    public function getSenderInfo($clientId)
    {
        $client_query = "SELECT ct.FirstName, ct.LastName, ct.Email, cust.PhoneNumber as phone, cbt.BusinessName 
        FROM togo.customer as cust 
        inner join togo.clienttable as ct 
        inner join togo.clientbusinesstable as cbt on cust.id=ct.CustomerId and cust.id=cbt.CustomerId 
        where cust.id='$clientId'";
        $result_query = $this->dataBase->query($client_query);
        $res_arr = $this->dataBase->fetchArray($result_query);

        // echo json_encode(array("server_response" => $res_arr));
        return $res_arr;
    }

    public function test123()
    {
        $arr = array("name" => "test", "id" => 15);
        echo json_encode($arr);
    }

    public function CreateSbytaniOrder($DeliveryParams, $AddressClint, $CustomerId, $TransporterId, $DeliveryCost, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckSbytaniToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                if ($this->CheckAcceptedTransporter($CustomerId) == true) {
                    $deliveryWay = $DeliveryParams['deliveryWay'];
                    $CostLoad = $DeliveryParams['CostLoad'];

                    if ($deliveryWay == 1) {
                        $varr = $this->BalanceIsEnough($CustomerId, $DeliveryCost);
                        if ($varr == 1) {
                            echo "have enough balance client";
                        } else {
                            echo "NoClientBalance";
                            return;
                        }
                    } else if ($deliveryWay == 2) {
                        $var = $this->BalanceIsEnough($CustomerId, $DeliveryCost);
                        if ($var == 1) {
                            $varr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                            if ($varr == 1) {
                                echo 'have enough balance transporter';
                            } else {
                                echo "NoTransporterBalance";
                                return;
                            }
                            echo 'have enough balance client';
                        } else {
                            echo "NoClientBalance";
                            return;
                        }
                    }
                    $DetailsLoad = $DeliveryParams['DetailsLoad'];
                    $LengthLoad = $DeliveryParams['LengthLoad'];
                    $WidthLoad = $DeliveryParams['WidthLoad'];
                    $HeightLoad = $DeliveryParams['HeightLoad'];
                    $WeightLoad = $DeliveryParams['WeightLoad'];
                    $DateLoad = "CURRENT_TIMESTAMP";
                    $TypeLoad = $DeliveryParams['TypeLoad'];
                    $qrCode = $DeliveryParams['qrCode'];

                    /* edited (add order status -> 'Order Assigned', clientAssigneeId) */
                    if (!empty($qrCode)) {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,DeliveryId,OriginalDeliveryId,AssignedByClient,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, qr_code, order_status, clientAssigneeId)
                                 Values ('$CustomerId','$TransporterId','$TransporterId',1,'$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$qrCode', 'Order Assigned', '$TransporterId')";
                    } else {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,DeliveryId,OriginalDeliveryId,AssignedByClient,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, order_status, clientAssigneeId)
                                  Values ('$CustomerId','$TransporterId','$TransporterId',1,'$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', 'Order Assigned', '$TransporterId')";
                    }


                    $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                    if ($result_Insert_Order == true) {
                        $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt) FROM togo.OrderBidEngin)";
                        $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                        /* edited (record the action) */
                        // $party_one_id, $party_two_id $order_id, $description, $action_id
                        $this->recordAction($CustomerId, $TransporterId, $row_LastId_Order['id'], $DeliveryCost, '', "Order Created and Assigned", 18);

                        $Id_Last_Order = $row_LastId_Order['id'];
                        $IdCity = $AddressClint['IdCity'];
                        $OtherDetails = $AddressClint['OtherDetails'];
                        $SenderAddressId = $AddressClint['SenderAddressId'];
                        $ReciverAddressId = $AddressClint['ReciverAddressId'];
                        $IdCityDes = $AddressClint['IdCityDes'];
                        $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                        $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                        $LatSender = $AddressClint['LatSender'];
                        $LongSender = $AddressClint['LongSender'];
                        $LatReciver = $AddressClint['LatReciver'];
                        $LongReciver = $AddressClint['LongReciver'];
                        $Code_Verify = mt_rand(1000, 9999);
                        //$Code_Verify=5555;
                        if (empty($LatSender))
                            $LatSender = "0";
                        if (empty($LongSender))
                            $LongSender = "0";
                        if (empty($LatReciver))
                            $LatReciver = "0";
                        if (empty($LongReciver))
                            $LongReciver = "0";

                        $query_Set_Address_Order = "Insert into togo.OrderBidAddress (IdOrderBidEngin,IdCity,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,SenderAddressId,ReciverAddressId)
								Values ('$Id_Last_Order','$IdCity',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify','$SenderAddressId','$ReciverAddressId')";

                        $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                        $query_Set_Bar_Code = "Update togo.OrderBidEngin set qr_code = '$Id_Last_Order' where id = '$Id_Last_Order'";

                        $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                        $query_Set_Price = "Insert into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery) Values ('$Id_Last_Order','$TransporterId','$DeliveryCost')";
                        $result_Set_Price = $this->dataBase->query($query_Set_Price);

                        if ($result_Address_Order == true) {
                            $query_Get_Token_Transporter = "Select Token As TokenNotify, WebToken As webTokenNotifiy From togo.Customer where id = '$TransporterId'";

                            $tokens = array();
                            $webTokens = array();

                            $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                            while ($row = $this->dataBase->fetchArray($Result_query)) {
                                if ($row['TokenNotify'] != null) {
                                    array_push($tokens, $row['TokenNotify']);
                                }

                                if ($row['webTokenNotifiy'] != null) {
                                    array_push($webTokens, $row['webTokenNotifiy']);
                                }
                            }

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $client = $this->getClientBusinessAndLogo($CustomerId);

                            if ($client['BusinessName'] == 'null') {
                                $client_names = $this->getClientName($CustomerId);
                                $client['BusinessName'] = $client_names['FullName'];
                            }

                            $data = array(
                                'orderId' => $Id_Last_Order,
                                'clientName' => $client['BusinessName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'newAssignedOrder'
                            );


                            $title = "Sbytani Order Created";
                            $body = $client['BusinessName'] . " created order " . $Id_Last_Order;
                            // $image = $client['LogoUrl'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            $OrderIdArray = array();
                            array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                            echo json_encode(array("server_response" => $OrderIdArray));
                        } else {
                            echo "ErrorInAddress";
                        }
                    } else {
                        echo "NotInserted";
                    }
                } else
                    echo "NotAccepted";
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    // edited, new function added to create client order from the new form (used on web for now)
    public function OrderBidEnginParamsClient($DeliveryParams, $AddressClint, $isNewAddress, $CustomerId, $TokenDevice)
    {

        if ($DeliveryParams['oldOrderId'] && false) {
            // echo json_encode($DeliveryParams);

            $Id_Last_Order = 1111;
            $IdCity = $AddressClint['IdCity'];
            $IdArea = $AddressClint['IdArea'];
            $OtherDetails = $AddressClint['OtherDetails'];
            $LatSender = $AddressClint['LatSender'];
            $LongSender = $AddressClint['LongSender'];
            $LatReciver = $AddressClint['LatReciver'];
            $LongReciver = $AddressClint['LongReciver'];
            $IdCityDes = $AddressClint['IdCityDes'];
            $IdAreaDes = $AddressClint['IdAreaDes'];
            $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
            $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
            $Code_Verify = mt_rand(1000, 9999);
            $SenderAddressId = $AddressClint['SenderAddressId'];
            $ReciverAddressId = $AddressClint['ReciverAddressId'];

            $testArr = array(
                'Id_Last_Order' => $Id_Last_Order,
                'IdCity' => $IdCity,
                'IdArea' => $IdArea,
                'OtherDetails' => $OtherDetails,
                'LatSender' => $LatSender,
                'LongSender' => $LongSender,
                'LatReciver' => $LatReciver,
                'LongReciver' => $LongReciver,
                'IdCityDes' => $IdCityDes,
                'IdAreaDes' => $IdAreaDes,
                'OtherDetailsDes' => $OtherDetailsDes,
                'ReceiverAddressNum' => $ReceiverAddressNum,
                'Code_Verify' => $Code_Verify,
                'SenderAddressId' => $SenderAddressId,
                'ReciverAddressId' => $ReciverAddressId
            );

            echo json_encode($testArr);

            return;
        }

        $data = " ************************************************************************************************ ";
        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $AddressClint = $this->dataBase->escape($AddressClint);
        $DeliveryParams = $this->dataBase->escape($DeliveryParams);

        if (
            $this->CheckToken($CustomerId, $TokenDevice) == true // ||
            // $this->CheckSbytaniToken($CustomerId, $TokenDevice) == true
        ) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                if ($this->CheckAcceptedTransporter($CustomerId) == true) {
                    $Idvehicle = "NULL";
                    $deliveryWay = $DeliveryParams['deliveryWay'];
                    $DetailsLoad = $DeliveryParams['DetailsLoad'];
                    $LengthLoad = $DeliveryParams['LengthLoad'];
                    $WidthLoad = $DeliveryParams['WidthLoad'];
                    $HeightLoad = $DeliveryParams['HeightLoad'];
                    $WeightLoad = $DeliveryParams['WeightLoad'];
                    $CostLoad = $DeliveryParams['CostLoad'];
                    $DateLoad = "CURRENT_TIMESTAMP";
                    $TypeLoad = $DeliveryParams['TypeLoad'];
                    $qrCode = $DeliveryParams['qrCode'];
                    $currency = $DeliveryParams['currency'];
                    
                    if ($DeliveryParams['oldOrderId']) {
                        $CostLoad = $DeliveryParams['returnedCost'];

                        $data = "order is returned with cost: [" . $CostLoad . "]";
                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                    }

                    if ($CostLoad == 0) {
                        $deliveryWay = 1;
                    }

                    // echo $currency . " -$- " . gettype($currency);

                    $from_currency_value = null;
                    if ($currency == 2) {
                        $from_currency_value = $CostLoad;
                        $CostLoad = $this->JODtoILS($CostLoad);
                    }

                    /* $is_approved = 1;
                    if ($CostLoad >= 1500) {
                        $is_approved = 0;
                    } */

                    if (!empty($qrCode)) {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, qr_code, order_status, currency, from_currency_value)
                                 Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$qrCode', 'Waiting for Bids', '$currency', '$from_currency_value')";
                    } else {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, order_status, currency, from_currency_value)
                                  Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', 'Waiting for Bids', '$currency', '$from_currency_value')";
                    }

                    $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                    if ($result_Insert_Order == true) {

                        // $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt) FROM togo.OrderBidEngin)";
                        $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE CustomerId='$CustomerId' ORDER BY id DESC LIMIT 1";
                        $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                        /* $row_LastId_Order = $this->dataBase->getLastIdInserted(); */

                        $this->recordAction($CustomerId, -1, $row_LastId_Order['id'], -1, '', "Order Created", 2);

                        $Id_Last_Order = $row_LastId_Order['id'];

                        if ($DeliveryParams['oldOrderId']) {
            
                            // 1- update old order action  "returned"
                            // 2- after inserting the new order, set old-order-reference to the old order id

                            $old_order_id = $DeliveryParams['oldOrderId'];

                            $this->recordAction($CustomerId, -1, $old_order_id, -1, 'Order Returned', "Order returned in order [" . $Id_Last_Order . "]", 30);

                            $query_update_old_order_ref = "UPDATE togo.orderbidengin SET old_order_ref = '$old_order_id' WHERE id = '$Id_Last_Order'";
                            $result_update_old_order_ref = $this->dataBase->query($query_update_old_order_ref);

                            $update_old_order_ref = "query success";
                            if (!$result_update_old_order_ref) {
                                $update_old_order_ref = "query error";
                            }
                
                            $data = "old order reference set to [" . $old_order_id . "] and action recorded to old order, update_old_order_ref " . $update_old_order_ref;
                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                            // return;
                        }

                        $data = "order [" . $Id_Last_Order . "] inserted";
                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                        // sender info
                        $IdCity = $AddressClint['IdCity'];
                        $IdArea = $AddressClint['IdArea'];
                        $OtherDetails = $AddressClint['OtherDetails'];
                        $SenderAddressId = $AddressClint['SenderAddressId'];
                        $LatSender = $AddressClint['LatSender'];
                        $LongSender = $AddressClint['LongSender'];

                        if ($isNewAddress == "1") {
                            // receiver info
                            $IdCityDes = $AddressClint['IdCityDes'];
                            $IdAreaDes = $AddressClint['IdAreaDes'];

                            $IdProvDes = $AddressClint['IdProvDes'];
                            $IdGovDes = $AddressClint['IdGovDes'];
                            $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                            $LatReciver = $AddressClint['LatReciver'];
                            $LongReciver = $AddressClint['LongReciver'];
                            $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                            $receiverZipCode = $AddressClint['zipCode'];
                            $receiverCountry = $AddressClint['country'];
                            $isShared = $AddressClint['isShared'];
                            $additionalInfo = $AddressClint['additionalInfo'];
                            $receiverAddressName = $AddressClint['addressName'];

                            // add the new receiver address
                            $newAddressId = $this->createNewOrderAddress($receiverAddressName, $ReceiverAddressNum, $OtherDetailsDes, $additionalInfo, $receiverCountry, $receiverZipCode, $isShared, $CustomerId, $CustomerId, $IdCityDes, $IdProvDes, $IdGovDes, $IdAreaDes);

                            // to set
                            $ReciverAddressId = $newAddressId;

                            $data = "new address [" . $ReciverAddressId . "] inserted";
                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                        } else {
                            $ReciverAddressId = $AddressClint['ReciverAddressId'];
                            $IdCityDes = $AddressClint['IdCityDes'];
                            $IdAreaDes = $AddressClint['IdAreaDes'];
                            $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                            $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                            $LatReciver = $AddressClint['LatReciver'];
                            $LongReciver = $AddressClint['LongReciver'];
                        }

                        $Code_Verify = mt_rand(1000, 9999);
                        //$Code_Verify=5555;
                        if (empty($LatSender))
                            $LatSender = "0";
                        if (empty($LongSender))
                            $LongSender = "0";
                        if (empty($LatReciver))
                            $LatReciver = "0";
                        if (empty($LongReciver))
                            $LongReciver = "0";

                        $query_Set_Address_Order = "Insert into togo.OrderBidAddress (
                            IdOrderBidEngin,
                            IdCity,
                            IdArea,
                            OtherDetails,
                            LatSender,
                            LongSender,
                            LatReciver,
                            LongReciver,
                            IdCityDes,
                            IdAreaDes,
                            OtherDetailsDes,
                            ReceiverAddressNum,
                            CodeVerifyReciver,
                            SenderAddressId,
                            ReciverAddressId
                        )
						Values (
                            '$Id_Last_Order',
                            '$IdCity',
                            N'$IdArea',
                            N'$OtherDetails',
                            '$LatSender',
                            '$LongSender',
                            '$LatReciver',
                            '$LongReciver',
                            '$IdCityDes',
                            N'$IdAreaDes',
                            N'$OtherDetailsDes',
                            '$ReceiverAddressNum',
                            '$Code_Verify',
                            '$SenderAddressId',
                            '$ReciverAddressId'
                        )";

                        $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                        $query_Set_Bar_Code = "UPDATE togo.OrderBidEngin SET qr_code = '$Id_Last_Order' WHERE id = '$Id_Last_Order'";

                        $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                        if ($result_Address_Order == true) {

                            $data = "order bid address inserted";
                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                            // if order is a returned version then get transporter info and add it to an active "Bid Accepted" order

                            if ($DeliveryParams['oldOrderId']) {
                                // get transporter id and price
                                // and check for foreign transporter

                                $query_get_transporter_id_and_price = "SELECT
                                bids.CostDelivery AS old_transportation_price,
                                bids.IdTransporter AS old_transporter_id,
                                transporter.super_foreign_company_id
                                FROM togo.orderbidengin AS engin
                                LEFT OUTER JOIN togo.deliveryacceptordertable AS bids ON engin.id = bids.IdOrder AND engin.DeliveryId = bids.IdTransporter
                                LEFT OUTER JOIN togo.transportertable AS transporter ON bids.IdTransporter = transporter.CustomerId
                                WHERE engin.id = '$old_order_id'";
                                $result_get_transporter_id_and_price = $this->dataBase->query($query_get_transporter_id_and_price);

                                if (!$result_get_transporter_id_and_price) {
                                    $data = "get_transporter_id query error";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    return;
                                }

                                $row_get_transporter_id_and_price = $this->dataBase->fetchArray($result_get_transporter_id_and_price);
                                $old_transporter_id = $row_get_transporter_id_and_price['old_transporter_id'];
                                $old_transportation_price = $row_get_transporter_id_and_price['old_transportation_price'];
                                $super_foreign_company_id = $row_get_transporter_id_and_price['super_foreign_company_id'];

                                $data = "old transporter id and delivery price: [" . $old_transporter_id . " - " . $old_transportation_price . "], super-foreign-id: [" . $super_foreign_company_id . "]";
                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                // do as if the offer is already accepted
                                // insert timeline
                                // insert deliveryaccepttable
                                // do the transactions

                                if ($super_foreign_company_id == 2) {
                                    // create logestechs order

                                        $DeliveryParams = array();
                                        $AddressClint = array();
    
                                        // get order info:
    
                                        $query_getOrderInfo = "select 
                                        engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                        orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                        senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                        receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                        from togo.orderbidengin as engine
                                        inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                        inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                        inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                        where engine.id='$Id_Last_Order'";
    
                                        $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);
    
                                        if ($result_getOrderInfo) {
    
                                            $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);
    
                                            $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                            $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                            $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                            $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                            $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                            $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                            $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                            $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                            $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];
    
                                            $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                            $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                            $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                            $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                            $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                            $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];
    
                                            $this->createLogestechsOrder($DeliveryParams, $AddressClint, $CustomerId, $old_transporter_id, $Id_Last_Order);
                                        } else {
                                            $data = "getOrderInfo query error";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                        }
                                } else if ($super_foreign_company_id == 3) {
                                    // create olivry order

                                        $DeliveryParams = array();
                                        $AddressClint = array();
    
                                        // get order info:
    
                                        $query_getOrderInfo = "select 
                                            engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                            orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                            senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                            receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                            from togo.orderbidengin as engine
                                            inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                            inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                            inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                            where engine.id='$Id_Last_Order'";
    
                                        $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);
    
                                        if ($result_getOrderInfo) {
    
                                            $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);
    
                                            $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                            $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                            $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                            $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                            $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                            $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                            $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                            $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                            $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];
    
                                            $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                            $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                            $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                            $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                            $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                            $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];
    
                                            $this->createOliveryOrder($DeliveryParams, $AddressClint, $CustomerId, $old_transporter_id, $Id_Last_Order);
                                        } else {
                                            $data = "getOrderInfo query error";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                        }
                                } else {
                                    // proceed as normal ->
                                }

                                $query_Take_Order = "UPDATE togo.OrderBidEngin SET IsAcceptDelivery=1, DeliveryId='$old_transporter_id', OriginalDeliveryId='$old_transporter_id', order_status='Bid Accepted', currentTransporterId='$old_transporter_id' WHERE id='$Id_Last_Order'";
                                $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                                if (!$Result_Take_Order) {
                                    $data = "update_order_status_to_active query error";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    return;
                                }

                                $assignDate = date("Y-m-d H:i:s");
                                $query_add_accepted_transporter = "INSERT INTO togo.transporterstimelinetb 
                                (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) VALUES
                                ('$Id_Last_Order', '$old_transporter_id', '$assignDate', '$old_transportation_price', 1)";
                                $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                                if (!$result_add_accepted_transporter) {
                                    $data = "add_accepted_transporter query error";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    return;
                                }

                                $query_insert_bid = "INSERT INTO togo.DeliveryAcceptOrderTable (IdOrder, IdTransporter, CostDelivery)
                                VALUES ('$Id_Last_Order', '$old_transporter_id', '$old_transportation_price')";

                                $result_insert_bid = $this->dataBase->query($query_insert_bid);

                                if (!$result_insert_bid) {
                                    $data = "insert_bid query error";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    return;
                                }

                                $var = $this->BalanceIsEnough($CustomerId, $CostLoad + $old_transportation_price);
                                if ($var == 1) {
                                    $this->move_to_escrow($CustomerId, $Id_Last_Order, $old_transportation_price);
                                    $this->move_to_escrow($CustomerId, $Id_Last_Order, $CostLoad);
                                } else {
                                    $data = "merchant balance is not enough";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    return;
                                }
                                
                                // $this->NetworkSetCostOrder($old_transporter_id, $Id_Last_Order, $old_transportation_price); // falafel

                            } else {

                                // check if merchant is_exclusive work with a speciic transporter
                                // if is_exclusive = 1 -> create foreign order...

                                // TODO...
                                
                                $query_check_if_exclusive = "SELECT is_exclusive FROM togo.clienttable WHERE CustomerId = '$CustomerId'";
                                $result_check_if_exclusive = $this->dataBase->query($query_check_if_exclusive);

                                if (!$result_check_if_exclusive) {
                                    $data = "check_if_exclusive query error";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                }

                                $row_check_if_exclusive = $this->dataBase->fetchArray($result_check_if_exclusive);
                                $is_exclusive = $row_check_if_exclusive['is_exclusive'];

                                if ($is_exclusive == 1) {

                                    $data = "exclusive";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    
                                    // create foreign order

                                    // get the only network member this client have
                                    
                                    $query_get_transporter_id_and_forein_id = "SELECT 
                                    client_network.TransporterId,
                                    transportertable.super_foreign_company_id
                                    FROM togo.client_network
                                    INNER JOIN togo.transportertable ON client_network.TransporterId = transportertable.CustomerId
                                    WHERE client_network.ClientId = '$CustomerId' and client_network.deleted = 0 LIMIT 1";
                                    $result_get_transporter_id_and_forein_id = $this->dataBase->query($query_get_transporter_id_and_forein_id);

                                    if (!$result_get_transporter_id_and_forein_id) {
                                        $data = "get_transporter_id query error";
                                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    }

                                    $row_get_transporter_id_and_forein_id = $this->dataBase->fetchArray($result_get_transporter_id_and_forein_id);
                                    $transporter_id = $row_get_transporter_id_and_forein_id['TransporterId'];
                                    $transporter_super_foreign_id = $row_get_transporter_id_and_forein_id['super_foreign_company_id'];

                                    $data = "transporter_id: " . $transporter_id;
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                    $DeliveryParams = array();
                                    $AddressClint = array();

                                    // set cost //////////////////////////////////////

                                    // destination governorate
                                    $query_getDestProvId = "select gov.id as govId
                                    from togo.areatable as area 
                                    inner join togo.citytable as city on area.cityId = city.id 
                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                    where area.id = '$IdAreaDes'";
                                    $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                    $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                    $dest_govId = $row_getDestProvId['govId'];

                                    // source governorate
                                    $query_getSourceProvId = "select gov.id as govId
                                    from togo.areatable as area 
                                    inner join togo.citytable as city on area.cityId = city.id 
                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                    where area.id = '$IdArea'";
                                    $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                    $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                    $source_govId = $row_getSourceProvId['govId'];

                                    if ($source_govId == 5) {
                                        $source = "jerusalem";
                                    } else if ($source_govId == 69) {
                                        $source = "jordan";
                                    } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                        $source = "areas48";
                                    } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                        $source = "gaza";
                                    } else {
                                        $source = "westbank";
                                    }

                                    if ($dest_govId == 5) {
                                        $destination = "jerusalem";
                                    } else if ($dest_govId == 69) {
                                        $destination = "jordan";
                                    } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                        $destination = "areas48";
                                    } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                        $destination = "gaza";
                                    } else {
                                        $destination = "westbank";
                                    }

                                    $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                    if ($source == "westbank" && $destination == "westbank") {
                                        $areasColName = "WestbankToWestbank";
                                    } else if ($source == "westbank" && $destination == "jerusalem") {
                                        $areasColName = "WestbankToJerusalem";
                                    } else if ($source == "westbank" && $destination == "areas48") {
                                        $areasColName = "WestbankToAreas48";
                                    } else if ($source == "westbank" && $destination == "jordan") {
                                        $areasColName = "WestbankToJordan";
                                    } else if ($source == "jerusalem" && $destination == "westbank") {
                                        $areasColName = "JerusalemToWestbank";
                                    } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                        $areasColName = "JerusalemToJerusalem";
                                    } else if ($source == "jerusalem" && $destination == "areas48") {
                                        $areasColName = "JerusalemToAreas48";
                                    } else if ($source == "jerusalem" && $destination == "jordan") {
                                        $areasColName = "JerusalemToJordan";
                                    } else if ($source == "areas48" && $destination == "westbank") {
                                        $areasColName = "Areas48ToWestbank";
                                    } else if ($source == "areas48" && $destination == "jerusalem") {
                                        $areasColName = "Areas48ToJerusalem";
                                    } else if ($source == "areas48" && $destination == "areas48") {
                                        $areasColName = "Areas48ToAreas48";
                                    } else if ($source == "areas48" && $destination == "jordan") {
                                        $areasColName = "Areas48ToJordan";
                                    }

                                    $data = "areas column = (" . $areasColName . ")";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                            
                                    $query_get_client_price = "SELECT " . $areasColName . " AS price FROM togo.merchantpricelist WHERE merchantId = '$CustomerId'";
                                    $result_get_client_price = $this->dataBase->query($query_get_client_price);
                                    $row_get_client_price = $this->dataBase->fetchArray($result_get_client_price);
                                    $cost_price = $row_get_client_price['price'];

                                    // check client balance

                                    $var = $this->BalanceIsEnough($CustomerId, $cost_price);
                                    if ($var != 1) {
                                        echo "clientBalanceError";

                                        $data = "client balance not enough, cost-delivery: [" . $cost_price . "]";
                                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                        return;
                                    }

                                    $data = "cost_price = [" . $cost_price . "]";
                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
    
                                    // get order info: ///////////////////////////////////////
    
                                    $query_getOrderInfo = "SELECT 
                                    engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                    orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                    senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                    receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                    from togo.orderbidengin as engine
                                    inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                    inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                    inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                    where engine.id='$Id_Last_Order'";
    
                                    $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);
    
                                    if ($result_getOrderInfo) {

                                        $data = "transporter info fetched";
                                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
    
                                        $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                        $cod = $row_getOrderInfo['CostLoad'];
                                        $var = $this->BalanceIsEnough($transporter_id, $cod);
                                        if ($var != 1) {
                                            echo "transporterBalanceError";

                                            $data = "transporter balance not enough, cod: [" . $cod . "]";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                            return;
                                        }

                                        $this->NetworkSetCostOrder($transporter_id, $Id_Last_Order, $cost_price);

                                        $assignDate = date("Y-m-d H:i:s");
                                        $query_add_accepted_transporter = "INSERT INTO togo.transporterstimelinetb 
                                        (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) VALUES
                                        ('$Id_Last_Order', '$old_transporter_id', '$assignDate', '$old_transportation_price', 1)";
                                        $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                                        $assignDate = date("Y-m-d H:i:s");
                                        $query_add_accepted_transporter = "INSERT INTO togo.transporterstimelinetb 
                                        (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) VALUES
                                        ('$Id_Last_Order', '$transporter_id', '$assignDate', '$cost_price', 1)";
                                        $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);
    
                                        $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                        $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                        $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                        $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                        $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                        $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                        $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                        $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                        $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];
    
                                        $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                        $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                        $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                        $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                        $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                        $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];
                                        
                                        if ($transporter_super_foreign_id == 2) {
                                            $this->createLogestechsOrder($DeliveryParams, $AddressClint, $CustomerId, $transporter_id, $Id_Last_Order);
                                        } // else ... (add for olivery)

                                        // set as active order

                                        $delivery_type = $DeliveryParams['deliveryWay'];

                                        if ($delivery_type == 1) {
                                            $this->move_to_escrow($CustomerId, $Id_Last_Order, $cost_price);
                                        } else if ($delivery_type == 2) {
                                            $this->move_to_escrow($transporter_id, $Id_Last_Order, $cod);
                                            $this->move_to_escrow($CustomerId, $Id_Last_Order, $cost_price);
                                        } else {
                                            echo "deliveryWay error, " . $delivery_type;
                                            
                                            $data = "delivery type error error";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                            
                                            return;
                                        }

                                        $query_update_active_order = "UPDATE togo.orderbidengin SET IsAcceptDelivery = 1, DeliveryId = '$transporter_id', OriginalDeliveryId='$transporter_id', order_status = 'Bid Accepted', currentTransporterId='$transporter_id' WHERE id = '$Id_Last_Order'";
                                        $result_update_active_order = $this->dataBase->query($query_update_active_order);


                                    } else {
                                        $data = "getOrderInfo query error";
                                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                    }

                                } else {
                                    // add automatic offers from netwerk:

                                    // 1- get network
                                    // 2- add bid on behalf of each one (if automatic offer is activated from the tansporter side)

                                    /* 
                                    // whith prices table
                                    $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                        cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, priceTb." . $IdCity . "_" . $IdCityDes . " as price 
                                        from togo.client_network as client_net
                                        inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                        inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                        inner join togo.roadpricestable" . $IdCity . " as priceTb on client_net.TransporterId = priceTb.transporterId
                                        where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                        AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                        AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";
                                    */

                                    // without prices table
                                    $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                        cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image
                                        from togo.client_network as client_net
                                        inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                        inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                        
                                        where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                        AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                        AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";

                                    $result_get_client_network = $this->dataBase->query($query_get_client_network);
                                    $row_count = $this->dataBase->numRows($result_get_client_network);

                                    if ($result_get_client_network && $row_count > 0) { // what if there are no network members

                                        $data = "network found";
                                        file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                        // bid on behalf of network
                                        $bids_count = 0;
                                        while ($row_network = $this->dataBase->fetchArray($result_get_client_network)) {

                                            $transId = $row_network['idTransporter'];

                                            $data = "network member [" . $transId . "] found";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                            if ($row_network['super_foreign_company_id'] == 2) {
                                                // if the transporter is logestechs' transporter

                                                $data = "network member [" . $transId . "] is logestechs' transporter";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                // get logestechs' transporter' company id:

                                                /* $query_getForeigCompanyId = "select company_id, togo_company_id from togo.logestechs_transporter_info where togo_trans_id = '$transId'";
                                                $result_getForeigCompanyId = $this->dataBase->query($query_getForeigCompanyId);
                                                $row_getForeigCompanyId = $this->dataBase->fetchArray($result_getForeigCompanyId);

                                                $foreign_company_id = $row_getForeigCompanyId['company_id'];
                                                $togoForeignId = $row_getForeigCompanyId['togo_company_id'];

                                                $data = "network member [" . $transId . "], foreign_company_id = [" . $foreign_company_id . "], togoForeignId = [" . $togoForeignId . "]";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND); */

                                                // get logestechs' transporter price:

                                                // check for logestechs' transporter price
                                                /* $prices = $this->checkLogestechsPrice($foreign_company_id, $togoForeignId, $IdArea, $IdAreaDes);

                                                $data = "prices = [" . $prices . "]";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND); */

                                                if (/* $prices != "-1" && $prices != "-2" */true) { // mynono2
                                                    // make offer nono

                                                    // tofo
                                                    /* $cost_price = explode("-", $prices)[0];
                                                    $deal_price = explode("-", $prices)[1];
                                                    $cost_price = floatval($cost_price);
                                                    $deal_price = floatval($deal_price); */

                                                    // get proince by area id and switch the price (west: 20 -- 48: 70 -- jerusalem: 30)

                                                    /* $query_getSrcProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdArea'";
                                                    $result_getSrcProvId = $this->dataBase->query($query_getSrcProvId);
                                                    $row_getSrcProvId = $this->dataBase->fetchArray($result_getSrcProvId);
                                                    $src_govId = $row_getSrcProvId['govId']; */

                                                    // fixed price orderbidenginparamsclient logestechs

                                                    // destination governorate
                                                    $query_getDestProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdAreaDes'";
                                                    $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                    $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                    $dest_govId = $row_getDestProvId['govId'];

                                                    // source governorate
                                                    $query_getSourceProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdArea'";
                                                    $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                                    $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                                    $source_govId = $row_getSourceProvId['govId'];

                                                    if ($source_govId == 5) {
                                                        $source = "jerusalem";
                                                    } else if ($source_govId == 69) {
                                                        $source = "jordan";
                                                    } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                                        $source = "areas48";
                                                    } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                                        $source = "gaza";
                                                    } else {
                                                        $source = "westbank";
                                                    }

                                                    if ($dest_govId == 5) {
                                                        $destination = "jerusalem";
                                                    } else if ($dest_govId == 69) {
                                                        $destination = "jordan";
                                                    } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                                        $destination = "areas48";
                                                    } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                                        $destination = "gaza";
                                                    } else {
                                                        $destination = "westbank";
                                                    }

                                                    $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                    /* if ($source == "westbank" && $destination == "westbank") {
                                                        $cost_price = 20;
                                                    } else if ($source == "westbank" && $destination == "jerusalem") {
                                                        $cost_price = 30;
                                                    } else if ($source == "westbank" && $destination == "areas48") {
                                                        $cost_price = 70;
                                                    } else if ($source == "westbank" && $destination == "jordan") {
                                                        $cost_price = 70;
                                                    } else if ($source == "jerusalem" && $destination == "westbank") {
                                                        $cost_price = 30;
                                                    } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                        $cost_price = 30;
                                                    } else if ($source == "jerusalem" && $destination == "areas48") {
                                                        $cost_price = 70; // !!!!
                                                    } else if ($source == "jerusalem" && $destination == "jordan") {
                                                        $cost_price = 70; // !!!!
                                                    } else {
                                                        $cost_price = 20; // !!!!
                                                    } */

                                                    if ($source == "westbank" && $destination == "westbank") {
                                                        $areasColName = "WestbankToWestbank";
                                                    } else if ($source == "westbank" && $destination == "jerusalem") {
                                                        $areasColName = "WestbankToJerusalem";
                                                    } else if ($source == "westbank" && $destination == "areas48") {
                                                        $areasColName = "WestbankToAreas48";
                                                    } else if ($source == "westbank" && $destination == "jordan") {
                                                        $areasColName = "WestbankToJordan";
                                                    } else if ($source == "jerusalem" && $destination == "westbank") {
                                                        $areasColName = "JerusalemToWestbank";
                                                    } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                        $areasColName = "JerusalemToJerusalem";
                                                    } else if ($source == "jerusalem" && $destination == "areas48") {
                                                        $areasColName = "JerusalemToAreas48";
                                                    } else if ($source == "jerusalem" && $destination == "jordan") {
                                                        $areasColName = "JerusalemToJordan";
                                                    } else if ($source == "areas48" && $destination == "westbank") {
                                                        $areasColName = "Areas48ToWestbank";
                                                    } else if ($source == "areas48" && $destination == "jerusalem") {
                                                        $areasColName = "Areas48ToJerusalem";
                                                    } else if ($source == "areas48" && $destination == "areas48") {
                                                        $areasColName = "Areas48ToAreas48";
                                                    } else if ($source == "areas48" && $destination == "jordan") {
                                                        $areasColName = "Areas48ToJordan";
                                                    }

                                                    $data = "areas column = (" . $areasColName . ")";
                                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                            
                                                    $query_get_client_price = "SELECT " . $areasColName . " AS price FROM togo.merchantpricelist WHERE merchantId = '$CustomerId'";
                                                    $result_get_client_price = $this->dataBase->query($query_get_client_price);
                                                    $row_get_client_price = $this->dataBase->fetchArray($result_get_client_price);
                                                    $cost_price = $row_get_client_price['price'];

                                                    $data = "cost_price = [" . $cost_price . "]";
                                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                    $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price); // boboboboboTo
                                                    // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $deal_price, -1);
                                                    $bids_count++;
                                                }
                                            } else if ($row_network['super_foreign_company_id'] == 3) {

                                                $this->recordDebug("olivery-network-transporter spotted", $CustomerId, $transId, $Id_Last_Order);

                                                // if the transporter is olivery' 

                                                // 1- get olivery' transporter' matching source and destination areas

                                                // ################## (search by province id, if nor\t existed then by governorate id and so on...)

                                                // a. check for province
                                                // b. check for governorate
                                                // c. check for city
                                                // d. check fro area

                                                // get area, city, governorate, and province ids for both source and destination

                                                $query_get_src_and_dest_ids = "select senderaddress.areaId as srcArea, senderaddress.cityId as srcCity, senderaddress.governoratId as srcGov, senderaddress.provinceId as srcProv,
                                                receiveraddress.areaId as destArea, receiveraddress.cityId as destCity, receiveraddress.governoratId as destGov, receiveraddress.provinceId as destProv
                                                from togo.orderbidengin as engin
                                                inner join togo.orderbidaddress as orderaddress on engin.id = orderaddress.IdOrderBidEngin
                                                inner join togo.addresses as senderaddress on orderaddress.SenderAddressId = senderaddress.id
                                                inner join togo.addresses as receiveraddress on orderaddress.ReciverAddressId = receiveraddress.id
                                                where engin.id = '$Id_Last_Order'";

                                                $result_get_src_and_dest_ids = $this->dataBase->query($query_get_src_and_dest_ids);
                                                $row_get_src_and_dest_ids = $this->dataBase->fetchArray($result_get_src_and_dest_ids);

                                                $srcArea = $row_get_src_and_dest_ids['srcArea'];
                                                $srcCity = $row_get_src_and_dest_ids['srcCity'];
                                                $srcGov = $row_get_src_and_dest_ids['srcGov'];
                                                $srcProv = $row_get_src_and_dest_ids['srcProv'];

                                                $destArea = $row_get_src_and_dest_ids['destArea'];
                                                $destCity = $row_get_src_and_dest_ids['destCity'];
                                                $destGov = $row_get_src_and_dest_ids['destGov'];
                                                $destProv = $row_get_src_and_dest_ids['destProv'];

                                                $this->recordDebug(
                                                    "srcArea: (" . $srcArea . ") -- srcCity: (" . $srcCity . ") --- srcGov: (" . $srcGov . ") srcProv: (" . $srcProv
                                                        . ") >>>> destArea: (" . $destArea . ") -- destCity: (" . $destCity . ") --- destGov: (" . $destGov . ") destProv: (" . $destProv . ")",
                                                    $CustomerId,
                                                    $transId,
                                                    $Id_Last_Order
                                                );

                                                // source area
                                                $query_check_src_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                                $query_check_src_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                                $query_check_src_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                                $query_check_src_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                                $this->recordDebug("after src queries", $CustomerId, $transId, $Id_Last_Order);

                                                $result_check_src_prov = $this->dataBase->query($query_check_src_prov);
                                                $num_rows_check_src_prov = $this->dataBase->numRows($result_check_src_prov);

                                                $result_check_src_gov = $this->dataBase->query($query_check_src_gov);
                                                $num_rows_check_src_gov = $this->dataBase->numRows($result_check_src_gov);

                                                $result_check_src_city = $this->dataBase->query($query_check_src_city);
                                                $num_rows_check_src_city = $this->dataBase->numRows($result_check_src_city);

                                                $result_check_src_area = $this->dataBase->query($query_check_src_area);
                                                $num_rows_check_src_area = $this->dataBase->numRows($result_check_src_area);

                                                $this->recordDebug("after src results", $CustomerId, $transId, $Id_Last_Order);

                                                $olivery_src_area_name = "";

                                                if ($num_rows_check_src_prov > 0) {
                                                    // $this->recordDebug("src-prov if begin - count: " . $num_rows_check_src_prov , $CustomerId, $transId, $Id_Last_Order);
                                                    $row_check_src_prov = $this->dataBase->fetchArray($result_check_src_prov);
                                                    $olivery_src_area_name = $row_check_src_prov['oliveryAreaName'];
                                                    // $this->recordDebug("src-prov if end" . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);
                                                } else if ($num_rows_check_src_gov > 0) {
                                                    $row_check_src_gov = $this->dataBase->fetchArray($result_check_src_gov);
                                                    $olivery_src_area_name = $row_check_src_gov['oliveryAreaName'];
                                                } else if ($num_rows_check_src_city > 0) {
                                                    $row_check_src_city = $this->dataBase->fetchArray($result_check_src_city);
                                                    $olivery_src_area_name = $row_check_src_city['oliveryAreaName'];
                                                } else if ($num_rows_check_src_area > 0) {
                                                    $row_check_src_area = $this->dataBase->fetchArray($result_check_src_area);
                                                    $olivery_src_area_name = $row_check_src_area['oliveryAreaName'];
                                                }

                                                // $this->recordDebug("source olivery area: " . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                // destination area
                                                $query_check_dest_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                                $query_check_dest_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                                $query_check_dest_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                                $query_check_dest_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                                $result_check_dest_prov = $this->dataBase->query($query_check_dest_prov);
                                                $num_rows_check_dest_prov = $this->dataBase->numRows($result_check_dest_prov);

                                                $result_check_dest_gov = $this->dataBase->query($query_check_dest_gov);
                                                $num_rows_check_dest_gov = $this->dataBase->numRows($result_check_dest_gov);

                                                $result_check_dest_city = $this->dataBase->query($query_check_dest_city);
                                                $num_rows_check_dest_city = $this->dataBase->numRows($result_check_dest_city);

                                                $result_check_dest_area = $this->dataBase->query($query_check_dest_area);
                                                $num_rows_check_dest_area = $this->dataBase->numRows($result_check_dest_area);

                                                $olivery_dest_area_name = "";

                                                if ($num_rows_check_dest_prov > 0) {
                                                    $row_check_dest_prov = $this->dataBase->fetchArray($result_check_dest_prov);
                                                    $olivery_dest_area_name = $row_check_dest_prov['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_gov > 0) {
                                                    $row_check_dest_gov = $this->dataBase->fetchArray($result_check_dest_gov);
                                                    $olivery_dest_area_name = $row_check_dest_gov['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_city > 0) {
                                                    $row_check_dest_city = $this->dataBase->fetchArray($result_check_dest_city);
                                                    $olivery_dest_area_name = $row_check_dest_city['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_area > 0) {
                                                    $row_check_dest_area = $this->dataBase->fetchArray($result_check_dest_area);
                                                    $olivery_dest_area_name = $row_check_dest_area['oliveryAreaName'];
                                                }

                                                // $this->recordDebug("target olivery area: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                /* $query_get_source_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdArea' and transporter_id = '$transId'";
                                                $result_get_source_area_name = $this->dataBase->query($query_get_source_area_name);
                                                $num_row_get_source_area_name = $this->dataBase->numRows($result_get_source_area_name);

                                                $query_get_target_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdAreaDes' and transporter_id = '$transId'";
                                                $result_get_target_area_name = $this->dataBase->query($query_get_target_area_name);
                                                $num_row_get_target_area_name = $this->dataBase->numRows($result_get_target_area_name); */

                                                if (/* $num_row_get_source_area_name > 0 && $num_row_get_target_area_name > 0 */$olivery_src_area_name != "" && $olivery_dest_area_name != "") {

                                                    $this->recordDebug("source area name: " . $olivery_src_area_name . " - target area name: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                    /* $row_get_source_area_name = $this->dataBase->fetchArray($olivery_src_area_name);
                                                    $source_area_name = $row_get_source_area_name['oliveryAreaName'];

                                                    $row_get_target_area_name = $this->dataBase->fetchArray($olivery_dest_area_name);
                                                    $target_area_name = $row_get_target_area_name['oliveryAreaName']; */

                                                    // 2- get olivery' price
                                                    // 2-a- get transporter username and password
                                                    $query_get_user_pass = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$transId'";
                                                    $result_get_user_pass = $this->dataBase->query($query_get_user_pass);
                                                    $row_get_user_pass = $this->dataBase->fetchArray($result_get_user_pass);
                                                    $username = $row_get_user_pass['username'];
                                                    $password = $row_get_user_pass['password'];

                                                    // 2-b- get the price
                                                    $this->recordDebug("username: " . $username . " --- password: " . $password, $CustomerId, $transId, $Id_Last_Order);
                                                    $delivery_price = $this->getOliveryPrice($username, $password, $olivery_src_area_name, $olivery_dest_area_name);

                                                    $this->recordDebug("delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                    if ($delivery_price != "-1" && $delivery_price != "0") {

                                                        $delivery_price = floatval($delivery_price);
                                                        // $delivery_price = $delivery_price * 1.1765;
                                                        $delivery_price = round($delivery_price * 2) / 2;                                                

                                                        $this->recordDebug("delivery_price after rounded: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                        // 2-c- get ((((logestechs))))) areas to get general price to calculate togo margin

                                                        $market_price = $this->getLogetechsGeneralPrice($IdArea, $IdAreaDes);

                                                        $this->recordDebug("market_price: " . $market_price, $CustomerId, $transId, $Id_Last_Order);

                                                        // make the offer

                                                        if ($market_price != "-1" && $market_price != "-2"/* true */) { // [to remove comment if deal] (get deal and market price from olivery if exist)
                                                            $market_price = floatval($market_price);

                                                            $this->recordDebug("olivery get offer, market_price: " . $market_price . " - delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                            // fixed price orderbidenginparamsclient olivery

                                                            // destination governorate
                                                            $query_getDestProvId = "select gov.id as govId
                                                            from togo.areatable as area 
                                                            inner join togo.citytable as city on area.cityId = city.id 
                                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                            where area.id = '$IdAreaDes'";
                                                            $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                            $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                            $dest_govId = $row_getDestProvId['govId'];

                                                            // source governorate
                                                            $query_getSourceProvId = "select gov.id as govId
                                                            from togo.areatable as area 
                                                            inner join togo.citytable as city on area.cityId = city.id 
                                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                            where area.id = '$IdArea'";
                                                            $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                                            $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                                            $source_govId = $row_getSourceProvId['govId'];

                                                            if ($source_govId == 5) {
                                                                $source = "jerusalem";
                                                            } else if ($source_govId == 69) {
                                                                $source = "jordan";
                                                            } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                                                $source = "areas48";
                                                            } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                                                $source = "gaza";
                                                            } else {
                                                                $source = "westbank";
                                                            }
                
                                                            if ($dest_govId == 5) {
                                                                $destination = "jerusalem";
                                                            } else if ($dest_govId == 69) {
                                                                $destination = "jordan";
                                                            } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                                                $destination = "areas48";
                                                            } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                                                $destination = "gaza";
                                                            } else {
                                                                $destination = "westbank";
                                                            }

                                                            $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                            /* if ($source == "westbank" && $destination == "westbank") {
                                                                $cost_price = 20;
                                                            } else if ($source == "westbank" && $destination == "jerusalem") {
                                                                $cost_price = 30;
                                                            } else if ($source == "westbank" && $destination == "areas48") {
                                                                $cost_price = 70;
                                                            } else if ($source == "westbank" && $destination == "jordan") {
                                                                $cost_price = 70;
                                                            } else if ($source == "jerusalem" && $destination == "westbank") {
                                                                $cost_price = 30;
                                                            } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                                $cost_price = 30;
                                                            } else if ($source == "jerusalem" && $destination == "areas48") {
                                                                $cost_price = 70; // !!!!
                                                            } else if ($source == "jerusalem" && $destination == "jordan") {
                                                                $cost_price = 70; // !!!!
                                                            } else {
                                                                $cost_price = 20; // !!!!
                                                            } */

                                                            if ($source == "westbank" && $destination == "westbank") {
                                                                $areasColName = "WestbankToWestbank";
                                                            } else if ($source == "westbank" && $destination == "jerusalem") {
                                                                $areasColName = "WestbankToJerusalem";
                                                            } else if ($source == "westbank" && $destination == "areas48") {
                                                                $areasColName = "WestbankToAreas48";
                                                            } else if ($source == "westbank" && $destination == "jordan") {
                                                                $areasColName = "WestbankToJordan";
                                                            } else if ($source == "jerusalem" && $destination == "westbank") {
                                                                $areasColName = "JerusalemToWestbank";
                                                            } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                                $areasColName = "JerusalemToJerusalem";
                                                            } else if ($source == "jerusalem" && $destination == "areas48") {
                                                                $areasColName = "JerusalemToAreas48";
                                                            } else if ($source == "jerusalem" && $destination == "jordan") {
                                                                $areasColName = "JerusalemToJordan";
                                                            } else if ($source == "areas48" && $destination == "westbank") {
                                                                $areasColName = "Areas48ToWestbank";
                                                            } else if ($source == "areas48" && $destination == "jerusalem") {
                                                                $areasColName = "Areas48ToJerusalem";
                                                            } else if ($source == "areas48" && $destination == "areas48") {
                                                                $areasColName = "Areas48ToAreas48";
                                                            } else if ($source == "areas48" && $destination == "jordan") {
                                                                $areasColName = "Areas48ToJordan";
                                                            }
                
                                                            $data = "areas column = (" . $areasColName . ")";
                                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                                    
                                                            $query_get_client_price = "SELECT " . $areasColName . " AS price FROM togo.merchantpricelist WHERE merchantId = '$CustomerId'";
                                                            $result_get_client_price = $this->dataBase->query($query_get_client_price);
                                                            $row_get_client_price = $this->dataBase->fetchArray($result_get_client_price);
                                                            $cost_price = $row_get_client_price['price'];
                
                                                            $data = "cost_price = [" . $cost_price . "]";
                                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                            // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $market_price, $delivery_price);
                                                            $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price);
                                                            // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $delivery_price, -1);
                                                            $bids_count++;
                                                        }
                                                    }
                                                }
                                            } else {

                                                // destination governorate
                                                $query_getDestProvId = "select gov.id as govId
                                                from togo.areatable as area 
                                                inner join togo.citytable as city on area.cityId = city.id 
                                                inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                where area.id = '$IdAreaDes'";
                                                $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                $dest_govId = $row_getDestProvId['govId'];

                                                // source governorate
                                                $query_getSourceProvId = "select gov.id as govId
                                                from togo.areatable as area 
                                                inner join togo.citytable as city on area.cityId = city.id 
                                                inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                where area.id = '$IdArea'";
                                                $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                                $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                                $source_govId = $row_getSourceProvId['govId'];

                                                if ($source_govId == 5) {
                                                    $source = "jerusalem";
                                                } else if ($source_govId == 69) {
                                                    $source = "jordan";
                                                } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                                    $source = "areas48";
                                                } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                                    $source = "gaza";
                                                } else {
                                                    $source = "westbank";
                                                }

                                                if ($dest_govId == 5) {
                                                    $destination = "jerusalem";
                                                } else if ($dest_govId == 69) {
                                                    $destination = "jordan";
                                                } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                                    $destination = "areas48";
                                                } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                                    $destination = "gaza";
                                                } else {
                                                    $destination = "westbank";
                                                }

                                                $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                /* if ($source == "westbank" && $destination == "westbank") {
                                                    $cost_price = 20;
                                                } else if ($source == "westbank" && $destination == "jerusalem") {
                                                    $cost_price = 30;
                                                } else if ($source == "westbank" && $destination == "areas48") {
                                                    $cost_price = 70;
                                                } else if ($source == "westbank" && $destination == "jordan") {
                                                    $cost_price = 70;
                                                } else if ($source == "jerusalem" && $destination == "westbank") {
                                                    $cost_price = 30;
                                                } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                    $cost_price = 30;
                                                } else if ($source == "jerusalem" && $destination == "areas48") {
                                                    $cost_price = 70; // !!!!
                                                } else if ($source == "jerusalem" && $destination == "jordan") {
                                                    $cost_price = 70; // !!!!
                                                } else {
                                                    $cost_price = 20; // !!!!
                                                } */

                                                if ($source == "westbank" && $destination == "westbank") {
                                                    $areasColName = "WestbankToWestbank";
                                                } else if ($source == "westbank" && $destination == "jerusalem") {
                                                    $areasColName = "WestbankToJerusalem";
                                                } else if ($source == "westbank" && $destination == "areas48") {
                                                    $areasColName = "WestbankToAreas48";
                                                } else if ($source == "westbank" && $destination == "jordan") {
                                                    $areasColName = "WestbankToJordan";
                                                } else if ($source == "jerusalem" && $destination == "westbank") {
                                                    $areasColName = "JerusalemToWestbank";
                                                } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                    $areasColName = "JerusalemToJerusalem";
                                                } else if ($source == "jerusalem" && $destination == "areas48") {
                                                    $areasColName = "JerusalemToAreas48";
                                                } else if ($source == "jerusalem" && $destination == "jordan") {
                                                    $areasColName = "JerusalemToJordan";
                                                } else if ($source == "areas48" && $destination == "westbank") {
                                                    $areasColName = "Areas48ToWestbank";
                                                } else if ($source == "areas48" && $destination == "jerusalem") {
                                                    $areasColName = "Areas48ToJerusalem";
                                                } else if ($source == "areas48" && $destination == "areas48") {
                                                    $areasColName = "Areas48ToAreas48";
                                                } else if ($source == "areas48" && $destination == "jordan") {
                                                    $areasColName = "Areas48ToJordan";
                                                }

                                                $data = "areas column = (" . $areasColName . ")";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                                        
                                                $query_get_client_price = "SELECT " . $areasColName . " AS price FROM togo.merchantpricelist WHERE merchantId = '$CustomerId'";
                                                $result_get_client_price = $this->dataBase->query($query_get_client_price);
                                                $row_get_client_price = $this->dataBase->fetchArray($result_get_client_price);
                                                $cost_price = $row_get_client_price['price'];

                                                $data = "cost_price = [" . $cost_price . "]";
                                                file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $row_network['price']);
                                                $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price);
                                                $bids_count++;
                                            }

                                            $query_update_order_bids_count = "update togo.orderbidengin set bids_count = '$bids_count' where id = '$Id_Last_Order'";
                                            $result_update_order_bids_count = $this->dataBase->query($query_update_order_bids_count);
                                            // $row_update_order_bids_count = $this->dataBase->query($result_update_order_bids_count);

                                        }
                                    } else {
                                        // echo "clientNetworkError!";
                                    }
                                }

                                
                            }

                            // ---------------------------------------------------

                            // send notification was here........

                            /* $OrderIdArray = array();
                            array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                            echo json_encode(array("server_response" => $OrderIdArray)); */
                            echo $Id_Last_Order;

                            $data = " ************************************************************************************************ ";
                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
                        } else {
                            echo "ErrorInAddress";
                        }
                    } else {
                        echo "NotInserted";
                    }
                } else
                    echo "NotAccepted";
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    public function createNewLogestechsExclusiveClientOrder(
        $deliveryParams,
        $addresses,
        $isNewAddress,
        $CustomerId,
        $TokenDevice,
        $consignmentNo
        )
    {

        /* echo json_encode($addresses);
        return; */

        $data = " ************************************************************************************************ ";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $addresses = $this->dataBase->escape($addresses);
        $deliveryParams = $this->dataBase->escape($deliveryParams);

        // #########################################( check token )

            if (!$this->CheckToken($CustomerId, $TokenDevice)) {
                $data = "(error) token error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                echo json_encode(array("status" => "error", "error" => "token error"));
            }

        // #########################################( check if the customer is blocked )

            if ($this->CheckBlockedCustomer($CustomerId)) {
                $data = "(error) user blocked";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                echo json_encode(array("status" => "error", "error" => "user blocked"));
            }

        // #########################################( initiate delivery parameters )

            $delivery_type = $deliveryParams['deliveryWay']; // [1]: delivery, [2]: cash on delivery (cod), [3]: pickup, [4]: pay and pickup (pap)
            $order_notes = $deliveryParams['DetailsLoad'];
            $load_length = $deliveryParams['LengthLoad'];
            $load_width = $deliveryParams['WidthLoad'];
            $load_height = $deliveryParams['HeightLoad'];
            $load_weight = $deliveryParams['WeightLoad'];
            $load_cost = $deliveryParams['CostLoad'];
            $load_type = $deliveryParams['TypeLoad']; // [1]: food, [2]: small package and envelops, [3]: medium package, [4]: large package
            $currency = $deliveryParams['currency'];
            $old_order_id = $deliveryParams['oldOrderId']; // if order is returned
            $create_date = date("Y-m-d H:i:s");

            // log
            $data = "(info) delivery params: [CustomerId: " . $CustomerId . ", isNewAddress: " . $isNewAddress . ", delivery_type: " . $delivery_type . ", order_notes: " . $order_notes . ", load_cost: " . $load_cost . ", load_type: " . $load_type . ", currency: " . $currency . ", create_date: " . $create_date . ", old_order_idL: " . $old_order_id . "]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // #########################################( check load-cost and delivery type )

            $delivery_type_name = "";

            switch ($delivery_type) {
                case "1":
                    $delivery_type_name = "delivery";
                    break;
                case "2":
                    $delivery_type_name = "cash on delivery";
                    break;
                case "3":
                    $delivery_type_name = "pickup";
                    break;
                case "4":
                    $delivery_type_name = "pay and pickup";
                    break;
                default:
                    echo json_encode(array("status" => "error", "error" => "invalid delivery type: " . $delivery_type));

                    // log
                    $data = "(error) invalid delivery type: " . $delivery_type;
                    file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    return;
            }

            if ($load_cost == 0 && ($delivery_type == 2 || $delivery_type == 4)) {
                echo json_encode(array("status" => "error", "error" => "delivery type is [" . $delivery_type_name . "] with 0.0 load cost"));

                // log
                $data = "(error) delivery type is [" . $delivery_type_name . "] with 0.0 load cost";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
            
                return;
            }

        // #########################################( check currency (1: ILS, 2: JOD) )

            $from_currency_value = null;

            if ($currency == 2) {
                // convert currency to shekel because all the transactions must be in shekel

                $from_currency_value = $load_cost;
                $load_cost = $this->JODtoILS($load_cost);
            }

        // #########################################( insert order record )

            $query_insert_order = "INSERT INTO togo.orderbidengin(
                CustomerId,
                deliveryWay,
                DetailsLoad,
                LengthLoad,
                WidthLoad,
                HeightLoad,
                WeightLoad,
                DateLoad,
                CostLoad,
                TypeLoad,
                order_status,
                currency,
                from_currency_value
            )
            Values (
                '$CustomerId',
                '$delivery_type',
                N'$order_notes',
                N'$load_length',
                N'$load_width',
                N'$load_height',
                N'$load_weight',
                '$create_date',
                '$load_cost',
                '$load_type',
                'Waiting for Bids',
                N'$currency',
                N'$from_currency_value'
            )";

            $result_insert_order = $this->dataBase->query($query_insert_order);

            if (!$result_insert_order) {
                echo json_encode(array("status" => "error", "error" => "insert_order query error"));

                // log
                $data = "(error) insert_order query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            // log
            $data = "(success) order record inserted";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // #########################################( get last inserted order-id )

            $query_get_last_order_id = "SELECT id FROM togo.OrderBidEngin WHERE CustomerId='$CustomerId' ORDER BY id DESC LIMIT 1";

            $result_get_last_order_id = $this->dataBase->query($query_get_last_order_id);

            if (!$result_get_last_order_id) {
                echo json_encode(array("status" => "error", "error" => "get_last_order_id query error"));

                // log
                $data = "(error) get_last_order_id query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_count_get_last_order_id = $this->dataBase->numRows($result_get_last_order_id);

            if ($row_count_get_last_order_id == 0) {
                echo json_encode(array("status" => "error", "error" => "last inserted order-id not found"));

                // log
                $data = "(error) last inserted order-id not found";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_get_last_order_id = $this->dataBase->fetchArray($result_get_last_order_id);

            $order_id = $row_get_last_order_id['id'];

            // log
            $data = "(success) last inserted order id: [" . $order_id . "]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // #########################################( initiate & insert addresses (sender & receiver) )

            // sender info
            $sender_village_id = $addresses['senderVillageId'];
            $sender_region_id = $addresses['senderRegionId'];
            $sender_other_details = $addresses['OtherDetails'];
            $sender_address_id = $addresses['SenderAddressId'];

            // log
            $data = "(info) sender info: [sender_address_id: " . $sender_address_id . ", sender_village_id: " . $sender_village_id . ", sender_region_id: " . $sender_region_id . ", sender_other_details: " . $sender_other_details . ", sender_longitude: " . $sender_longitude . ", sender_latitude: " . $sender_latitude . "]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
            
            //receiver info
            if ($isNewAddress == "1") {

                $receiver_village_id = $addresses['receiverVillageId'];
                $receiver_village_en_name = $addresses['receiverVillageEnName'];
                $receiver_village_ar_name = $addresses['receiverVillageArName'];
                $receiver_city_id = $addresses['receiverCityId'];
                $receiver_region_id = $addresses['receiverRegionId'];
                $receiver_region_name = $addresses['receiverRegionName'];
                $receiver_other_details = $addresses['OtherDetailsDes'];
                $receiver_phone = $addresses['ReceiverAddressNum'];
                $receiver_address_additional_info = $addresses['additionalInfo'];
                $receiver_address_name = $addresses['addressName'];

                // log
                $data = "(info) new address => receiver info: [receiver_village_id: " . $receiver_village_id . ", receiver_village_en_name: " . $receiver_village_en_name . ", receiver_village_ar_name: " . $receiver_village_ar_name . ", receiver_city_id: " . $receiver_city_id . ", receiver_region_id: " . $receiver_region_id . ", receiver_region_name: " . $receiver_region_name . ", receiver_other_details: " . $receiver_other_details . ", receiver_latitude: " . $receiver_latitude . ", receiver_longitude: " . $receiver_longitude . ", receiver_phone: " . $receiver_phone . ", receiver_address_additional_info: " . $receiver_address_additional_info . ", receiver_address_name: " . $receiver_address_name . "]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                // add the new receiver address
                $inserted_address_response = $this->createExclusiveLogestechsAddress_helper(
                    $receiver_address_name,
                    $receiver_phone,
                    $receiver_other_details,
                    $receiver_address_additional_info,
                    $CustomerId,
                    $CustomerId,
                    $receiver_city_id,
                    $receiver_region_id,
                    $receiver_village_id,
                    $receiver_village_en_name,
                    $receiver_village_ar_name,
                    $receiver_region_name
                );

                if ($inserted_address_response['status'] == "error") {
                    return;
                }

                // to set
                $receiver_address_id = $inserted_address_response['address_id'];
            } else {
                $receiver_address_id = $addresses['ReceiverAddressId'];
                $receiver_village_id = $addresses['receiverVillageId'];
                $receiver_region_id = $addresses['receiverRegionId'];
                $receiver_other_details = $addresses['OtherDetailsDes'];
                $receiver_phone = $addresses['ReceiverAddressNum'];

                // log
                $data = "(info) receiver info: [receiver_address_id: " . $receiver_address_id . ", receiver_phone: " . $receiver_phone . ", receiver_village_id: " . $receiver_village_id . ", receiver_region_id: " . $receiver_region_id . ", receiver_other_details: " . $receiver_other_details . ", receiver_longitude: " . $receiver_longitude . ", receiver_latitude: " . $receiver_latitude . "]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
            }

            // insert order addresses record

            $query_insert_order_addresses = "INSERT INTO togo.OrderBidAddress (
                IdOrderBidEngin,
                IdCity,
                IdArea,
                OtherDetails,
                IdCityDes,
                IdAreaDes,
                OtherDetailsDes,
                ReceiverAddressNum,
                SenderAddressId,
                ReciverAddressId
            )
            VALUES (
                '$order_id',
                '$sender_region_id',
                '$sender_village_id',
                '$sender_other_details',
                '$receiver_region_id',
                '$receiver_village_id',
                '$receiver_other_details',
                '$receiver_phone',
                '$sender_address_id',
                '$receiver_address_id'
            )";

            $result_insert_order_addresses = $this->dataBase->query($query_insert_order_addresses);

            if (!$result_insert_order_addresses) {

                echo json_encode(array("status" => "error", "error" => "insert_order_addresses query error"));

                // log
                $data = "(error) insert_order_addresses query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            // log
            $data = "(success) order addresses record inserted";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // #########################################( check if this custoemr is an exclusive customer )

            $query_check_if_exclusive = "SELECT is_exclusive FROM togo.clienttable WHERE CustomerId = '$CustomerId'";
            $result_check_if_exclusive = $this->dataBase->query($query_check_if_exclusive);

            if (!$result_check_if_exclusive) {

                echo json_encode(array("status" => "error", "error" => "check_if_exclusive query error"));

                // log
                $data = "(error) check_if_exclusive query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_count_check_if_exclusive = $this->dataBase->numRows($result_check_if_exclusive);

            if ($row_count_check_if_exclusive == 0) {
                echo json_encode(array("status" => "error", "error" => "customer not found"));

                // log
                $data = "(error) customer not found";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_check_if_exclusive = $this->dataBase->fetchArray($result_check_if_exclusive);
            $is_exclusive = $row_check_if_exclusive['is_exclusive'];

            if ($is_exclusive == 0) {
                echo json_encode(array("status" => "error", "error" => "client is not exclusive"));

                // log
                $data = "(error) client is not exclusive";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            // log
            $data = "(success) client is exclusive, is_exclusive: " . $is_exclusive;
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // #########################################( get transorter info )

            // get the only network member this client have

            $query_get_transporter_id_and_forein_id = "SELECT 
            client_network.TransporterId,
            transportertable.super_foreign_company_id
            FROM togo.client_network
            INNER JOIN togo.transportertable ON client_network.TransporterId = transportertable.CustomerId
            WHERE client_network.ClientId = '$CustomerId' and client_network.deleted = 0 LIMIT 1";

            $result_get_transporter_id_and_forein_id = $this->dataBase->query($query_get_transporter_id_and_forein_id);

            if (!$result_get_transporter_id_and_forein_id) {
                echo json_encode(array("status" => "error", "error" => "get_transporter_id query error"));

                // log
                $data = "(error) get_transporter_id query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_count_get_transporter_id_and_forein_id = $this->dataBase->numRows($result_get_transporter_id_and_forein_id);

            if ($row_count_get_transporter_id_and_forein_id == 0) {
                echo json_encode(array("status" => "error", "error" => "transporter not found"));

                // log
                $data = "(error) transporter not found";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_get_transporter_id_and_forein_id = $this->dataBase->fetchArray($result_get_transporter_id_and_forein_id);
            $transporter_id = $row_get_transporter_id_and_forein_id['TransporterId'];
            $transporter_super_foreign_id = $row_get_transporter_id_and_forein_id['super_foreign_company_id'];

        // #########################################( set prices )

            // check source and destination regions to get client pre-set price accordingly

            if ($sender_region_id == 2) {
                $source = "jerusalem";
            } else if ($sender_region_id == 33 || $sender_region_id == 884) {
                $source = "jordan";
            } else if ($sender_region_id == 4) {
                $source = "areas48";
            } else if ($sender_region_id == 14) {
                $source = "gaza";
            } else if ($sender_region_id == 1) {
                $source = "westbank";
            } else {
                $source = "";
            }

            if ($receiver_region_id == 2) {
                $destination = "jerusalem";
            } else if ($receiver_region_id == 33 || $receiver_region_id == 884) {
                $destination = "jordan";
            } else if ($receiver_region_id == 4) {
                $destination = "areas48";
            } else if ($receiver_region_id == 14) {
                $destination = "gaza";
            } else if ($receiver_region_id == 1) {
                $destination = "westbank";
            } else {
                $destination = "";
            }

            if ($source == "" || $destination == "") {
                echo json_encode(array("status" => "error", "error" => "unknown source or destination region id, [(sender_region_id: " . $sender_region_id . " => source: " . $source . "), (receiver_region_id: " . $receiver_region_id . " => destination: " . $destination . ")]"));

                // log
                $data = "(error) unknown source or destination region id, [(sender_region_id: " . $sender_region_id . " => source: " . $source . "), (receiver_region_id: " . $receiver_region_id . " => destination: " . $destination . ")]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            // log
            $data = "(info) regions: [(sender_region_id: " . $sender_region_id . " => source: " . $source . "), (receiver_region_id: " . $receiver_region_id . " => destination: " . $destination . ")]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            if ($source == "westbank" && $destination == "westbank") {
                $areasColName = "WestbankToWestbank";
            } else if ($source == "westbank" && $destination == "jerusalem") {
                $areasColName = "WestbankToJerusalem";
            } else if ($source == "westbank" && $destination == "areas48") {
                $areasColName = "WestbankToAreas48";
            } else if ($source == "westbank" && $destination == "jordan") {
                $areasColName = "WestbankToJordan";
            } else if ($source == "jerusalem" && $destination == "westbank") {
                $areasColName = "JerusalemToWestbank";
            } else if ($source == "jerusalem" && $destination == "jerusalem") {
                $areasColName = "JerusalemToJerusalem";
            } else if ($source == "jerusalem" && $destination == "areas48") {
                $areasColName = "JerusalemToAreas48";
            } else if ($source == "jerusalem" && $destination == "jordan") {
                $areasColName = "JerusalemToJordan";
            } else if ($source == "areas48" && $destination == "westbank") {
                $areasColName = "Areas48ToWestbank";
            } else if ($source == "areas48" && $destination == "jerusalem") {
                $areasColName = "Areas48ToJerusalem";
            } else if ($source == "areas48" && $destination == "areas48") {
                $areasColName = "Areas48ToAreas48";
            } else if ($source == "areas48" && $destination == "jordan") {
                $areasColName = "Areas48ToJordan";
            }

            // get client pre-defined price (sell price)

            // log
            $data = "(info) areas column = (" . $areasColName . ")";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            $query_get_client_price = "SELECT " . $areasColName . " AS price FROM togo.merchantpricelist WHERE merchantId = '$CustomerId'";
            $result_get_client_price = $this->dataBase->query($query_get_client_price);

            if (!$result_get_client_price) {
                echo json_encode(array("status" => "error", "error" => "get_client_price query error"));

                // log
                $data = "(error) get_client_price query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_count_get_client_price = $this->dataBase->numRows($result_get_client_price);

            if ($row_count_get_client_price == 0) {
                echo json_encode(array("status" => "error", "error" => "cleint sell-price not found"));

                // log
                $data = "(error) cleint sell-price not found";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $row_get_client_price = $this->dataBase->fetchArray($result_get_client_price);
            $delivery_sell_price = $row_get_client_price['price'];

            // log
            $data = "(success) delivery_sell_price: [" . $delivery_sell_price . "]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // insert order cost record (bid)

            $this->NetworkSetCostOrder($transporter_id, $order_id, $delivery_sell_price);

            $data = "(success) cost reqord set";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // insert accepted ransporter into transportation order timeline

            $assignDate = date("Y-m-d H:i:s");
            $query_add_accepted_transporter = "INSERT INTO togo.transporterstimelinetb 
            (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) VALUES
            ('$order_id', '$transporter_id', '$assignDate', '$delivery_sell_price', 1)";
            $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

            if (!$result_add_accepted_transporter) {
                echo json_encode(array("status" => "error", "error" => "add_accepted_transporter query error"));

                // log
                $data = "(error) add_accepted_transporter query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $data = "(success) timeline reqord set";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // update order to active order

            $query_update_active_order = "UPDATE togo.orderbidengin SET IsAcceptDelivery = 1, DeliveryId = '$transporter_id', OriginalDeliveryId='$transporter_id', order_status = 'Bid Accepted', currentTransporterId='$transporter_id' WHERE id = '$order_id'";
            $result_update_active_order = $this->dataBase->query($query_update_active_order);

            if (!$result_update_active_order) {
                echo json_encode(array("status" => "error", "error" => "update_active_order query error"));

                // log
                $data = "(error) update_active_order query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $data = "(success) order updated to active";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // check client balance

            $res = $this->BalanceIsEnough($CustomerId, $delivery_sell_price);
            if ($res != 1) {
                echo json_encode(array("status" => "error", "error" => "client balance not enough, delivery_sell_price: [" . $delivery_sell_price . "]"));

                // log
                $data = "(error) client balance not enough, delivery_sell_price: [" . $delivery_sell_price . "]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $data = "(success) client balance checked";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // check transporter balance

            $res = $this->BalanceIsEnough($transporter_id, $load_cost);
            if ($res != 1) {
                echo json_encode(array("status" => "error", "error" => "transporter balance not enough, cod: [" . $load_cost . "]"));

                $data = "transporter balance not enough, cod: [" . $load_cost . "]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $data = "(success) transporter balance checked";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // do the financials

            if ($delivery_type == 1) {
                $this->move_to_escrow($CustomerId, $order_id, $delivery_sell_price);
            } else if ($delivery_type == 2) {
                $this->move_to_escrow($transporter_id, $order_id, $load_cost);
                $this->move_to_escrow($CustomerId, $order_id, $delivery_sell_price);
            } else {
                echo json_encode(array("status" => "error", "error" => "delivery type error, delivery_type: " . $delivery_type));

                $data = "(error) delivery type error, delivery_type: " . $delivery_type;
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

        // #########################################( create logestechs order )

            if ($transporter_super_foreign_id != 2) {
                echo json_encode(array("status" => "error", "error" => "transporter super foreign id is not logestechs id, transporter_super_foreign_id: " . $transporter_super_foreign_id));

                $data = "(error) transporter super foreign id is not logestechs id, transporter_super_foreign_id: " . $transporter_super_foreign_id;
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return;
            }

            $create_logestechs_order_response = $this->createExclusiveLogestechsOrder($deliveryParams, $sender_address_id, $receiver_address_id, $CustomerId, $transporter_id, $order_id, $delivery_sell_price, $consignmentNo);

            /* if ($create_logestechs_order_response['status'] == "error") {
                return;
            } */

        $data = "(success) order created successfully, order_id: " . $order_id;
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        echo json_encode(array("status" => "success", "order_id" => $order_id));

        // get client name

        $query_get_client_name = "SELECT BusinessName FROM togo.clientbusinesstable WHERE CustomerId = '$CustomerId'";
        $result_get_client_name = $this->dataBase->query($query_get_client_name);
        $row_get_client_name = $this->dataBase->fetchArray($result_get_client_name);
        $clientName = $row_get_client_name['BusinessName'];

        $this->recordAction($CustomerId, -1, $order_id, -1, "Order Created", $clientName . " created exclusive-logestechs order [" . $order_id . "]", 30);
    }

    public function testOlive()
    {

        $transId = 159;
        $IdArea = 1322;
        $IdAreaDes = 1211;

        // if the transporter is olivery' 

        // 1- get olivery' transporter' matching source and destination areas
        $query_get_source_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdArea' and transporter_id = '$transId'";
        $result_get_source_area_name = $this->dataBase->query($query_get_source_area_name);
        $num_row_get_source_area_name = $this->dataBase->numRows($result_get_source_area_name);

        $query_get_target_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdAreaDes' and transporter_id = '$transId'";
        $result_get_target_area_name = $this->dataBase->query($query_get_target_area_name);
        $num_row_get_target_area_name = $this->dataBase->numRows($result_get_target_area_name);

        if ($num_row_get_source_area_name > 0 && $num_row_get_target_area_name > 0) {
            $row_get_source_area_name = $this->dataBase->fetchArray($result_get_source_area_name);
            $source_area_name = $row_get_source_area_name['oliveryAreaName'];

            $row_get_target_area_name = $this->dataBase->fetchArray($result_get_target_area_name);
            $target_area_name = $row_get_target_area_name['oliveryAreaName'];

            // 2- get olivery' price
            // 2-a- get transporter username and password
            $query_get_user_pass = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$transId'";
            $result_get_user_pass = $this->dataBase->query($query_get_user_pass);
            $row_get_user_pass = $this->dataBase->fetchArray($result_get_user_pass);
            $username = $row_get_user_pass['username'];
            $password = $row_get_user_pass['password'];

            // 2-b- get the price
            $delivery_price = $this->getOliveryPrice($username, $password, $source_area_name, $target_area_name);

            if ($delivery_price != "-1" && $delivery_price != "0") { // [to remove comment]

                $delivery_price = floatval($delivery_price);

                // $delivery_price = 20; // [to be removed]

                // 2-c- get ((((logestechs))))) areas to get general price to calculate togo margin

                // $market_price = $this->getLogetechsGeneralPrice($IdArea, $IdAreaDes);

                // make the offer

                if (/* $market_price != "-1" && $market_price != "-2" */true) { // [to remove comment if deal]
                    // $market_price = floatval($market_price);

                    // $this->recordDebug("olivery get offer, market_price: " . $market_price . " - delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                    echo "offer created, price: " . $delivery_price;
                    // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $delivery_price, -1);
                }
            } else {
                echo "price not found";
            }
        } else {
            echo "areas not found";
        }
    }

    public function testOlive2()
    {
        $ClientId = 41;
        $TransporterId = 159;
        $OrderId = 9999;

        $query_getTransporterInfo = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$TransporterId'";
        $result_getTransporterInfo = $this->dataBase->query($query_getTransporterInfo);

        // $this->recordDebug("olivery_transporter_info selected from", $ClientId, $TransporterId, $OrderId);

        $row_getTransporterInfo = $this->dataBase->fetchArray($result_getTransporterInfo);

        // get sender info
        $senderInfo = $this->getSenderInfo($ClientId);
        $str_to_replace = "0";
        $oldNum = $senderInfo['phone'];
        $senderMobileNum = $str_to_replace . substr($oldNum, 4);

        // $this->recordDebug("getSenderInfo called - phone: " . $senderMobileNum, $ClientId, $TransporterId, $OrderId);

        // get olivery' transporer' source and target areas
        $sourceTogoAreaId = 1322;
        $targetTogoAreaId = 1211;

        $sourceOliveryArea = $this->getOliveryArea($sourceTogoAreaId);
        $targetOliveryArea = $this->getOliveryArea($targetTogoAreaId);

        $togo_from_area_id = $sourceOliveryArea['togoAreaId'];
        $togo_from_area_name = $sourceOliveryArea['togoAreaName'];
        $togo_to_area_id = $targetOliveryArea['togoAreaId'];
        $togo_to_area_name = $targetOliveryArea['togoAreaName'];

        $olivery_from_area_id = $sourceOliveryArea['oliveryAreaId'];
        $olivery_from_area_name = $sourceOliveryArea['oliveryAreaName'];
        $olivery_to_area_id = $targetOliveryArea['oliveryAreaId'];
        $olivery_to_area_name = $targetOliveryArea['oliveryAreaName'];

        if ($olivery_from_area_id && $olivery_to_area_id) {
            echo "yes";
        } else {
            echo "no";
        }

        return;

        echo "getOliveryArea called - from: TOGO(" . $togo_from_area_id . " - " . $togo_from_area_name . ") / OLIVERY(" . $olivery_from_area_id . " - " . $olivery_from_area_name . ") 
        -> to: TOGO(" . $togo_to_area_id . " - " . $togo_to_area_name . ") / OLIVERY(" . $olivery_to_area_id . " - " . $togo_to_area_name . ")";
        return;

        $togo_from_area_name = $this->dataBase->escape($togo_from_area_name);
        $togo_to_area_name = $this->dataBase->escape($togo_to_area_name);
        $olivery_from_area_name = $this->dataBase->escape($olivery_from_area_name);
        $olivery_to_area_name = $this->dataBase->escape($olivery_to_area_name);

        $this->recordDebug("getOliveryArea called - from: TOGO(" . $togo_from_area_id . " - " . $togo_from_area_name . ") / OLIVERY(" . $olivery_from_area_id . " - " . $olivery_from_area_name . ") 
            -> to: TOGO(" . $togo_to_area_id . " - " . $togo_to_area_name . ") / OLIVERY(" . $olivery_to_area_id . " - " . $togo_to_area_name . ")", $ClientId, $TransporterId, $OrderId);

        echo "done";
    }

    public function OrderBidEnginParamsClientTest($DeliveryParams, $AddressClint, $isNewAddress, $CustomerId, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $AddressClint = $this->dataBase->escape($AddressClint);
        $DeliveryParams = $this->dataBase->escape($DeliveryParams);

        $err_arr = array();

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                
                    $Idvehicle = "NULL";
                    $deliveryWay = $DeliveryParams['deliveryWay'];
                    $DetailsLoad = $DeliveryParams['DetailsLoad'];
                    $LengthLoad = $DeliveryParams['LengthLoad'];
                    $WidthLoad = $DeliveryParams['WidthLoad'];
                    $HeightLoad = $DeliveryParams['HeightLoad'];
                    $WeightLoad = $DeliveryParams['WeightLoad'];
                    $CostLoad = $DeliveryParams['CostLoad'];
                    $DateLoad = "CURRENT_TIMESTAMP";
                    $TypeLoad = $DeliveryParams['TypeLoad'];
                    $qrCode = $DeliveryParams['qrCode'];
                    $currency = $DeliveryParams['currency'];

                    // if the currency is in JOD to will be coverted to ILS and the JOD amount will be stored in 'from_currency_value'
                    $from_currency_value = null;
                    if ($currency == 2) {
                        $from_currency_value = $CostLoad;
                        $CostLoad = $this->JODtoILS($CostLoad);
                    }

                    // insert new order
                    $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, order_status, currency, from_currency_value)
                                  Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', 'Waiting for Bids', '$currency', '$from_currency_value')";

                    $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                    if ($result_Insert_Order == true) {

                        // get last inserted order id for this specific customer

                        // 1- get last inserted order-id by selecting the maximum createdAt (this may cause a select-race between orders created at the same time)
                        // $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt) FROM togo.OrderBidEngin)";

                        // 2- get last inserted order-id by retieving it immediately after inserting the order
                        // $query_GetLastId_Order = "INSERT INTO togo.OrderBidEngin...; SELECT LAST_INSERT_ID() as last_id;";

                        // 3- get last inserted order-id by getting the orders that were created by this spesific customer and selecting the last one (this will insure that the fetched order is not someone else's)
                        $query_GetLastId_Order = "SELECT id
                                                    FROM togo.OrderBidEngin
                                                    WHERE CustomerId = '$CustomerId'
                                                    ORDER BY createdAt DESC
                                                    LIMIT 1";
                        $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                        // record the action
                        $this->recordAction($CustomerId, -1, $row_LastId_Order['id'], -1, '', "Order Created", 2);

                        $Id_Last_Order = $row_LastId_Order['id'];

                        // sender info
                        $IdCity = $AddressClint['IdCity'];
                        $IdArea = $AddressClint['IdArea'];
                        $OtherDetails = $AddressClint['OtherDetails'];
                        $SenderAddressId = $AddressClint['SenderAddressId'];
                        $LatSender = $AddressClint['LatSender'];
                        $LongSender = $AddressClint['LongSender'];

                        // the receiver addess can be chosen from previous addresses or it can be created if the customer sends its info
                        // if the customer created new address, isNewAddress will set to 1 (new address)
                        // if not, selected address from the list will be set as the receiver address
                        if ($isNewAddress == "1") {
                            // receiver info
                            $IdCityDes = $AddressClint['IdCityDes'];
                            $IdAreaDes = $AddressClint['IdAreaDes'];
                            $IdProvDes = $AddressClint['IdProvDes'];
                            $IdGovDes = $AddressClint['IdGovDes'];
                            $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                            $LatReciver = $AddressClint['LatReciver'];
                            $LongReciver = $AddressClint['LongReciver'];
                            $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                            $receiverZipCode = $AddressClint['zipCode'];
                            $receiverCountry = $AddressClint['country'];
                            $isShared = $AddressClint['isShared'];
                            $additionalInfo = $AddressClint['additionalInfo'];
                            $receiverAddressName = $AddressClint['addressName'];

                            // add the new receiver address (get last inserted address-id must be fixed to prevent select-race (as in getting last order id))
                            $newAddressId = $this->createNewOrderAddress($receiverAddressName, $ReceiverAddressNum, $OtherDetailsDes, $additionalInfo, $receiverCountry, $receiverZipCode, $isShared, $CustomerId, $CustomerId, $IdCityDes, $IdProvDes, $IdGovDes, $IdAreaDes);

                            // to set
                            $ReciverAddressId = $newAddressId;
                        } else {
                            $ReciverAddressId = $AddressClint['ReciverAddressId'];
                            $IdCityDes = $AddressClint['IdCityDes'];
                            $IdAreaDes = $AddressClint['IdAreaDes'];
                            $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                            $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                            $LatReciver = $AddressClint['LatReciver'];
                            $LongReciver = $AddressClint['LongReciver'];
                        }

                        $Code_Verify = mt_rand(1000, 9999); // what for !!!
                        
                        if (empty($LatSender))
                            $LatSender = "0";
                        if (empty($LongSender))
                            $LongSender = "0";
                        if (empty($LatReciver))
                            $LatReciver = "0";
                        if (empty($LongReciver))
                            $LongReciver = "0";

                        $query_Set_Address_Order = "Insert into togo.OrderBidAddress (IdOrderBidEngin,IdCity,IdArea,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes,IdAreaDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,SenderAddressId,ReciverAddressId)
								Values ('$Id_Last_Order','$IdCity',N'$IdArea',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes',N'$IdAreaDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify','$SenderAddressId','$ReciverAddressId')";
                        $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                        $query_Set_Bar_Code = "Update togo.OrderBidEngin set qr_code = '$Id_Last_Order' where id = '$Id_Last_Order'"; // what for !!!!

                        $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                        if ($result_Address_Order == true) {

                            // add automatic offers from netwerk:

                            // 1- get network
                            // 2- add bid on behalf of each one (if automatic offer is activated from the tansporter side)

                            /* 
                            // whith prices table
                            $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, priceTb." . $IdCity . "_" . $IdCityDes . " as price 
                                from togo.client_network as client_net
                                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                inner join togo.roadpricestable" . $IdCity . " as priceTb on client_net.TransporterId = priceTb.transporterId
                                where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";
                            */

                            // without prices table
                            $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image
                                from togo.client_network as client_net
                                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                
                                where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";


                            $result_get_client_network = $this->dataBase->query($query_get_client_network);

                            if ($result_get_client_network == true) {
                                
                                $row_count = $this->dataBase->numRows($result_get_client_network);

                                if ($row_count > 0) { // what if there are no network members
                                        // bid on behalf of network
                                        $bids_count = 0;
                                        while ($row_network = $this->dataBase->fetchArray($result_get_client_network)) {

                                            $transId = $row_network['idTransporter'];

                                            if ($row_network['super_foreign_company_id'] == 2) {
                                                // if the transporter is logestechs' transporter

                                                // get logestechs' transporter' company id:

                                                $query_getForeigCompanyId = "select company_id, togo_company_id from togo.logestechs_transporter_info where togo_trans_id = '$transId'";
                                                $result_getForeigCompanyId = $this->dataBase->query($query_getForeigCompanyId);
                                                $row_getForeigCompanyId = $this->dataBase->fetchArray($result_getForeigCompanyId);

                                                $foreign_company_id = $row_getForeigCompanyId['company_id'];
                                                $togoForeignId = $row_getForeigCompanyId['togo_company_id'];

                                                // get logestechs' transporter price: // mynono

                                                /* 
                                                    the following logic:
                                                    - check the price by the source and destination areas' ids
                                                    - if the price found (not -2) then there is a match in the logestechs-togo-areas-conversion table
                                                      thus, areas found on logestechs system thus, price found
                                                */

                                                /* 
                                                    logestechs price:
                                                    - if not found, there will be no offer 
                                                    (it could be area/s-not-fount error)
                                                */

                                                /* 
                                                    what is going to change regarding the deal logic:
                                                    - deal prices will be hard coded (at first)
                                                    - general prices will be hard coded (at first)
                                                    (everything will be automated and calculated at some point)
                                                */

                                                // check for logestechs' transporter price
                                                $prices = $this->checkLogestechsPrice($foreign_company_id, $togoForeignId, $IdArea, $IdAreaDes);
                                                if ($prices != "-1" && $prices != "-2") {

                                                    $cost_price = explode("-", $prices)[0];
                                                    $deal_price = explode("-", $prices)[1];
                                                    $cost_price = floatval($cost_price);
                                                    $deal_price = floatval($deal_price);

                                                    // get province by area id and switch the price (west: 20 -- 48: 70 -- jerusalem: 30)

                                                    /* $query_getSrcProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdArea'";
                                                    $result_getSrcProvId = $this->dataBase->query($query_getSrcProvId);
                                                    $row_getSrcProvId = $this->dataBase->fetchArray($result_getSrcProvId);
                                                    $src_govId = $row_getSrcProvId['govId']; */

                                                    //fixed price
                                                    $query_getDestProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdAreaDes'";
                                                    $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                    $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                    $dest_govId = $row_getDestProvId['govId'];

                                                    if ($dest_govId == 69) {
                                                        $cost_price = 70;
                                                    } else if ($dest_govId == 5) {
                                                        $cost_price = 30;
                                                    } else if ($dest_govId == 41 || $dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68) {
                                                        $cost_price = 70;
                                                    } else {
                                                        $cost_price = 20;
                                                    }

                                                    $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price);
                                                    // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $deal_price, -1);
                                                    $bids_count++;
                                                }
                                            } else if ($row_network['super_foreign_company_id'] == 3) {

                                                $this->recordDebug("olivery-network-transporter spotted", $CustomerId, $transId, $Id_Last_Order);

                                                // if the transporter is olivery' 

                                                // 1- get olivery' transporter' matching source and destination areas

                                                // ################## (search by province id, if nor\t existed then by governorate id and so on...)

                                                // a. check for province
                                                // b. check for governorate
                                                // c. check for city
                                                // d. check fro area

                                                // get area, city, governorate, and province ids for both source and destination

                                                $query_get_src_and_dest_ids = "select senderaddress.areaId as srcArea, senderaddress.cityId as srcCity, senderaddress.governoratId as srcGov, senderaddress.provinceId as srcProv,
                                                receiveraddress.areaId as destArea, receiveraddress.cityId as destCity, receiveraddress.governoratId as destGov, receiveraddress.provinceId as destProv
                                                from togo.orderbidengin as engin
                                                inner join togo.orderbidaddress as orderaddress on engin.id = orderaddress.IdOrderBidEngin
                                                inner join togo.addresses as senderaddress on orderaddress.SenderAddressId = senderaddress.id
                                                inner join togo.addresses as receiveraddress on orderaddress.ReciverAddressId = receiveraddress.id
                                                where engin.id = '$Id_Last_Order'";

                                                $result_get_src_and_dest_ids = $this->dataBase->query($query_get_src_and_dest_ids);
                                                $row_get_src_and_dest_ids = $this->dataBase->fetchArray($result_get_src_and_dest_ids);

                                                $srcArea = $row_get_src_and_dest_ids['srcArea'];
                                                $srcCity = $row_get_src_and_dest_ids['srcCity'];
                                                $srcGov = $row_get_src_and_dest_ids['srcGov'];
                                                $srcProv = $row_get_src_and_dest_ids['srcProv'];

                                                $destArea = $row_get_src_and_dest_ids['destArea'];
                                                $destCity = $row_get_src_and_dest_ids['destCity'];
                                                $destGov = $row_get_src_and_dest_ids['destGov'];
                                                $destProv = $row_get_src_and_dest_ids['destProv'];

                                                $this->recordDebug(
                                                    "srcArea: (" . $srcArea . ") -- srcCity: (" . $srcCity . ") --- srcGov: (" . $srcGov . ") srcProv: (" . $srcProv
                                                        . ") >>>> destArea: (" . $destArea . ") -- destCity: (" . $destCity . ") --- destGov: (" . $destGov . ") destProv: (" . $destProv . ")",
                                                    $CustomerId,
                                                    $transId,
                                                    $Id_Last_Order
                                                );

                                                // source area
                                                $query_check_src_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                                $query_check_src_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                                $query_check_src_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                                $query_check_src_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                                $this->recordDebug("after src queries", $CustomerId, $transId, $Id_Last_Order);

                                                $result_check_src_prov = $this->dataBase->query($query_check_src_prov);
                                                $num_rows_check_src_prov = $this->dataBase->numRows($result_check_src_prov);

                                                $result_check_src_gov = $this->dataBase->query($query_check_src_gov);
                                                $num_rows_check_src_gov = $this->dataBase->numRows($result_check_src_gov);

                                                $result_check_src_city = $this->dataBase->query($query_check_src_city);
                                                $num_rows_check_src_city = $this->dataBase->numRows($result_check_src_city);

                                                $result_check_src_area = $this->dataBase->query($query_check_src_area);
                                                $num_rows_check_src_area = $this->dataBase->numRows($result_check_src_area);

                                                $this->recordDebug("after src results", $CustomerId, $transId, $Id_Last_Order);

                                                $olivery_src_area_name = "";

                                                if ($num_rows_check_src_prov > 0) {
                                                    // $this->recordDebug("src-prov if begin - count: " . $num_rows_check_src_prov , $CustomerId, $transId, $Id_Last_Order);
                                                    $row_check_src_prov = $this->dataBase->fetchArray($result_check_src_prov);
                                                    $olivery_src_area_name = $row_check_src_prov['oliveryAreaName'];
                                                    // $this->recordDebug("src-prov if end" . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);
                                                } else if ($num_rows_check_src_gov > 0) {
                                                    $row_check_src_gov = $this->dataBase->fetchArray($result_check_src_gov);
                                                    $olivery_src_area_name = $row_check_src_gov['oliveryAreaName'];
                                                } else if ($num_rows_check_src_city > 0) {
                                                    $row_check_src_city = $this->dataBase->fetchArray($result_check_src_city);
                                                    $olivery_src_area_name = $row_check_src_city['oliveryAreaName'];
                                                } else if ($num_rows_check_src_area > 0) {
                                                    $row_check_src_area = $this->dataBase->fetchArray($result_check_src_area);
                                                    $olivery_src_area_name = $row_check_src_area['oliveryAreaName'];
                                                }

                                                // $this->recordDebug("source olivery area: " . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                // destination area
                                                $query_check_dest_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                                $query_check_dest_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                                $query_check_dest_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                                $query_check_dest_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                                $result_check_dest_prov = $this->dataBase->query($query_check_dest_prov);
                                                $num_rows_check_dest_prov = $this->dataBase->numRows($result_check_dest_prov);

                                                $result_check_dest_gov = $this->dataBase->query($query_check_dest_gov);
                                                $num_rows_check_dest_gov = $this->dataBase->numRows($result_check_dest_gov);

                                                $result_check_dest_city = $this->dataBase->query($query_check_dest_city);
                                                $num_rows_check_dest_city = $this->dataBase->numRows($result_check_dest_city);

                                                $result_check_dest_area = $this->dataBase->query($query_check_dest_area);
                                                $num_rows_check_dest_area = $this->dataBase->numRows($result_check_dest_area);

                                                $olivery_dest_area_name = "";

                                                if ($num_rows_check_dest_prov > 0) {
                                                    $row_check_dest_prov = $this->dataBase->fetchArray($result_check_dest_prov);
                                                    $olivery_dest_area_name = $row_check_dest_prov['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_gov > 0) {
                                                    $row_check_dest_gov = $this->dataBase->fetchArray($result_check_dest_gov);
                                                    $olivery_dest_area_name = $row_check_dest_gov['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_city > 0) {
                                                    $row_check_dest_city = $this->dataBase->fetchArray($result_check_dest_city);
                                                    $olivery_dest_area_name = $row_check_dest_city['oliveryAreaName'];
                                                } else if ($num_rows_check_dest_area > 0) {
                                                    $row_check_dest_area = $this->dataBase->fetchArray($result_check_dest_area);
                                                    $olivery_dest_area_name = $row_check_dest_area['oliveryAreaName'];
                                                }

                                                // $this->recordDebug("target olivery area: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                /* $query_get_source_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdArea' and transporter_id = '$transId'";
                                                $result_get_source_area_name = $this->dataBase->query($query_get_source_area_name);
                                                $num_row_get_source_area_name = $this->dataBase->numRows($result_get_source_area_name);

                                                $query_get_target_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdAreaDes' and transporter_id = '$transId'";
                                                $result_get_target_area_name = $this->dataBase->query($query_get_target_area_name);
                                                $num_row_get_target_area_name = $this->dataBase->numRows($result_get_target_area_name); */

                                                if (/* $num_row_get_source_area_name > 0 && $num_row_get_target_area_name > 0 */$olivery_src_area_name != "" && $olivery_dest_area_name != "") {

                                                    $this->recordDebug("source area name: " . $olivery_src_area_name . " - target area name: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                                    /* $row_get_source_area_name = $this->dataBase->fetchArray($olivery_src_area_name);
                                                    $source_area_name = $row_get_source_area_name['oliveryAreaName'];

                                                    $row_get_target_area_name = $this->dataBase->fetchArray($olivery_dest_area_name);
                                                    $target_area_name = $row_get_target_area_name['oliveryAreaName']; */

                                                    // 2- get olivery' price
                                                    // 2-a- get transporter username and password
                                                    $query_get_user_pass = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$transId'";
                                                    $result_get_user_pass = $this->dataBase->query($query_get_user_pass);
                                                    $row_get_user_pass = $this->dataBase->fetchArray($result_get_user_pass);
                                                    $username = $row_get_user_pass['username'];
                                                    $password = $row_get_user_pass['password'];

                                                    // 2-b- get the price
                                                    $this->recordDebug("username: " . $username . " --- password: " . $password, $CustomerId, $transId, $Id_Last_Order);
                                                    $delivery_price = $this->getOliveryPrice($username, $password, $olivery_src_area_name, $olivery_dest_area_name);

                                                    $this->recordDebug("delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                    if ($delivery_price != "-1" && $delivery_price != "0") {

                                                        $delivery_price = floatval($delivery_price);
                                                        // $delivery_price = $delivery_price * 1.1765;
                                                        $delivery_price = round($delivery_price * 2) / 2;                                                

                                                        $this->recordDebug("delivery_price after rounded: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                        // 2-c- get ((((logestechs))))) areas to get general price to calculate togo margin

                                                        $market_price = $this->getLogetechsGeneralPrice($IdArea, $IdAreaDes);

                                                        $this->recordDebug("market_price: " . $market_price, $CustomerId, $transId, $Id_Last_Order);

                                                        // make the offer

                                                        if ($market_price != "-1" && $market_price != "-2"/* true */) { // [to remove comment if deal] (get deal and market price from olivery if exist)
                                                            $market_price = floatval($market_price);

                                                            $this->recordDebug("olivery get offer, market_price: " . $market_price . " - delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                            $query_getDestProvId = "select gov.id as govId
                                                            from togo.areatable as area 
                                                            inner join togo.citytable as city on area.cityId = city.id 
                                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                            where area.id = '$IdAreaDes'";
                                                            $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                            $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                            $dest_govId = $row_getDestProvId['govId'];

                                                            if ($dest_govId == 5) {
                                                                $cost_price = 30;
                                                            } else if ($dest_govId == 41 || $dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68) {
                                                                $cost_price = 70;
                                                            } else {
                                                                $cost_price = 20;
                                                            }

                                                            // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $market_price, $delivery_price);
                                                            $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price);
                                                            // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $delivery_price, -1);
                                                            $bids_count++;
                                                        }
                                                    }
                                                }
                                            } else {
                                                $this->NetworkSetCostOrder($transId, $Id_Last_Order, $row_network['price']);
                                                $bids_count++;
                                            }

                                            $query_update_order_bids_count = "update togo.orderbidengin set bids_count = '$bids_count' where id = '$Id_Last_Order'";
                                            $result_update_order_bids_count = $this->dataBase->query($query_update_order_bids_count);
                                            // $row_update_order_bids_count = $this->dataBase->query($result_update_order_bids_count);

                                        }
                                } else {
                                    // array_push($err_arr, "get network query error"); // it is not an error
                                }

                                
                            } else {
                                array_push($err_arr, "get network query error");
                            }

                            // ---------------------------------------------------

                            // send notification was here........

                            /* $OrderIdArray = array();
                            array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                            echo json_encode(array("server_response" => $OrderIdArray)); */
                            echo $Id_Last_Order;
                        } else {
                            array_push($err_arr, "insert addresses query error");
                        }
                    } else {
                        array_push($err_arr, "insert order query error");
                    }
            } else
                array_push($err_arr, "user blocked error");
        } else {
            array_push($err_arr, "user token error");
        }

        // response
        if (count($err_arr) > 0) {
            echo json_encode(array("errors" => $err_arr));
        } else {
            echo json_encode(array("order_id" => $Id_Last_Order));
        }
        
    }

    public function createNewOrderAddress($name, $phoneNumber, $details, $additionalInfo, $country, $zipCode, $isShared, $customerId, $creatorId, $cityId, $provId, $govId, $areaId)
    {

        /*  echo "name: " . $name . " ==== " . "phoneNumber: " . $phoneNumber . " ==== " . "details: " . $details . " ==== " . "additionalInfo: " . $additionalInfo . " ==== " . "country: " . $country . " ==== " . "zipCode: " . $zipCode . " ==== " . "isShared: " . $isShared . " ==== " . "customerId: " . $customerId . " ==== " . "creatorId: " . $creatorId . " ==== " . "deviceToken: " . $deviceToken . " ==== " . "cityId: " . $cityId . " ==== " . "provId: " . $provId . " ==== " . "govId: " . $govId . " ==== " . "areaId: " . $areaId;
        return; */

        if ($customerId == '' or empty($customerId)) {
            $customerId = "NULL";
        }

        $isShared = $isShared == "true" ? 1 : 0;
        $query = "insert into togo.addresses (name, phone_number, details, additional_info, cityId, provinceId, governoratId, areaId, country, zip_code, is_shared, customer_id, creator_id) 
                    Values('$name', '$phoneNumber', '$details', '$additionalInfo', '$cityId', '$provId', '$govId', '$areaId', '$country', '$zipCode', $isShared, $customerId, $creatorId )";

        $result = $this->dataBase->query($query);

        if ($result) {
            // echo "Created";

            // return new address id
            $query_GetLastId_Address = "SELECT id FROM togo.addresses WHERE createdAt=(SELECT MAX(createdAt) FROM togo.addresses)";
            $result_LastId_Address = $this->dataBase->query($query_GetLastId_Address);
            $row_LastId_Address = $this->dataBase->fetchArray($result_LastId_Address);

            $Id_Last_addressId = $row_LastId_Address['id'];
            return $Id_Last_addressId;
        } else {
            echo "Something went wrong";
        }
    }

    public function OrderBidEnginParams($DeliveryParams, $AddressClint, $CustomerId, $TokenDevice) // rorororo
    {

        /* $IdArea = $AddressClint['IdArea'];
        $IdAreaDes = $AddressClint['IdAreaDes'];

        echo $IdArea . " -> " . $IdAreaDes;
        return; */

        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $AddressClint = $this->dataBase->escape($AddressClint);
        $DeliveryParams = $this->dataBase->escape($DeliveryParams);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                if ($this->CheckAcceptedTransporter($CustomerId) == true) {
                    $Idvehicle = "NULL"; // edited ($Idvehicle = "NULL" added)
                    $deliveryWay = $DeliveryParams['deliveryWay'];
                    $DetailsLoad = $DeliveryParams['DetailsLoad'];
                    $LengthLoad = $DeliveryParams['LengthLoad'];
                    $WidthLoad = $DeliveryParams['WidthLoad'];
                    $HeightLoad = $DeliveryParams['HeightLoad'];
                    $WeightLoad = $DeliveryParams['WeightLoad'];
                    $CostLoad = $DeliveryParams['CostLoad'];
                    $DateLoad = "CURRENT_TIMESTAMP";
                    $TypeLoad = $DeliveryParams['TypeLoad'];
                    $qrCode = $DeliveryParams['qrCode'];

                    if ($CostLoad == 0) {
                        $deliveryWay = 1;
                    }

                    /* $is_approved = 1;
                    if ($CostLoad >= 1500) {
                        $is_approved = 0;
                    } */

                    /* edited (add order_status -> 'Waiting for Bids') */
                    if (!empty($qrCode)) {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, qr_code, order_status)
                                 Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$qrCode', 'Waiting for Bids')";
                    } else {
                        $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, order_status)
                                  Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', 'Waiting for Bids')";
                    }

                    $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                    if ($result_Insert_Order == true) {

                        $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt) FROM togo.OrderBidEngin)";
                        $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                        /* edited (record the action) */
                        // $party_one_id, $party_two_id, $order_id, $price, $description, $action_id
                        $this->recordAction($CustomerId, -1, $row_LastId_Order['id'], -1, '', "Order Created", 2);

                        $Id_Last_Order = $row_LastId_Order['id'];
                        $IdCity = $AddressClint['IdCity'];
                        $IdArea = $AddressClint['IdArea'];
                        $OtherDetails = $AddressClint['OtherDetails'];
                        $SenderAddressId = $AddressClint['SenderAddressId'];
                        $ReciverAddressId = $AddressClint['ReciverAddressId'];
                        $IdCityDes = $AddressClint['IdCityDes'];
                        $IdAreaDes = $AddressClint['IdAreaDes'];
                        $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                        $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                        $LatSender = $AddressClint['LatSender'];
                        $LongSender = $AddressClint['LongSender'];
                        $LatReciver = $AddressClint['LatReciver'];
                        $LongReciver = $AddressClint['LongReciver'];
                        $Code_Verify = mt_rand(1000, 9999);
                        //$Code_Verify=5555;
                        if (empty($LatSender))
                            $LatSender = "0";
                        if (empty($LongSender))
                            $LongSender = "0";
                        if (empty($LatReciver))
                            $LatReciver = "0";
                        if (empty($LongReciver))
                            $LongReciver = "0";

                        $query_Set_Address_Order = "Insert into togo.OrderBidAddress (IdOrderBidEngin,IdCity,IdArea,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes,IdAreaDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,SenderAddressId,ReciverAddressId)
								Values ('$Id_Last_Order','$IdCity','$IdArea',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes','$IdAreaDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify','$SenderAddressId','$ReciverAddressId')";

                        $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                        $query_Set_Bar_Code = "Update togo.OrderBidEngin set qr_code = '$Id_Last_Order' where id = '$Id_Last_Order'";

                        $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                        if ($result_Address_Order == true) {

                            // add automatic offers from netwerk:

                            // 1- get network
                            // 2- add bid on behalf of each one (if automatic offer is activated from the tansporter side)

                            /* 
                            // whith prices table
                            $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, priceTb." . $IdCity . "_" . $IdCityDes . " as price 
                                from togo.client_network as client_net
                                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                inner join togo.roadpricestable" . $IdCity . " as priceTb on client_net.TransporterId = priceTb.transporterId
                                where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";
                            */

                            // without prices table
                            $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter, trans.super_foreign_company_id,
                                cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image
                                from togo.client_network as client_net
                                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                                inner join togo.customer as cust on client_net.TransporterId = cust.id 
                                
                                where client_net.ClientId = '$CustomerId' AND client_net.isAutoOffer=1
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCity' and deleted=0)
                                AND client_net.TransporterId in (select CustomerId from togo.transporterworkcity where CityId='$IdCityDes' and deleted=0)";


                            $result_get_client_network = $this->dataBase->query($query_get_client_network);
                            $row_count = $this->dataBase->numRows($result_get_client_network);

                            if ($result_get_client_network && $row_count > 0) { // what if there are no network members

                                // bid on behalf of network
                                while ($row_network = $this->dataBase->fetchArray($result_get_client_network)) {

                                    $transId = $row_network['idTransporter'];

                                    if ($row_network['super_foreign_company_id'] == 2) {
                                        // if the transporter is logestechs' transporter

                                        // get logestechs' transporter' company id:

                                        $query_getForeigCompanyId = "select company_id, togo_company_id from togo.logestechs_transporter_info where togo_trans_id = '$transId'";
                                        $result_getForeigCompanyId = $this->dataBase->query($query_getForeigCompanyId);
                                        $row_getForeigCompanyId = $this->dataBase->fetchArray($result_getForeigCompanyId);

                                        $foreign_company_id = $row_getForeigCompanyId['company_id'];
                                        $togoForeignId = $row_getForeigCompanyId['togo_company_id'];

                                        // get logestechs' transporter price:

                                        // check for logestechs' transporter price
                                        $prices = $this->checkLogestechsPrice($foreign_company_id, $togoForeignId, $IdArea, $IdAreaDes);
                                        if ($prices != "-1" && $prices != "-2") {
                                            // make offer nono

                                            $cost_price = explode("-", $prices)[0];
                                            $deal_price = explode("-", $prices)[1];
                                            $cost_price = floatval($cost_price);
                                            $deal_price = floatval($deal_price);

                                            // get proince by area id and switch the price (west: 20 -- 48: 70 -- jerusalem: 30)

                                            /* $query_getSrcProvId = "select gov.id as govId
                                            from togo.areatable as area 
                                            inner join togo.citytable as city on area.cityId = city.id 
                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                            where area.id = '$IdArea'";
                                            $result_getSrcProvId = $this->dataBase->query($query_getSrcProvId);
                                            $row_getSrcProvId = $this->dataBase->fetchArray($result_getSrcProvId);
                                            $src_govId = $row_getSrcProvId['govId']; */

                                            // fixed price orderbidenginparams logestechs

                                            // destination governorate
                                            $query_getDestProvId = "select gov.id as govId
                                            from togo.areatable as area 
                                            inner join togo.citytable as city on area.cityId = city.id 
                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                            where area.id = '$IdAreaDes'";
                                            $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                            $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                            $dest_govId = $row_getDestProvId['govId'];

                                            // source governorate
                                            $query_getSourceProvId = "select gov.id as govId
                                            from togo.areatable as area 
                                            inner join togo.citytable as city on area.cityId = city.id 
                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                            where area.id = '$IdArea'";
                                            $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                            $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                            $source_govId = $row_getSourceProvId['govId'];

                                            if ($source_govId == 5) {
                                                $source = "jerusalem";
                                            } else if ($source_govId == 69) {
                                                $source = "jordan";
                                            } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                                $source = "areas48";
                                            } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                                $source = "gaza";
                                            } else {
                                                $source = "westbank";
                                            }

                                            if ($dest_govId == 5) {
                                                $destination = "jerusalem";
                                            } else if ($dest_govId == 69) {
                                                $destination = "jordan";
                                            } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                                $destination = "areas48";
                                            } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                                $destination = "gaza";
                                            } else {
                                                $destination = "westbank";
                                            }

                                            $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                            if ($source == "westbank" && $destination == "westbank") {
                                                $cost_price = 20;
                                            } else if ($source == "westbank" && $destination == "jerusalem") {
                                                $cost_price = 30;
                                            } else if ($source == "westbank" && $destination == "areas48") {
                                                $cost_price = 70;
                                            } else if ($source == "westbank" && $destination == "jordan") {
                                                $cost_price = 70;
                                            } else if ($source == "jerusalem" && $destination == "westbank") {
                                                $cost_price = 30;
                                            } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                $cost_price = 30;
                                            } else if ($source == "jerusalem" && $destination == "areas48") {
                                                $cost_price = 70; // !!!!
                                            } else if ($source == "jerusalem" && $destination == "jordan") {
                                                $cost_price = 70; // !!!!
                                            } else {
                                                $cost_price = 20; // !!!!
                                            }

                                            /* if ($source_govId == 5 && $dest_govId == 5) {
                                                $cost_price = 30; // jerusalem to jerusalem
                                            } else if ($source_govId == 5 && ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68)) {
                                                $cost_price = 70; // 75 ?!!!!! (from jerusalem to 48)
                                            } else if ($source_govId == 5) {
                                                $cost_price = 30; // from jerusalem to other areas (west-bank)
                                            } else if ($dest_govId == 69) {
                                                $cost_price = 70; // jordan
                                            } else if ($dest_govId == 5) {
                                                $cost_price = 30; // to jerusalem
                                            } else if ($dest_govId == 41 || $dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68) {
                                                $cost_price = 70; // to 48
                                            } else {
                                                $cost_price = 20; // west-bank
                                            } */

                                            $data = "cost_price = [" . $cost_price . "]";
                                            file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                            $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price); // bobobobobo
                                            // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $deal_price, -1);
                                        }
                                    } else if ($row_network['super_foreign_company_id'] == 3) {

                                        $this->recordDebug("olivery-network-transporter spotted", $CustomerId, $transId, $Id_Last_Order);

                                        // if the transporter is olivery' 

                                        // 1- get olivery' transporter' matching source and destination areas

                                        // ################## (search by province id, if nor\t existed then by governorate id and so on...)

                                        // a. check for province
                                        // b. check for governorate
                                        // c. check for city
                                        // d. check fro area

                                        // get area, city, governorate, and province ids for both source and destination

                                        $query_get_src_and_dest_ids = "select senderaddress.areaId as srcArea, senderaddress.cityId as srcCity, senderaddress.governoratId as srcGov, senderaddress.provinceId as srcProv,
                                        receiveraddress.areaId as destArea, receiveraddress.cityId as destCity, receiveraddress.governoratId as destGov, receiveraddress.provinceId as destProv
                                        from togo.orderbidengin as engin
                                        inner join togo.orderbidaddress as orderaddress on engin.id = orderaddress.IdOrderBidEngin
                                        inner join togo.addresses as senderaddress on orderaddress.SenderAddressId = senderaddress.id
                                        inner join togo.addresses as receiveraddress on orderaddress.ReciverAddressId = receiveraddress.id
                                        where engin.id = '$Id_Last_Order'";

                                        $result_get_src_and_dest_ids = $this->dataBase->query($query_get_src_and_dest_ids);
                                        $row_get_src_and_dest_ids = $this->dataBase->fetchArray($result_get_src_and_dest_ids);

                                        $srcArea = $row_get_src_and_dest_ids['srcArea'];
                                        $srcCity = $row_get_src_and_dest_ids['srcCity'];
                                        $srcGov = $row_get_src_and_dest_ids['srcGov'];
                                        $srcProv = $row_get_src_and_dest_ids['srcProv'];

                                        $destArea = $row_get_src_and_dest_ids['destArea'];
                                        $destCity = $row_get_src_and_dest_ids['destCity'];
                                        $destGov = $row_get_src_and_dest_ids['destGov'];
                                        $destProv = $row_get_src_and_dest_ids['destProv'];

                                        $this->recordDebug(
                                            "srcArea: (" . $srcArea . ") -- srcCity: (" . $srcCity . ") --- srcGov: (" . $srcGov . ") srcProv: (" . $srcProv
                                                . ") >>>> destArea: (" . $destArea . ") -- destCity: (" . $destCity . ") --- destGov: (" . $destGov . ") destProv: (" . $destProv . ")",
                                            $CustomerId,
                                            $transId,
                                            $Id_Last_Order
                                        );

                                        // source area
                                        $query_check_src_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                        $query_check_src_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                        $query_check_src_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                        $query_check_src_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$srcArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                        $this->recordDebug("after src queries", $CustomerId, $transId, $Id_Last_Order);

                                        $result_check_src_prov = $this->dataBase->query($query_check_src_prov);
                                        $num_rows_check_src_prov = $this->dataBase->numRows($result_check_src_prov);

                                        $result_check_src_gov = $this->dataBase->query($query_check_src_gov);
                                        $num_rows_check_src_gov = $this->dataBase->numRows($result_check_src_gov);

                                        $result_check_src_city = $this->dataBase->query($query_check_src_city);
                                        $num_rows_check_src_city = $this->dataBase->numRows($result_check_src_city);

                                        $result_check_src_area = $this->dataBase->query($query_check_src_area);
                                        $num_rows_check_src_area = $this->dataBase->numRows($result_check_src_area);

                                        $this->recordDebug("after src results", $CustomerId, $transId, $Id_Last_Order);

                                        $olivery_src_area_name = "";

                                        if ($num_rows_check_src_prov > 0) {
                                            // $this->recordDebug("src-prov if begin - count: " . $num_rows_check_src_prov , $CustomerId, $transId, $Id_Last_Order);
                                            $row_check_src_prov = $this->dataBase->fetchArray($result_check_src_prov);
                                            $olivery_src_area_name = $row_check_src_prov['oliveryAreaName'];
                                            // $this->recordDebug("src-prov if end" . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);
                                        } else if ($num_rows_check_src_gov > 0) {
                                            $row_check_src_gov = $this->dataBase->fetchArray($result_check_src_gov);
                                            $olivery_src_area_name = $row_check_src_gov['oliveryAreaName'];
                                        } else if ($num_rows_check_src_city > 0) {
                                            $row_check_src_city = $this->dataBase->fetchArray($result_check_src_city);
                                            $olivery_src_area_name = $row_check_src_city['oliveryAreaName'];
                                        } else if ($num_rows_check_src_area > 0) {
                                            $row_check_src_area = $this->dataBase->fetchArray($result_check_src_area);
                                            $olivery_src_area_name = $row_check_src_area['oliveryAreaName'];
                                        }

                                        // $this->recordDebug("source olivery area: " . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);

                                        // destination area
                                        $query_check_dest_prov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destProv' and transporter_id = '$transId' and togo_area_level = '1'";
                                        $query_check_dest_gov = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destGov' and transporter_id = '$transId' and togo_area_level = '2'";
                                        $query_check_dest_city = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destCity' and transporter_id = '$transId' and togo_area_level = '3'";
                                        $query_check_dest_area = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$destArea' and transporter_id = '$transId' and togo_area_level = '4'";

                                        $result_check_dest_prov = $this->dataBase->query($query_check_dest_prov);
                                        $num_rows_check_dest_prov = $this->dataBase->numRows($result_check_dest_prov);

                                        $result_check_dest_gov = $this->dataBase->query($query_check_dest_gov);
                                        $num_rows_check_dest_gov = $this->dataBase->numRows($result_check_dest_gov);

                                        $result_check_dest_city = $this->dataBase->query($query_check_dest_city);
                                        $num_rows_check_dest_city = $this->dataBase->numRows($result_check_dest_city);

                                        $result_check_dest_area = $this->dataBase->query($query_check_dest_area);
                                        $num_rows_check_dest_area = $this->dataBase->numRows($result_check_dest_area);

                                        $olivery_dest_area_name = "";

                                        if ($num_rows_check_dest_prov > 0) {
                                            $row_check_dest_prov = $this->dataBase->fetchArray($result_check_dest_prov);
                                            $olivery_dest_area_name = $row_check_dest_prov['oliveryAreaName'];
                                        } else if ($num_rows_check_dest_gov > 0) {
                                            $row_check_dest_gov = $this->dataBase->fetchArray($result_check_dest_gov);
                                            $olivery_dest_area_name = $row_check_dest_gov['oliveryAreaName'];
                                        } else if ($num_rows_check_dest_city > 0) {
                                            $row_check_dest_city = $this->dataBase->fetchArray($result_check_dest_city);
                                            $olivery_dest_area_name = $row_check_dest_city['oliveryAreaName'];
                                        } else if ($num_rows_check_dest_area > 0) {
                                            $row_check_dest_area = $this->dataBase->fetchArray($result_check_dest_area);
                                            $olivery_dest_area_name = $row_check_dest_area['oliveryAreaName'];
                                        }

                                        // $this->recordDebug("target olivery area: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                        /* $query_get_source_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdArea' and transporter_id = '$transId'";
                                        $result_get_source_area_name = $this->dataBase->query($query_get_source_area_name);
                                        $num_row_get_source_area_name = $this->dataBase->numRows($result_get_source_area_name);

                                        $query_get_target_area_name = "select oliveryAreaName from togo.olivery_areas_convert_table where togoAreaId = '$IdAreaDes' and transporter_id = '$transId'";
                                        $result_get_target_area_name = $this->dataBase->query($query_get_target_area_name);
                                        $num_row_get_target_area_name = $this->dataBase->numRows($result_get_target_area_name); */

                                        if (/* $num_row_get_source_area_name > 0 && $num_row_get_target_area_name > 0 */$olivery_src_area_name != "" && $olivery_dest_area_name != "") {

                                            $this->recordDebug("source area name: " . $olivery_src_area_name . " - target area name: " . $olivery_dest_area_name, $CustomerId, $transId, $Id_Last_Order);

                                            /* $row_get_source_area_name = $this->dataBase->fetchArray($olivery_src_area_name);
                                            $source_area_name = $row_get_source_area_name['oliveryAreaName'];

                                            $row_get_target_area_name = $this->dataBase->fetchArray($olivery_dest_area_name);
                                            $target_area_name = $row_get_target_area_name['oliveryAreaName']; */

                                            // 2- get olivery' price
                                            // 2-a- get transporter username and password
                                            $query_get_user_pass = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$transId'";
                                            $result_get_user_pass = $this->dataBase->query($query_get_user_pass);
                                            $row_get_user_pass = $this->dataBase->fetchArray($result_get_user_pass);
                                            $username = $row_get_user_pass['username'];
                                            $password = $row_get_user_pass['password'];

                                            // 2-b- get the price
                                            $this->recordDebug("username: " . $username . " --- password: " . $password, $CustomerId, $transId, $Id_Last_Order);
                                            $delivery_price = $this->getOliveryPrice($username, $password, $olivery_src_area_name, $olivery_dest_area_name);

                                            $this->recordDebug("delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                            if ($delivery_price != "-1" && $delivery_price != "0") {

                                                $delivery_price = floatval($delivery_price);
                                                // $delivery_price = $delivery_price * 1.1765;
                                                $delivery_price = round($delivery_price * 2) / 2;

                                                $this->recordDebug("delivery_price after rounded: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                // 2-c- get ((((logestechs))))) areas to get general price to calculate togo margin

                                                $market_price = $this->getLogetechsGeneralPrice($IdArea, $IdAreaDes);

                                                $this->recordDebug("market_price: " . $market_price, $CustomerId, $transId, $Id_Last_Order);

                                                // make the offer

                                                if ($market_price != "-1" && $market_price != "-2"/* true */) { // [to remove comment if deal] (get deal and market price from olivery if exist)
                                                    $market_price = floatval($market_price);

                                                    $this->recordDebug("olivery get offer, market_price: " . $market_price . " - delivery_price: " . $delivery_price, $CustomerId, $transId, $Id_Last_Order);

                                                    // fixed price orderbidenginparams olivery

                                                    // destination governorate
                                                    $query_getDestProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdAreaDes'";
                                                    $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
                                                    $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
                                                    $dest_govId = $row_getDestProvId['govId'];

                                                    // source governorate
                                                    $query_getSourceProvId = "select gov.id as govId
                                                    from togo.areatable as area 
                                                    inner join togo.citytable as city on area.cityId = city.id 
                                                    inner join togo.governoratetable as gov on city.governorateId = gov.id
                                                    where area.id = '$IdArea'";
                                                    $result_getSourceProvId = $this->dataBase->query($query_getSourceProvId);
                                                    $row_getSourceProvId = $this->dataBase->fetchArray($result_getSourceProvId);
                                                    $source_govId = $row_getSourceProvId['govId'];

                                                    if ($source_govId == 5) {
                                                        $source = "jerusalem";
                                                    } else if ($source_govId == 69) {
                                                        $source = "jordan";
                                                    } else if ($source_govId == 64 || $source_govId == 66 || $source_govId == 68 || $source_govId == 41) {
                                                        $source = "areas48";
                                                    } else if ($source_govId == 14 || $source_govId == 15 || $source_govId == 16 || $source_govId == 18 || $source_govId == 19) {
                                                        $source = "gaza";
                                                    } else {
                                                        $source = "westbank";
                                                    }
        
                                                    if ($dest_govId == 5) {
                                                        $destination = "jerusalem";
                                                    } else if ($dest_govId == 69) {
                                                        $destination = "jordan";
                                                    } else if ($dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68 || $dest_govId == 41) {
                                                        $destination = "areas48";
                                                    } else if ($dest_govId == 14 || $dest_govId == 15 || $dest_govId == 16 || $dest_govId == 18 || $dest_govId == 19) {
                                                        $destination = "gaza";
                                                    } else {
                                                        $destination = "westbank";
                                                    }

                                                    $data = "source and destination provinces ids = [" . $source_govId . "(" . $source . ") -> " . $dest_govId . "(" . $destination . ")]";
                                                    file_put_contents("create_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                                                    if ($source == "westbank" && $destination == "westbank") {
                                                        $cost_price = 20;
                                                    } else if ($source == "westbank" && $destination == "jerusalem") {
                                                        $cost_price = 30;
                                                    } else if ($source == "westbank" && $destination == "areas48") {
                                                        $cost_price = 70;
                                                    } else if ($source == "westbank" && $destination == "jordan") {
                                                        $cost_price = 70;
                                                    } else if ($source == "jerusalem" && $destination == "westbank") {
                                                        $cost_price = 30;
                                                    } else if ($source == "jerusalem" && $destination == "jerusalem") {
                                                        $cost_price = 30;
                                                    } else if ($source == "jerusalem" && $destination == "areas48") {
                                                        $cost_price = 70; // !!!!
                                                    } else if ($source == "jerusalem" && $destination == "jordan") {
                                                        $cost_price = 70; // !!!!
                                                    } else {
                                                        $cost_price = 20; // !!!!
                                                    }

                                                    $this->NetworkSetCostOrder($transId, $Id_Last_Order, $cost_price);
                                                    // $this->NetworkSetCostOrder($transId, $Id_Last_Order, $delivery_price, -1);
                                                }
                                            }
                                        }
                                    } else {
                                        $this->NetworkSetCostOrder($transId, $Id_Last_Order, $row_network['price']);
                                    }
                                }
                            } else {
                                // echo "clientNetworkError!";
                                // $this->recordDebug("clientNetworkError", $CustomerId, $transId, $Id_Last_Order);
                            }

                            // ---------------------------------------------------

                            // send notification was here........

                            /* $OrderIdArray = array();
                            array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                            echo json_encode(array("server_response" => $OrderIdArray)); */
                            echo json_encode(array("server_response" => $Id_Last_Order));
                            // echo $Id_Last_Order;
                        } else {
                            echo "ErrorInAddress";
                        }
                    } else {
                        echo "NotInserted";
                    }
                } else
                    echo "NotAccepted";
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    public function sendCustomNotification($customerId, $token, $filterSend, $orderId)
    {
        $customerId = $this->dataBase->escape($customerId);
        $token = $this->dataBase->escape($token);
        $filterSend = $this->dataBase->escape($filterSend);
        $orderId = $this->dataBase->escape($orderId);

        if ($this->CheckToken($customerId, $token) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {

                if ($filterSend == "createOrder") {

                    $query_getCitiesIds = "select IdCity, IdCityDes from orderbidaddress where IdOrderBidEngin = '$orderId'";
                    $result_getCitiesIds = $this->dataBase->query($query_getCitiesIds);
                    $row_getCitiesIds = $this->dataBase->fetchArray($result_getCitiesIds);

                    $IdCity = $row_getCitiesIds['IdCity'];
                    $IdCityDes = $row_getCitiesIds['IdCityDes'];

                    $query_Get_Token_Transporter = "Select Distinct TransporterCustomer.Token As TokenNotify, TransporterCustomer.WebToken As webTokenNotifiy, transporterTable.CustomerId as transporterId 
                                From togo.Customer As TransporterCustomer 
                                inner join togo.transportertable as transporterTable on TransporterCustomer.id = transporterTable.CustomerId
                                Where transporterTable.IsTeamActivated = 0 AND TransporterCustomer.IsVerified=1 
                                AND TransporterCustomer.IsTransporter=1 AND (TransporterCustomer.IsBlocked=0 Or TransporterCustomer.IsBlocked IS NULL)
                                AND TransporterCustomer.id in (select CustomerId from togo.transporterworkcity where CityId = '$IdCity' and deleted = 0)
                                AND TransporterCustomer.id in (select CustomerId from togo.transporterworkcity where CityId = '$IdCityDes' and deleted = 0)";

                    $tokens = array();
                    $webTokens = array();

                    $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                    while ($row = $this->dataBase->fetchArray($Result_query)) {

                        // insert new transporter-order-viewed record (for each transporter to this order)

                        $transporterId = $row['transporterId'];
                        $query_addTransporterOrderRecord = "insert into togo.transporterviewedorders (transporter_id, order_id) values ('$transporterId', '$orderId')";
                        $result_addTransporterOrderRecord = $this->dataBase->query($query_addTransporterOrderRecord);

                        /////////////////

                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $client = $this->getClientBusinessAndLogo($customerId);

                    if ($client['BusinessName'] == 'null') {
                        $client_names = $this->getClientName($customerId);
                        $client['BusinessName'] = $client_names['FullName'];
                    }

                    $data = array(
                        'orderId' => $orderId,
                        'clientName' => $client['BusinessName'],
                        'clientImageUrl' => $client['LogoUrl'],
                        'intent' => 'newOrder'
                    );

                    $title = "Order Created";
                    $body = $client['BusinessName'] . " created order " . $orderId;
                    // $image = $client['LogoUrl'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                    echo "notifications sent!";
                }
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    public function OrderBidEnginParamsTransporter($DeliveryParams, $AddressClint, $CustomerId, $TokenDevice)
    {
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                $ClientMobileNumber = $DeliveryParams['ClientMobileNumber'];
                if ($this->CheckExistClient($ClientMobileNumber) == false) {
                    return "Client Not Found";
                }

                $query = "Select IsClient,id From togo.customer where PhoneNumber = '$ClientMobileNumber'";
                $result = $this->dataBase->query($query);
                $row = $this->dataBase->fetchArray($result);

                if ($row['IsClient'] != 1) {
                    return "Client Not Found";
                }
                $clientId = $row['id'];
                $Idvehicle = "NULL";
                $deliveryWay = $DeliveryParams['deliveryWay'];
                $DetailsLoad = $DeliveryParams['DetailsLoad'];
                $LengthLoad = $DeliveryParams['LengthLoad'];
                $WidthLoad = $DeliveryParams['WidthLoad'];
                $HeightLoad = $DeliveryParams['HeightLoad'];
                $WeightLoad = $DeliveryParams['WeightLoad'];
                $CostLoad = $DeliveryParams['CostLoad'];
                $DateLoad = "CURRENT_TIMESTAMP";
                $TypeLoad = $DeliveryParams['TypeLoad'];
                $qrCode = $DeliveryParams['qrCode'];
                $DeliveryPrice = $DeliveryParams['DeliveryPrice'];

                /* edited (add order_status -> 'Waiting for Bids') */
                if (!empty($qrCode)) {
                    $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, qr_code, CreatedByTransporterId, IsAcceptedFromClient, IsCreatedByTransporter, order_status)
                                 Values ('$clientId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$qrCode', '$CustomerId', '0', '1', 'Waiting for Bids')";
                } else {
                    $query_Insert_Order = "Insert into togo.OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad, CreatedByTransporterId, IsAcceptedFromClient, IsCreatedByTransporter, order_status)
                                  Values ('$clientId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad',$DateLoad,'$CostLoad','$TypeLoad', '$CustomerId', '0', '1', 'Waiting for Bids')";
                }


                $result_Insert_Order = $this->dataBase->query($query_Insert_Order);
                if ($result_Insert_Order == true) {

                    $query_GetLastId_Order = "SELECT id FROM togo.OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt)FROM togo.OrderBidEngin)";
                    $result_LastId_Order = $this->dataBase->query($query_GetLastId_Order);
                    $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($CustomerId, -1, $row_LastId_Order['id'], -1, '', "Order Created", 2);

                    $Id_Last_Order = $row_LastId_Order['id'];
                    $IdCity = $AddressClint['IdCity'];
                    $OtherDetails = $AddressClint['OtherDetails'];
                    $SenderAddressId = $AddressClint['SenderAddressId'];
                    $ReciverAddressId = $AddressClint['ReciverAddressId'];
                    $IdCityDes = $AddressClint['IdCityDes'];
                    $OtherDetailsDes = $AddressClint['OtherDetailsDes'];
                    $ReceiverAddressNum = $AddressClint['ReceiverAddressNum'];
                    $LatSender = $AddressClint['LatSender'];
                    $LongSender = $AddressClint['LongSender'];
                    $LatReciver = $AddressClint['LatReciver'];
                    $LongReciver = $AddressClint['LongReciver'];
                    $Code_Verify = mt_rand(1000, 9999);
                    //$Code_Verify=5555;
                    if (empty($LatSender))
                        $LatSender = "0";
                    if (empty($LongSender))
                        $LongSender = "0";
                    if (empty($LatReciver))
                        $LatReciver = "0";
                    if (empty($LongReciver))
                        $LongReciver = "0";

                    $query_Set_Address_Order = "Insert into togo.OrderBidAddress (IdOrderBidEngin,IdCity,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,SenderAddressId,ReciverAddressId)
								Values ('$Id_Last_Order','$IdCity',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify','$SenderAddressId','$ReciverAddressId')";

                    $result_Address_Order = $this->dataBase->query($query_Set_Address_Order);

                    $query_Set_Bar_Code = "Update togo.OrderBidEngin set qr_code = '$Id_Last_Order' where id = '$Id_Last_Order'";

                    $result_Bar_Code = $this->dataBase->query($query_Set_Bar_Code);

                    if ($result_Address_Order == true) {

                        $OrderIdArray = array();

                        $query_Get_Cost_Load = "Select deliveryWay,CostLoad From togo.OrderBidEngin where id='$Id_Last_Order' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
									AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";
                        $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                        $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                        if ($row_count_Load > 0) {

                            $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                            $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                            $CostLoad = $row_Get_Cost_Load['CostLoad'];

                            if ($deliveryWay == 1) {
                            } else
											if ($deliveryWay == 2) {
                                $var = $this->BalanceIsEnough($CustomerId, $CostLoad);
                                if ($var == 1) {
                                    //echo "trans have enough balance" . $var . $CostLoad;

                                } else {
                                    echo "ChargeBalanace";
                                    return;
                                }
                            } else
												if ($deliveryWay == 3) {
                            } else
													if ($deliveryWay == 4) {
                                $var = $this->BalanceIsEnough($CustomerId, $CostLoad);
                                if ($var == 1) {
                                    //echo "trans have enough balance" . $var . $CostLoad;

                                } else {
                                    echo "ChargeBalanace", $var . $CostLoad;
                                    return;
                                }
                            } else {
                                echo "deliveryWayNotFound";
                                return;
                            }
                            $query_Check_Transport_AddedValue = "Select * from togo.DeliveryAcceptOrderTable 
                            Where IdTransporter='$CustomerId' AND IdOrder='$Id_Last_Order'";
                            $result_Check_Added_Value = $this->dataBase->query($query_Check_Transport_AddedValue);
                            $row_count = $this->dataBase->numRows($result_Check_Added_Value);

                            if ($row_count > 0) {
                                echo "AlreadyAddedValue";
                            } else {
                                $query_Set_Price = "Insert into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery)
									Values ('$Id_Last_Order','$CustomerId','$DeliveryPrice')";

                                //echo "here" . $CostDelivery;


                                $result_Set_Price = $this->dataBase->query($query_Set_Price);
                                if ($result_Set_Price == true) {
                                    //SendNotify To Client
                                    //echo "InsertedBid";

                                    $query_get_Transporter_Name = "Select FirstName , LastName from togo.TransporterTable Where CustomerId='$CustomerId'";
                                    $result_Name_Customer = $this->dataBase->query($query_get_Transporter_Name);
                                    $row_Name_Customer = $this->dataBase->fetchArray($result_Name_Customer);
                                    $Name_Customer = $row_Name_Customer['FirstName'] . ' ' . $row_Name_Customer['LastName'];

                                    $query_Get_Token_Client = "Select CustomerClient.Token As TokenNotifiy, CustomerClient.WebToken As webTokenNotifiy 
                                    From togo.OrderBidEngin As OrderBidEngin, Customer As CustomerClient
										Where OrderBidEngin.id='$Id_Last_Order' AND OrderBidEngin.CustomerId = CustomerClient.id";
                                    $result_Token_Customer = $this->dataBase->query($query_Get_Token_Client);
                                    $row_Token_Customer = $this->dataBase->fetchArray($result_Token_Customer);
                                    $Token_Customer = $row_Token_Customer['TokenNotifiy'];
                                    $Web_Token_Customer = $row_Token_Customer['webTokenNotifiy'];

                                    $tokens = array();
                                    $webTokens = array();

                                    array_push($tokens, $Token_Customer);
                                    array_push($webTokens, $Web_Token_Customer);

                                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                        if ($row['adminTokenNotify'] != null) {
                                            array_push($webTokens, $row['adminTokenNotify']);
                                        }
                                    }

                                    $transporter = $this->getTransporterNameAndImage($CustomerId);
                                    $data = array(
                                        'orderId' => $Id_Last_Order,
                                        'transporterName' => $transporter['AccountName'],
                                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                                        'intent' => 'CostOffersOrder'
                                    );

                                    $title = "Order Created";
                                    $body = $transporter['AccountName'] . " created order " . $Id_Last_Order;
                                    // $image = $transporter['PersonalImgPath'];

                                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                                    array_push($OrderIdArray, array("OrderId" => $Id_Last_Order));
                                    echo json_encode(array("server_response" => $OrderIdArray));
                                } else {
                                    echo "NotInsertedBid";
                                }
                            }
                        } else {
                            echo "OrderNotFound";
                        }
                    } else {
                        echo "ErrorInAddress";
                    }
                } else {
                    echo "NotInserted";
                }
            } else
                echo "Blocked";
        } else {
            echo "TokenError";
        }
    }

    /* edited (add getTransporterInfo) */
    public function getTransporterInfo($transporterId)
    {
        $transporter_query = "SELECT concat(FirstName, ' ', LastName) as fullName, PersonalImgPath, customer.PhoneNumber 
        FROM togo.transportertable as transportertable 
        inner join togo.customer as customer on customer.id='$transporterId'  where customerId='$transporterId'";
        $result_query = $this->dataBase->query($transporter_query);
        $res_arr = $this->dataBase->fetchArray($result_query);

        echo json_encode(array("server_response" => $res_arr));
    }

    public function getTotalOrdersNumForClient($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {
                $query = "select count(*) as ordersCount from togo.orderbidengin where CustomerId='$id'";
                $result = $this->dataBase->query($query);
                $row = $this->dataBase->fetchArray($result);

                echo json_encode(array("ordersNum" => $row['ordersCount']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTotalOrdersNumForTransporter($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {
                $query = "select count(distinct order_id) as ordersCount from togo.transporterstimelinetb where transporter_id = '$id'";
                $result = $this->dataBase->query($query);
                $row = $this->dataBase->fetchArray($result);

                echo json_encode(array("ordersNum" => $row['ordersCount']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterNameAndImage($transporterId)
    {
        $transporter_query = "SELECT AccountName, PersonalImgPath FROM togo.transportertable where customerId='$transporterId'";
        $result_query = $this->dataBase->query($transporter_query);
        return $this->dataBase->fetchArray($result_query);
    }

    public function getClientBusinessAndLogo($clientId)
    {
        $client_query = "Select BusinessName, LogoUrl from togo.clientbusinesstable where customerId='$clientId'";
        $result_query = $this->dataBase->query($client_query);
        return $this->dataBase->fetchArray($result_query);
    }


    public function getClientName($clientId)
    {
        $PersonalInfo = array();
        $query_get_Personal = "Select * from togo.ClientTable where CustomerId='$clientId'";
        $Result_get_Personal = $this->dataBase->query($query_get_Personal);
        $row_Personal_Info = $this->dataBase->fetchArray($Result_get_Personal);
        array_push($PersonalInfo, array("FullName" => $row_Personal_Info['FirstName'] . ' ' . $row_Personal_Info['LastName']));
        return $this->dataBase->fetchArray($PersonalInfo);
    }

    // TO_REM TRANS_SERVICE
    public function TransporterGetOrder($TransporterId, $TokenDevice, $PageSize, $PageNumber)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;
        $OrderArray = array();

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Get_Orders = "Select Distinct engin.*, addresses.OtherDetails, addresses.OtherDetailsDes
				From togo.OrderBidEngin as engin 
                left join togo.OrderBidAddress as addresses on engin.id=addresses.IdOrderBidEngin
                Where DeliveryId IS NULL AND (IsAcceptDelivery=0 OR IsAcceptDelivery IS NULL) AND 
				(IsDeleted=0 OR IsDeleted IS NULL) AND (Orderfinished = 0 Or Orderfinished IS NULL)
				AND addresses.IdCity in (select CityId from togo.transporterworkcity where CustomerId = '$TransporterId') 
				AND addresses.IdCityDes in (select CityId from togo.transporterworkcity where CustomerId = '$TransporterId')
				order by id desc LIMIT $PageSize OFFSET $PageNumber";

                $query_Get_Orders_Total = "Select count(*) as TotalOrders 
                From togo.OrderBidEngin as OrderBidEngin 
                inner join togo.OrderBidAddress as addresses on OrderBidEngin.id=addresses.IdOrderBidEngin
                Where DeliveryId IS NULL AND (IsAcceptDelivery=0 OR IsAcceptDelivery IS NULL) AND
				addresses.IdCity in (select CityId from togo.transporterworkcity where CustomerId = '$TransporterId') 
				AND addresses.IdCityDes in (select CityId from togo.transporterworkcity where CustomerId = '$TransporterId') AND 
				(IsDeleted=0 OR IsDeleted IS NULL) AND (Orderfinished = 0 Or Orderfinished IS NULL)";

                $result_get_Order = $this->dataBase->query($query_Get_Orders);
                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);
                $OrderStatus = "Waiting for bid";


                while ($row = $this->dataBase->fetchArray($result_get_Order)) {
                    array_push($OrderArray, array(
                        "OrderStatus" => "Waiting for bid", "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['createdAt'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'],
                        "CostLoad" => $row['CostLoad'], "PackageType" => $row['TypeLoad'], "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes']
                    ));
                }
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM COMMON_SERVICE
    public function isOrderAccepted($orderId)
    {
        $query = "Select IsAcceptDelivery from togo.OrderBidEngin Where id='$orderId'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);
        if ($row['IsAcceptDelivery'] == 1) {
            return true;
        } else {
            return false;
        }
    }

    // TO_REM TRANS_SERVICE
    public function NetworkSetCostOrder($TransporterId, $OrderId, $CostDelivery)
    {

        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);

        if ($CostDelivery != "0") {
            $CostDelivery = $this->dataBase->escape($CostDelivery);
        }

        if ($this->CheckBlockedCustomer($TransporterId) == false) {

            /* $margin = 0;
            $deal_price = 0; */

            // deal_logic (X)
            if ($TransporterId == 40 && false) {

                // 0. check for deals
                $query_check_for_deal = "select * from togo.deals where transporter_id = '$TransporterId'";
                $result_check_for_deal = $this->dataBase->query($query_check_for_deal);
                $num_rows_check_for_deal = $this->dataBase->numRows($result_check_for_deal);

                if ($num_rows_check_for_deal > 0) {

                    // 1. check deal validaty
                    $row_check_for_deal = $this->dataBase->fetchArray($result_check_for_deal);

                    //// 1.a. check for date
                    $current_date  = date("Y-m-d h:i:s");
                    $deal_start_date = $row_check_for_deal['valid_from'];
                    $deal_end_date = $row_check_for_deal['valid_to'];

                    $is_date_valid = true; // to be changed to false /////////////////////////////////////////////

                    if ($current_date > $deal_start_date && $current_date <= $deal_end_date) {
                        $is_date_valid = true;
                    }

                    //// 2.b. check for source and destination
                    ////// 2.b.alpha. get source and destination ids
                    $query_get_source_and_destination_ids = "
                        select 
                        senderAddress.areaId as sourceAreaId, senderAddress.cityId as sourceCityId, senderAddress.governoratId as sourceGovId, senderAddress.provinceId as sourceProvId,
                        receiverAddress.areaId as destAreaId, receiverAddress.cityId as destCityId, receiverAddress.governoratId as destGovId, receiverAddress.provinceId as destProvId
                        from togo.orderbidengin 
                        inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                        inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id
                        inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id
                        where orderbidengin.id = '$OrderId'
                    ";
                    $result_get_source_and_destination_ids = $this->dataBase->query($query_get_source_and_destination_ids);
                    $row_get_source_and_destination_ids = $this->dataBase->fetchArray($result_get_source_and_destination_ids);

                    $source_area_id = $row_get_source_and_destination_ids['sourceAreaId'];
                    $source_city_id = $row_get_source_and_destination_ids['sourceCityId'];
                    $source_gov_id = $row_get_source_and_destination_ids['sourceGovId'];
                    $source_prov_id = $row_get_source_and_destination_ids['sourceProvId'];

                    $target_area_id = $row_get_source_and_destination_ids['destAreaId'];
                    $target_city_id = $row_get_source_and_destination_ids['destCityId'];
                    $target_gov_id = $row_get_source_and_destination_ids['destGovId'];
                    $target_prov_id = $row_get_source_and_destination_ids['destProvId'];

                    // echo " ---- from: area-" . $source_area_id . ", city: " . $source_city_id . ", gov: " . $source_gov_id . ", prov: " . $source_prov_id . " -------- ";
                    // echo " ---- to: area-" . $target_area_id . ", city: " . $target_city_id . ", gov: " . $target_gov_id . ", prov: " . $target_prov_id . " -------- ";

                    ////// 2.b.beta. get price if exists
                    $deal_id = $row_check_for_deal['id'];

                    // echo " ------ deal id: " . $deal_id . " ----- ";

                    $query_get_deals_prices = "
                        select price 
                        from togo.deal_prices
                        where deal_id = '$deal_id' 
                        and 
                        (
                            (from_address_id = '$source_area_id' and from_address_level = 'Area') 
                            or (from_address_id = '$source_city_id' and from_address_level = 'City')
                            or (from_address_id = '$source_gov_id' and from_address_level = 'Province')
                            or (from_address_id = '$source_prov_id' and from_address_level = 'Region')
                        ) and (
                            (to_address_id = '$target_area_id' and to_address_level = 'Area') 
                            or (to_address_id = '$target_city_id' and to_address_level = 'City')
                            or (to_address_id = '$target_gov_id' and to_address_level = 'Province')
                            or (to_address_id = '$target_prov_id' and to_address_level = 'Region')
                        ) order by from_address_level DESC, to_address_level DESC LIMIT 1
                    ";

                    $result_get_deals_prices = $this->dataBase->query($query_get_deals_prices);
                    $num_rows_get_deals_prices = $this->dataBase->numRows($result_get_deals_prices);

                    if ($num_rows_get_deals_prices > 0 && $is_date_valid) {

                        /* $min_price = 100000;
                        while ($row_get_deals_prices = $this->dataBase->fetchArray($result_get_deals_prices)) {
                            $temp_price = $row_get_deals_prices['price'];

                            if ($temp_price < $min_price) {
                                $min_price = $temp_price;
                            }
                        } */

                        $row_get_deals_prices = $this->dataBase->fetchArray($result_get_deals_prices);
                        $deal_price = $row_get_deals_prices['price'];

                        // 2. get market price:

                        $query_get_avg_market_price = "
                            select avg(deliveryacceptordertable.CostDelivery) as avgCost
                            from togo.orderbidengin
                            inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                            inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id and senderAddress.cityId = '$source_city_id'
                            inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id and receiverAddress.cityId = '$target_city_id'
                            left outer join deliveryacceptordertable on orderbidengin.id = deliveryacceptordertable.IdOrder
                            where orderbidengin.DetailsLoad not like '%test%' and orderbidengin.DetailsLoad not like '%tset%' and orderbidengin.CustomerId <> 41 and orderbidengin.CustomerId <> 3 and orderbidengin.CustomerId <> 94
                            ";
                        $result_get_avg_market_price = $this->dataBase->query($query_get_avg_market_price);
                        $row_get_avg_market_price = $this->dataBase->fetchArray($result_get_avg_market_price);
                        $avg_market_price = $row_get_avg_market_price['avgCost'];

                        // echo " ------- avg_market_price: " . gettype($avg_market_price) . ", deal_price: " . gettype($deal_price) . ", CostDelivery: " . gettype($CostDelivery) . " -------- ";

                        $avg_deal = floatval($avg_market_price) - floatval($deal_price);
                        $cost_15 = floatval($CostDelivery) * 0.15;

                        $margin = max($avg_deal, $cost_15, 1.0);

                        /* $max_value = 1;

                        if (($avg_market_price - $deal_price) > $max_value) {
                            $max_value = ($avg_market_price - $deal_price);
                        }

                        if (($CostDelivery * .15) > $max_value) {
                            $max_value = ($CostDelivery * .15);
                        }

                        $margin = $max_value; */

                        $CostDelivery = $margin + $deal_price;
                        $CostDelivery = number_format((float)$CostDelivery, 1, '.', '');
                        $decimal = $CostDelivery - floor($CostDelivery);
                        if ($decimal < 0.5) {
                            $rounded_num = floor($CostDelivery) + 0.0;
                        } else {
                            $rounded_num = floor($CostDelivery) + 0.5;
                        }

                        $CostDelivery =  $rounded_num;

                        // echo "  ------- avg_market_price: " . $avg_market_price . " -------- ";
                        // echo "  ------- (avg_market_price - deal_price): " . $avg_deal . " -------- ";
                        // echo "  ------- (CostDelivery * .15): " . $cost_15 . " -------- ";

                        // echo " ----- deal price: " . $deal_price . " ---- margin: " . $margin . " ------ total" . $CostDelivery . " ---------------";
                    }
                }
            }

            if ($TransporterId == 145 && false) {

                //// 2.b. check for source and destination
                ////// 2.b.alpha. get source and destination ids
                $query_get_source_and_destination_ids = "
                        select 
                        senderAddress.areaId as sourceAreaId, senderAddress.cityId as sourceCityId, senderAddress.governoratId as sourceGovId, senderAddress.provinceId as sourceProvId,
                        receiverAddress.areaId as destAreaId, receiverAddress.cityId as destCityId, receiverAddress.governoratId as destGovId, receiverAddress.provinceId as destProvId
                        from togo.orderbidengin 
                        inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                        inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id
                        inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id
                        where orderbidengin.id = '$OrderId'
                    ";
                $result_get_source_and_destination_ids = $this->dataBase->query($query_get_source_and_destination_ids);
                $row_get_source_and_destination_ids = $this->dataBase->fetchArray($result_get_source_and_destination_ids);

                $source_area_id = $row_get_source_and_destination_ids['sourceAreaId'];
                $source_city_id = $row_get_source_and_destination_ids['sourceCityId'];
                $source_gov_id = $row_get_source_and_destination_ids['sourceGovId'];
                $source_prov_id = $row_get_source_and_destination_ids['sourceProvId'];

                $target_area_id = $row_get_source_and_destination_ids['destAreaId'];
                $target_city_id = $row_get_source_and_destination_ids['destCityId'];
                $target_gov_id = $row_get_source_and_destination_ids['destGovId'];
                $target_prov_id = $row_get_source_and_destination_ids['destProvId'];

                $deal_price = $CostDelivery;

                // 2. get market price:

                $query_get_avg_market_price = "
                            select avg(deliveryacceptordertable.CostDelivery) as avgCost
                            from togo.orderbidengin
                            inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                            inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id and senderAddress.cityId = '$source_city_id'
                            inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id and receiverAddress.cityId = '$target_city_id'
                            left outer join deliveryacceptordertable on orderbidengin.id = deliveryacceptordertable.IdOrder
                            where orderbidengin.DetailsLoad not like '%test%' and orderbidengin.DetailsLoad not like '%tset%' and orderbidengin.CustomerId <> 41 and orderbidengin.CustomerId <> 3 and orderbidengin.CustomerId <> 94
                            ";
                $result_get_avg_market_price = $this->dataBase->query($query_get_avg_market_price);
                $row_get_avg_market_price = $this->dataBase->fetchArray($result_get_avg_market_price);
                $avg_market_price = $row_get_avg_market_price['avgCost'];

                // echo " ------- avg_market_price: " . gettype($avg_market_price) . ", deal_price: " . gettype($deal_price) . ", CostDelivery: " . gettype($CostDelivery) . " -------- ";

                $avg_deal = floatval($avg_market_price) - floatval($deal_price);
                $cost_15 = floatval($CostDelivery) * 0.15;

                $margin = max($avg_deal, $cost_15, 1.0);

                /* $max_value = 1;

                        if (($avg_market_price - $deal_price) > $max_value) {
                            $max_value = ($avg_market_price - $deal_price);
                        }

                        if (($CostDelivery * .15) > $max_value) {
                            $max_value = ($CostDelivery * .15);
                        }

                        $margin = $max_value; */

                $CostDelivery = $margin + $deal_price;
                $CostDelivery = number_format((float)$CostDelivery, 1, '.', '');
                $decimal = $CostDelivery - floor($CostDelivery);
                if ($decimal < 0.5) {
                    $rounded_num = floor($CostDelivery) + 0.0;
                } else {
                    $rounded_num = floor($CostDelivery) + 0.5;
                }

                $CostDelivery =  $rounded_num;

                // echo "  ------- avg_market_price: " . $avg_market_price . " -------- ";
                // echo "  ------- (avg_market_price - deal_price): " . $avg_deal . " -------- ";
                // echo "  ------- (CostDelivery * .15): " . $cost_15 . " -------- ";

                // echo " ----- deal price: " . $deal_price . " ---- margin: " . $margin . " ------ total" . $CostDelivery . " ---------------";

            }

            /* if ($margin > 0) {
                $query_update_order_is_deal = "update togo.orderbidengin set is_deal = 1 where id = '$OrderId'";
                $result_update_order_is_deal = $this->dataBase->query($query_update_order_is_deal);
            } */

            // if transporter is a foreign company -> don't create offer if no deal found // TODO
            /* $query_check_transporter = "select foreign_company_id from transportertable where CustomerId = '$TransporterId'";
            $result_check_transporter = $this->dataBase->query($query_check_transporter);
            $row_check_transporter = $this->dataBase->fetchArray($result_check_transporter);
            $foreign_company_id = $row_check_transporter['foreign_company_id'];

            $make_offer = true;
            
            if ($foreign_company_id != null && $margin == 0) {
                $make_offer = false;
            } */

            if (/* $make_offer */true) {

                /* if ($deal != -1 && ($CostDelivery - $deal != 0) && false) {
                    $margin = $CostDelivery - $deal;
                    $deal_price = $deal;
                }

                $query_Set_Price = "INSERT into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery, isAutoOffer, togo_margin, original_cost_delivery) 
                Values ('$OrderId','$TransporterId','$CostDelivery', 1, '$margin', '$deal_price')"; */

                $query_Set_Price = "INSERT into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery, isAutoOffer) 
                Values ('$OrderId','$TransporterId','$CostDelivery', 1)";

                // echo "here" . $CostDelivery;

                $result_Set_Price = $this->dataBase->query($query_Set_Price);
                if ($result_Set_Price == true) {
                    // echo "InsertedBid";
                } else {
                    // echo "NotInsertedBid";
                }
            }
        } else {
            // echo "Blocked";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterSetCostOrder($TransporterId, $OrderId, $CostDelivery, $TokenDevice)
    {

        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        if ($CostDelivery != "0") {
            $CostDelivery = $this->dataBase->escape($CostDelivery);
        }

        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                $orderService = new OrderService($this->dataBase);
                $order = $orderService->getOrder($OrderId);
                //TODO:: check if isDeleted or deleted (there are two columns in DB)
                if ($order['IsDeleted'] != null || $order['deleted'] != "0") {
                    echo "orderDeleted";
                } else if ($order['IsAcceptDelivery'] != 1) {
                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad 
                    From togo.OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
                    AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";
                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];

                        if ($deliveryWay == 1) {
                        } else
                            if ($deliveryWay == 2) {
                            //if($this->getBalance($TransporterId) >= ($CostLoad+$CostDelivery))
                            $var = $this->BalanceIsEnough($TransporterId, $CostLoad);
                            if ($var == 1) {
                                echo "trans have enough balance" . $var . $CostLoad;
                            } else {
                                echo "ChargeBalanace";
                                return;
                            }
                        } else
                                if ($deliveryWay == 3) {
                        } else
                                    if ($deliveryWay == 4) {
                            $var = $this->BalanceIsEnough($TransporterId, $CostLoad);
                            if ($var == 1) {
                                echo "trans have enough balance" . $var . $CostLoad;
                            } else {
                                echo "ChargeBalanace", $var . $CostLoad;
                                return;
                            }
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        $query_Check_Transport_AddedValue = "Select * from togo.DeliveryAcceptOrderTable Where IdTransporter='$TransporterId' AND IdOrder='$OrderId'";
                        $result_Check_Added_Value = $this->dataBase->query($query_Check_Transport_AddedValue);
                        $row_count = $this->dataBase->numRows($result_Check_Added_Value);

                        if ($row_count > 0) {
                            echo "AlreadyAddedValue";
                        } else {

                            // deal_logic
                            if (false) {

                                // 0. check for deals
                                $query_check_for_deal = "select * from togo.deals where transporter_id = '$TransporterId'";
                                $result_check_for_deal = $this->dataBase->query($query_check_for_deal);
                                $num_rows_check_for_deal = $this->dataBase->numRows($result_check_for_deal);

                                if ($num_rows_check_for_deal > 0) {

                                    // 1. check deal validaty
                                    $row_check_for_deal = $this->dataBase->fetchArray($result_check_for_deal);

                                    //// 1.a. check for date
                                    $current_date  = date("Y-m-d h:i:s");
                                    $deal_start_date = $row_check_for_deal['valid_from'];
                                    $deal_end_date = $row_check_for_deal['valid_to'];

                                    $is_date_valid = false;

                                    if ($current_date > $deal_start_date && $current_date <= $deal_end_date) {
                                        $is_date_valid = true;
                                    }

                                    //// 2.b. check for source and destination
                                    ////// 2.b.alpha. get source and destination ids
                                    $query_get_source_and_destination_ids = "
                                        select 
                                        senderAddress.areaId as sourceAreaId, senderAddress.cityId as sourceCityId, senderAddress.governoratId as sourceGovId, senderAddress.provinceId as sourceProvId,
                                        receiverAddress.areaId as destAreaId, receiverAddress.cityId as destCityId, receiverAddress.governoratId as destGovId, receiverAddress.provinceId as destProvId
                                        from togo.orderbidengin 
                                        inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                                        inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id
                                        inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id
                                        where orderbidengin.id = '$OrderId'
                                    ";
                                    $result_get_source_and_destination_ids = $this->dataBase->query($query_get_source_and_destination_ids);
                                    $row_get_source_and_destination_ids = $this->dataBase->fetchArray($result_get_source_and_destination_ids);

                                    $source_area_id = $row_get_source_and_destination_ids['sourceAreaId'];
                                    $source_city_id = $row_get_source_and_destination_ids['sourceCityId'];
                                    $source_gov_id = $row_get_source_and_destination_ids['sourceGovId'];
                                    $source_prov_id = $row_get_source_and_destination_ids['sourceProvId'];

                                    $target_area_id = $row_get_source_and_destination_ids['destAreaId'];
                                    $target_city_id = $row_get_source_and_destination_ids['destCityId'];
                                    $target_gov_id = $row_get_source_and_destination_ids['destGovId'];
                                    $target_prov_id = $row_get_source_and_destination_ids['destProvId'];

                                    ////// 2.b.beta. get price if exists
                                    $deal_id = $row_check_for_deal['id'];

                                    $query_get_deals_prices = "
                                        select price 
                                        from togo.deal_prices
                                        where deal_id = '$deal_id' 
                                        and 
                                        (
                                            (from_address_id = '$source_area_id' and from_address_level = 'Area') 
                                            or (from_address_id = '$source_city_id' and from_address_level = 'City')
                                            or (from_address_id = '$source_gov_id' and from_address_level = 'Province')
                                            or (from_address_id = '$source_prov_id' and from_address_level = 'Region')
                                        ) and (
                                            (to_address_id = '$target_area_id' and to_address_level = 'Area') 
                                            or (to_address_id = '$target_city_id' and to_address_level = 'City')
                                            or (to_address_id = '$target_gov_id' and to_address_level = 'Province')
                                            or (to_address_id = '$target_prov_id' and to_address_level = 'Region')
                                        )    
                                    ";

                                    $result_get_deals_prices = $this->dataBase->query($query_get_deals_prices);
                                    $num_rows_get_deals_prices = $this->dataBase->numRows($result_get_deals_prices);

                                    if ($num_rows_get_deals_prices > 0 && $is_date_valid) {

                                        $max_price = 0;
                                        while ($row_get_deals_prices = $this->dataBase->fetchArray($result_get_deals_prices)) {
                                            $temp_price = $row_get_deals_prices['price'];

                                            if ($temp_price > $max_price) {
                                                $max_price = $temp_price;
                                            }
                                        }

                                        $deal_price = $max_price;

                                        // 2. get market price:

                                        $query_get_avg_market_price = "
                                            select avg(deliveryacceptordertable.CostDelivery) as avgCost
                                            from togo.orderbidengin
                                            inner join togo.orderbidaddress on orderbidengin.id = orderbidaddress.IdOrderBidEngin
                                            inner join togo.addresses as senderAddress on orderbidaddress.SenderAddressId = senderAddress.id and senderAddress.cityId = '$source_city_id'
                                            inner join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id and receiverAddress.cityId = '$target_city_id'
                                            left outer join deliveryacceptordertable on orderbidengin.id = deliveryacceptordertable.IdOrder
                                            ";
                                        $result_get_avg_market_price = $this->dataBase->query($query_get_avg_market_price);
                                        $row_get_avg_market_price = $this->dataBase->fetchArray($result_get_avg_market_price);
                                        $avg_market_price = $row_get_avg_market_price['avgCost'];

                                        $CostDelivery = max($deal_price - $avg_market_price, $deal_price * 1.15);
                                    }
                                }
                            }


                            $query_Set_Price = "Insert into togo.DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery) Values ('$OrderId','$TransporterId','$CostDelivery')";

                            /* edited (record the action) */
                            // $party_one_id, $party_two_id, $order_id, $description, $action_id
                            $this->recordAction($TransporterId, -1, $OrderId, $CostDelivery, '', "Bid Offered", 3);

                            echo "here" . $CostDelivery;

                            /*siouri*/
                            $result_Set_Price = $this->dataBase->query($query_Set_Price);
                            if ($result_Set_Price == true) {
                                //SendNotify To Client
                                echo "InsertedBid";

                                $query_get_Transporter_Name = "Select FirstName , LastName from togo.TransporterTable Where CustomerId='$TransporterId'";
                                $result_Name_Customer = $this->dataBase->query($query_get_Transporter_Name);
                                $row_Name_Customer = $this->dataBase->fetchArray($result_Name_Customer);
                                $Name_Customer = $row_Name_Customer['FirstName'] . ' ' . $row_Name_Customer['LastName'];

                                $query_Get_Token_Client = "Select CustomerClient.Token As TokenNotifiy, CustomerClient.WebToken As webTokenNotifiy 
                                From togo.OrderBidEngin As OrderBidEngin, togo.Customer As CustomerClient
                                Where OrderBidEngin.id='$OrderId' AND OrderBidEngin.CustomerId = CustomerClient.id";
                                $result_Token_Customer = $this->dataBase->query($query_Get_Token_Client);
                                $row_Token_Customer = $this->dataBase->fetchArray($result_Token_Customer);
                                $Token_Customer = $row_Token_Customer['TokenNotifiy'];

                                $tokens = array();

                                array_push($tokens, $Token_Customer);

                                $transporter = $this->getTransporterNameAndImage($TransporterId);
                                $data = array(
                                    'orderId' => $OrderId,
                                    'transporterName' => $transporter['AccountName'],
                                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                                    'bid' => $CostDelivery,
                                    'intent' => 'CostOffersOrder'
                                );

                                /* edited (add web notification ↓) */

                                $Web_Token_Customer = $row_Token_Customer['webTokenNotifiy'];

                                $webTokens = array();

                                array_push($webTokens, $Web_Token_Customer);

                                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                    if ($row['adminTokenNotify'] != null) {
                                        array_push($webTokens, $row['adminTokenNotify']);
                                    }
                                }

                                $title = "Bid Offered";
                                $body = $transporter['AccountName'] . " offered " . $CostDelivery . "NIS bid on order " . $OrderId;
                                // $image = $transporter['PersonalImgPath'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                            } else {
                                echo "NotInsertedBid";
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                    }
                } else {
                    echo "OrderAlreadyAccepted";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ShowClientOrder($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $OrderArray = array();

        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $searchQuery = $searchStr == "no_str" ? "" : " AND (engin.id LIKE '%" . $searchStr . "%' OR clientbusinesstable.BusinessName LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR citytable.name LIKE '%" . $searchStr . "%') ";

                $query_Get_Orders = "Select Distinct (select count(deliveryacceptordertable.IdOrder) from togo.deliveryacceptordertable as deliveryacceptordertable
		        where deliveryacceptordertable.IdOrder = engin.id) as bidsCount, engin.*, OrderBidAddress.OtherDetails, OrderBidAddress.OtherDetailsDes, receiverAddress.name as receiverName, transporterstimelinetb.transporter_bidprice as deliveryCost, citytable.name as toCityName 
				From togo.OrderBidEngin as engin 
                left join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.addresses as receiverAddress on OrderBidAddress.ReciverAddressId = receiverAddress.id
                left outer join togo.transporterstimelinetb as transporterstimelinetb on engin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
				Where engin.CustomerId='$ClientId' AND (engin.Orderfinished = 0 Or engin.Orderfinished IS NULL) 
				AND (engin.IsDeleted=0 Or engin.IsDeleted IS NULL) AND (engin.IsAcceptDelivery = 0 OR engin.IsAcceptDelivery IS NULL)" . $searchQuery . "
				Order by engin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";

                $query_Get_Orders_Total = "Select count(*) as TotalOrders 
                From togo.OrderBidEngin as engin
                left join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.addresses as receiverAddress on OrderBidAddress.ReciverAddressId = receiverAddress.id
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                Where engin.CustomerId='$ClientId' AND (engin.Orderfinished =0 Or engin.Orderfinished IS NULL)
                AND (engin.IsDeleted=0 Or engin.IsDeleted IS NULL) AND (engin.IsAcceptDelivery = 0 OR engin.IsAcceptDelivery IS NULL)" . $searchQuery;

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);

                $result_get_Order = $this->dataBase->query($query_Get_Orders);
                while ($row = $this->dataBase->fetchArray($result_get_Order)) {

                    /* edited (add OrderStatus, bidsCount, order_status, IsReturnedOrder, IsStuckOrder) */
                    array_push($OrderArray, array(
                        "IsReturnedOrder" => $row['IsReturnedOrder'], "IsStuckOrder" => $row['IsStuckOrder'], "order_status" => $row['order_status'], "bidsCount" => $row['bidsCount'], "OrderStatus" => "Waiting for bid", "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'], "PackageType" => $row['TypeLoad'],
                        "CostLoad" => $row['CostLoad'], "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'],
                        "receiverName" => $row['receiverName'], "toCityName" => $row['toCityName']
                    ));
                }
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientShowBidRequists($ClientId, $OrderId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        //        $OrderDetailsArray = array();
        $OrderCostArray = array();
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $query_Get_Bid_costs = "SELECT TransporterTableCustomer.CustomerId As IdTransporterBidRequist ,TransporterTableCustomer.FirstName As FullName,TransporterTableCustomer.LastName As LastName
            , DeliveryAcceptTable.CostDelivery As CostDelivery , DeliveryAcceptTable.IdTransporter As TransporterId,TransporterTableCustomer.PersonalImgPath As TPPhoto, customerInfo.PhoneNumber, BidOrder.currency, BidOrder.from_currency_value
            From togo.TransporterTable As TransporterTableCustomer, togo.DeliveryAcceptOrderTable As DeliveryAcceptTable
            , togo.OrderBidEngin As BidOrder, togo.customer as customerInfo
            Where TransporterTableCustomer.CustomerId = DeliveryAcceptTable.IdTransporter AND customerInfo.id = DeliveryAcceptTable.IdTransporter
            AND DeliveryAcceptTable.IdOrder=BidOrder.id AND (BidOrder.IsAcceptDelivery=0 OR BidOrder.IsAcceptDelivery IS NULL)
            AND (BidOrder.Orderfinished = 0 Or BidOrder.Orderfinished IS NULL) AND DeliveryAcceptTable.IdOrder='$OrderId' order by BidOrder.id desc
            ";

                $Result_Get_Bid_costs = $this->dataBase->query($query_Get_Bid_costs);
                $row_count_bid = $this->dataBase->numRows($Result_Get_Bid_costs);

                while ($row_Get_Bid_costs = $this->dataBase->fetchArray($Result_Get_Bid_costs)) {
                    $IdTrans = $row_Get_Bid_costs['TransporterId'];

                    $query_Get_Car_Photo = "select * from togo.TransporterCarInfo where CustomerId='786'";
                    $Result_Get_Transp_Car = $this->dataBase->query($query_Get_Car_Photo);
                    $row_Get_Photo = $this->dataBase->fetchArray($Result_Get_Transp_Car);

                    // jojojo
                    $query_GetRate = "select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                from togo.OrderBidEngin As OrderTrip , togo.TripRating As Reate 
                where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                    $Result_Get_Rate = $this->dataBase->query($query_GetRate);
                    $CountRate = 0;
                    $SumRate = 0;
                    $RateTotal = 0;
                    while ($row_Get_Rate = $this->dataBase->fetchArray($Result_Get_Rate)) {
                        $rateValue = $row_Get_Rate['rate'];
                        $CountRate++;
                        $SumRate += $rateValue;
                    }

                    if ($CountRate == 0) {
                        $RateTotal = 0;
                    } else {
                        //$RateTotal = $rateValue/$CountRate;
                        $RateTotal = $SumRate / $CountRate;
                    }


                    array_push($OrderCostArray, array(
                        "IdTransporterBidRequist" => $row_Get_Bid_costs['IdTransporterBidRequist'], "PhoneNumber" => $row_Get_Bid_costs['PhoneNumber'],
                        "BidCost" => $row_Get_Bid_costs['CostDelivery'], "TransporterName" => $row_Get_Bid_costs['FullName'] . ' ' .
                            $row_Get_Bid_costs['LastName'], "TransporterPersonalImg" => $row_Get_Bid_costs['TPPhoto'],
                        "TotalRate" => $RateTotal, "CarImg" => $row_Get_Photo['CarImgPath'], "currency" => $row_Get_Photo['currency'], "from_currency_value" => $row_Get_Photo['from_currency_value']
                    ));
                }

                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                $orderService = new OrderService($this->dataBase);

                $data = array("OrderDetail" => $orderService->getOrder($OrderId), "CostDetail" => $OrderCostArray, "BidCount" => $row_count_bid);
                echo json_encode($data);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    /* edited from the above function, adding client network as offers to assign to */
    public function ClientShowBidRequistsAndNetwork($ClientId, $OrderId, $DeliveryCost, $TokenDevice, $fromId, $toId)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $DeliveryCost = $this->dataBase->escape($DeliveryCost);

        //        $OrderDetailsArray = array();
        $OrderCostArray = array();
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $query_Get_Bid_costs = "Select customer.PhoneNumber as mobile, TransporterTableCustomer.CustomerId As IdTransporterBidRequist ,TransporterTableCustomer.FirstName As FullName,TransporterTableCustomer.LastName As LastName
            , DeliveryAcceptTable.CostDelivery As CostDelivery , DeliveryAcceptTable.IdTransporter As TransporterId,TransporterTableCustomer.PersonalImgPath As TPPhoto
            From togo.TransporterTable As TransporterTableCustomer 
            inner join togo.customer as customer on TransporterTableCustomer.CustomerId = customer.id, togo.DeliveryAcceptOrderTable As DeliveryAcceptTable
            , togo.OrderBidEngin As BidOrder
            Where TransporterTableCustomer.CustomerId = DeliveryAcceptTable.IdTransporter
            AND DeliveryAcceptTable.IdOrder=BidOrder.id AND (BidOrder.IsAcceptDelivery=0 OR BidOrder.IsAcceptDelivery IS NULL)
            AND (BidOrder.Orderfinished = 0 Or BidOrder.Orderfinished IS NULL) AND DeliveryAcceptTable.IdOrder='$OrderId' order by BidOrder.id desc
            ";

                $Result_Get_Bid_costs = $this->dataBase->query($query_Get_Bid_costs);
                $row_count_bid = $this->dataBase->numRows($Result_Get_Bid_costs);

                while ($row_Get_Bid_costs = $this->dataBase->fetchArray($Result_Get_Bid_costs)) {
                    $IdTrans = $row_Get_Bid_costs['TransporterId'];

                    $isEnoughBalance = "1";
                    $isNetworkMember = "0";

                    // edited, (check if each transporter have enough balance)
                    if ($DeliveryCost != "") {
                        $varr = $this->BalanceIsEnough($IdTrans, $DeliveryCost);
                        if ($varr == 1) {
                            // echo "have enough balance client";
                            $isEnoughBalance = "1";
                        } else {
                            /* echo "NoClientBalance";
                            return; */
                            $isEnoughBalance = "0";
                        }
                    }

                    // edited, (check if the transporter is a network member)
                    $query_checkIfNetwork = "select * from togo.client_network where ClientId='$ClientId' and TransporterId='$IdTrans'";
                    $result_checkIfNetwork = $this->dataBase->query($query_checkIfNetwork);
                    $row_count_network = $this->dataBase->numRows($result_checkIfNetwork);
                    if ($row_count_network > 0) {
                        $isNetworkMember = "1";
                    } else {
                        $isNetworkMember = "0";
                    }

                    $query_Get_Car_Photo = "select * from togo.TransporterCarInfo where CustomerId='786'";
                    $Result_Get_Transp_Car = $this->dataBase->query($query_Get_Car_Photo);
                    $row_Get_Photo = $this->dataBase->fetchArray($Result_Get_Transp_Car);

                    $query_GetRate = "select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                from togo.OrderBidEngin As OrderTrip , togo.TripRating As Reate 
                where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                    $Result_Get_Rate = $this->dataBase->query($query_GetRate);
                    $CountRate = 0;
                    $SumRate = 0;
                    $RateTotal = 0;
                    while ($row_Get_Rate = $this->dataBase->fetchArray($Result_Get_Rate)) {
                        $rateValue = $row_Get_Rate['rate'];
                        $CountRate++;
                        $SumRate += $rateValue;
                    }

                    if ($CountRate == 0) {
                        $RateTotal = 0;
                    } else {
                        //$RateTotal = $rateValue/$CountRate;
                        $RateTotal = $SumRate / $CountRate;
                    }

                    array_push($OrderCostArray, array(
                        "IdTransporterBidRequist" => $row_Get_Bid_costs['IdTransporterBidRequist'],
                        "BidCost" => $row_Get_Bid_costs['CostDelivery'],
                        "TransporterName" => $row_Get_Bid_costs['FullName'] . ' ' . $row_Get_Bid_costs['LastName'],
                        "TransporterPersonalImg" => $row_Get_Bid_costs['TPPhoto'],
                        "TotalRate" => $RateTotal,
                        "CarImg" => $row_Get_Photo['CarImgPath'],
                        "mobile" => $row_Get_Bid_costs['mobile'],
                        "isEnoughBalance" => $isEnoughBalance,
                        "isNetwork" => $isNetworkMember,
                    ));
                }

                // add netwok
                /* $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter,
				cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, priceTb.deliveryPrice as price from client_network as client_net
                inner join transportertable as trans on client_net.TransporterId = trans.CustomerId 
                inner join customer as cust on client_net.TransporterId = cust.id 
                inner join transporterroadprice as priceTb on client_net.TransporterId = priceTb.transporterId and priceTb.fromCityId='$fromId' and priceTb.toCityId='$toId'
                where client_net.ClientId = '$ClientId'
                AND client_net.TransporterId in (select CustomerId from transporterworkcity where CityId='$fromId' and deleted=0)
                AND client_net.TransporterId in (select CustomerId from transporterworkcity where CityId='$toId' and deleted=0)";

                $result_get_client_network = $this->dataBase->query($query_get_client_network);
                while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                    array_push($OrderCostArray, array(
                        "IdTransporterBidRequist" => $row['idTransporter'],
                        "BidCost" => $row['price'],
                        "TransporterName" => $row['FullName'],
                        "TransporterPersonalImg" => $row['Image'],
                        "isNetwork" => "1",
                        // "TotalRate" => $RateTotal, "CarImg" => $row['CarImgPath'] // <---------------------
                    ));
                } */

                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                $orderService = new OrderService($this->dataBase);

                $data = array("OrderDetail" => $orderService->getOrder($OrderId), "CostDetail" => $OrderCostArray, "BidCount" => $row_count_bid);
                echo json_encode($data);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function AdminCheckTripCost($ClientId, $OrderId, $DeliveryCost, $adminId, $adminToken)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $adminId = $this->dataBase->escape($adminId);
        $adminToken = $this->dataBase->escape($adminToken);
        $DeliveryCost = $this->dataBase->escape($DeliveryCost);

        //        $OrderDetailsArray = array();
        $OrderCostArray = array();
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            $query_Get_Bid_costs = "Select customer.PhoneNumber as mobile, TransporterTableCustomer.CustomerId As IdTransporterBidRequist ,TransporterTableCustomer.FirstName As FullName,TransporterTableCustomer.LastName As LastName
            , DeliveryAcceptTable.CostDelivery As CostDelivery , DeliveryAcceptTable.IdTransporter As TransporterId,TransporterTableCustomer.PersonalImgPath As TPPhoto
            From togo.TransporterTable As TransporterTableCustomer 
            inner join togo.customer as customer on TransporterTableCustomer.CustomerId = customer.id, togo.DeliveryAcceptOrderTable As DeliveryAcceptTable
            , togo.OrderBidEngin As BidOrder
            Where TransporterTableCustomer.CustomerId = DeliveryAcceptTable.IdTransporter
            AND DeliveryAcceptTable.IdOrder=BidOrder.id AND (BidOrder.IsAcceptDelivery=0 OR BidOrder.IsAcceptDelivery IS NULL)
            AND (BidOrder.Orderfinished = 0 Or BidOrder.Orderfinished IS NULL) AND DeliveryAcceptTable.IdOrder='$OrderId' order by BidOrder.id desc
            ";

            $Result_Get_Bid_costs = $this->dataBase->query($query_Get_Bid_costs);
            $row_count_bid = $this->dataBase->numRows($Result_Get_Bid_costs);

            while ($row_Get_Bid_costs = $this->dataBase->fetchArray($Result_Get_Bid_costs)) {
                $IdTrans = $row_Get_Bid_costs['TransporterId'];

                $isEnoughBalance = "1";
                $isNetworkMember = "0";

                // edited, (check if each transporter have enough balance)
                if ($DeliveryCost != "") {
                    $varr = $this->BalanceIsEnough($IdTrans, $DeliveryCost);
                    if ($varr == 1) {
                        // echo "have enough balance client";
                        $isEnoughBalance = "1";
                    } else {
                        /* echo "NoClientBalance";
                            return; */
                        $isEnoughBalance = "0";
                    }
                }

                // edited, (check if the transporter is a network member)
                $query_checkIfNetwork = "select * from togo.client_network where ClientId='$ClientId' and TransporterId='$IdTrans'";
                $result_checkIfNetwork = $this->dataBase->query($query_checkIfNetwork);
                $row_count_network = $this->dataBase->numRows($result_checkIfNetwork);
                if ($row_count_network > 0) {
                    $isNetworkMember = "1";
                } else {
                    $isNetworkMember = "0";
                }

                $query_Get_Car_Photo = "select * from togo.TransporterCarInfo where CustomerId='786'";
                $Result_Get_Transp_Car = $this->dataBase->query($query_Get_Car_Photo);
                $row_Get_Photo = $this->dataBase->fetchArray($Result_Get_Transp_Car);

                $query_GetRate = "select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                from togo.OrderBidEngin As OrderTrip , togo.TripRating As Reate 
                where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                $Result_Get_Rate = $this->dataBase->query($query_GetRate);
                $CountRate = 0;
                $SumRate = 0;
                $RateTotal = 0;
                while ($row_Get_Rate = $this->dataBase->fetchArray($Result_Get_Rate)) {
                    $rateValue = $row_Get_Rate['rate'];
                    $CountRate++;
                    $SumRate += $rateValue;
                }

                if ($CountRate == 0) {
                    $RateTotal = 0;
                } else {
                    //$RateTotal = $rateValue/$CountRate;
                    $RateTotal = $SumRate / $CountRate;
                }

                array_push($OrderCostArray, array(
                    "IdTransporterBidRequist" => $row_Get_Bid_costs['IdTransporterBidRequist'],
                    "BidCost" => $row_Get_Bid_costs['CostDelivery'],
                    "TransporterName" => $row_Get_Bid_costs['FullName'] . ' ' . $row_Get_Bid_costs['LastName'],
                    "TransporterPersonalImg" => $row_Get_Bid_costs['TPPhoto'],
                    "TotalRate" => $RateTotal,
                    "CarImg" => $row_Get_Photo['CarImgPath'],
                    "mobile" => $row_Get_Bid_costs['mobile'],
                    "isEnoughBalance" => $isEnoughBalance,
                    "isNetwork" => $isNetworkMember,
                ));
            }

            // add netwok
            /* $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName, trans.CustomerId as idTransporter,
				cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, priceTb.deliveryPrice as price from client_network as client_net
                inner join transportertable as trans on client_net.TransporterId = trans.CustomerId 
                inner join customer as cust on client_net.TransporterId = cust.id 
                inner join transporterroadprice as priceTb on client_net.TransporterId = priceTb.transporterId and priceTb.fromCityId='$fromId' and priceTb.toCityId='$toId'
                where client_net.ClientId = '$ClientId'
                AND client_net.TransporterId in (select CustomerId from transporterworkcity where CityId='$fromId' and deleted=0)
                AND client_net.TransporterId in (select CustomerId from transporterworkcity where CityId='$toId' and deleted=0)";

                $result_get_client_network = $this->dataBase->query($query_get_client_network);
                while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                    array_push($OrderCostArray, array(
                        "IdTransporterBidRequist" => $row['idTransporter'],
                        "BidCost" => $row['price'],
                        "TransporterName" => $row['FullName'],
                        "TransporterPersonalImg" => $row['Image'],
                        "isNetwork" => "1",
                        // "TotalRate" => $RateTotal, "CarImg" => $row['CarImgPath'] // <---------------------
                    ));
                } */

            require_once(dirname(__FILE__) . "/Services/OrderService.php");
            $orderService = new OrderService($this->dataBase);

            $data = array("OrderDetail" => $orderService->getOrder($OrderId), "CostDetail" => $OrderCostArray, "BidCount" => $row_count_bid);
            echo json_encode($data);
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function isBidChanged($oldPrice, $orderId, $transporterId)
    {
        $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$transporterId'";
        $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
        $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
        $costDelivery = $row_Get_Cost_Tra['CostDelivery'];
        return $costDelivery != $oldPrice;
    }

    // TO_REM CLIENT_SERVICE
    public function AcceptClientBidEngie($ClientId, $TransporterId, $OldPrice, $OrderId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $OldPrice = $this->dataBase->escape($OldPrice);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                if ($this->isBidChanged($OldPrice, $OrderId, $TransporterId) == false) {
                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery, togo_margin from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad From togo.OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
                                            AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);
                    // echo "before check balance";
                    if ($row_count_Load > 0) {

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];

                        if ($deliveryWay == 1) {
                            //if($this->getBalance($ClientId) >= $costDelivery )
                            $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance' . $varr . "dia" . $costDelivery;
                            } else {
                                // echo "ClientChargeBalanace" . $varr . "dia" . $costDelivery;
                                echo "ClientChargeBalanace";
                                return;
                            }
                        } else
                            if ($deliveryWay == 2) {
                            //if($this->getBalance($ClientId) >= $costDelivery )
                            $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($var == 1) {
                                //if($this->getBalance($TransporterId) >= ($CostLoad+$costDelivery))
                                $varr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                                if ($varr == 1) {
                                    echo 'have enough balance for trans ';
                                } else {
                                    echo "TransporterNeedCharge";
                                    return;
                                }
                                echo 'have enough balance ';
                            } else {
                                echo "ChargeBalanace";
                                return;
                            }
                        } else
                                if ($deliveryWay == 3) {
                            //if($this->getBalance($ClientId) >= $costDelivery )
                            $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance ' . $varr;
                            } else {
                                // echo "ClientChargeBalanace" . $varr . 'diala' . $costDelivery;
                                echo "ClientChargeBalanace";
                                return;
                            }
                        } else
                                    if ($deliveryWay == 4) {
                            //if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                            $varr = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance ' . $varr;
                            } else {
                                echo "ClientChargeBalanace";
                                return;
                            }
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                    } else {
                        echo "OrderNotFound";
                        return;
                    }

                    $query_CheckAcceptedOrder = "Select IsAcceptDelivery,IsDeleted From togo.OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
                    $Result_Check_Order = $this->dataBase->query($query_CheckAcceptedOrder);
                    if ($Result_Check_Order == true) {
                        $row_Check_Order = $this->dataBase->fetchArray($Result_Check_Order);

                        if ($row_Check_Order['IsAcceptDelivery'] == 1) {
                            echo "OrderAlreadyTaken";
                        } else {

                            $togo_margin = $row_Get_Cost_Tra['togo_margin'];
                            $is_deal = 0;
                            if ($togo_margin != "0") {
                                $is_deal = 1;
                            }

                            /* edited (add order_status -> 'Bid Accepted', currentTransporterId) */
                            $query_Take_Order = "Update togo.OrderBidEngin set IsAcceptDelivery=1,DeliveryId='$TransporterId',OriginalDeliveryId='$TransporterId', order_status='Bid Accepted', currentTransporterId='$TransporterId', is_deal=$is_deal Where id='$OrderId'";
                            $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                            if ($Result_Take_Order == true) {

                                /* edited - timeline (insert into "transporterstimelinetb" table, which is a new table added to trace transporters timeline) */
                                // $currentDate = new DateTime();
                                $assignDate = date("Y-m-d H:i:s");
                                $query_add_accepted_transporter = "insert into togo.transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$OrderId', '$TransporterId', '$assignDate', '$OldPrice', 1)";
                                $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                                if ($deliveryWay == 1) {

                                    //if($this->getBalance($ClientId) >= $costDelivery )
                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        //$valbal = $this->confirm_request($ClientId, $costDelivery);
                                        $valbal = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td1" . $var;
                                    } else {
                                        // echo "ClientChargeBalanace please" . $var;
                                        echo "ClientChargeBalanace";
                                        return;
                                    }
                                } else if ($deliveryWay == 2) {
                                    // if($this->getBalance($ClientId) >= $costDelivery )
                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        $varrr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                                        if ($varrr == 1) {

                                            //$crv1 = $this->confirm_request($ClientId, $costDelivery);
                                            $crv1 = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                            echo "request confirmed for client td2" . $crv1;
                                            //$crv2 = $this->confirm_request($TransporterId, $CostLoad);
                                            //echo "request confirmed for trans  td2" . $crv2;
                                            $crv2 = $this->move_to_escrow($TransporterId, $OrderId, $CostLoad);


                                            // check transporter' balance, if less than 5 send alert SMS to recharge balance 
                                            // $transporterBalance = $this->getBalance($ClientId);
                                            if (/* $transporterBalance <= 5 && */ false) {
                                                // send SMS

                                                // get transporter mobile
                                                $query_getMobileNumber = "select PhoneNumber from togo.customer where id = '$TransporterId'";
                                                $result_getMobileNumber = $this->dataBase->query($query_getMobileNumber);
                                                $row_getMobileNumber = $this->dataBase->fetchArray($result_getMobileNumber);
                                                $PhoneNumber = $row_getMobileNumber['PhoneNumber'];

                                                $amobile = $PhoneNumber;
                                                $amobile . "Mobile";
                                                $Code_Verify = $Code_Verify;
                                                $ch = curl_init();
                                                $msg = "ToGo%20Code%20Is";

                                                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                                                curl_setopt($ch, CURLOPT_HEADER, 0);
                                                $reslt_Send = curl_exec($ch);

                                                curl_close($ch);

                                                if ($reslt_Send != "Message Sent Successfully!") {
                                                    echo "NotUpdatedSendCodeSMS";
                                                }
                                            }

                                            
                                        } else {
                                            echo "TransporterNeedCharge";
                                            return;
                                        }
                                    } else {
                                        echo "ChargeBalanace";
                                        return;
                                    }
                                } else if ($deliveryWay == 3) {
                                    // if($this->getBalance($ClientId) >= $costDelivery )
                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        //$this->confirm_request($ClientId, $costDelivery);
                                        $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td3";
                                    } else {
                                        echo "ClientChargeBalanace";
                                        return;
                                    }
                                } else if ($deliveryWay == 4) {

                                    //  if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                                    $var = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                                    if ($var == 1) {
                                        ///$this->confirm_request($ClientId, $costDelivery);
                                        $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td4 for costDelivery";
                                        // $costload should discounting on pick up
                                        //$this->confirm_request($ClientId, $CostLoad);
                                        $this->move_to_escrow($ClientId, $OrderId, $CostLoad);

                                        echo "request confirmed td4 for CostLoad";
                                    } else {
                                        echo "ClientChargeBalanace";
                                        return;
                                    }
                                } else {
                                    echo "deliveryWayNotFound";
                                    return;
                                }

                                // -------------------------------------------------------------------------

                                // accept foreign transportation companies offers:

                                // get super-company-id for this transporter if exist:
                                $query_getSuperCompnayId = "select super_foreign_company_id from togo.transportertable where CustomerId = '$TransporterId'";
                                $result_getSuperCompnayId = $this->dataBase->query($query_getSuperCompnayId);

                                $suprForeigId = 0;

                                if ($result_getSuperCompnayId) {
                                    $row_getSuperCompnayId = $this->dataBase->fetchArray($result_getSuperCompnayId);
                                    $suprForeigId = $row_getSuperCompnayId['super_foreign_company_id'];
                                }

                                if ($suprForeigId == 2) {
                                    // create logestechs order if the accepted offer is for logestechs' transporter:

                                    $DeliveryParams = array();
                                    $AddressClint = array();

                                    // get order info:

                                    $query_getOrderInfo = "select 
                                    engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                    orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                    senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                    receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                    from togo.orderbidengin as engine
                                    inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                    inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                    inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                    where engine.id='$OrderId'";

                                    $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                    if ($result_getOrderInfo) {

                                        $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                        $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                        $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                        $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                        $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                        $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                        $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                        $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                        $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                        $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                        $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                        $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                        $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                        $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                        $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                        $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                        $this->createLogestechsOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, $OrderId);
                                    } else {
                                        $this->recordDebug("getOrderInfoForLogestechsError!", $ClientId, $TransporterId, $OrderId);
                                        echo "getOrderInfoForLogestechsError!";
                                    }
                                } else if ($suprForeigId == 1) {
                                    // create albarq order if the accepted offer is for albarq:

                                    $DeliveryParams = array();
                                    $AddressClint = array();

                                    // get order info:
                                    $query_getOrderInfo = "select 
                                    engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                    orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                    senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                    receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                    from togo.orderbidengin as engine
                                    inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                    inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                    inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                    where engine.id='$OrderId'";

                                    $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                    if ($result_getOrderInfo) {

                                        $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                        $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                        $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                        $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                        $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                        $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                        $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                        $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                        $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                        $DeliveryParams['DeliveryCost'] = $row_getOrderInfo['DeliveryCost'];
                                        $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                        $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                        $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                        $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                        $AddressClint['IdCity'] = $row_getOrderInfo['senderCity'];
                                        $AddressClint['IdGov'] = $row_getOrderInfo['senderGov'];
                                        $AddressClint['IdProv'] = $row_getOrderInfo['senderProv'];
                                        $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                        $AddressClint['IdCityDes'] = $row_getOrderInfo['receiverCity'];
                                        $AddressClint['IdGovDes'] = $row_getOrderInfo['receiverGov'];
                                        $AddressClint['IdProvDes'] = $row_getOrderInfo['receiverProv'];
                                        $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                        $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                        $this->createAlbarqOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, -1, $OrderId);
                                    } else {
                                        echo "getOrderInfoForAlbarqError!";
                                        $this->recordDebug("getOrderInfoForAlbarqError!", $ClientId, $TransporterId, $OrderId);
                                    }
                                } else if ($suprForeigId == 3) {
                                    // create Olivery order if the accepted offer is for Olivery:

                                    $DeliveryParams = array();
                                    $AddressClint = array();

                                    // get order info:

                                    $query_getOrderInfo = "select 
                                        engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                        orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                        senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                        receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                        from togo.orderbidengin as engine
                                        inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                        inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                        inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                        where engine.id='$OrderId'";

                                    $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                    if ($result_getOrderInfo) {

                                        $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                        $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                        $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                        $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                        $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                        $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                        $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                        $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                        $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                        $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                        $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                        $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                        $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                        $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                        $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                        $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                        $this->createOliveryOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, $OrderId);
                                    } else {
                                        $this->recordDebug("getOrderInfoForOliveryError!", $ClientId, $TransporterId, $OrderId);
                                        echo "getOrderInfoForOliveryError!";
                                    }
                                } else {
                                    $this->recordAction($ClientId, $TransporterId, $OrderId, -1, '', "Bid Accepted", 7);

                                    $query_Get_Token_Transporter = "Select * from togo.Customer where id='$TransporterId'";

                                    $tokens = array();
                                    $webTokens = array();

                                    $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                                    $row = $this->dataBase->fetchArray($Result_query);
                                    if ($row['Token'] != null) {
                                        array_push($tokens, $row['Token']);
                                    }

                                    if ($row['WebToken'] != null) {
                                        array_push($webTokens, $row['WebToken']);
                                    }

                                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                        if ($row['adminTokenNotify'] != null) {
                                            array_push($webTokens, $row['adminTokenNotify']);
                                        }
                                    }

                                    $client = $this->getClientBusinessAndLogo($ClientId);
                                    if ($client['BusinessName'] == 'null') {
                                        $client_names = $this->getClientName($ClientId);
                                        $client['BusinessName'] = $client_names['FullName'];
                                    }

                                    $data = array(
                                        'orderId' => $OrderId,
                                        'clientName' => $client['BusinessName'],
                                        'clientImageUrl' => $client['LogoUrl'],
                                        'intent' => 'bidAccepted'
                                    );

                                    $title = "Bid Accepted";
                                    $body = $client['BusinessName'] . " accepted bid on order " . $OrderId;
                                    // $image = $client['LogoUrl'];

                                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                                    $tokens = array();
                                    $webTokens = array();

                                    $otherTransporters = "SELECT * FROM togo.deliveryacceptordertable 
                                    inner join togo.customer as customer on customer.id = deliveryacceptordertable.IdTransporter  
                                    where IdOrder = '$OrderId' and IdTransporter <> '$TransporterId'";

                                    $Result_query = $this->dataBase->query($otherTransporters);
                                    $row = $this->dataBase->fetchArray($Result_query);
                                    if ($row['Token'] != null) {
                                        array_push($tokens, $row['Token']);
                                    }

                                    if ($row['WebToken'] != null) {
                                        array_push($webTokens, $row['WebToken']);
                                    }

                                    /* $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From admin";
                                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                        if ($row['adminTokenNotify'] != null) {
                                            array_push($webTokens, $row['adminTokenNotify']);
                                        }
                                    } */

                                    $data = array(
                                        'orderId' => $OrderId,
                                        'clientName' => $client['BusinessName'],
                                        'clientImageUrl' => $client['LogoUrl'],
                                        'intent' => 'BidNotSelected'
                                    );

                                    $title = "Bid Not Selected";
                                    $body = $client['BusinessName'] . " accepted another offer on order " . $OrderId;
                                    // $image = $client['LogoUrl'];

                                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                                }

                                echo "OrderAcceptedSuccessfully";
                            } else {
                                echo "OrderNotAccept";
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                    }
                } else {
                    echo "BidChanged";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function AdminAcceptOfferReq($ClientId, $TransporterId, $OldPrice, $OrderId, $adminToken, $adminId)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $OldPrice = $this->dataBase->escape($OldPrice);
        $adminToken = $this->dataBase->escape($adminToken);
        $adminId = $this->dataBase->escape($adminId);

        if ($this->AdminCheckToken($adminId, $adminToken) == true) {
            if ($this->isBidChanged($OldPrice, $OrderId, $TransporterId) == false) {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery, togo_margin from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad From togo.OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
                                            AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);
                // echo "before check balance";
                if ($row_count_Load > 0) {

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];

                    if ($deliveryWay == 1) {
                        //if($this->getBalance($ClientId) >= $costDelivery )
                        $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                        if ($varr == 1) {
                            echo 'have enough balance' . $varr . "dia" . $costDelivery;
                        } else {
                            // echo "ClientChargeBalanace" . $varr . "dia" . $costDelivery;
                            echo "ClientChargeBalanace";
                            return;
                        }
                    } else
                            if ($deliveryWay == 2) {
                        //if($this->getBalance($ClientId) >= $costDelivery )
                        $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                        if ($var == 1) {
                            //if($this->getBalance($TransporterId) >= ($CostLoad+$costDelivery))
                            $varr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                            if ($varr == 1) {
                                echo 'have enough balance for trans ';
                            } else {
                                echo "TransporterNeedCharge";
                                return;
                            }
                            echo 'have enough balance ';
                        } else {
                            echo "ChargeBalanace";
                            return;
                        }
                    } else
                                if ($deliveryWay == 3) {
                        //if($this->getBalance($ClientId) >= $costDelivery )
                        $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                        if ($varr == 1) {
                            echo 'have enough balance ' . $varr;
                        } else {
                            // echo "ClientChargeBalanace" . $varr . 'diala' . $costDelivery;
                            echo "ClientChargeBalanace";
                            return;
                        }
                    } else
                                    if ($deliveryWay == 4) {
                        //if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                        $varr = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                        if ($varr == 1) {
                            echo 'have enough balance ' . $varr;
                        } else {
                            echo "ClientChargeBalanace";
                            return;
                        }
                    } else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                } else {
                    echo "OrderNotFound";
                    return;
                }

                $query_CheckAcceptedOrder = "Select IsAcceptDelivery,IsDeleted From togo.OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
                $Result_Check_Order = $this->dataBase->query($query_CheckAcceptedOrder);
                if ($Result_Check_Order == true) {
                    $row_Check_Order = $this->dataBase->fetchArray($Result_Check_Order);

                    if ($row_Check_Order['IsAcceptDelivery'] == 1) {
                        echo "OrderAlreadyTaken";
                    } else {

                        $togo_margin = $row_Get_Cost_Tra['togo_margin'];
                        $is_deal = 0;
                        if ($togo_margin != "0") {
                            $is_deal = 1;
                        }

                        /* edited (add order_status -> 'Bid Accepted', currentTransporterId) */
                        $query_Take_Order = "Update togo.OrderBidEngin set IsAcceptDelivery=1,DeliveryId='$TransporterId',OriginalDeliveryId='$TransporterId', order_status='Bid Accepted', currentTransporterId='$TransporterId', is_deal=$is_deal Where id='$OrderId'";
                        $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                        if ($Result_Take_Order == true) {

                            /* edited - timeline (insert into "transporterstimelinetb" table, which is a new table added to trace transporters timeline) */
                            // $currentDate = new DateTime();
                            $assignDate = date("Y-m-d H:i:s");
                            $query_add_accepted_transporter = "insert into togo.transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$OrderId', '$TransporterId', '$assignDate', '$OldPrice', 1)";
                            $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                            if ($deliveryWay == 1) {

                                //if($this->getBalance($ClientId) >= $costDelivery )
                                $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                if ($var == 1) {
                                    //$valbal = $this->confirm_request($ClientId, $costDelivery);
                                    $valbal = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                    echo "request confirmed td1" . $var;
                                } else {
                                    // echo "ClientChargeBalanace please" . $var;
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            } else if ($deliveryWay == 2) {
                                // if($this->getBalance($ClientId) >= $costDelivery )
                                $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                if ($var == 1) {
                                    $varrr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                                    if ($varrr == 1) {

                                        //$crv1 = $this->confirm_request($ClientId, $costDelivery);
                                        $crv1 = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed for client td2" . $crv1;
                                        //$crv2 = $this->confirm_request($TransporterId, $CostLoad);
                                        //echo "request confirmed for trans  td2" . $crv2;
                                        $crv2 = $this->move_to_escrow($TransporterId, $OrderId, $CostLoad);
                                    } else {
                                        echo "TransporterNeedCharge";
                                        return;
                                    }
                                } else {
                                    echo "ChargeBalanace";
                                    return;
                                }
                            } else if ($deliveryWay == 3) {
                                // if($this->getBalance($ClientId) >= $costDelivery )
                                $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                if ($var == 1) {
                                    //$this->confirm_request($ClientId, $costDelivery);
                                    $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                    echo "request confirmed td3";
                                } else {
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            } else if ($deliveryWay == 4) {

                                //  if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                                $var = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                                if ($var == 1) {
                                    ///$this->confirm_request($ClientId, $costDelivery);
                                    $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                    echo "request confirmed td4 for costDelivery";
                                    // $costload should discounting on pick up
                                    //$this->confirm_request($ClientId, $CostLoad);
                                    $this->move_to_escrow($ClientId, $OrderId, $CostLoad);

                                    echo "request confirmed td4 for CostLoad";
                                } else {
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            } else {
                                echo "deliveryWayNotFound";
                                return;
                            }

                            // -------------------------------------------------------------------------

                            // accept foreign transportation companies offers:

                            // get super-company-id for this transporter if exist:
                            $query_getSuperCompnayId = "select super_foreign_company_id from togo.transportertable where CustomerId = '$TransporterId'";
                            $result_getSuperCompnayId = $this->dataBase->query($query_getSuperCompnayId);

                            $suprForeigId = 0;

                            if ($result_getSuperCompnayId) {
                                $row_getSuperCompnayId = $this->dataBase->fetchArray($result_getSuperCompnayId);
                                $suprForeigId = $row_getSuperCompnayId['super_foreign_company_id'];
                            }

                            if ($suprForeigId == 2) {
                                // create logestechs order if the accepted offer is for logestechs' transporter:

                                $DeliveryParams = array();
                                $AddressClint = array();

                                // get order info:

                                $query_getOrderInfo = "select 
                                    engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                    orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                    senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                    receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                    from togo.orderbidengin as engine
                                    inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                    inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                    inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                    where engine.id='$OrderId'";

                                $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                if ($result_getOrderInfo) {

                                    $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                    $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                    $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                    $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                    $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                    $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                    $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                    $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                    $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                    $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                    $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                    $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                    $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                    $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                    $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                    $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                    $this->createLogestechsOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, $OrderId);
                                } else {
                                    $this->recordDebug("getOrderInfoForLogestechsError!", $ClientId, $TransporterId, $OrderId);
                                    echo "getOrderInfoForLogestechsError!";
                                }
                            } else if ($suprForeigId == 1) {
                                // create albarq order if the accepted offer is for albarq:

                                $DeliveryParams = array();
                                $AddressClint = array();

                                // get order info:
                                $query_getOrderInfo = "select 
                                    engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                    orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                    senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                    receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                    from togo.orderbidengin as engine
                                    inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                    inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                    inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                    where engine.id='$OrderId'";

                                $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                if ($result_getOrderInfo) {

                                    $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                    $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                    $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                    $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                    $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                    $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                    $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                    $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                    $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                    $DeliveryParams['DeliveryCost'] = $row_getOrderInfo['DeliveryCost'];
                                    $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                    $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                    $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                    $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                    $AddressClint['IdCity'] = $row_getOrderInfo['senderCity'];
                                    $AddressClint['IdGov'] = $row_getOrderInfo['senderGov'];
                                    $AddressClint['IdProv'] = $row_getOrderInfo['senderProv'];
                                    $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                    $AddressClint['IdCityDes'] = $row_getOrderInfo['receiverCity'];
                                    $AddressClint['IdGovDes'] = $row_getOrderInfo['receiverGov'];
                                    $AddressClint['IdProvDes'] = $row_getOrderInfo['receiverProv'];
                                    $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                    $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                    $this->createAlbarqOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, -1, $OrderId);
                                } else {
                                    echo "getOrderInfoForAlbarqError!";
                                    $this->recordDebug("getOrderInfoForAlbarqError!", $ClientId, $TransporterId, $OrderId);
                                }
                            } else if ($suprForeigId == 3) {
                                // create Olivery order if the accepted offer is for Olivery:

                                $DeliveryParams = array();
                                $AddressClint = array();

                                // get order info:

                                $query_getOrderInfo = "select 
                                        engine.DetailsLoad, engine.LengthLoad, engine.WidthLoad, engine.HeightLoad, engine.WeightLoad, engine.DateLoad, engine.CostLoad, engine.TypeLoad, engine.DeliveryCost, engine.deliveryWay,
                                        orderAddress.OtherDetails, orderAddress.OtherDetailsDes,
                                        senderAddress.name as senderAddressName, senderAddress.phone_number as senderPhone, senderAddress.areaId as senderArea, senderAddress.cityId as senderCity, senderAddress.governoratId as senderGov, senderAddress.provinceId as senderProv,
                                        receiverAddress.name as receiverAddressName, receiverAddress.phone_number as receiverPhone, receiverAddress.areaId as receiverArea, receiverAddress.cityId as receiverCity, receiverAddress.governoratId as receiverGov, receiverAddress.provinceId as receiverProv
                                        from togo.orderbidengin as engine
                                        inner join togo.orderbidaddress as orderAddress on engine.id = orderAddress.IdOrderBidEngin
                                        inner join togo.addresses as senderAddress on orderAddress.SenderAddressId = senderAddress.id
                                        inner join togo.addresses as receiverAddress on orderAddress.ReciverAddressId = receiverAddress.id
                                        where engine.id='$OrderId'";

                                $result_getOrderInfo = $this->dataBase->query($query_getOrderInfo);

                                if ($result_getOrderInfo) {

                                    $row_getOrderInfo = $this->dataBase->fetchArray($result_getOrderInfo);

                                    $DeliveryParams['DetailsLoad'] = $row_getOrderInfo['DetailsLoad'];
                                    $DeliveryParams['LengthLoad'] = $row_getOrderInfo['LengthLoad'];
                                    $DeliveryParams['WidthLoad'] = $row_getOrderInfo['WidthLoad'];
                                    $DeliveryParams['HeightLoad'] = $row_getOrderInfo['HeightLoad'];
                                    $DeliveryParams['WeightLoad'] = $row_getOrderInfo['WeightLoad'];
                                    $DeliveryParams['DateLoad'] = $row_getOrderInfo['DateLoad'];
                                    $DeliveryParams['CostLoad'] = $row_getOrderInfo['CostLoad'];
                                    $DeliveryParams['TypeLoad'] = $row_getOrderInfo['TypeLoad'];
                                    $DeliveryParams['deliveryWay'] = $row_getOrderInfo['deliveryWay'];

                                    $AddressClint['OtherDetails'] = $row_getOrderInfo['OtherDetails'];
                                    $AddressClint['OtherDetailsDes'] = $row_getOrderInfo['OtherDetailsDes'];
                                    $AddressClint['IdArea'] = $row_getOrderInfo['senderArea'];
                                    $AddressClint['IdAreaDes'] = $row_getOrderInfo['receiverArea'];
                                    $AddressClint['ReceiverAddressName'] = $row_getOrderInfo['receiverAddressName'];
                                    $AddressClint['ReceiverAddressNum'] = $row_getOrderInfo['receiverPhone'];

                                    $this->createOliveryOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, $OrderId);
                                } else {
                                    $this->recordDebug("getOrderInfoForOliveryError!", $ClientId, $TransporterId, $OrderId);
                                    echo "getOrderInfoForOliveryError!";
                                }
                            } else {
                                $this->recordAction($ClientId, $TransporterId, $OrderId, -1, '', "Bid Accepted", 7);

                                $query_Get_Token_Transporter = "Select * from togo.Customer where id='$TransporterId'";

                                $tokens = array();
                                $webTokens = array();

                                $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                                $row = $this->dataBase->fetchArray($Result_query);
                                if ($row['Token'] != null) {
                                    array_push($tokens, $row['Token']);
                                }

                                if ($row['WebToken'] != null) {
                                    array_push($webTokens, $row['WebToken']);
                                }

                                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                    if ($row['adminTokenNotify'] != null) {
                                        array_push($webTokens, $row['adminTokenNotify']);
                                    }
                                }

                                $client = $this->getClientBusinessAndLogo($ClientId);
                                if ($client['BusinessName'] == 'null') {
                                    $client_names = $this->getClientName($ClientId);
                                    $client['BusinessName'] = $client_names['FullName'];
                                }

                                $data = array(
                                    'orderId' => $OrderId,
                                    'clientName' => $client['BusinessName'],
                                    'clientImageUrl' => $client['LogoUrl'],
                                    'intent' => 'bidAccepted'
                                );

                                $title = "Bid Accepted";
                                $body = $client['BusinessName'] . " accepted bid on order " . $OrderId;
                                // $image = $client['LogoUrl'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                                $tokens = array();
                                $webTokens = array();

                                $otherTransporters = "SELECT * FROM togo.deliveryacceptordertable 
                                    inner join togo.customer as customer on customer.id = deliveryacceptordertable.IdTransporter  
                                    where IdOrder = '$OrderId' and IdTransporter <> '$TransporterId'";

                                $Result_query = $this->dataBase->query($otherTransporters);
                                $row = $this->dataBase->fetchArray($Result_query);
                                if ($row['Token'] != null) {
                                    array_push($tokens, $row['Token']);
                                }

                                if ($row['WebToken'] != null) {
                                    array_push($webTokens, $row['WebToken']);
                                }

                                /* $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From admin";
                                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                        if ($row['adminTokenNotify'] != null) {
                                            array_push($webTokens, $row['adminTokenNotify']);
                                        }
                                    } */

                                $data = array(
                                    'orderId' => $OrderId,
                                    'clientName' => $client['BusinessName'],
                                    'clientImageUrl' => $client['LogoUrl'],
                                    'intent' => 'BidNotSelected'
                                );

                                $title = "Bid Not Selected";
                                $body = $client['BusinessName'] . " accepted another offer on order " . $OrderId;
                                // $image = $client['LogoUrl'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                            }

                            echo "OrderAcceptedSuccessfully";
                        } else {
                            echo "OrderNotAccept";
                        }
                    }
                } else {
                    echo "OrderNotFound";
                }
            } else {
                echo "BidChanged";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM
    public function test1234()
    {
        $query_getSuperCompnayId = "select super_foreign_company_id from togo.transportertable where CustomerId = 66";
        $result_getSuperCompnayId = $this->dataBase->query($query_getSuperCompnayId);

        $suprForeigId = 0;

        if ($result_getSuperCompnayId) {
            $row_getSuperCompnayId = $this->dataBase->fetchArray($result_getSuperCompnayId);
            $suprForeigId = $row_getSuperCompnayId['super_foreign_company_id'];
        } else {
            echo "query error!";
            return;
        }

        if ($suprForeigId == 2) {
            echo "2";
        } else if ($suprForeigId == 1) {
            echo "1";
        } else {
            echo "no super id!";
        }
    }

    // TO_REM TRANS_SERVICE
    public function AcceptClientAssignOrder($TransporterId, $OrderId, $IsAccept, $TokenDevice)
    {

        // temp
        echo "notWorking!";
        return;

        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                echo "before check action";
                if ($IsAccept == '0') {

                    /* edited (record the action) */
                    // $party_one_id, $party_two_id, $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Assign Rejected", 11);

                    /* edited (update order status -> Waiting for Bids) */
                    $query_Take_Order = "Update togo.OrderBidEngin set IsAcceptDelivery=0,DeliveryId=null,OriginalDeliveryId=null,ClientAssignAccepted=0,AssignedByClient=0, order_status='Waiting for Bids' Where id='$OrderId'";
                    $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                    $query_Set_Price = "Delete from togo.DeliveryAcceptOrderTable where IdOrder ='$OrderId' and IdTransporter ='$TransporterId'";
                    $result_Set_Price = $this->dataBase->query($query_Set_Price);

                    $query_Get_Client_id = "Select CustomerId From togo.OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
					AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                    $result_Get_Client_id = $this->dataBase->query($query_Get_Client_id);

                    $row_Get_Client_id = $this->dataBase->fetchArray($result_Get_Client_id);

                    $ClientId = $row_Get_Client_id['CustomerId'];

                    $query_Get_Token_Transporter = "Select * from togo.Customer where id='$ClientId'";

                    $tokens = array();
                    $webTokens = array();

                    $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                    $row = $this->dataBase->fetchArray($Result_query);
                    if ($row['Token'] != null) {
                        array_push($tokens, $row['Token']);
                    }

                    if ($row['WebToken'] != null) {
                        array_push($webTokens, $row['WebToken']);
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);
                    $data = array(
                        'orderId' => $OrderId,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'TransporterRejectOrder'
                    );

                    $title = "Order Rejected";
                    $body = $transporter['AccountName'] . " rejected assigned order " . $OrderId;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                    echo "Rejected";
                } else {
                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad,CustomerId From togo.OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
					AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);
                    echo "before check balance";
                    if ($row_count_Load > 0) {

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];
                        $ClientId = $row_Get_Cost_Load['CustomerId'];

                        if ($deliveryWay == 1) {
                            $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance' . $varr . "dia" . $costDelivery;
                            } else {
                                echo "ClientChargeBalanace" . $varr . "dia" . $costDelivery;
                                return;
                            }
                        } else
                            if ($deliveryWay == 2) {
                            $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($var == 1) {
                                $varr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                                if ($varr == 1) {
                                    echo 'have enough balance for trans ';
                                } else {
                                    echo "TransporterNeedCharge";
                                    return;
                                }
                                echo 'have enough balance ';
                            } else {
                                echo "ChargeBalanace";
                                return;
                            }
                        } else
                                if ($deliveryWay == 3) {
                            $varr = $this->BalanceIsEnough($ClientId, $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance ' . $varr;
                            } else {
                                echo "ClientChargeBalanace" . $varr . 'diala' . $costDelivery;
                                return;
                            }
                        } else
                                    if ($deliveryWay == 4) {
                            $varr = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                            if ($varr == 1) {
                                echo 'have enough balance ' . $varr;
                            } else {
                                echo "ClientChargeBalanace";
                                return;
                            }
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                    } else {
                        echo "OrderNotFound";
                        return;
                    }
                    $query_CheckAcceptedOrder = "Select IsAcceptDelivery,IsDeleted From togo.OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
                    $Result_Check_Order = $this->dataBase->query($query_CheckAcceptedOrder);
                    if ($Result_Check_Order == true) {
                        $row_Check_Order = $this->dataBase->fetchArray($Result_Check_Order);

                        if ($row_Check_Order['IsAcceptDelivery'] == 1) {
                            echo "OrderAlreadyTaken";
                        } else {

                            // edited (add currentTransporterId)
                            $query_Take_Order = "Update togo.OrderBidEngin set IsAcceptDelivery=1,DeliveryId='$TransporterId',OriginalDeliveryId='$TransporterId',ClientAssignAccepted='1', currentTransporterId='$TransporterId' Where id='$OrderId'";
                            $Result_Take_Order = $this->dataBase->query($query_Take_Order);
                            if ($Result_Take_Order == true) {

                                /* edited (record the action) */
                                // $party_one_id, $party_two_id, $order_id, $description, $action_id
                                $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Assign Accepted", 12);

                                /* edited - timeline (insert into "transporterstimelinetb" table, which is a new table added to trace transporters timeline) */
                                $assignDate = date("Y-m-d H:i:s");
                                $query_add_accepted_transporter = "insert into togo.transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$OrderId', '$TransporterId', '$assignDate', '$costDelivery', 1)";
                                $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                                $Client_Phone = $this->getPhoneCustomer($ClientId);
                                $Transportre_Phone = $this->getPhoneCustomer($TransporterId);
                                $IdOdoo_client = $this->getOdooId($ClientId);
                                $IdOdoo_transporter = $this->getOdooId($TransporterId);
                                $Client_Cost = $this->getBalance($ClientId);
                                $Transporter_Cost = $this->getBalance($TransporterId);
                                if ($deliveryWay == 1) {

                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        $valbal = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td1" . $var;
                                    } else {
                                        echo "ClientChargeBalanace please" . $var;
                                        return;
                                    }
                                } else
                                    if ($deliveryWay == 2) {
                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        $varrr = $this->BalanceIsEnough($TransporterId, $CostLoad);
                                        if ($varrr == 1) {

                                            $crv1 = $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                            echo "request confirmed for client td2" . $crv1;
                                            $crv2 = $this->move_to_escrow($TransporterId, $OrderId, $CostLoad);
                                        } else {
                                            echo "TransporterNeedCharge";
                                            return;
                                        }
                                    } else {
                                        echo "ChargeBalanace";
                                        return;
                                    }
                                } else
                                        if ($deliveryWay == 3) {
                                    $var = $this->BalanceIsEnough($ClientId, $costDelivery);
                                    if ($var == 1) {
                                        $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td3";
                                    } else {
                                        echo "ClientChargeBalanace";
                                        return;
                                    }
                                } else
                                            if ($deliveryWay == 4) {

                                    $var = $this->BalanceIsEnough($ClientId, $CostLoad + $costDelivery);
                                    if ($var == 1) {
                                        $this->move_to_escrow($ClientId, $OrderId, $costDelivery);
                                        echo "request confirmed td4 for costDelivery";
                                        $this->move_to_escrow($ClientId, $OrderId, $CostLoad);

                                        echo "request confirmed td4 for CostLoad";
                                    } else {
                                        echo "ClientChargeBalanace";
                                        return;
                                    }
                                } else {
                                    echo "deliveryWayNotFound";
                                    return;
                                }

                                return; // nonotest

                                $query_Get_Token_Transporter = "Select * from togo.Customer where id='$ClientId'";

                                $tokens = array();
                                $webTokens = array();

                                $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                                $row = $this->dataBase->fetchArray($Result_query);
                                if ($row['Token'] != null) {
                                    array_push($tokens, $row['Token']);
                                }

                                if ($row['WebToken'] != null) {
                                    array_push($webTokens, $row['WebToken']);
                                }

                                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                    if ($row['adminTokenNotify'] != null) {
                                        array_push($webTokens, $row['adminTokenNotify']);
                                    }
                                }

                                $transporter = $this->getTransporterNameAndImage($TransporterId);

                                $data = array(
                                    'orderId' => $OrderId,
                                    'transporterName' => $transporter['AccountName'],
                                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                                    'intent' => 'TransporterAcceptOrder'
                                );

                                $title = "Order Accepted";
                                $body = $transporter['AccountName'] . " accepted assigned order " . $OrderId;
                                // $image = $transporter['PersonalImgPath'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                                echo "OrderAcceptedSuccessfully";
                            } else {
                                echo "OrderNotAccept";
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function CheckPriceTrip($TransporterId, $OrderId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query = "Select CostDelivery From togo.DeliveryAcceptOrderTable Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                $CostArray = array();
                $result = $this->dataBase->query($query);
                $row_count = $this->dataBase->numRows($result);
                if ($row_count > 0) {
                    $row_Cost_Order = $this->dataBase->fetchArray($result);
                    array_push($CostArray, array("CostDelivery" => $row_Cost_Order['CostDelivery']));

                    echo json_encode(array("server_response" => $CostArray));
                } else {
                    echo "CostNotSend";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterEditPriceTrip($TransporterId, $OrderId, $NewCost, $TypeAction, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $NewCost = $this->dataBase->escape($NewCost);
        $TokenDevice = $this->dataBase->escape($TokenDevice);


        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $tokens = array();
                $webTokens = array();

                $client_query = "select Token As TokenNotify, WebToken as webTokenNotify 
                from togo.Customer as c 
                inner join togo.orderbidengin as orderBid on orderBid.CustomerId = c.id where orderBid.id = '$OrderId'";

                $Result_query = $this->dataBase->query($client_query);
                while ($row = $this->dataBase->fetchArray($Result_query)) {
                    if ($row['TokenNotify'] != null) {
                        array_push($tokens, $row['TokenNotify']);
                    }

                    if ($row['webTokenNotify'] != null) {
                        array_push($webTokens, $row['webTokenNotify']);
                    }
                }

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage($TransporterId);

                if ($TypeAction == "DeleteCost") {
                    $query_delete_Cost = "delete from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_delete = $this->dataBase->query($query_delete_Cost);

                    if ($result_delete == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_two_id, $order_id, $description, $action_id
                        $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Tip Cost Deleted", 6);

                        echo "deleteOrder";

                        $data = array(
                            'orderId' => $OrderId,
                            'transporterName' => $transporter['AccountName'],
                            'transporterImageUrl' => $transporter['PersonalImgPath'],
                            'intent' => 'BidCanceled'
                        );

                        $title = "Bid Canceled";
                        $body = $transporter['AccountName'] . " canceled bid on order " . $OrderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                    } else {
                        echo "NotdeleteOrder";
                    }
                } else {
                    if ($this->isOrderAccepted($OrderId) == false) {
                        $query = "Select CostDelivery From togo.DeliveryAcceptOrderTable Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                        $CostArray = array();
                        $result = $this->dataBase->query($query);
                        $row_count = $this->dataBase->numRows($result);
                        if ($row_count) {
                            $query_Update = "Update togo.DeliveryAcceptOrderTable set CostDelivery='$NewCost' Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                            $result_update = $this->dataBase->query($query_Update);
                            if ($result_update == true) {

                                /* edited (record the action) */
                                // $party_one_id, $party_two_id, $order_id, $description, $action_id
                                $this->recordAction($TransporterId, -1, $OrderId, $NewCost, '', "Trip Cost Updated", 5);

                                echo "UpdatedOrder";

                                $data = array(
                                    'orderId' => $OrderId,
                                    'transporterName' => $transporter['AccountName'],
                                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                                    'bid' => $NewCost,
                                    'intent' => 'BidChanged'
                                );

                                $title = "Trip Cost Updated";
                                $body = $transporter['AccountName'] . " updated trip cost on order " . $OrderId . " to " . $NewCost . "NIS";
                                // $image = $transporter['PersonalImgPath'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                            } else {
                                echo "NotUpdateOrder";
                            }
                        } else {
                            echo "CostNotSend";
                        }
                    } else {
                        echo "OrderAlreadyAccepted";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM COMMON_SERVICE
    public function checkForForeignId($OrderId, $CustomerId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {

                $query_getForeignId = "
                select foreignCo.companyId, foreignCo.foreignOrderId, foreignCo.loges_barcode, foreignCo.loges_barcode_img, superCo.logo_img_path as img, superCo.name, trans.super_foreign_company_id, trans.PersonalImgPath as trans_img, cust.PhoneNumber as trans_phone 
                from togo.foreign_order_id_conversion as foreignCo
                inner join togo.transportertable as trans on foreignCo.companyId = trans.CustomerId
                inner join togo.customer as cust on foreignCo.companyId = cust.id
                inner join togo.foreign_transportation_companies as superCo on trans.super_foreign_company_id = superCo.id
                where foreignCo.togoOrderId = '$OrderId'
            ";
                $result_getForeignId = $this->dataBase->query($query_getForeignId);

                if ($this->dataBase->numRows($result_getForeignId) > 0) {

                    $row_getForeignId = $this->dataBase->fetchArray($result_getForeignId);

                    echo json_encode(array("companyId" => $row_getForeignId['companyId'], "foreignOrderId" => $row_getForeignId['foreignOrderId'], "companyImgURL" => $row_getForeignId['img'], "AccountName" => $row_getForeignId['name'], "barcode" => $row_getForeignId['loges_barcode'], "barcode_img" => $row_getForeignId['loges_barcode_img'], "super_id" => $row_getForeignId['super_foreign_company_id'], "trans_img" => $row_getForeignId['trans_img'], "trans_phone" => $row_getForeignId['trans_phone']));
                } else {
                    echo "noForeigId";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterShowDetailsOrder($OrderId, $TransporterId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $villagevar = "";
        $villagedesvar = "";
        $OrderDetailsArray = array();
        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                /* edited (get transporterAssignStatus, AssignerId, AssigneeId, order_status, clientAssigneeId, currentTransporterId) */
                $Query_Get_Order_Details = "Select OrderEngine.IsReturnedOrder, OrderEngine.IsStuckOrder, OrderEngine.currentTransporterId,OrderEngine.StuckOrderComment,OrderEngine.deliveryWay As deliveryWay, OrderEngine.order_status, OrderEngine.transporterAssignStatus, OrderEngine.AssignerId, OrderEngine.AssigneeId, OrderEngine.clientAssigneeId, OrderEngine.TeamMemberId, OrderEngine.id As id,OrderEngine.CustomerId AS CustomerId, OrderEngine.pickup_date AS pickupDate
            ,ClientCustomerTable.FirstName As FullNameCustomer,ClientCustomerTable.LastName As LastNameCustomer, ClientCustomerTable.CustomerId, OrderEngine.DetailsLoad As DetailsLoad,OrderEngine.TypeLoad As TypeLoad, OrderEngine.isReturnedFinished
			,OrderEngine.LengthLoad As LengthLoad,OrderEngine.CostLoad as CostLoad,OrderEngine.DeliveryCost as DeliveryCost, OrderEngine.IsReturnAccepted
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.HeightLoad As HeightLoad, OrderEngine.qr_code as BarCode, 
            OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad, OrderEngine.Orderfinished, OrderEngine.isAcceptDelivery, OrderEngine.IsDeleted, OrderEngine.currency, OrderEngine.from_currency_value
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,
            OrderBidAddress.IdArea As IdAreaSource,OrderBidAddress.IdAreaDes As IdAreaDes,
            OrderBidAddress.SenderAddressId as SenderAddressId
            ,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver,CustomerTable.PhoneNumber As PhoneCustomer
            ,OrderBidAddress.OtherDetailsDes As OtherDetailsDes,addresses.name as ReceiverName, addresses.phone_number AS ReceiverAddressNum
			,OrderEngine.IsAssignAccepted,OrderEngine.AssignedByClient,OrderEngine.ClientAssignAccepted
            ,OrderEngine.DeliveryId, OrderEngine.OriginalDeliveryId
			From togo.OrderBidEngin As OrderEngine, togo.OrderBidAddress As OrderBidAddress, togo.Customer As CustomerTable
            , togo.ClientTable As ClientCustomerTable, togo.Addresses As addresses 
            Where
			 OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND OrderBidAddress.ReciverAddressId = addresses.id AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id";

                $Result_Get_Details_Array = $this->dataBase->query($Query_Get_Order_Details);
                $row_Details_Order = $this->dataBase->fetchArray($Result_Get_Details_Array);
                $CustomerId = $row_Details_Order['CustomerId'];
                $SenderAddressId = $row_Details_Order['SenderAddressId'];
                $query_Get_Lang = "Select LanguageId From togo.Customer Where id='$TransporterId'";
                $result_Get_Customer = $this->dataBase->query($query_Get_Lang);
                $row_CustomerId = $this->dataBase->fetchArray($result_Get_Customer);

                /* edited (get customer image url) */

                /* new */
                $query_Get_Customer_Img = "Select LogoUrl as customerImgURL, BusinessName as clientBusinessName From togo.clientbusinesstable Where CustomerId='$CustomerId'";
                $result_Get_Customer_Img = $this->dataBase->query($query_Get_Customer_Img);
                $row_CustomerImg = $this->dataBase->fetchArray($result_Get_Customer_Img);

                $LangId = $row_CustomerId['LanguageId'];

                $CityIdSource = $row_Details_Order['IdCitySource'];
                $CityIdDestination = $row_Details_Order['IdCityDes'];
                $AreaIdSource = $row_Details_Order['IdAreaSource'];
                $AreaIdDestination = $row_Details_Order['IdAreaDes'];

                $query_GetCostDelivery = "select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder = '$OrderId'";
                $result_GetCostDelivery = $this->dataBase->query($query_GetCostDelivery);
                $row_GetCostDelivery = $this->dataBase->fetchArray($result_GetCostDelivery);

                $query_GetCitySource = "Select name From togo.citylang Where languageId='$LangId' AND cityId='$CityIdSource'";
                $result_CitySource = $this->dataBase->query($query_GetCitySource);
                $row_CitySource = $this->dataBase->fetchArray($result_CitySource);

                $query_GetCityDes = "Select name From togo.citylang Where languageId='$LangId' AND cityId='$CityIdDestination'";
                $result_CityDes = $this->dataBase->query($query_GetCityDes);
                $row_CityDes = $this->dataBase->fetchArray($result_CityDes);

                $query_GetAreaSource = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdSource'";
                $result_AreaSource = $this->dataBase->query($query_GetAreaSource);
                $row_AreaSource = $this->dataBase->fetchArray($result_AreaSource);

                $query_GetAreaDes = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdDestination'";
                $result_AreaDes = $this->dataBase->query($query_GetAreaDes);
                $row_AreaDes = $this->dataBase->fetchArray($result_AreaDes);

                $query_GetSenderName = "select name as SenderName from togo.addresses where id = '$SenderAddressId'";
                $result_GetSenderName = $this->dataBase->query($query_GetSenderName);
                $row_GetSenderName = $this->dataBase->fetchArray($result_GetSenderName);

                $DeliveryId = $row_Details_Order['DeliveryId'];

                /* edited (get transporter image url) */

                /* old one */
                /* $query_GetAssignInfo = "select concat( trans.FirstName, ' ' , trans.LastName) as FullName  ,cust.PhoneNumber from transportertable as trans inner join customer as cust on cust.id=trans.CustomerId where cust.id = '$DeliveryId'";
                $result_GetAssignInfo = $this->dataBase->query($query_GetAssignInfo);
                $row_GetAssignInfo = $this->dataBase->fetchArray($result_GetAssignInfo);*/

                /* new one */
                $query_GetAssignInfo = "select PersonalImgPath as transporterImgURL, concat( trans.FirstName, ' ' , trans.LastName) as FullName  ,cust.PhoneNumber 
                from togo.transportertable as trans 
                inner join togo.customer as cust on cust.id=trans.CustomerId where cust.id = '$DeliveryId'";
                $result_GetAssignInfo = $this->dataBase->query($query_GetAssignInfo);
                $row_GetAssignInfo = $this->dataBase->fetchArray($result_GetAssignInfo);

                $OrderStatus = "Waiting for bid";

                if ($row_Details_Order['IsDeleted'] == '1') // edited (add "Order Deleted")
                {
                    $OrderStatus = "Order Deleted";
                } elseif (($row_Details_Order['pickupDate'] == null || $row_Details_Order['pickupDate'] == 'NULL'  || $row_Details_Order['pickupDate'] == 'null')
                    && $row_Details_Order['isAcceptDelivery'] != '1'
                ) {
                    $OrderStatus = "Waiting for bid";
                } elseif (($row_Details_Order['pickupDate'] == null || $row_Details_Order['pickupDate'] == 'NULL'  || $row_Details_Order['pickupDate'] == 'null')
                    && $row_Details_Order['isAcceptDelivery'] == '1'
                ) {
                    $OrderStatus = "Bid Accepted";
                } elseif (($row_Details_Order['pickupDate'] != null && $row_Details_Order['pickupDate'] != 'NULL' && $row_Details_Order['pickupDate'] != 'null')
                    && $row_Details_Order['orderfinished'] != '1'
                ) {
                    $OrderStatus = "Out for delivery";
                } elseif ($row_Details_Order['orderfinished'] == '1') {
                    $OrderStatus = "Order finished";
                }


                if ($row_Details_Order == true) {
                    if ($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != "") {
                        $villagevar = $row_Details_Order['Village'];
                    }
                    if ($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != "") {
                        $villagedesvar = $row_Details_Order['VillageDestination'];
                    }

                    $query = "select * from togo.deliveryacceptordertable where idTransporter='$TransporterId' and idOrder='$OrderId'";
                    $result = $this->dataBase->query($query);
                    $hasBid = false;
                    if ($this->dataBase->numRows($result) > 0) {
                        $hasBid = true;
                    }

                    $assignStatus = "Not Assigned";
                    $assignedMemberName = "";
                    if ($row_Details_Order['TeamMemberId'] != null && $row_Details_Order['TeamMemberId'] != 'null'  && $row_Details_Order['TeamMemberId'] != 'NULL') {
                        $memberTeamId = $row_Details_Order['TeamMemberId'];
                        $query_getmember = "Select FirstName, LastName from togo.transportertable where CustomerId =$memberTeamId";
                        $Result_getmember = $this->dataBase->query($query_getmember);
                        if ($Result_getmember == true) {
                            $row_getmember = $this->dataBase->fetchArray($Result_getmember);
                            $assignedMemberName = $row_getmember['FirstName'] . " " . $row_getmember['LastName'];
                            $assignStatus = "Assigned";
                        } else {
                            $assignStatus = "Not Assigned";
                        }
                    } else {
                        $assignStatus = "Not Assigned";
                    }

                    /* edited (add both client's and transporter's images and transporterAssignStatus and AssignerId) */

                    array_push($OrderDetailsArray, array(
                        "currentTransporterId" => $row_Details_Order['currentTransporterId'], "clientAssigneeId" => $row_Details_Order['clientAssigneeId'], "order_status" => $row_Details_Order['order_status'], "AssignerId" => $row_Details_Order['AssignerId'], "AssigneeId" => $row_Details_Order['AssigneeId'], "transporterAssignStatus" => $row_Details_Order['transporterAssignStatus'], "IsAssignAccepted" => $row_Details_Order['IsAssignAccepted'], "customerImgURL" => $row_CustomerImg['customerImgURL'], "transporterImgURL" => $row_GetAssignInfo['transporterImgURL'], "AssignToName" => $row_GetAssignInfo['FullName'], "AssignToNumber" => $row_GetAssignInfo['PhoneNumber'], "SenderName" => $row_GetSenderName['SenderName'], "DeliveryPrice" => $row_GetCostDelivery['CostDelivery'], "OrderStatus" => $OrderStatus, "deliveryWay" => $row_Details_Order['deliveryWay'], "HeightLoad" => $row_Details_Order['HeightLoad'],
                        "id" => $row_Details_Order['id'], "isAcceptDelivery" => $row_Details_Order['isAcceptDelivery'], "orderFinished" => $row_Details_Order['Orderfinished'], "clientBusinessName" => $row_CustomerImg['clientBusinessName'],
                        "IsStuckOrder" => $row_Details_Order['IsStuckOrder'], "StuckOrderComment" => $row_Details_Order['StuckOrderComment'],  "IsReturnedOrder" => $row_Details_Order['IsReturnedOrder'],  "IsReturnAccepted" => $row_Details_Order['IsReturnAccepted'], "isReturnedFinished" => $row_Details_Order['isReturnedFinished'],
                        "AssignedByClient" => $row_Details_Order['AssignedByClient'], "ClientAssignAccepted" => $row_Details_Order['ClientAssignAccepted'],
                        "IsDeleted" => $row_Details_Order['IsDeleted'], "FullNameCustomer" => $row_Details_Order['FullNameCustomer'], "CustomerId" => $row_Details_Order['CustomerId'], "BarCode" => $row_Details_Order['BarCode'], "DetailsLoad" => $row_Details_Order['DetailsLoad'], "LengthLoad" => $row_Details_Order['LengthLoad'], "WidthLoad" => $row_Details_Order['WidthLoad'], "HeightLoad" => $row_Details_Order['HeightLoad'], "WeightLoad" => $row_Details_Order['WeightLoad'], "CostLoad" => $row_Details_Order['CostLoad'], "currency" => $row_Details_Order['currency'], "from_currency_value" => $row_Details_Order['from_currency_value'], "DeliveryCost" => $row_Details_Order['DeliveryCost'], "DateLoad" => $this->getDateFormat($row_Details_Order['DateLoad'], 'Y-m-d H:i:s'), "IdCitySource" => $row_CitySource['name'], "IdCityDes" => $row_CityDes['name'], "cityFromId" => $CityIdSource, "cityToId" => $CityIdDestination, "IdAreaSource" => $row_AreaSource['name'], "IdAreaDes" => $row_AreaDes['name'], "NameNeighborhood" => $row_Details_Order['NameNeighborhood'], "NameStreet" => $row_Details_Order['NameStreet'], "NameBuilding" => $row_Details_Order['NameBuilding'], "FloorNumbers" => $row_Details_Order['FloorNumbers'], "ApartmentNumber" => $row_Details_Order['ApartmentNumber'], "OtherDetails" => $row_Details_Order['OtherDetails'], "OriginalDeliveryId" => $row_Details_Order['OriginalDeliveryId'], "DeliveryId" => $row_Details_Order['DeliveryId'], "LatSender" => $row_Details_Order['LatSender'], "AssignStatus" => $assignStatus, "AssignedMemberName" => $assignedMemberName, "LongSender" => $row_Details_Order['LongSender'], "LatReciver" => $row_Details_Order['LatReciver'], "LongReciver" => $row_Details_Order['LongReciver'], "TypeLoad" => $row_Details_Order['TypeLoad'], "ReceiverName" => $row_Details_Order['ReceiverName'],  "LastNameCustomer" => $row_Details_Order['LastNameCustomer'], "NameNeighborhoodDes" => $row_Details_Order['NameNeighborhoodDes'], "NameStreetDes" => $row_Details_Order['NameStreetDes'], "NameBuildingDes" => $row_Details_Order['NameBuildingDes'], "FloorNumbersDes" => $row_Details_Order['FloorNumbersDes'], "ApartmentNumberDes" => $row_Details_Order['ApartmentNumberDes'], "OtherDetailsDes" => $row_Details_Order['OtherDetailsDes'], "PhoneCustomer" => $row_Details_Order['PhoneCustomer'], "ReceiverAddressNum" => $row_Details_Order['ReceiverAddressNum'], "village" => $villagevar, "villageDes" => $villagedesvar, "pickupDate" => $row_Details_Order['pickupDate'], "hasBid" => $hasBid
                    ));

                    echo json_encode(array("server_response" => $OrderDetailsArray));
                } else {
                    echo "OrderNotFound";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterShowDetailsOrderCurrent($OrderId, $TransporterId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $OrderDetailsArray = array();
        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $Query_Get_Order_Details = "Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad,OrderEngine.TypeLoad As TypeLoad , OrderEngine.LengthLoad As LengthLoad
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderEngine.AssignedByClient,OrderEngine.ClientAssignAccepted
			,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,
            OrderBidAddress.IdArea As IdAreaSource,OrderBidAddress.IdAreaDes As IdAreaDes,
            OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver,CustomerTable.PhoneNumber As PhoneCustomer
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes
            From
            togo.OrderBidEngin As OrderEngine, togo.OrderBidAddress As OrderBidAddress, togo.Customer As CustomerTable
            , togo.ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            AND (OrderEngine.IsDeleted=0 Or OrderEngine.IsDeleted IS NULL)
            ";

                $Result_Get_Details_Array = $this->dataBase->query($Query_Get_Order_Details);
                $row_Details_Order = $this->dataBase->fetchArray($Result_Get_Details_Array);

                $CustomerId = $row_Details_Order['CustomerId'];
                $query_Get_Lang = "Select LanguageId From togo.Customer Where id='$CustomerId'";
                $result_Get_Customer = $this->dataBase->query($query_Get_Lang);
                $row_CustomerId = $this->dataBase->fetchArray($result_Get_Customer);

                $LangId = $row_CustomerId['LanguageId'];

                $CityIdSource = $row_Details_Order['IdCitySource'];
                $CityIdDestination = $row_Details_Order['IdCityDes'];
                $AreaIdSource = $row_Details_Order['IdAreaSource'];
                $AreaIdDestination = $row_Details_Order['IdAreaDes'];

                $query_GetCitySource = "Select name From togo.citylang Where languageId='$LangId' AND cityId='$CityIdSource'";
                $result_CitySource = $this->dataBase->query($query_GetCitySource);
                $row_CitySource = $this->dataBase->fetchArray($result_CitySource);

                $query_GetCityDes = "Select name From togo.citylang  Where languageId='$LangId' AND cityId='$CityIdDestination'";
                $result_CityDes = $this->dataBase->query($query_GetCityDes);
                $row_CityDes = $this->dataBase->fetchArray($result_CityDes);

                $query_GetAreaSource = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdSource'";
                $result_AreaSource = $this->dataBase->query($query_GetAreaSource);
                $row_AreaSource = $this->dataBase->fetchArray($result_AreaSource);

                $query_GetAreaDes = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdDestination'";
                $result_AreaDes = $this->dataBase->query($query_GetAreaDes);
                $row_AreaDes = $this->dataBase->fetchArray($result_AreaDes);

                if ($row_Details_Order == true) {

                    array_push($OrderDetailsArray, array(
                        "deliveryWay" => $row_Details_Order['deliveryWay'], "FullNameCustomer" => $row_Details_Order['FullNameCustomer'], "TypeLoad" => $row_Details_Order['TypeLoad'], "DetailsLoad" => $row_Details_Order['DetailsLoad'], "LengthLoad" => $row_Details_Order['LengthLoad'], "WidthLoad" => $row_Details_Order['WidthLoad'], "AssignedByClient" => $row_Details_Order['AssignedByClient'], "ClientAssignAccepted" => $row_Details_Order['ClientAssignAccepted'], "HeightLoad" => $row_Details_Order['HeightLoad'], "WeightLoad" => $row_Details_Order['WeightLoad'], "DateLoad" => $this->getDateFormat($row_Details_Order['DateLoad'], 'H:i:s'), "IdCitySource" => $row_CitySource['nmae'], "IdCityDes" => $row_CityDes['name'], "IdAreaSource" => $row_AreaSource['name'], "IdAreaDes" => $row_AreaDes['name'], "NameNeighborhood" => $row_Details_Order['NameNeighborhood'], "NameStreet" => $row_Details_Order['NameStreet'], "NameBuilding" => $row_Details_Order['NameBuilding'], "FloorNumbers" => $row_Details_Order['FloorNumbers'], "ApartmentNumber" => $row_Details_Order['ApartmentNumber'], "OtherDetails" => $row_Details_Order['OtherDetails'], "LatSender" => $row_Details_Order['LatSender'], "LongSender" => $row_Details_Order['LongSender'], "LatReciver" => $row_Details_Order['LatReciver'], "LongReciver" => $row_Details_Order['LongReciver'], "NameNeighborhoodDes" => $row_Details_Order['NameNeighborhoodDes'], "NameStreetDes" => $row_Details_Order['NameStreetDes'], "NameBuildingDes" => $row_Details_Order['NameBuildingDes'], "FloorNumbersDes" => $row_Details_Order['FloorNumbersDes'], "ApartmentNumberDes" => $row_Details_Order['ApartmentNumberDes'], "OtherDetailsDes" => $row_Details_Order['OtherDetailsDes'], "PhoneCustomer" => $row_Details_Order['PhoneCustomer']
                    ));

                    echo json_encode(array("server_response" => $OrderDetailsArray));
                } else {
                    echo "OrderNotFound";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientShowDetailsOrder($OrderId, $ClientId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $villagevar = " ";
        $villagedesvar = " ";
        $OrderDetailsArray = array();
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $Query_Get_Order_Details = "Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad, OrderEngine.LengthLoad As LengthLoad
            ,OrderEngine.TypeLoad As TypeLoad
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.HeightLoad As HeightLoad,
            OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,
            OrderBidAddress.IdArea As IdAreaSource,OrderBidAddress.IdAreaDes As IdAreaDes,
            OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes,OrderBidAddress.Village As Village,OrderBidAddress.VillageDestination As VillageDestination
            From
            togo.OrderBidEngin As OrderEngine, togo.OrderBidAddress As OrderBidAddress, togo.Customer As CustomerTable
            , togo.ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            ";

                $Result_Get_Details_Array = $this->dataBase->query($Query_Get_Order_Details);
                $row_Details_Order = $this->dataBase->fetchArray($Result_Get_Details_Array);


                $CustomerId = $row_Details_Order['CustomerId'];
                $query_Get_Lang = "Select LanguageId From togo.Customer Where id='$CustomerId'";
                $result_Get_Customer = $this->dataBase->query($query_Get_Lang);
                $row_CustomerId = $this->dataBase->fetchArray($result_Get_Customer);

                $LangId = $row_CustomerId['LanguageId'];

                $CityIdSource = $row_Details_Order['IdCitySource'];
                $CityIdDestination = $row_Details_Order['IdCityDes'];
                $AreaIdSource = $row_Details_Order['IdAreaSource'];
                $AreaIdDestination = $row_Details_Order['IdAreaDes'];

                $query_GetCitySource = "Select name From togo.cityLang Where languageId='$LangId' AND cityId='$CityIdSource'";
                $result_CitySource = $this->dataBase->query($query_GetCitySource);
                $row_CitySource = $this->dataBase->fetchArray($result_CitySource);

                $query_GetCityDes = "Select name From togo.cityLang Where languageId='$LangId' AND cityId='$CityIdDestination'";
                $result_CityDes = $this->dataBase->query($query_GetCityDes);
                $row_CityDes = $this->dataBase->fetchArray($result_CityDes);

                $query_GetAreaSource = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdSource'";
                $result_AreaSource = $this->dataBase->query($query_GetAreaSource);
                $row_AreaSource = $this->dataBase->fetchArray($result_AreaSource);

                $query_GetAreaDes = "Select name From togo.arealang Where languageId='$LangId' AND areaId='$AreaIdDestination'";
                $result_AreaDes = $this->dataBase->query($query_GetAreaDes);
                $row_AreaDes = $this->dataBase->fetchArray($result_AreaDes);


                if ($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != "") {
                    $villagevar = $row_Details_Order['Village'];
                }
                if ($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != "") {
                    $villagedesvar = $row_Details_Order['VillageDestination'];
                }


                array_push($OrderDetailsArray, array(
                    "deliveryWay" => $row_Details_Order['deliveryWay'], "HeightLoad" => $row_Details_Order['HeightLoad'], "FullNameCustomer" => $row_Details_Order['FullNameCustomer'], "TypeLoad" => $row_Details_Order['TypeLoad'], "DetailsLoad" => $row_Details_Order['DetailsLoad'], "LengthLoad" => $row_Details_Order['LengthLoad'], "WidthLoad" => $row_Details_Order['WidthLoad'], "HeightLoad" => $row_Details_Order['HeightLoad'], "WeightLoad" => $row_Details_Order['WeightLoad'], "DateLoad" => $this->getDateFormat($row_Details_Order['DateLoad'], 'H:i:s'), "IdCitySource" => $row_CitySource['name'], "IdCityDes" => $row_CityDes['name'], "IdAreaSource" => $row_AreaSource['name'], "IdAreaDes" => $row_AreaDes['name'], "NameNeighborhood" => $row_Details_Order['NameNeighborhood'], "NameStreet" => $row_Details_Order['NameStreet'], "NameBuilding" => $row_Details_Order['NameBuilding'], "FloorNumbers" => $row_Details_Order['FloorNumbers'], "ApartmentNumber" => $row_Details_Order['ApartmentNumber'], "OtherDetails" => $row_Details_Order['OtherDetails'], "LatSender" => $row_Details_Order['LatSender'], "LongSender" => $row_Details_Order['LongSender'], "LatReciver" => $row_Details_Order['LatReciver'], "LongReciver" => $row_Details_Order['LongReciver'], "NameNeighborhoodDes" => $row_Details_Order['NameNeighborhoodDes'], "NameStreetDes" => $row_Details_Order['NameStreetDes'], "NameBuildingDes" => $row_Details_Order['NameBuildingDes'], "FloorNumbersDes" => $row_Details_Order['FloorNumbersDes'], "ApartmentNumberDes" => $row_Details_Order['ApartmentNumberDes'], "OtherDetailsDes" => $row_Details_Order['OtherDetailsDes'], "village" => $villagevar, "villageDes" => $villagedesvar
                ));

                echo json_encode(array("server_response" => $OrderDetailsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientShowDetailsOrderCurrent($OrderId, $ClientId, $LangId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $ClientId = $this->dataBase->escape($ClientId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $villagevar = " ";
        $villagedesvar = " ";
        $OrderDetailsArray = array();
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $query_Check_Order = "Select * from togo.OrderBidEngin Where id='$OrderId'";
                //$result_Check=$this->dataBase->query($query_Check_Order);
                if ($this->GetCountRows($query_Check_Order) > 0) {

                    $Query_Get_Order_Details = "Select OrderEngine.id as OrderId, OrderEngine.CostLoad as CostLoad, OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId, OrderEngine.IsAcceptDelivery AS IsAcceptDelivery
					,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad, OrderEngine.LengthLoad As LengthLoad
					,OrderEngine.TypeLoad As TypeLoad, OrderEngine.Orderfinished As Orderfinished
					,OrderEngine.IsStuckOrder, OrderEngine.StuckOrderComment, IsReturnedOrder, IsReturnAccepted
					,OrderEngine.AssignedByClient As AssignedByClient, OrderEngine.ClientAssignAccepted As ClientAssignAccepted
					,OrderEngine.DeliveryId As DeliveryId, OrderEngine.Idvehicle As IdvehicleBid,OrderEngine.WidthLoad As WidthLoad
					,OrderEngine.HeightLoad As HeightLoad,OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad,OrderEngine.pickup_date As pickup_date
					,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes
					,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
					,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver
					,OrderBidAddress.OtherDetailsDes As OtherDetailsDes, fromCityRegion.name as fromCityName
					,pickupAddress.phone_number As PickupMobile, pickupAddress.name as PickupName
					,receiverAddress.phone_number As ReceiverMobile, receiverAddress.name as ReceiverName,
					toCityRegion.name as toCityName, OrderEngine.currency, OrderEngine.from_currency_value
					From
					togo.OrderBidEngin As OrderEngine, togo.OrderBidAddress As OrderBidAddress
					left outer join togo.citylang as fromCityRegion on orderbidaddress.IdCity = fromCityRegion.cityId
					left outer join togo.citylang as toCityRegion on orderbidaddress.IdCityDes = toCityRegion.cityId
					left outer join togo.addresses as pickupAddress on orderbidaddress.SenderAddressId = pickupAddress.id
					left outer join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id,
					togo.Customer As CustomerTable, togo.ClientTable As ClientCustomerTable
					Where
					OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
					CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
					AND (OrderEngine.IsAcceptDelivery=1 or OrderEngine.AssignedByClient=1) and fromCityRegion.languageId = CustomerTable.LanguageId
					and toCityRegion.languageId = CustomerTable.LanguageId";

                    $Result_Get_Details_Array = $this->dataBase->query($Query_Get_Order_Details);
                    $row_Details_Order = $this->dataBase->fetchArray($Result_Get_Details_Array);
                    $CustomerId = $row_Details_Order['CustomerId'];
                    $query_Get_Lang = "Select LanguageId From togo.Customer Where id='$CustomerId'";
                    $result_Get_Customer = $this->dataBase->query($query_Get_Lang);
                    $row_CustomerId = $this->dataBase->fetchArray($result_Get_Customer);

                    $LangId = $row_CustomerId['LanguageId'];

                    $IdTrans = $row_Details_Order['DeliveryId'];

                    $query_GetRate = "select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                    from togo.OrderBidEngin As OrderTrip , togo.TripRating As Reate 
                    where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                    $Result_Get_Rate = $this->dataBase->query($query_GetRate);
                    $CountRate = 0;
                    $SumRate = 0;
                    $RateTotal = 0;
                    while ($row_Get_Rate = $this->dataBase->fetchArray($Result_Get_Rate)) {
                        $rateValue = $row_Get_Rate['rate'];
                        $CountRate++;
                        $SumRate += $rateValue;
                    }

                    if ($CountRate == 0) {
                        $RateTotal = 0;
                    } else {
                        //$RateTotal = $rateValue/$CountRate;
                        $RateTotal = $SumRate / $CountRate;
                    }

                    $RateValue = $RateTotal;

                    $ViclelId = $row_Details_Order['IdvehicleBid'];
                    $DeliveryId = $row_Details_Order['DeliveryId'];

                    $query_Get_Name_Transporter = "Select CustomerId as transId, concat(FirstName, ' ', LastName) as FullName, PersonalImgPath as transImgUrl From togo.TransporterTable Where CustomerId='$DeliveryId'";
                    $result_GetName_trans = $this->dataBase->query($query_Get_Name_Transporter);
                    $row_Get_Name_transp = $this->dataBase->fetchArray($result_GetName_trans);

                    $query_Get_Number_Transporter = "Select * From Customer Where id='$DeliveryId'";
                    $result_GetNumber_trans = $this->dataBase->query($query_Get_Number_Transporter);
                    $row_Get_Number_transp = $this->dataBase->fetchArray($result_GetNumber_trans);

                    $query_Get_Color_Licenc = "Select CarColorId,LicenceCarNumber From togo.TransporterCarInfo Where CustomerId='$DeliveryId'";
                    $result_Get_color_Licenc = $this->dataBase->query($query_Get_Color_Licenc);
                    $row_Details_Car_Transporter = $this->dataBase->fetchArray($result_Get_color_Licenc);

                    $Color_Id = $row_Details_Car_Transporter['CarColorId'];

                    $query_Get_Name_Car = "Select Name From togo.VehicleNameLang Where IdLanguage='$LangId' AND IdVehicle='$ViclelId'  ";
                    $Result_Get_Name_Vichle = $this->dataBase->query($query_Get_Name_Car);
                    $row_Details_Car_Name = $this->dataBase->fetchArray($Result_Get_Name_Vichle);

                    $query_Get_Name_Color = "Select ColorName From togo.ColorNameLang  Where IdLanguage='$LangId' AND IdColor='$Color_Id'  ";
                    $Result_Get_Name_Color = $this->dataBase->query($query_Get_Name_Color);
                    $row_Details_Color_Name = $this->dataBase->fetchArray($Result_Get_Name_Color);


                    if ($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != "") {
                        $villagevar = $row_Details_Order['Village'];
                    }
                    if ($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != "") {
                        $villagedesvar = $row_Details_Order['VillageDestination'];
                    }

                    // get delivery price
                    $trnasId = $row_Get_Name_transp['transId'];
                    // $query_getDelPrice = "Select CostDelivery from togo.deliveryacceptordertable where IdOrder = '$OrderId' and IdTransporter = '$trnasId'";
                    $query_getDelPrice = "select transporter_bidprice from togo.transporterstimelinetb where order_id = '$OrderId' and transporter_id = '$trnasId' and isCurrent = 1";
                    $result_getDelPrice = $this->dataBase->query($query_getDelPrice);
                    $row_getDelPrice = $this->dataBase->fetchArray($result_getDelPrice);

                    array_push($OrderDetailsArray, array(
                        "id" => $row_Details_Order['OrderId'], "CostLoad" => $row_Details_Order['CostLoad'], "IsAcceptDelivery" => $row_Details_Order['IsAcceptDelivery'], "deliveryWay" => $row_Details_Order['deliveryWay'], "FullNameCustomer" => $row_Get_Name_transp['FullName'], "AssignedByClient" => $row_Details_Order['AssignedByClient'], "ClientAssignAccepted" => $row_Details_Order['ClientAssignAccepted'], "IsReturnAccepted" => $row_Details_Order['IsReturnAccepted'], "IsReturnedOrder" => $row_Details_Order['IsReturnedOrder'], "IsStuckOrder" => $row_Details_Order['IsStuckOrder'], "StuckOrderComment" => $row_Details_Order['StuckOrderComment'], "TypeLoad" => $row_Details_Order['TypeLoad'], "Orderfinished" => $row_Details_Order['Orderfinished'], "pickup_date" => $row_Details_Order['pickup_date'], "DetailsLoad" => $row_Details_Order['DetailsLoad'], "LengthLoad" => $row_Details_Order['LengthLoad'], "WidthLoad" => $row_Details_Order['WidthLoad'], "HeightLoad" => $row_Details_Order['HeightLoad'], "WeightLoad" => $row_Details_Order['WeightLoad'], "DateLoad" => $this->getDateFormat($row_Details_Order['DateLoad'], 'H:i:s'), "OtherDetails" => $row_Details_Order['OtherDetails'], "LatSender" => $row_Details_Order['LatSender'], "PickupMobile" => $row_Details_Order['PickupMobile'], "PickupName" => $row_Details_Order['PickupName'], "ReceiverMobile" => $row_Details_Order['ReceiverMobile'], "ReceiverName" => $row_Details_Order['ReceiverName'], "LongSender" => $row_Details_Order['LongSender'], "LatReciver" => $row_Details_Order['LatReciver'], "LongReciver" => $row_Details_Order['LongReciver'],  "OtherDetailsDes" => $row_Details_Order['OtherDetailsDes'],  "fromCityName" => $row_Details_Order['fromCityName'],  "toCityName" => $row_Details_Order['toCityName'], "TransporterName" => $row_Get_Name_transp['FullName'], "CarLicenceNum" => $row_Details_Car_Transporter['LicenceCarNumber'], "CarNumType" => $row_Details_Car_Name['Name'], "ColorName" => $row_Details_Color_Name['ColorName'], "TransNumber" => $row_Get_Number_transp['PhoneNumber'], "transImgUrl" => $row_Get_Name_transp['transImgUrl'], "costDelivery" => $row_getDelPrice['transporter_bidprice'], "currency" => $row_Details_Order['currency'], "from_currency_value" => $row_Details_Order['from_currency_value'], "RateValue" => $RateValue
                    ));

                    echo json_encode(array("server_response" => $OrderDetailsArray));
                } else
                    echo "OrderNotFound";
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function showExclusiveLogestechsOrderDetails($OrderId, $ClientId, $LangId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $ClientId = $this->dataBase->escape($ClientId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if (!$this->CheckToken($ClientId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }
        
        if ($this->CheckBlockedCustomer($ClientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // check for order
        $query_check_order = "SELECT id FROM togo.orderbidengin WHERE id = '$OrderId'";
        $result_check_order = $this->dataBase->query($query_check_order);

        if (!$result_check_order) {
            echo json_encode(array("status" => "error", "error" => "check_order query error"));
            return;
        }

        $row_count_check_order = $this->dataBase->numRows($result_check_order);

        if ($row_count_check_order == 0) {
            echo json_encode(array("status" => "error", "error" => "order [" . $OrderId . "] not found"));
        }

        // get order details

        $lang_selecter = $LangId == "1" ? "en" : "ar"; 

        $query_get_order_details = "SELECT
        OrderEngine.id AS OrderId,
        OrderEngine.order_status AS orderStatus,
        OrderEngine.CostLoad AS CostLoad,
        OrderEngine.deliveryWay AS deliveryWay,
        OrderEngine.CustomerId AS CustomerId,
        OrderEngine.IsAcceptDelivery AS IsAcceptDelivery,
		ClientCustomerTable.FirstName AS FullNameCustomer,
        OrderEngine.DetailsLoad AS DetailsLoad,
        OrderEngine.LengthLoad AS LengthLoad,
		OrderEngine.TypeLoad AS TypeLoad,
        OrderEngine.Orderfinished AS Orderfinished,
		OrderEngine.IsStuckOrder,
        OrderEngine.StuckOrderComment,
        IsReturnedOrder,
        IsReturnAccepted,
		OrderEngine.AssignedByClient AS AssignedByClient,
        OrderEngine.ClientAssignAccepted AS ClientAssignAccepted,
		OrderEngine.DeliveryId AS DeliveryId,
        OrderEngine.WidthLoad AS WidthLoad,
		OrderEngine.HeightLoad AS HeightLoad,
        OrderEngine.WeightLoad AS WeightLoad,
        OrderEngine.DateLoad AS DateLoad,
        OrderEngine.pickup_date AS pickup_date,
		OrderBidAddress.IdCity AS IdCitySource,
        OrderBidAddress.IdCityDes AS IdCityDes,
		OrderBidAddress.OtherDetails AS OtherDetails,
        OrderBidAddress.LatSender AS LatSender,
		OrderBidAddress.LongSender AS LongSender,
        OrderBidAddress.LatReciver AS LatReciver,
        OrderBidAddress.LongReciver AS LongReciver,
		OrderBidAddress.OtherDetailsDes AS OtherDetailsDes,
		pickupAddress.phone_number AS PickupMobile,
        pickupAddress.name AS SenderName,
        pickupAddress.foreign_area_" . $lang_selecter . "_name AS senderVillageName,
        pickupAddress.foreign_region_" . $lang_selecter . "_name AS senderRegionName,
		receiverAddress.phone_number AS ReceiverAddressNum,
        receiverAddress.name AS ReceiverName,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName,
        OrderEngine.currency,
        OrderEngine.from_currency_value
		FROM
		togo.OrderBidEngin AS OrderEngine,
        togo.OrderBidAddress AS OrderBidAddress
		LEFT OUTER JOIN togo.addresses AS pickupAddress on orderbidaddress.SenderAddressId = pickupAddress.id
		LEFT OUTER JOIN togo.addresses AS receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id,
		togo.Customer AS CustomerTable, 
        togo.ClientTable AS ClientCustomerTable
		WHERE
		OrderBidAddress.IdOrderBidEngin = OrderEngine.id 
        AND OrderEngine.id = '$OrderId' 
        AND	CustomerTable.id = OrderEngine.CustomerId 
        AND ClientCustomerTable.CustomerId = CustomerTable.id
		AND (OrderEngine.IsAcceptDelivery = 1 OR OrderEngine.AssignedByClient = 1)";

        $result_get_order_details = $this->dataBase->query($query_get_order_details);

        if (!$result_get_order_details) {
            echo json_encode(array("status" => "error", "error" => "get_order_details query error"));
            return;
        }

        $row_get_order_details = $this->dataBase->fetchArray($result_get_order_details);

        echo json_encode(array("status" => "success", "order_details" => $row_get_order_details));

        return;

                    $Result_Get_Details_Array = $this->dataBase->query($Query_Get_Order_Details);
                    $row_Details_Order = $this->dataBase->fetchArray($Result_Get_Details_Array);
                    $CustomerId = $row_Details_Order['CustomerId'];
                    $query_Get_Lang = "Select LanguageId From togo.Customer Where id='$CustomerId'";
                    $result_Get_Customer = $this->dataBase->query($query_Get_Lang);
                    $row_CustomerId = $this->dataBase->fetchArray($result_Get_Customer);

                    $LangId = $row_CustomerId['LanguageId'];

                    $IdTrans = $row_Details_Order['DeliveryId'];

                    $query_GetRate = "select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                    from togo.OrderBidEngin As OrderTrip , togo.TripRating As Reate 
                    where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                    $Result_Get_Rate = $this->dataBase->query($query_GetRate);
                    $CountRate = 0;
                    $SumRate = 0;
                    $RateTotal = 0;
                    while ($row_Get_Rate = $this->dataBase->fetchArray($Result_Get_Rate)) {
                        $rateValue = $row_Get_Rate['rate'];
                        $CountRate++;
                        $SumRate += $rateValue;
                    }

                    if ($CountRate == 0) {
                        $RateTotal = 0;
                    } else {
                        //$RateTotal = $rateValue/$CountRate;
                        $RateTotal = $SumRate / $CountRate;
                    }

                    $RateValue = $RateTotal;

                    $ViclelId = $row_Details_Order['IdvehicleBid'];
                    $DeliveryId = $row_Details_Order['DeliveryId'];

                    $query_Get_Name_Transporter = "Select CustomerId as transId, concat(FirstName, ' ', LastName) as FullName, PersonalImgPath as transImgUrl From togo.TransporterTable Where CustomerId='$DeliveryId'";
                    $result_GetName_trans = $this->dataBase->query($query_Get_Name_Transporter);
                    $row_Get_Name_transp = $this->dataBase->fetchArray($result_GetName_trans);

                    $query_Get_Number_Transporter = "Select * From Customer Where id='$DeliveryId'";
                    $result_GetNumber_trans = $this->dataBase->query($query_Get_Number_Transporter);
                    $row_Get_Number_transp = $this->dataBase->fetchArray($result_GetNumber_trans);

                    $query_Get_Color_Licenc = "Select CarColorId,LicenceCarNumber From togo.TransporterCarInfo Where CustomerId='$DeliveryId'";
                    $result_Get_color_Licenc = $this->dataBase->query($query_Get_Color_Licenc);
                    $row_Details_Car_Transporter = $this->dataBase->fetchArray($result_Get_color_Licenc);

                    $Color_Id = $row_Details_Car_Transporter['CarColorId'];

                    $query_Get_Name_Car = "Select Name From togo.VehicleNameLang Where IdLanguage='$LangId' AND IdVehicle='$ViclelId'  ";
                    $Result_Get_Name_Vichle = $this->dataBase->query($query_Get_Name_Car);
                    $row_Details_Car_Name = $this->dataBase->fetchArray($Result_Get_Name_Vichle);

                    $query_Get_Name_Color = "Select ColorName From togo.ColorNameLang  Where IdLanguage='$LangId' AND IdColor='$Color_Id'  ";
                    $Result_Get_Name_Color = $this->dataBase->query($query_Get_Name_Color);
                    $row_Details_Color_Name = $this->dataBase->fetchArray($Result_Get_Name_Color);


                    if ($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != "") {
                        $villagevar = $row_Details_Order['Village'];
                    }
                    if ($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != "") {
                        $villagedesvar = $row_Details_Order['VillageDestination'];
                    }

                    // get delivery price
                    $trnasId = $row_Get_Name_transp['transId'];
                    // $query_getDelPrice = "Select CostDelivery from togo.deliveryacceptordertable where IdOrder = '$OrderId' and IdTransporter = '$trnasId'";
                    $query_getDelPrice = "select transporter_bidprice from togo.transporterstimelinetb where order_id = '$OrderId' and transporter_id = '$trnasId' and isCurrent = 1";
                    $result_getDelPrice = $this->dataBase->query($query_getDelPrice);
                    $row_getDelPrice = $this->dataBase->fetchArray($result_getDelPrice);

                    array_push($OrderDetailsArray, array(
                        "id" => $row_Details_Order['OrderId'], "CostLoad" => $row_Details_Order['CostLoad'], "IsAcceptDelivery" => $row_Details_Order['IsAcceptDelivery'], "deliveryWay" => $row_Details_Order['deliveryWay'], "FullNameCustomer" => $row_Get_Name_transp['FullName'], "AssignedByClient" => $row_Details_Order['AssignedByClient'], "ClientAssignAccepted" => $row_Details_Order['ClientAssignAccepted'], "IsReturnAccepted" => $row_Details_Order['IsReturnAccepted'], "IsReturnedOrder" => $row_Details_Order['IsReturnedOrder'], "IsStuckOrder" => $row_Details_Order['IsStuckOrder'], "StuckOrderComment" => $row_Details_Order['StuckOrderComment'], "TypeLoad" => $row_Details_Order['TypeLoad'], "Orderfinished" => $row_Details_Order['Orderfinished'], "pickup_date" => $row_Details_Order['pickup_date'], "DetailsLoad" => $row_Details_Order['DetailsLoad'], "LengthLoad" => $row_Details_Order['LengthLoad'], "WidthLoad" => $row_Details_Order['WidthLoad'], "HeightLoad" => $row_Details_Order['HeightLoad'], "WeightLoad" => $row_Details_Order['WeightLoad'], "DateLoad" => $this->getDateFormat($row_Details_Order['DateLoad'], 'H:i:s'), "OtherDetails" => $row_Details_Order['OtherDetails'], "LatSender" => $row_Details_Order['LatSender'], "PickupMobile" => $row_Details_Order['PickupMobile'], "PickupName" => $row_Details_Order['PickupName'], "ReceiverMobile" => $row_Details_Order['ReceiverMobile'], "ReceiverName" => $row_Details_Order['ReceiverName'], "LongSender" => $row_Details_Order['LongSender'], "LatReciver" => $row_Details_Order['LatReciver'], "LongReciver" => $row_Details_Order['LongReciver'],  "OtherDetailsDes" => $row_Details_Order['OtherDetailsDes'],  "fromCityName" => $row_Details_Order['fromCityName'],  "toCityName" => $row_Details_Order['toCityName'], "TransporterName" => $row_Get_Name_transp['FullName'], "CarLicenceNum" => $row_Details_Car_Transporter['LicenceCarNumber'], "CarNumType" => $row_Details_Car_Name['Name'], "ColorName" => $row_Details_Color_Name['ColorName'], "TransNumber" => $row_Get_Number_transp['PhoneNumber'], "transImgUrl" => $row_Get_Name_transp['transImgUrl'], "costDelivery" => $row_getDelPrice['transporter_bidprice'], "currency" => $row_Details_Order['currency'], "from_currency_value" => $row_Details_Order['from_currency_value'], "RateValue" => $RateValue
                    ));

                    echo json_encode(array("server_response" => $OrderDetailsArray));
    }

    // TO_REM CLIENT_SERVICE
    public function ClientDeleteOrder($OrderId, $ClientId, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $query_Check_Order = "Select IsAcceptDelivery,IsDeleted,DeliveryId From togo.OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
                $Result_Check_Order = $this->dataBase->query($query_Check_Order);
                if ($Result_Check_Order == true) {
                    $row_Check_Order = $this->dataBase->fetchArray($Result_Check_Order);

                    if ($row_Check_Order['IsAcceptDelivery'] == 1) {
                        //Send Notify Transporter & Delete Order With Actrion Cost !
                        $query_delete_Accept_Order = "Update togo.orderbidengin set IsDeleted=1, order_status='Deleted' Where id='$OrderId'"; /* edited (set order_status -> 'Deleted') */
                        $Result_delete_Accept_Order = $this->dataBase->query($query_delete_Accept_Order);
                        if ($Result_delete_Accept_Order) {

                            /* edited (record the action) */
                            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                            $this->recordAction($ClientId, -1, $OrderId, -1, '', "Order Canceled", 4);

                            // discount from client odoo cost
                            //diala code

                            $array = $this->getClientId($OrderId);
                            $array2 = $this->getCostFromDB($OrderId);

                            if ($array['delivaryw'] == 1) {
                                $cancelreqult = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                                $cancelfee = $this->cancellationfee($ClientId);
                                echo "dc= " . $array2['CostDelivery'] . "clientid=" . $array['customerid'] . "cancel result=" . $cancelreqult . "cancell frr=" . $cancelfee;
                            } else if ($array['delivaryw'] == 2) {
                                $cancelrequltC = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                                $cancelrequltT = $this->deleteOrderRequest($array2['idtransporter'], $array['CostLoad']);
                                $cancelfee = $this->cancellationfee($ClientId);
                                echo "dc= " . $array2['CostDelivery'] . "clientid=" . $array['customerid'] . "cancel result=" . $cancelrequltC . $cancelrequltT . "cancell frr=" . $cancelfee;
                            } else if ($array['delivaryw'] == 3) {
                                $cancelreqult = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                                $cancelfee = $this->cancellationfee($ClientId);
                                echo "dc= " . $array2['CostDelivery'] . "clientid=" . $array['customerid'] . "cancel result=" . $cancelreqult . "cancell frr=" . $cancelfee;
                            } else if ($array['delivaryw'] == 4) {
                                $cancelrequltd = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                                $cancelrequltl = $this->deleteOrderRequest($array['customerid'], $array['CostLoad']);
                                $cancelfee = $this->cancellationfee($ClientId);
                                echo 'dw4, crd' . $cancelrequltd . $cancelrequltl . $cancelfee;
                            } else echo 'nothing selected';

                            // notification -----

                            $query_Notify_Transporter_Delete = "Select CustomerOrder.Token As TokenNotify, CustomerOrder.WebToken As webTokenNotifiy From 
							togo.OrderBidEngin AS OrerEngin , togo.Customer As CustomerOrder Where OrerEngin.id='$OrderId'
							AND OrerEngin.DeliveryId = CustomerOrder.id";
                            $Result_Id_T_Order = $this->dataBase->query($query_Notify_Transporter_Delete);
                            $row_Id_T = $this->dataBase->fetchArray($Result_Id_T_Order);

                            $tokens = array();
                            $webTokens = array();

                            array_push($tokens, $row_Id_T['TokenNotify']);
                            array_push($webTokens, $row_Id_T['webTokenNotifiy']);

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $client = $this->getClientBusinessAndLogo($ClientId);
                            if ($client['BusinessName'] == 'null') {
                                $client_names = $this->getClientName($ClientId);
                                $client['BusinessName'] = $client_names['FullName'];
                            }

                            $data = array(
                                'orderId' => $OrderId,
                                'clientName' => $client['BusinessName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'ClientDeleteOrder'
                            );

                            $title = "Order Deleted";
                            $body = $client['BusinessName'] . " deleted order " . $OrderId;
                            // $image = $client['LogoUrl'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            echo "OrderDeletedSuccess";
                        } else {
                            echo "OrderNotDeletedSuccess";
                        }
                    } else {
                        $query_delete_Not_Accept_Order = "Update togo.OrderBidEngin set IsDeleted=1, order_status='Deleted' Where id='$OrderId'"; /* edited (set order_status -> 'Deleted') */
                        $Result_delete_Not_Accept_Order = $this->dataBase->query($query_delete_Not_Accept_Order);
                        if ($Result_delete_Not_Accept_Order) {
                            /* edited (record the action) */
                            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                            $this->recordAction($ClientId, -1, $OrderId, -1, '', "Order Canceled", 4);

                            // notification -----

                            $webTokens = array();

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $client = $this->getClientBusinessAndLogo($ClientId);
                            if ($client['BusinessName'] == 'null') {
                                $client_names = $this->getClientName($ClientId);
                                $client['BusinessName'] = $client_names['FullName'];
                            }

                            $data = array(
                                'orderId' => $OrderId,
                                'clientName' => $client['BusinessName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'ClientDeleteOrder'
                            );

                            $title = "Order Deleted";
                            $body = $client['BusinessName'] . " deleted order " . $OrderId;
                            // $image = $client['LogoUrl'];

                            $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);

                            echo "OrderDeletedSuccess";
                        } else {
                            echo "OrderNotDeletedSuccess";
                        }
                    }
                } else {
                    echo "OrderNotFound";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientShowBidRequistsAccepted($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $OrderArray = array();

        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                // check if client is food client
                $query_check_food_client = "SELECT isFoodClient FROM togo.customer WHERE id = '$ClientId'";
                $result_check_food_client = $this->dataBase->query($query_check_food_client);
                $row_check_food_client = $this->dataBase->query($result_check_food_client);
                $is_food_client = $row_check_food_client['isFoodClient'];

                $filter_food_and = "";
                if ($is_food_client == 1) {
                    $filter_food_and = "AND engin.TypeLoad = 1";
                }

                $searchQuery = $searchStr == "no_str" ? "" : " AND (engin.id LIKE '%" . $searchStr . "%' OR foreign_id_table.foreignOrderId LIKE '%" . $searchStr . "%' OR clientbusinesstable.BusinessName LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR citytable.name LIKE '%" . $searchStr . "%') ";

                $query_Get_Orders = "SELECT Distinct engin.*, addresses.OtherDetails, addresses.OtherDetailsDes, receiverAddress.name as receiverName, transporterstimelinetb.transporter_bidprice as deliveryCost, citytable.name as toCityName, foreign_id_table.foreignOrderId, foreign_id_table.loges_barcode
				From togo.OrderBidEngin as engin 
                left join togo.OrderBidAddress as addresses on engin.id=addresses.IdOrderBidEngin 
                left outer join togo.addresses as receiverAddress on addresses.ReciverAddressId = receiverAddress.id
                left outer join togo.transporterstimelinetb as transporterstimelinetb on engin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                left outer join togo.citytable as citytable on addresses.IdCityDes = citytable.id
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where 
                engin.CustomerId='$ClientId' AND engin.IsAcceptDelivery=1 AND (engin.IsDeleted=0 OR engin.IsDeleted IS NULL)
                AND (engin.Orderfinished = 0 Or engin.Orderfinished IS NULL)" . $searchQuery . "
                Order By engin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";

                $result_get_Order = $this->dataBase->query($query_Get_Orders);

                while ($row = $this->dataBase->fetchArray($result_get_Order)) {

                    /* edited ($OrderStatus) */
                    $OrderStatus = "Bid Accepted";
                    if ($row['pickup_date'] != null && $row['pickup_date'] != "NULL" && $row['pickup_date'] != "null") {
                        $OrderStatus = "Out For Delivery";
                    }

                    /* edited (add OrderStatus and CostLoad, order_status, IsReturnedOrder, IsStuckOrder) */
                    array_push($OrderArray, array(
                        "IsReturnedOrder" => $row['IsReturnedOrder'], "IsStuckOrder" => $row['IsStuckOrder'], "order_status" => $row['order_status'], "CostLoad" => $row['CostLoad'], "OrderStatus" => $OrderStatus, "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'], "foreignOrderId" => $row['foreignOrderId'], "loges_barcode" => $row['loges_barcode'],
                        "PackageType" => $row['TypeLoad'], "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'],
                        "receiverName" => $row['receiverName'], "deliveryCost" => $row['deliveryCost'], "toCityName" => $row['toCityName']
                    ));
                }

                $query_Get_Orders_Total = "Select count(*) as TotalOrders 
                From togo.OrderBidEngin as engin
                left join togo.OrderBidAddress as addresses on engin.id=addresses.IdOrderBidEngin 
                left outer join togo.addresses as receiverAddress on addresses.ReciverAddressId = receiverAddress.id
                left outer join togo.citytable as citytable on addresses.IdCityDes = citytable.id
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where engin.CustomerId='$ClientId' AND engin.IsAcceptDelivery=1 AND (engin.IsDeleted=0 OR engin.IsDeleted IS NULL)
                AND (engin.Orderfinished = 0 Or engin.Orderfinished IS NULL)" . $searchQuery;

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientHistoryOrder($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;
        $OrderArray = array();

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $searchQuery = $searchStr == "no_str" ? "" : " AND (engin.id LIKE '%" . $searchStr . "%' OR foreign_id_table.foreignOrderId LIKE '%" . $searchStr . "%' OR clientbusinesstable.BusinessName LIKE '%" . $searchStr . "%' OR addresses.name LIKE '%" . $searchStr . "%' OR citytable.name LIKE '%" . $searchStr . "%') ";

                $query_Get_Orders = "Select Distinct engin.*, OrderBidAddress.OtherDetails, OrderBidAddress.OtherDetailsDes, clientbusinesstable.BusinessName as clientName, addresses.name as receiverName, transporterstimelinetb.transporter_bidprice as deliveryCost, citytable.name as toCityName, foreign_id_table.foreignOrderId, foreign_id_table.loges_barcode
				From togo.OrderBidEngin as engin 
                left outer join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.addresses as addresses on OrderBidAddress.ReciverAddressId = addresses.id
                left outer join togo.transporterstimelinetb as transporterstimelinetb on engin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where  
				engin.CustomerId='$ClientId' AND (engin.IsDeleted = 1 OR engin.Orderfinished = 1) AND engin.isReviewed = 0" . $searchQuery . "
                Order By engin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";

                $result_get_Order = $this->dataBase->query($query_Get_Orders);
                while ($row = $this->dataBase->fetchArray($result_get_Order)) {
                    $checkTripRated = $this->CustomerCheckRateTrip($ClientId, $row['id']);

                    /* edited (add $OrderStatus) */
                    $OrderStatus = "Delivered";
                    if ($row['IsDeleted'] == "1") {
                        $OrderStatus = "Order Deleted";
                    }

                    /* edited (add OrderStatus, order_status, IsReturnedOrder, IsStuckOrder) */
                    array_push($OrderArray, array(
                        "IsReturnedOrder" => $row['IsReturnedOrder'], "IsStuckOrder" => $row['IsStuckOrder'], "order_status" => $row['order_status'], "OrderStatus" => $OrderStatus, "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'],
                        "PackageType" => $row['TypeLoad'], "IsFinished" => $row['Orderfinished'], "IsDeleted" => $row['IsDeleted'],
                        "IsRate" => $checkTripRated, "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'],
                        "clientName" => $row['clientName'], "receiverName" => $row['receiverName'], "deliveryCost" => $row['deliveryCost'], "CostLoad" => $row['CostLoad'], "toCityName" => $row['toCityName'], "isReviewed" => $row['isReviewed'], "foreignOrderId" => $row['foreignOrderId'], "loges_barcode" => $row['loges_barcode']
                    ));
                }

                $query_Get_Orders_Total = "Select count(*) as TotalOrders 
                From togo.OrderBidEngin as engin 
                left outer join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.addresses as addresses on OrderBidAddress.ReciverAddressId = addresses.id
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where 
                engin.CustomerId='$ClientId' AND (engin.IsDeleted=1 OR engin.Orderfinished = 1) AND engin.isReviewed = 0" . $searchQuery;

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function ClientReviewedOrder($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;
        $OrderArray = array();

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $searchQuery = $searchStr == "no_str" ? "" : " AND (engin.id LIKE '%" . $searchStr . "%' OR foreign_id_table.foreignOrderId LIKE '%" . $searchStr . "%' OR clientbusinesstable.BusinessName LIKE '%" . $searchStr . "%' OR addresses.name LIKE '%" . $searchStr . "%' OR citytable.name LIKE '%" . $searchStr . "%') ";

                $query_Get_Orders = "Select Distinct engin.*, OrderBidAddress.OtherDetails, OrderBidAddress.OtherDetailsDes, clientbusinesstable.BusinessName as clientName, addresses.name as receiverName, transporterstimelinetb.transporter_bidprice as deliveryCost, citytable.name as toCityName, foreign_id_table.foreignOrderId, foreign_id_table.loges_barcode
				From togo.OrderBidEngin as engin 
                left outer join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.addresses as addresses on OrderBidAddress.ReciverAddressId = addresses.id
                left outer join togo.transporterstimelinetb as transporterstimelinetb on engin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where  
				engin.CustomerId='$ClientId' AND (engin.IsDeleted = 1 OR engin.Orderfinished = 1) AND engin.isReviewed = 1" . $searchQuery . "
                Order By engin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";

                $result_get_Order = $this->dataBase->query($query_Get_Orders);
                while ($row = $this->dataBase->fetchArray($result_get_Order)) {
                    $checkTripRated = $this->CustomerCheckRateTrip($ClientId, $row['id']);

                    /* edited (add $OrderStatus) */
                    $OrderStatus = "Delivered";
                    if ($row['IsDeleted'] == "1") {
                        $OrderStatus = "Order Deleted";
                    }

                    /* edited (add OrderStatus, order_status, IsReturnedOrder, IsStuckOrder) */
                    array_push($OrderArray, array(
                        "IsReturnedOrder" => $row['IsReturnedOrder'], "IsStuckOrder" => $row['IsStuckOrder'], "order_status" => $row['order_status'], "OrderStatus" => $OrderStatus, "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'],
                        "PackageType" => $row['TypeLoad'], "IsFinished" => $row['Orderfinished'], "IsDeleted" => $row['IsDeleted'],
                        "IsRate" => $checkTripRated, "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'],
                        "clientName" => $row['clientName'], "receiverName" => $row['receiverName'], "deliveryCost" => $row['deliveryCost'], "CostLoad" => $row['CostLoad'], "toCityName" => $row['toCityName'], "isReviewed" => $row['isReviewed'], "foreignOrderId" => $row['foreignOrderId'], "loges_barcode" => $row['loges_barcode']
                    ));
                }

                $query_Get_Orders_Total = "Select count(*) as TotalOrders 
                From togo.OrderBidEngin as engin 
                left outer join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.addresses as addresses on OrderBidAddress.ReciverAddressId = addresses.id
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                Where 
                engin.CustomerId='$ClientId' AND (engin.IsDeleted=1 OR engin.Orderfinished = 1) AND engin.isReviewed = 1" . $searchQuery;

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function TestGet41ClientNewOrders()
    {

        $OrderArray = array();

        $query_Get_Orders = "Select Distinct engin.*, OrderBidAddress.OtherDetails, OrderBidAddress.OtherDetailsDes, clientbusinesstable.BusinessName as clientName, addresses.name as receiverName, transporterstimelinetb.transporter_bidprice as deliveryCost, citytable.name as toCityName, foreign_id_table.foreignOrderId, foreign_id_table.loges_barcode
				From togo.OrderBidEngin as engin 
                left outer join togo.OrderBidAddress as OrderBidAddress on engin.id = OrderBidAddress.IdOrderBidEngin
                left outer join togo.clientbusinesstable as clientbusinesstable on engin.CustomerId = clientbusinesstable.CustomerId
                left outer join togo.addresses as addresses on OrderBidAddress.ReciverAddressId = addresses.id
                left outer join togo.transporterstimelinetb as transporterstimelinetb on engin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                left outer join togo.citytable as citytable on OrderBidAddress.IdCityDes = citytable.id
                left outer join togo.foreign_order_id_conversion as foreign_id_table on engin.id = foreign_id_table.togoOrderId
                where engin.order_status = 'Out for Delivery'";

        $result_get_Order = $this->dataBase->query($query_Get_Orders);
        while ($row = $this->dataBase->fetchArray($result_get_Order)) {

            array_push($OrderArray, array(
                "order_status" => $row['order_status'], "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'],
                "PackageType" => $row['TypeLoad'],
                "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'],
                "clientName" => $row['clientName'], "receiverName" => $row['receiverName'], "deliveryCost" => $row['deliveryCost'], "CostLoad" => $row['CostLoad'], "toCityName" => $row['toCityName']
            ));
        }
        echo json_encode(array("server_response" => $OrderArray));
    }

    // added_new -> update order reviewed status
    public function updateOrderReviewedStatus($status, $orderId)
    {
        // echo $status . " --- " . $orderId;

        $st = 0;

        if ($status == "true") {
            $st = 1;
        } else {
            $st = 0;
        }

        $query_update_reviewed_status = "update togo.orderbidengin set isReviewed = $st where id='$orderId'";
        $result_update_reviewed_status = $this->dataBase->query($query_update_reviewed_status);
    }

    public function updateReviewedOrders($orders, $isToReview, $isTransporter)
    {
        if ($isTransporter == '1') {
            $isReviewed = "isTransporterReviewed";
        } else {
            $isReviewed = "isReviewed";
        }

        $orders = explode(',', $orders);
        foreach ($orders as &$value) {
            // echo $value . " -- ";

            if ($isToReview == "true") {
                $query_update_reviewed_status = "update togo.orderbidengin set " . $isReviewed . " = 1 where id='$value'";
                $result_update_reviewed_status = $this->dataBase->query($query_update_reviewed_status);
            } else {
                $query_update_reviewed_status = "update togo.orderbidengin set " . $isReviewed . " = 0 where id='$value'";
                $result_update_reviewed_status = $this->dataBase->query($query_update_reviewed_status);
            }
        }
    }

    // TO_REM CLIENT_SERVICE
    public function getClientDeliveredTotalAmounts($clientId, $tokenDevice)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $query_getCODs = "select orderbidengin.CostLoad, currentTransporter.transporter_bidprice as deliveryCost 
                                  from togo.orderbidengin as orderbidengin 
                                  inner join togo.transporterstimelinetb as currentTransporter on orderbidengin.id = currentTransporter.order_id and isCurrent = 1
                                  where orderbidengin.CustomerId = '$clientId' and orderbidengin.Orderfinished = 1 and orderbidengin.deleted = 0";
                $result_getCODs = $this->dataBase->query($query_getCODs);

                if ($result_getCODs) {

                    $sumCODs = 0;
                    $sumComission = 0;
                    $sumDeliveryCosts = 0;

                    while ($row_getCODs = $this->dataBase->fetchArray($result_getCODs)) {
                        $sumCODs += $row_getCODs['CostLoad'];
                        $sumDeliveryCosts += $row_getCODs['deliveryCost'];
                    }

                    $sumComission = $sumCODs * 0.01;

                    echo json_encode(array("sum_cods" => $sumCODs, "sum_commission" => $sumComission, "sum_deliveryCosts" => $sumDeliveryCosts));
                } else {
                    echo "error fetcheing orders";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function getClientActiveTotalAmounts($clientId, $tokenDevice)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $query_getCODs = "select orderbidengin.CostLoad, currentTransporter.transporter_bidprice as deliveryCost 
                                  from togo.orderbidengin as orderbidengin 
                                  inner join togo.transporterstimelinetb as currentTransporter on orderbidengin.id = currentTransporter.order_id and isCurrent = 1
                                  where orderbidengin.CustomerId = '$clientId' and (orderbidengin.order_status = 'Out for Delivery' or orderbidengin.order_status = 'Bid Accepted') and orderbidengin.deleted = 0";
                $result_getCODs = $this->dataBase->query($query_getCODs);

                if ($result_getCODs) {

                    $sumCODs = 0;
                    $sumDeliveryCosts = 0;

                    while ($row_getCODs = $this->dataBase->fetchArray($result_getCODs)) {
                        $sumCODs += $row_getCODs['CostLoad'];
                        $sumDeliveryCosts += $row_getCODs['deliveryCost'];
                    }

                    echo json_encode(array("sum_cods" => $sumCODs, "sum_deliveryCosts" => $sumDeliveryCosts));
                } else {
                    echo "error fetcheing orders";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function getClientNewTotalAmounts($clientId, $tokenDevice)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $query_getCODs = "select orderbidengin.CostLoad 
                                  from togo.orderbidengin as orderbidengin 
                                  where orderbidengin.CustomerId = '$clientId' and orderbidengin.order_status = 'Waiting for Bids' and orderbidengin.deleted = 0";
                $result_getCODs = $this->dataBase->query($query_getCODs);

                if ($result_getCODs) {

                    $sumCODs = 0;

                    while ($row_getCODs = $this->dataBase->fetchArray($result_getCODs)) {
                        $sumCODs += $row_getCODs['CostLoad'];
                    }

                    echo json_encode(array("sum_cods" => $sumCODs));
                } else {
                    echo "error fetcheing orders";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function getTransporterDeliveredTotalAmounts($TransporterId, $tokenDevice)
    {
        if ($this->CheckToken($TransporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $total_cod = 0;
                $total_delivery_cost = 0;
                $total_commission = 0;

                $query = "select sum(engin.CostLoad) as total_cod, sum(timeline.transporter_bidprice) as total_deliv,
                    ROUND(sum(CASE WHEN acceptTb.togo_margin > 0 THEN (acceptTb.togo_margin - (acceptTb.togo_margin * 0.16)) ELSE ((0.15 * acceptTb.CostDelivery) - (0.15 * acceptTb.CostDelivery * 0.16)) END), 1) as total_com
                    from togo.transporterstimelinetb as timeline
                    inner join togo.orderbidengin as engin on timeline.order_id = engin.id and engin.deleted = 0
                    inner join togo.deliveryacceptordertable as acceptTb on timeline.order_id = acceptTb.IdOrder and acceptTb.IdTransporter = '$TransporterId' 
                    where timeline.transporter_id = '$TransporterId' and (engin.order_status = 'Delivered')";

                $result = $this->dataBase->query($query);

                $row = $this->dataBase->fetchArray($result);

                $total_cod = $row['total_cod'];
                $total_delivery_cost = $row['total_deliv'];
                $total_commission = $row['total_com'];

                echo json_encode(array("sum_cods" => $total_cod, "sum_commission" => $total_commission, "sum_deliveryCosts" => $total_delivery_cost));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function getTransporterActiveTotalAmounts($TransporterId, $tokenDevice)
    {
        if ($this->CheckToken($TransporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $total_cod = 0;
                $total_delivery_cost = 0;

                $query = "select sum(engin.CostLoad) as total_cod, sum(timeline.transporter_bidprice) as total_deliv
                    from togo.transporterstimelinetb as timeline
                    inner join togo.orderbidengin as engin on timeline.order_id = engin.id and engin.deleted = 0
                    where timeline.transporter_id = '$TransporterId' and (engin.order_status = 'Bid Accepted' or engin.order_status = 'Out for Delivery')";

                $result = $this->dataBase->query($query);

                $row = $this->dataBase->fetchArray($result);

                $total_cod = $row['total_cod'];
                $total_delivery_cost = $row['total_deliv'];

                echo json_encode(array("sum_cods" => $total_cod, "sum_deliveryCosts" => $total_delivery_cost));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function getTransporterNewTotalAmounts($TransporterId, $tokenDevice)
    {
        if ($this->CheckToken($TransporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                /* $query_getCODs = "select orderbidengin.CostLoad 
                                  from orderbidengin 
                                  where orderbidengin.CustomerId = '$TransporterId' and orderbidengin.order_status = 'Waiting for Bids'";
                $result_getCODs = $this->dataBase->query($query_getCODs);

                if ($result_getCODs) {

                    $sumCODs = 0;

                    while ($row_getCODs = $this->dataBase->fetchArray($result_getCODs)) {
                        $sumCODs += $row_getCODs['CostLoad'];
                    }

                    echo json_encode(array("sum_cods" => $sumCODs));

                } else {
                    echo "error fetcheing orders";
                } */
                echo json_encode(array("sum_cods" => 0));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterHistoryOrder($TransporterId, $TokenDevice, $PageSize, $PageNumber)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;
        $OrderArray = array();

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Get_Orders = "Select distinct OrderBidEngin.DeliveryId, OrderBidEngin.id,OrderBidEngin.CostLoad,OrderBidEngin.DateLoad
				,OrderBidEngin.deliveryWay,OrderBidEngin.IsDeleted,OrderBidEngin.Orderfinished,DeliveryAcceptOrderTable.CostDelivery
				,DeliveryAcceptOrderTable.IdTransporter,OrderBidEngin.TypeLoad, addresses.OtherDetails, addresses.OtherDetailsDes 
				From togo.OrderBidEngin as OrderBidEngin 
                left join togo.OrderBidAddress as addresses on OrderBidEngin.id=addresses.IdOrderBidEngin ,DeliveryAcceptOrderTable 
                Where  DeliveryAcceptOrderTable.IdTransporter=OrderBidEngin.DeliveryId And  DeliveryAcceptOrderTable.IdTransporter = '$TransporterId' 
				And DeliveryId = '$TransporterId' and OrderBidEngin.id = DeliveryAcceptOrderTable.IdOrder And
				IsAcceptDelivery=1 AND (OrderBidEngin.IsDeleted=1 OR Orderfinished = 1)
                Order By OrderBidEngin.id DESC LIMIT $PageSize OFFSET $PageNumber";

                $result_get_Order = $this->dataBase->query($query_Get_Orders);

                $query_Get_Orders_Total = "Select count(*) as TotalOrders From togo.OrderBidEngin as OrderBidEngin, togo.DeliveryAcceptOrderTable as DeliveryAcceptOrderTable 
                Where  DeliveryAcceptOrderTable.IdTransporter=OrderBidEngin.DeliveryId And  DeliveryAcceptOrderTable.IdTransporter = '$TransporterId' 
				And DeliveryId = '$TransporterId' and OrderBidEngin.id = DeliveryAcceptOrderTable.IdOrder And
				IsAcceptDelivery=1 AND (OrderBidEngin.IsDeleted=1 OR Orderfinished = 1)";

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);

                $CostDelivery = 0;
                while ($row = $this->dataBase->fetchArray($result_get_Order)) {
                    if ($row['CostDelivery'] != "") {
                        $CostDelivery = $row['CostDelivery'];
                    }

                    $OrderStatus = "Delivered";
                    if ($row['IsDeleted'] == "1") {
                        $OrderStatus = "Order Deleted";
                    }

                    $checkTripRated = $this->CustomerCheckRateTrip($TransporterId, $row['id']);
                    array_push($OrderArray, array(
                        "OrderStatus" => $OrderStatus, "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['DateLoad'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "CostLoad" => $row['CostLoad'], "CostDelivery" => $CostDelivery,
                        "DeliveryWays" => $row['deliveryWay'], "PackageType" => $row['TypeLoad'], "IsFinished" => $row['Orderfinished'],
                        "IsDeleted" => $row['IsDeleted'], "IsRate" => $checkTripRated, "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes']
                    ));
                }

                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterOrderCurrent($TransporterId, $TokenDevice, $PageSize, $PageNumber)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageSize = $this->dataBase->escape($PageSize);
        $PageNumber = $this->dataBase->escape($PageNumber);

        if ($PageSize < 0)
            $PageSize = 0;
        $PageNumber = $PageNumber * $PageSize;
        $OrderArray = array();

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Get_Orders = "SELECT Distinct engin.*, addresses.OtherDetails, addresses.OtherDetailsDes
				From togo.OrderBidEngin as engin 
                left join togo.OrderBidAddress as addresses on engin.id=addresses.IdOrderBidEngin
                Where DeliveryId='$TransporterId' AND IsAcceptDelivery=1 AND (IsDeleted=0 OR IsDeleted IS NULL) 
				AND (Orderfinished = 0 Or Orderfinished IS NULL) order by id desc LIMIT $PageSize OFFSET $PageNumber;";
                $result_get_Order = $this->dataBase->query($query_Get_Orders);

                $query_Get_Orders_Total = "SELECT count(*) as TotalOrders From togo.OrderBidEngin 
                Where DeliveryId='$TransporterId' AND IsAcceptDelivery=1 AND (IsDeleted=0 OR IsDeleted IS NULL) 
				AND (Orderfinished = 0 Or Orderfinished IS NULL)";

                $result_get_Order_Total = $this->dataBase->query($query_Get_Orders_Total);
                $row_total = $this->dataBase->fetchArray($result_get_Order_Total);

                while ($row = $this->dataBase->fetchArray($result_get_Order)) {
                    $assignStatus = "Not Assigned";
                    $assignedMemberName = "";
                    if ($row['TeamMemberId'] != null && $row['TeamMemberId'] != 'null'  && $row['TeamMemberId'] != 'NULL') {
                        $memberTeamId = $row['TeamMemberId'];
                        $query_getmember = "Select FirstName, LastName from togo.transportertable where CustomerId =$memberTeamId";
                        $Result_getmember = $this->dataBase->query($query_getmember);
                        if ($Result_getmember == true) {
                            $row_getmember = $this->dataBase->fetchArray($Result_getmember);
                            $assignedMemberName = $row_getmember['FirstName'] . " " . $row_getmember['LastName'];
                            $assignStatus = "Assigned";
                        }
                    }
                    $OrderStatus = "Bid Accepted";
                    if ($row['pickup_date'] != null && $row['pickup_date'] != "NULL" && $row['pickup_date'] != "null") {
                        $OrderStatus = "Out For Delivery";
                    }
                    array_push($OrderArray, array(
                        "OrderStatus" => $OrderStatus, "idOrder" => $row['id'], "DateOrder" => $this->getDateFormat($row['createdAt'], 'Y-m-d'),
                        "TimeOrder" => $this->getDateFormat($row['DateLoad'], 'H:i:s'), "DeliveryWays" => $row['deliveryWay'], "CostLoad" => $row['CostLoad'],
                        "PackageType" => $row['TypeLoad'], "FromAddress" => $row['OtherDetails'], "ToAddress" => $row['OtherDetailsDes'], "AssignStatus" => $assignStatus, "AssignedMemberName" => $assignedMemberName
                    ));
                }
                echo json_encode(array("server_response" => $OrderArray, "total_orders" => $row_total['TotalOrders']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getExclusiveTransporterActiveOrdersByPage($TransporterId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "TransporterId: " . $TransporterId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($TransporterId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($TransporterId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        foreignOrder.loges_barcode AS foreignOrderId,
        senderAddress.foreign_area_" . $lang_selecter . "_name AS senderVillageName,
        senderAddress.foreign_region_" . $lang_selecter . "_name AS senderRegionName,
        receiverAddress.name AS receiverName,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.addresses AS senderAddress ON orderAddresses.SenderAddressId = senderAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.DeliveryId = '$TransporterId'
        AND (orderEngin.order_status = 'Bid Accepted' OR orderEngin.order_status = 'Out for Delivery')
        AND orderEngin.Orderfinished IS NULL
        AND orderEngin.IsDeleted IS NULL
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveTransporterReviewedOrdersByPage($transporterId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $transporterId = $this->dataBase->escape($transporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "ClientId: " . $ClientId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($transporterId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($transporterId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        foreignOrder.loges_barcode AS foreignOrderId,
        senderAddress.foreign_area_" . $lang_selecter . "_name AS senderVillageName,
        senderAddress.foreign_region_" . $lang_selecter . "_name AS senderRegionName,
        receiverAddress.name AS receiverName,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS senderAddress ON orderAddresses.SenderAddressId = senderAddress.id
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.DeliveryId = '$transporterId'
        AND (orderEngin.order_status = 'Delivered' OR orderEngin.order_status = 'Deleted')
        AND (orderEngin.Orderfinished = 1 OR orderEngin.IsDeleted = 1)
        AND orderEngin.isTransporterReviewed = 1
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    // TO_REM TRANS_SERVICE
    public function TransporterDeleteOrder($TransporterId, $OrderId, $TokenDevice)
    {

        $this->OdooDb();
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $OrderId = $this->dataBase->escape($OrderId);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Check_Order = "Select IsAcceptDelivery,IsDeleted,DeliveryId From togo.OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
                $Result_Check_Order = $this->dataBase->query($query_Check_Order);
                if ($Result_Check_Order == true) {
                    $row_Check_Order = $this->dataBase->fetchArray($Result_Check_Order);

                    if ($row_Check_Order['IsAcceptDelivery'] == 1) {


                        // discount transporter odoo cost value
                        //diala code
                        $array = $this->getClientId($OrderId);
                        $array2 = $this->getCostFromDB($OrderId);

                        if ($array['delivaryw'] == 1) {
                            $cancelreqult = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                            $cancelfee = $this->cancellationfee($TransporterId);
                            echo "dc= " . $delivaryCost . "clientid=" . $array['customerid'] . "cancel result=" . $cancelreqult . "cancell frr=" . $cancelfee;
                        } else if ($array['delivaryw'] == 2) {
                            $cancelrequltC = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                            $cancelrequltT = $this->deleteOrderRequest($array2['idtransporter'], $array['CostLoad']);
                            $cancelfee = $this->cancellationfee($TransporterId);
                            echo "dc= " . $array2['CostDelivery'] . "clientid=" . $array['customerid'] . "cancel result=" . $cancelrequltC . $cancelrequltT . "cancell frr=" . $cancelfee;
                        } else if ($array['delivaryw'] == 3) {
                            $cancelreqult = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                            $cancelfee = $this->cancellationfee($TransporterId);
                            echo "dc= " . $array2['CostDelivery'] . "clientid=" . $array['customerid'] . "cancel result=" . $cancelreqult . "cancell frr=" . $cancelfee;
                        } else if ($array['delivaryw'] == 4) {
                            $cancelrequltd = $this->deleteOrderRequest($array['customerid'], $array2['CostDelivery']);
                            $cancelrequltl = $this->deleteOrderRequest($array['customerid'], $array['CostLoad']);
                            $cancelfee = $this->cancellationfee($TransporterId);
                            echo 'dw4, crd' . $cancelrequltd . $cancelrequltl . $cancelfee;
                        } else echo 'nothing selected ';


                        //Send Notify Client & Delete Order With Actrion Cost !
                        $query_delete_Accept_Order = "Update togo.OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                        $Result_delete_Accept_Order = $this->dataBase->query($query_delete_Accept_Order);
                        if ($Result_delete_Accept_Order) {
                            // Send Notification
                            echo "OrderDeletedSuccess";
                            $query_Notify_Client_Delete = "Select CustomerOrder.Token As TokenNotify, CustomerOrder.WebToken As webTokenNotifiy From 
                        togo.OrderBidEngin AS OrerEngin , togo.Customer As CustomerOrder Where OrerEngin.id='$OrderId'
                        AND OrerEngin.CustomerId = CustomerOrder.id";
                            $Result_Id_C_Order = $this->dataBase->query($query_Notify_Client_Delete);
                            $row_Id_C = $this->dataBase->fetchArray($Result_Id_C_Order);

                            $tokens = array();
                            $webTokens = array();

                            array_push($tokens, $row_Id_C['TokenNotify']);
                            array_push($webTokens, $row_Id_C['webTokenNotifiy']);

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $transporter = $this->getTransporterNameAndImage($TransporterId);

                            $data = array(
                                'orderId' => $OrderId,
                                'transporterName' => $transporter['AccountName'],
                                'transporterImageUrl' => $transporter['PersonalImgPath'],
                                'intent' => 'TransporterDeleteOrder'
                            );

                            $title = "Order Deleted";
                            $body = $transporter['AccountName'] . " deleted order " . $OrderId;
                            // $image = $transporter['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                        } else {
                            echo "OrderNotDeletedSuccess";
                        }
                    } else {
                        $query_delete_Not_Accept_Order = "Update togo.OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                        $Result_delete_Not_Accept_Order = $this->dataBase->query($query_delete_Not_Accept_Order);
                        if ($Result_delete_Not_Accept_Order) {
                            echo "OrderDeletedSuccess";
                        } else {
                            echo "OrderNotDeletedSuccess";
                        }
                    }
                } else {
                    echo "OrderNotFound";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TeamMemberSetLocationCurrentOrders($TransporterId, $TransporterLatLocation, $TransporterLongLocation, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $TransporterLatLocation = $this->dataBase->escape($TransporterLatLocation);
        $TransporterLongLocation = $this->dataBase->escape($TransporterLongLocation);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $query_Check_Trip_Transporter = "Select * from togo.OrderBidEngin Where IsAcceptDelivery=1 AND TeamMemberId='$TransporterId' AND 
        (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                $Result_Trip_Transporter = $this->dataBase->query($query_Check_Trip_Transporter);
                $Count_Record = $this->GetCountRows($query_Check_Trip_Transporter);

                if ($Count_Record > 0) {
                    $query_Update_Data = "Update togo.OrderBidEngin set TransporterLatLocation='$TransporterLatLocation' , TransporterLongLoc='$TransporterLongLocation' Where TeamMemberId='$TransporterId'";
                    $result_Update = $this->dataBase->query($query_Update_Data);
                    if ($result_Update == true) {
                        echo "UpdatedLocation";
                    } else {
                        echo "NotUpdateLocation";
                    }
                } else {
                    echo "NoTripFount";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterSetLocationCurrentOrders($TransporterId, $TransporterLatLocation, $TransporterLongLocation, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $TransporterLatLocation = $this->dataBase->escape($TransporterLatLocation);
        $TransporterLongLocation = $this->dataBase->escape($TransporterLongLocation);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $query_Check_Trip_Transporter = "Select * from togo.OrderBidEngin Where IsAcceptDelivery=1 AND DeliveryId='$TransporterId' AND 
        (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

                $Result_Trip_Transporter = $this->dataBase->query($query_Check_Trip_Transporter);
                $Count_Record = $this->GetCountRows($query_Check_Trip_Transporter);

                if ($Count_Record > 0) {
                    $query_Update_Data = "Update togo.OrderBidEngin set TransporterLatLocation='$TransporterLatLocation' , TransporterLongLoc='$TransporterLongLocation' Where DeliveryId='$TransporterId'";
                    $result_Update = $this->dataBase->query($query_Update_Data);
                    if ($result_Update == true) {
                        echo "UpdatedLocation";
                    } else {
                        echo "NotUpdateLocation";
                    }
                } else {
                    echo "NoTripFount";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientTrackTransporterLocation($ClientId, $OrderId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $DetailsLocationArray = array();
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $query_Get_Details_Location = "Select TransporterLatLocation ,TransporterLongLoc,Orderfinished,IsDeleted 
            From togo.OrderBidEngin Where id='$OrderId'";
                $result_Get_Details = $this->dataBase->query($query_Get_Details_Location);
                $row = $this->dataBase->fetchArray($result_Get_Details);

                array_push($DetailsLocationArray, array(
                    "TransporterLatLocation" => $row['TransporterLatLocation'], "TransporterLongLoc" => $row['TransporterLongLoc'], "Orderfinished" => $row['Orderfinished'], "IsDeleted" => $row['IsDeleted']
                ));

                echo json_encode(array("server_response" => $DetailsLocationArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterFinshTrip($TransporterId, $OrderId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $Check_OrderFinshed = "Select * from togo.OrderBidEngin Where id='$OrderId' AND (Orderfinished=0 Or Orderfinished IS NULL) 
            AND (IsDeleted=0 OR IsDeleted IS NULL) AND IsAcceptDelivery=1";
                $result = $this->dataBase->query($Check_OrderFinshed);
                $Count_Record = $this->GetCountRows($Check_OrderFinshed);

                if ($Count_Record > 0) {

                    $Code_Verify = mt_rand(1000, 9999);
                    $query_SetActiveCode = "Update togo.OrderBidAddress set CodeVerifyReciver='$Code_Verify' Where IdOrderBidEngin='$OrderId'";
                    $result_UpdateCode = $this->dataBase->query($query_SetActiveCode);
                    if ($result_UpdateCode == true) {

                        /* edited (update order status to 'Order Finished') */
                        /* $query_update_status = "update orderbidengin set order_status='Delivered' where id='$OrderId'";
                        $result_update_status = $this->dataBase->query($query_update_status); */


                        $query_Get_Mobile_Customer = "Select ReceiverAddressNum from togo.OrderBidAddress Where IdOrderBidEngin='$OrderId'";
                        $result_Get_Number = $this->dataBase->query($query_Get_Mobile_Customer);
                        $row_Get_Number = $this->dataBase->fetchArray($result_Get_Number);

                        $Mobile_Reciver = $row_Get_Number['ReceiverAddressNum'];

                        //Send SMS To Verify Trip

                        // temp for "complete logistics" transporter (send verification code to transporter)

                        if ($TransporterId == 63) {

                            $amobile = "+970593301022";
                            $amobile . "Mobile";
                            $Code_Verify = $Code_Verify;
                            $ch = curl_init();
                            // $Code_Verify1 = "ToGo%20Finish%20Order%20Code%20Is:%20" . $Code_Verify;
                            $Code_Verify1 = "رقم%20تأكيد%20الإنهاء" . $Code_Verify;

                            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                            curl_setopt($ch, CURLOPT_HEADER, 0);
                            $reslt_Send = curl_exec($ch);

                            curl_close($ch);

                            //diala edit - wrong one
                            if ($reslt_Send != "Message Sent Successfully!") {
                                echo "TryAgin";
                            } else {
                                /* edited, add verification code record */
                                $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                            values ('$Code_Verify', '$amobile', 'Finish Order')";
                                $result_recordCode = $this->dataBase->query($query_recordCode);

                                echo "Message_Send";
                            }
                        } else {

                            $amobile = "+97" . $Mobile_Reciver;
                            $amobile . "Mobile";
                            $Code_Verify = $Code_Verify;
                            $ch = curl_init();
                            // $Code_Verify1 = "ToGo%20Finish%20Order%20Code%20Is:%20" . $Code_Verify;
                            $Code_Verify1 = "الرجاء%20تزويد%20هذا%20الرقم%20للناقل%20لتأكيد%20الإستلام%20" . $Code_Verify;
                            // الرجاء تزويد هذا الرقم للناقل لتأكيد الإستلام

                            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                            curl_setopt($ch, CURLOPT_HEADER, 0);

                            ob_start();

                            $reslt_Send = curl_exec($ch);

                            ob_end_clean();

                            curl_close($ch);

                            //diala edit - wrong one
                            if ($reslt_Send != "Message Sent Successfully!") {
                                echo "TryAgin";
                            } else {
                                /* edited, add verification code record */
                                $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                            values ('$Code_Verify', '$amobile', 'Finish Order')";
                                $result_recordCode = $this->dataBase->query($query_recordCode);

                                echo "Message_Send";
                            }
                        }
                    } else {
                        echo "TryAgin";
                    }
                } else {
                    echo "OrderNotAvaliable";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterConfirmFinshTrip($TransporterId, $OrderId, $CodeVerify, $TokenDevice, $reciverLatitude, $reciverLongitude)
    {

        if ($TransporterId == 40 && false) {
            $this->TransporterConfirmFinshTripDeal($TransporterId, $OrderId, $CodeVerify, $TokenDevice, $reciverLatitude, $reciverLongitude);
            return;
        }

        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $CodeVerify = $this->dataBase->escape($CodeVerify);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Check_code = "Select * from togo.OrderBidAddress where IdOrderBidEngin='$OrderId' ";

                $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

                $result_Check_Order = $this->dataBase->query($query_Check_Order);
                $result_CheckCode = $this->dataBase->query($query_Check_code);
                $row_CheckCode = $this->dataBase->fetchArray($result_CheckCode);
                $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
                $row_count_Order = $this->dataBase->numRows($result_Check_Order);
                $Code_verif = $row_CheckCode['CodeVerifyReciver'];
                $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
                /* echo $Code_verif;
                echo $CodeVerify; */
                if ($CodeVerify == $Code_verif && $row_count_Order > 0) {

                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery, original_cost_delivery, togo_margin from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$originalTransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$OrderId'";
                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $ClientId = $this->GetClientBidEnginOdoo($OrderId);
                        $Client_Phone = $this->getPhoneCustomer($ClientId);
                        $Transportre_Phone = $this->getPhoneCustomer($TransporterId);
                        $IdOdoo_client = $this->getOdooId($ClientId);
                        $IdOdoo_transporter = $this->getOdooId($TransporterId);
                        $Client_Cost = $this->getBalance($ClientId);
                        $Transporter_Cost = $this->getBalance($TransporterId);
                        $ReciverAddressId = $row_CheckCode['ReciverAddressId'];
                        $OrderAddressId = $row_CheckCode['id'];
                        $update_address_query = "update togo.addresses set latitude = '$reciverLatitude', longitude = '$reciverLongitude' where id = '$ReciverAddressId'";
                        $update_address_result = $this->dataBase->query($update_address_query);
                        $update_orderaddress_query = "update togo.orderbidaddress set LatReciver = '$reciverLatitude', LongReciver = '$reciverLongitude' where id = '$OrderAddressId'";
                        $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query);

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];
                        $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];

                        $is_deal = $row_Check_Order['is_deal'];
                        $original_cost_delivery = $row_Get_Cost_Tra['original_cost_delivery'];
                        $togo_margin = $row_Get_Cost_Tra['togo_margin'];

                        // deal logic needs to be activated with deal-based orders for individual transporters

                        /* if ($is_deal == 0) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                        } else {
                            $discountvalue = 0;
                        } */

                        //nono
                        if ($deliveryWay == 1) {
                            $discountvalue = $this->getdiscountvalue($OrderId);

                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            print_r($result1);
                        } else
                            if ($deliveryWay == 2) {

                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $clientShareVal = $this->getClientShareValue($ClientId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            if ($IsReturnedOrder == "1") {
                                $ff2 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                            } else {
                                $ff2 = $this->release_escrow($ClientId, $OrderId, $CostLoad, $clientShareVal);
                            }
                        } else
                                if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        } else
                                    if ($deliveryWay == 4) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            $idd1 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        $this->Log_Order($OrderId, $TransporterId, -1, $ClientId, "Order Finished By Transporter");

                        $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
						togo.network_order_payment where IsPaid = 0 And OrderId ='$OrderId'";
                        $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                        $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                        if ($row_count_payment > 0) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                //$crv2 = $this->confirm_request($row['FromTransporterId'], $row['DeliveryCost']);
                                //$dttt = $this->delivToTrans($row['FromTransporterId'], $row['DeliveryCost']);
                                //$this->delivery_request($row['ToTransporterId'], $row['DeliveryCost'], $discountvalue);
                                $this->release_escrow($row['ToTransporterId'], $OrderId, $row['DeliveryCost'], $discountvalue);

                                $paymentId = $row['id'];
                                $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                $this->dataBase->query($query_Update_Payment);
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                        return;
                    }

                    $finishDate = date("Y-m-d H:i:s");

                    /* edited (update order status to 'Order Finished') */
                    $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$OrderId'";
                    $result_Update_Order = $this->dataBase->query($query_Update);
                    if ($result_Update_Order == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Order Finished", 9);

                        echo "finishedOrder";

                        $tokens = array();
                        $webTokens = array();

                        $customerId = $row_Get_Cost_Load['CustomerId'];
                        $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                        $Result_query = $this->dataBase->query($client_query);
                        while ($row = $this->dataBase->fetchArray($Result_query)) {
                            if ($row['TokenNotify'] != null) {
                                array_push($tokens, $row['TokenNotify']);
                            }

                            if ($row['webTokenNotifiy'] != null) {
                                array_push($webTokens, $row['webTokenNotifiy']);
                            }
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $transporter = $this->getTransporterNameAndImage($TransporterId);

                        $data = array(
                            'orderId' => $OrderId,
                            'transporterName' => $transporter['AccountName'],
                            'transporterImageUrl' => $transporter['PersonalImgPath'],
                            'intent' => 'OrderFinished'
                        );

                        $title = "Order Finished";
                        $body = $transporter['AccountName'] . " finished order " . $OrderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                    }
                } else {
                    echo "CodeError";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function TransporterConfirmFinshTripDeal($TransporterId, $OrderId, $CodeVerify, $TokenDevice, $reciverLatitude, $reciverLongitude)
    {

        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $CodeVerify = $this->dataBase->escape($CodeVerify);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Check_code = "Select * from togo.OrderBidAddress where IdOrderBidEngin='$OrderId' ";

                $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

                $result_Check_Order = $this->dataBase->query($query_Check_Order);
                $result_CheckCode = $this->dataBase->query($query_Check_code);
                $row_CheckCode = $this->dataBase->fetchArray($result_CheckCode);
                $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
                $row_count_Order = $this->dataBase->numRows($result_Check_Order);
                $Code_verif = $row_CheckCode['CodeVerifyReciver'];
                $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
                /* echo $Code_verif;
                echo $CodeVerify; */
                if ($CodeVerify == $Code_verif && $row_count_Order > 0) {

                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery, original_cost_delivery, togo_margin from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$originalTransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$OrderId'";
                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $ClientId = $this->GetClientBidEnginOdoo($OrderId);
                        $Client_Phone = $this->getPhoneCustomer($ClientId);
                        $Transportre_Phone = $this->getPhoneCustomer($TransporterId);
                        $IdOdoo_client = $this->getOdooId($ClientId);
                        $IdOdoo_transporter = $this->getOdooId($TransporterId);
                        $Client_Cost = $this->getBalance($ClientId);
                        $Transporter_Cost = $this->getBalance($TransporterId);
                        $ReciverAddressId = $row_CheckCode['ReciverAddressId'];
                        $OrderAddressId = $row_CheckCode['id'];
                        $update_address_query = "update togo.addresses set latitude = '$reciverLatitude', longitude = '$reciverLongitude' where id = '$ReciverAddressId'";
                        $update_address_result = $this->dataBase->query($update_address_query);
                        $update_orderaddress_query = "update togo.orderbidaddress set LatReciver = '$reciverLatitude', LongReciver = '$reciverLongitude' where id = '$OrderAddressId'";
                        $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query);

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];
                        $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];

                        $is_deal = $row_Check_Order['is_deal'];
                        $original_cost_delivery = $row_Get_Cost_Tra['original_cost_delivery'];
                        $togo_margin = $row_Get_Cost_Tra['togo_margin'];

                        if ($is_deal == 0) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                        } else {
                            $discountvalue = 0;
                        }

                        //nono
                        if ($deliveryWay == 1) {
                            // $discountvalue = $this->getdiscountvalue($OrderId);

                            // $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            // print_r($result1);
                            if ($is_deal == 1) {
                                $ff2 = $this->release_escrow_deal_noneCOD($ClientId, $OrderId, $costDelivery);
                            } else {
                                // $discountvalue = $this->getdiscountvalue($OrderId);

                                $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            }
                        } else
                            if ($deliveryWay == 2) {

                            if ($is_deal == 1) {
                                // $discountvalue = $this->getdiscountvalue($OrderId);
                                $clientShareVal = $this->getClientShareValue($ClientId);
                                // $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                                if ($IsReturnedOrder == "1") {
                                    $ff2 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                                } else {
                                    $ff2 = $this->release_escrow_deal_COD($ClientId, $OrderId, $CostLoad, $clientShareVal, $costDelivery); // lopo
                                }
                            } else {
                                // $discountvalue = $this->getdiscountvalue($OrderId);
                                $clientShareVal = $this->getClientShareValue($ClientId);
                                $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                                if ($IsReturnedOrder == "1") {
                                    $ff2 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                                } else {
                                    $ff2 = $this->release_escrow($ClientId, $OrderId, $CostLoad, $clientShareVal);
                                }
                            }
                        }/*  else
                                if ($deliveryWay == 3) {
                            // $discountvalue = $this->getdiscountvalue($OrderId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        } else
                                    if ($deliveryWay == 4) {
                            // $discountvalue = $this->getdiscountvalue($OrderId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            $idd1 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                        } */ else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        $this->Log_Order($OrderId, $TransporterId, -1, $ClientId, "Order Finished By Transporter");

                        $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
						togo.network_order_payment where IsPaid = 0 And OrderId ='$OrderId'";
                        $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                        $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                        if ($row_count_payment > 0) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                //$crv2 = $this->confirm_request($row['FromTransporterId'], $row['DeliveryCost']);
                                //$dttt = $this->delivToTrans($row['FromTransporterId'], $row['DeliveryCost']);
                                //$this->delivery_request($row['ToTransporterId'], $row['DeliveryCost'], $discountvalue);
                                $this->release_escrow($row['ToTransporterId'], $OrderId, $row['DeliveryCost'], $discountvalue);

                                $paymentId = $row['id'];
                                $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                $this->dataBase->query($query_Update_Payment);
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                        return;
                    }

                    $finishDate = date("Y-m-d H:i:s");

                    /* edited (update order status to 'Order Finished') */
                    $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$OrderId'";
                    $result_Update_Order = $this->dataBase->query($query_Update);
                    if ($result_Update_Order == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Order Finished", 9);

                        echo "finishedOrder";

                        $tokens = array();
                        $webTokens = array();

                        $customerId = $row_Get_Cost_Load['CustomerId'];
                        $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                        $Result_query = $this->dataBase->query($client_query);
                        while ($row = $this->dataBase->fetchArray($Result_query)) {
                            if ($row['TokenNotify'] != null) {
                                array_push($tokens, $row['TokenNotify']);
                            }

                            if ($row['webTokenNotifiy'] != null) {
                                array_push($webTokens, $row['webTokenNotifiy']);
                            }
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $transporter = $this->getTransporterNameAndImage($TransporterId);

                        $data = array(
                            'orderId' => $OrderId,
                            'transporterName' => $transporter['AccountName'],
                            'transporterImageUrl' => $transporter['PersonalImgPath'],
                            'intent' => 'OrderFinished'
                        );

                        $title = "Order Finished";
                        $body = $transporter['AccountName'] . " finished order " . $OrderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                    }
                } else {
                    echo "CodeError";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientFinishOrder($ClientId, $OrderId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";
                $result_Check_Order = $this->dataBase->query($query_Check_Order);
                $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
                $row_count_Order = $this->dataBase->numRows($result_Check_Order);
                $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
                $TransporterId = $row_Check_Order['DeliveryId'];
                if ($row_count_Order > 0) {

                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$originalTransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$OrderId'";
                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {
                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];
                        $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];


                        if ($deliveryWay == 1) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        } else if ($deliveryWay == 2) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $clientShareVal = $this->getClientShareValue($ClientId);
                            $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                            $ff2 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                        }
                        $this->Log_Order($OrderId, $TransporterId, -1, $ClientId, "Order Finished By Transporter");

                        $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
						togo.network_order_payment where IsPaid = 0 And OrderId ='$OrderId'";
                        $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                        $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                        if ($row_count_payment > 0) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                $this->release_escrow($row['ToTransporterId'], $OrderId, $row['DeliveryCost'], $discountvalue);

                                $paymentId = $row['id'];
                                $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                $this->dataBase->query($query_Update_Payment);
                            }
                        }
                    } else {
                        echo "OrderNotFound";
                        return;
                    }

                    $finishDate = date("Y-m-d H:i:s");
                    $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$OrderId'";
                    $result_Update_Order = $this->dataBase->query($query_Update);
                    if ($result_Update_Order == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Order Finished", 9);

                        echo "finishedOrder";

                        require_once('FcmExample3/Firebase.php');
                        $tokens = array();
                        $webTokens = array();

                        $query_Get_Token_Transporter = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$TransporterId'";
                        $Result_query = $this->dataBase->query($query_Get_Token_Transporter);
                        $row = $this->dataBase->fetchArray($Result_query);
                        if ($row['Token'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $client = $this->getClientBusinessAndLogo($ClientId);
                        if ($client['BusinessName'] == 'null') {
                            $client_names = $this->getClientName($ClientId);
                            $client['BusinessName'] = $client_names['FullName'];
                        }

                        $data = array(
                            'orderId' => $OrderId,
                            'clientName' => $client['BusinessName'],
                            'clientImageUrl' => $client['LogoUrl'],
                            'intent' => 'OrderFinished'
                        );

                        $title = "Order Finished";
                        $body = $client['BusinessName'] . " finished order " . $OrderId;
                        // $image = $client['LogoUrl'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                    }
                } else {
                    echo "CodeError";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterConfirmFinshTripOldOne($TransporterId, $OrderId, $CodeVerify, $TokenDevice, $reciverLatitude, $reciverLongitude)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $CodeVerify = $this->dataBase->escape($CodeVerify);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Check_code = "Select * from togo.OrderBidAddress where IdOrderBidEngin='$OrderId' ";

                $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
           AND  (IsDeleted Is NULL Or IsDeleted = 0)";

                $result_Check_Order = $this->dataBase->query($query_Check_Order);
                $result_CheckCode = $this->dataBase->query($query_Check_code);
                $row_CheckCode = $this->dataBase->fetchArray($result_CheckCode);
                $row_count_Order = $this->dataBase->numRows($result_Check_Order);
                $Code_verif = $row_CheckCode['CodeVerifyReciver'];
                echo $Code_verif;
                echo $CodeVerify;
                if ($CodeVerify == $Code_verif && $row_count_Order > 0) {

                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$OrderId'";

                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $ClientId = $this->GetClientBidEnginOdoo($OrderId);
                        $Client_Phone = $this->getPhoneCustomer($ClientId);
                        $Transportre_Phone = $this->getPhoneCustomer($TransporterId);
                        $IdOdoo_client = $this->getOdooId($ClientId);
                        $IdOdoo_transporter = $this->getOdooId($TransporterId);
                        $Client_Cost = $this->getBalance($ClientId);
                        $Transporter_Cost = $this->getBalance($TransporterId);
                        $ReciverAddressId = $row_CheckCode['ReciverAddressId'];
                        $OrderAddressId = $row_CheckCode['id'];
                        $update_address_query = "update togo.addresses set latitude = '$reciverLatitude', longitude = '$reciverLongitude' where id = '$ReciverAddressId'";
                        $update_address_result = $this->dataBase->query($update_address_query);
                        $update_orderaddress_query = "update togo.orderbidaddress set LatReciver = '$reciverLatitude', LongReciver = '$reciverLongitude' where id = '$OrderAddressId'";
                        $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query);

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];


                        if ($deliveryWay == 1) {
                            $discountvalue = $this->getdiscountvalue($OrderId);

                            $iddt = $this->delivToTrans($ClientId, $costDelivery);
                            $result1 = $this->delivery_request($TransporterId, $costDelivery, $discountvalue);
                            print_r($result1);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $TransporterId, $result1['time_invoice']);
                        } else
                            if ($deliveryWay == 2) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $dttc = $this->delivToTrans($ClientId, $costDelivery);
                            $dttt = $this->delivToTrans($TransporterId, $CostLoad);
                            $result1 = $this->delivery_request($TransporterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $TransporterId, $result1['time_invoice']);
                            $ff2 = $this->delivery_request($ClientId, $CostLoad, 0);
                        } else
                                if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $iddt = $this->delivToTrans($ClientId, $costDelivery);
                            $result1 = $this->delivery_request($TransporterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $TransporterId, $result1['time_invoice']);
                        } else
                                    if ($deliveryWay == 4) {
                            $discountvalue = $this->getdiscountvalue($OrderId);

                            $iddt = $this->delivToTrans($ClientId, $costDelivery + $CostLoad);
                            $result1 = $this->delivery_request($TransporterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $TransporterId, $result1['time_invoice']);
                            $idd1 = $this->delivery_request($TransporterId, $CostLoad, 0);
                            // echo 'deliverd dv4'.$iddt.$idd1;

                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        $this->Log_Order($OrderId, $TransporterId, -1, $ClientId, "Order Finished By Transporter");
                    } else {
                        echo "OrderNotFound";
                        return;
                    }
                    $q = "select invoiceDate FROM togo.invoicesTable where orderId='$OrderId'";
                    $result = $this->dataBase->query($q);
                    $r = $this->dataBase->fetchArray($result);
                    echo $r['invoiceDate'];
                    if ($r['invoiceDate'] != null) {
                        $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1 Where id='$OrderId'";
                        $result_Update_Order = $this->dataBase->query($query_Update);
                        if ($result_Update_Order == true) {
                            echo "finishedOrder";

                            $tokens = array();
                            $webTokens = array();

                            $customerId = $row_Get_Cost_Load['CustomerId'];
                            $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                            $Result_query = $this->dataBase->query($client_query);
                            while ($row = $this->dataBase->fetchArray($Result_query)) {
                                if ($row['TokenNotify'] != null) {
                                    array_push($tokens, $row['TokenNotify']);
                                }

                                if ($row['webTokenNotifiy'] != null) {
                                    array_push($webTokens, $row['webTokenNotifiy']);
                                }
                            }

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $transporter = $this->getTransporterNameAndImage($TransporterId);

                            $data = array(
                                'orderId' => $OrderId,
                                'transporterName' => $transporter['AccountName'],
                                'transporterImageUrl' => $transporter['PersonalImgPath'],
                                'intent' => 'OrderFinished'
                            );

                            $title = "Order Finished";
                            $body = $transporter['AccountName'] . " finished order " . $OrderId;
                            // $image = $transporter['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                        }
                    } else echo "invoice error ";
                } else {
                    echo "CodeError";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM
    // this function is the same as togo-return-order functionality
    public function albarqReverseOrder($TransporterId, $OrderId, $albarqTrackingId, $baseTrackingId)
    {
        $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnAccepted = 1 where id = '$OrderId'";
        $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
        if ($result_set_ReturnedOrder == true) {

            $query_set_Receiver = "update togo.orderbidaddress set IdCityDes = IdCity, LatReciver = LatSender,
						LongReciver = LongSender, OtherDetailsDes = OtherDetails , 
						ReceiverAddressNum = (select phone_number from togo.addresses where id = SenderAddressId) 
						, ReciverAddressId = SenderAddressId
						where IdOrderBidEngin = '$OrderId'";
            $result_set_Receiver = $this->dataBase->query($query_set_Receiver);
            if ($result_set_Receiver == true) {

                // change to new tracking id

                /*  $query_updateTrackingId = "update foreign_order_id_conversion set foreignOrderId = '$albarqTrackingId' where foreignOrderId = '$baseTrackingId'";
                $result_updateTrackingId = $this->dataBase->query($query_updateTrackingId); */

                /* edited (record the action) */
                // $party_one_id, $party_two_id $order_id, $description, $action_id
                $this->recordAction($TransporterId, -1, $OrderId, -1, 'Al-Barq Order Returned', "Al-Barq shipment (" . $albarqTrackingId . ") returned for order " . $OrderId, 30);

                // edited (send notification) ↓
                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage($TransporterId);

                $data = array(
                    'orderId' => $OrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderReturned'
                );

                $title = "Al-Barq Order Returned";
                $body = $transporter['AccountName'] . " returned order " . $OrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);

                echo "Returned";
            } else {
                echo "Fail";
            }
        } else {
            echo "Fail";
        }
    }

    // TO_REM
    // this function to return albarq order and add 10nis penalty on the client
    public function albarqReturnOrder($TransporterId, $OrderId, $albarqTrackingId, $baseTrackingId)
    {
        $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnAccepted = 1 where id = '$OrderId'";
        $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
        if ($result_set_ReturnedOrder == true) {

            $query_set_Receiver = "update togo.orderbidaddress set IdCityDes = IdCity, LatReciver = LatSender,
						LongReciver = LongSender, OtherDetailsDes = OtherDetails , 
						ReceiverAddressNum = (select phone_number from togo.addresses where id = SenderAddressId) 
						, ReciverAddressId = SenderAddressId
						where IdOrderBidEngin = '$OrderId'";
            $result_set_Receiver = $this->dataBase->query($query_set_Receiver);
            if ($result_set_Receiver == true) {

                // change to new tracking id

                $query_updateTrackingId = "update togo.foreign_order_id_conversion set foreignOrderId = '$albarqTrackingId' where foreignOrderId = '$baseTrackingId'";
                $result_updateTrackingId = $this->dataBase->query($query_updateTrackingId);

                /* edited (record the action) */
                // $party_one_id, $party_two_id $order_id, $description, $action_id
                $this->recordAction($TransporterId, -1, $OrderId, -1, 'Al-Barq Order Returned', "Al-Barq shipment (" . $albarqTrackingId . ") returned for order " . $OrderId, 30);

                // edited (send notification) ↓
                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage($TransporterId);

                $data = array(
                    'orderId' => $OrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderReturned'
                );

                $title = "Al-Barq Order Returned";
                $body = $transporter['AccountName'] . " returned order " . $OrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);

                echo "Returned";
            } else {
                echo "Fail";
            }
        } else {
            echo "Fail";
        }
    }

    // TO_REM
    public function albarqConfirmFinshTrip($TransporterId, $OrderId, $albarqTrackingId)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] != "Delivered") {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$OrderId'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($OrderId);
                    $Client_Phone = $this->getPhoneCustomer($ClientId);
                    $Transportre_Phone = $this->getPhoneCustomer($TransporterId);
                    $IdOdoo_client = $this->getOdooId($ClientId);
                    $IdOdoo_transporter = $this->getOdooId($TransporterId);
                    $Client_Cost = $this->getBalance($ClientId);
                    $Transporter_Cost = $this->getBalance($TransporterId);
                    /* $ReciverAddressId = $row_CheckCode['ReciverAddressId'];
                    $OrderAddressId = $row_CheckCode['id'];
                    $update_address_query = "update addresses set latitude = '$reciverLatitude', longitude = '$reciverLongitude' where id = '$ReciverAddressId'";
                    $update_address_result = $this->dataBase->query($update_address_query);
                    $update_orderaddress_query = "update orderbidaddress set LatReciver = '$reciverLatitude', LongReciver = '$reciverLongitude' where id = '$OrderAddressId'";
                    $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query); */

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];
                    $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($OrderId);

                        $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($OrderId);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        if ($IsReturnedOrder == "1") {
                            $ff2 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                        } else {
                            $ff2 = $this->release_escrow($ClientId, $OrderId, $CostLoad, $clientShareVal);
                        }
                    } else if ($deliveryWay == 3) {

                        $discountvalue = $this->getdiscountvalue($OrderId);
                        $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                    } else if ($deliveryWay == 4) {

                        $discountvalue = $this->getdiscountvalue($OrderId);
                        $result1 = $this->release_escrow($originalTransporterId, $OrderId, $costDelivery, $discountvalue);
                        $idd1 = $this->release_escrow($TransporterId, $OrderId, $CostLoad, 0);
                    } else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    $this->Log_Order($OrderId, $TransporterId, -1, $ClientId, "Order Finished By Transporter");

                    $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
                            togo.network_order_payment where IsPaid = 0 And OrderId ='$OrderId'";
                    $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                    $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                    if ($row_count_payment > 0) {
                        $discountvalue = $this->getdiscountvalue($OrderId);
                        while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                            //$crv2 = $this->confirm_request($row['FromTransporterId'], $row['DeliveryCost']);
                            //$dttt = $this->delivToTrans($row['FromTransporterId'], $row['DeliveryCost']);
                            //$this->delivery_request($row['ToTransporterId'], $row['DeliveryCost'], $discountvalue);
                            $this->release_escrow($row['ToTransporterId'], $OrderId, $row['DeliveryCost'], $discountvalue);

                            $paymentId = $row['id'];
                            $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                            $this->dataBase->query($query_Update_Payment);
                        }
                    }
                } else {
                    echo "OrderNotFound";
                    return;
                }

                $finishDate = date("Y-m-d H:i:s");

                /* edited (update order status to 'Order Finished') */
                $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$OrderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $OrderId, -1, 'Order Finished', "Al-Barq shipment (" . $albarqTrackingId . ") delivered for order " . $OrderId, 30);

                    echo "finishedOrder";

                    $tokens = array();
                    $webTokens = array();

                    $customerId = $row_Get_Cost_Load['CustomerId'];
                    $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                    $Result_query = $this->dataBase->query($client_query);
                    while ($row = $this->dataBase->fetchArray($Result_query)) {
                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);

                    $data = array(
                        'orderId' => $OrderId,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'OrderFinished'
                    );

                    $title = "Order Finished";
                    $body = $transporter['AccountName'] . " finished order " . $OrderId;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                }
            } else {
                echo "Orderdelivered!";
            }
        } else {
            echo "OrderNotFound!";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterMemberFinishTrip($TransporterId, $OrderId, $CodeVerify, $TokenDevice, $reciverLatitude, $reciverLongitude)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $OrderId = $this->dataBase->escape($OrderId);
        $CodeVerify = $this->dataBase->escape($CodeVerify);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_Check_code = "Select * from togo.OrderBidAddress where IdOrderBidEngin='$OrderId' ";

                $query_Check_Order = "Select * from togo.OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
           AND  (IsDeleted Is NULL Or IsDeleted = 0)";

                $result_Check_Order = $this->dataBase->query($query_Check_Order);
                $result_CheckCode = $this->dataBase->query($query_Check_code);
                $row_CheckCode = $this->dataBase->fetchArray($result_CheckCode);
                $row_count_Order = $this->dataBase->numRows($result_Check_Order);
                $row_order_details = $this->dataBase->fetchArray($result_Check_Order);
                $transporterMasterId = $row_order_details['DeliveryId'];
                $Code_verif = $row_CheckCode['CodeVerifyReciver'];
                echo $Code_verif;
                echo $CodeVerify;
                if ($CodeVerify == $Code_verif && $row_count_Order > 0) {

                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$transporterMasterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$OrderId'";

                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $ClientId = $this->GetClientBidEnginOdoo($OrderId);
                        $Client_Phone = $this->getPhoneCustomer($ClientId);
                        $Transportre_Phone = $this->getPhoneCustomer($transporterMasterId);
                        $IdOdoo_client = $this->getOdooId($ClientId);
                        $IdOdoo_transporter = $this->getOdooId($transporterMasterId);
                        $Client_Cost = $this->getBalance($ClientId);
                        $Transporter_Cost = $this->getBalance($transporterMasterId);
                        $ReciverAddressId = $row_CheckCode['ReciverAddressId'];
                        $OrderAddressId = $row_CheckCode['id'];
                        $update_address_query = "update togo.addresses set latitude = '$reciverLatitude', longitude = '$reciverLongitude' where id = '$ReciverAddressId'";
                        $update_address_result = $this->dataBase->query($update_address_query);
                        $update_orderaddress_query = "update togo.orderbidaddress set LatReciver = '$reciverLatitude', LongReciver = '$reciverLongitude' where id = '$OrderAddressId'";
                        $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query);

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];
                        if ($deliveryWay == 1) {
                            $discountvalue = $this->getdiscountvalue($OrderId);

                            $iddt = $this->delivToTrans($ClientId, $costDelivery);
                            $result1 = $this->delivery_request($transporterMasterId, $costDelivery, $discountvalue);
                            print_r($result1);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $transporterMasterId, $result1['time_invoice']);
                        } else
                            if ($deliveryWay == 2) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $dttc = $this->delivToTrans($ClientId, $costDelivery);
                            $this->addTeamTransaction($OrderId, $TransporterId, $transporterMasterId, $CostLoad, "Cash amount that team member received from the receiver");
                            $dttt = $this->delivToTrans($transporterMasterId, $CostLoad);
                            $result1 = $this->delivery_request($transporterMasterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $transporterMasterId, $result1['time_invoice']);
                            $ff2 = $this->delivery_request($ClientId, $CostLoad, 0);
                        } else
                                if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $iddt = $this->delivToTrans($ClientId, $costDelivery);
                            $result1 = $this->delivery_request($transporterMasterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $transporterMasterId, $result1['time_invoice']);
                        } else
                                    if ($deliveryWay == 4) {
                            $discountvalue = $this->getdiscountvalue($OrderId);
                            $iddt = $this->delivToTrans($ClientId, $costDelivery + $CostLoad);
                            $result1 = $this->delivery_request($transporterMasterId, $costDelivery, $discountvalue);
                            $this->addInvoice($result1['total_amount'], $result1['tax_discount'], $result1['togo_discount'], $result1['date_invoice'], $OrderId, $ClientId, $transporterMasterId, $result1['time_invoice']);
                            $this->addTeamTransaction($OrderId, $transporterMasterId, $TransporterId, $CostLoad, "Cash amount that team member payed to the receiver");
                            $idd1 = $this->delivery_request($transporterMasterId, $CostLoad, 0);
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        $this->Log_Order($OrderId, $transporterMasterId, $TransporterId, $ClientId, "Order Finished By Team Member");
                    } else {
                        echo "OrderNotFound";
                        return;
                    }
                    $q = "select invoiceDate FROM togo.invoicesTable where orderId='$OrderId'";
                    $result = $this->dataBase->query($q);
                    $r = $this->dataBase->fetchArray($result);
                    echo $r['invoiceDate'];
                    if ($r['invoiceDate'] != null) {
                        $query_Update = "Update togo.OrderBidEngin set IsFinishedByMember = 1, Orderfinished = 1 Where id='$OrderId'";
                        $result_Update_Order = $this->dataBase->query($query_Update);
                        if ($result_Update_Order == true) {
                            echo "finishedOrder";

                            $tokens = array();
                            $webTokens = array();

                            $customerId = $row_Get_Cost_Load['CustomerId'];
                            $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                            $Result_query = $this->dataBase->query($client_query);
                            while ($row = $this->dataBase->fetchArray($Result_query)) {
                                if ($row['TokenNotify'] != null) {
                                    array_push($tokens, $row['TokenNotify']);
                                }

                                if ($row['webTokenNotifiy'] != null) {
                                    array_push($webTokens, $row['webTokenNotifiy']);
                                }
                            }

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $transporter = $this->getTransporterNameAndImage($TransporterId);

                            $data = array(
                                'orderId' => $OrderId,
                                'transporterName' => $transporter['AccountName'],
                                'transporterImageUrl' => $transporter['PersonalImgPath'],
                                'intent' => 'OrderFinished'
                            );

                            $title = "Order Finished";
                            $body = $transporter['AccountName'] . " finished order " . $OrderId;
                            // $image = $transporter['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                        }
                    } else echo "invoice error ";
                } else {
                    echo "CodeError";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientRateTrip($ClientId, $OrderId, $RateValue, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $OrderId = $this->dataBase->escape($OrderId);
        $RateValue = $this->dataBase->escape($RateValue);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                $query_Check_TripRate = "Select * from togo.TripRating where TripId='$OrderId' AND CustomerId='$ClientId'";
                $result_CheckTrip = $this->dataBase->query($query_Check_TripRate);
                $NumberReate = $this->dataBase->numRows($result_CheckTrip);
                if ($NumberReate > 0) {
                    echo "OrderRated";
                } else {
                    $query_AddRate = "Insert into togo.TripRating (TripId,RateValue,FromTransporter,FromClient,CustomerId) Values ('$OrderId','$RateValue',1,0,'$ClientId')";
                    $result_AddRate = $this->dataBase->query($query_AddRate);
                    if ($result_AddRate == true) {
                        echo "TripRateSuccess";

                        $tokens = array();
                        $webTokens = array();

                        $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer as c inner join togo.orderbidengin orderBid on orderBid.deliveryId = c.id where orderBid.id = '$OrderId'";

                        $Result_query = $this->dataBase->query($client_query);
                        while ($row = $this->dataBase->fetchArray($Result_query)) {
                            if ($row['TokenNotify'] != null) {
                                array_push($tokens, $row['TokenNotify']);
                            }

                            if ($row['webTokenNotifiy'] != null) {
                                array_push($webTokens, $row['webTokenNotifiy']);
                            }
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $client = $this->getClientBusinessAndLogo($ClientId);
                        if ($client['BusinessName'] == 'null') {
                            $client_names = $this->getClientName($ClientId);
                            $client['BusinessName'] = $client_names['FullName'];
                        }

                        $data = array(
                            'orderId' => $OrderId,
                            'clientName' => $client['BusinessName'],
                            'clientImageUrl' => $client['LogoUrl'],
                            'intent' => 'OrderRated'
                        );

                        $title = "Order Rated";
                        $body = $client['BusinessName'] . " rated order " . $OrderId;
                        // $image = $client['LogoUrl'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                    } else {
                        echo "TripNotRated";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // Client Edit Profile

    // TO_REM CLIENT_SERVICE
    public function ClientProfileGetDataTypeWork($ClientId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $BusinessDataArray = array();
                $query = "Select * from togo.ClientBusinessTable where CustomerId='$ClientId'";
                $result = $this->dataBase->query($query);
                $row = $this->dataBase->fetchArray($result);
                array_push($BusinessDataArray, array("BusinessName" => $row['BusinessName'], "BusinessTypeId" => $row['BusinessType'], "BusinessPlace" => $row['BusinessPlace']));
                echo json_encode(array("server_response" => $BusinessDataArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientProfileGetTypeWork($ClientId, $LangId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $BusinessArray = array();
                $query = "Select * from togo.BusinessType Where IdLanguage ='$LangId'";
                $result = $this->dataBase->query($query);

                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($BusinessArray, array("id" => $row['id'], "Name" => $row['NameBusiness']));
                }
                echo json_encode(array("server_response" => $BusinessArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientProfileEditWorkInfo($ClientId, $WorkName, $WorkPlace, $WorkTypeId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $WorkName = $this->dataBase->escape($WorkName);
        $WorkPlace = $this->dataBase->escape($WorkPlace);
        $WorkTypeId = $this->dataBase->escape($WorkTypeId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $query = "Update togo.ClientBusinessTable set";

                $CheckEnterValue = 0;
                if ($WorkName != "%notupdate*" && !empty($WorkName)) {
                    $query .= " BusinessName=N'$WorkName',";
                    $CheckEnterValue += 1;
                }

                if ($WorkPlace != "%notupdate*" && !empty($WorkPlace)) {
                    $query .= " BusinessPlace=N'$WorkPlace',";
                    $CheckEnterValue += 1;
                }

                if ($WorkTypeId != "%notupdate*" && !empty($WorkTypeId)) {
                    $query .= " BusinessType=N'$WorkTypeId'";
                    $CheckEnterValue += 1;
                }
                if ($CheckEnterValue > 0) {
                    echo $CheckEnterValue;
                    if ($CheckEnterValue < 3) {
                        $query = substr($query, 0, -1);
                        $query .= " Where CustomerId='$ClientId'";
                    } else {
                        $query .= " Where CustomerId='$ClientId'";
                    }

                    $Result = $this->dataBase->query($query);
                    if ($Result == true)
                        echo "Edited";
                    else
                        echo "NotEdited";
                } else {
                    echo "NoValueSended";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientProfileViewPersonalInfo($ClientId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $PersonalInfo = array();
                $query_get_Personal = "Select * from togo.ClientTable where CustomerId='$ClientId'";
                $Result_get_Personal = $this->dataBase->query($query_get_Personal);
                $row_Personal_Info = $this->dataBase->fetchArray($Result_get_Personal);
                $clientlogo = $this->getClientBusinessAndLogo($ClientId);
                array_push($PersonalInfo, array("FullName" => $row_Personal_Info['FirstName'] . ' ' . $row_Personal_Info['LastName'], "Email" => $row_Personal_Info['Email'], "LogoUrl" => $clientlogo['LogoUrl']));
                echo json_encode(array("server_response" => $PersonalInfo));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterProfileEditPersonalinfo($TransporterId, $LangId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $IdPlaceArray = array();
                $query_Id_Place = "Select * from togo.IDPlaceLanguage where IdLanguage='$LangId'";

                $Result_Id_Place = $this->dataBase->query($query_Id_Place);

                while ($row = $this->dataBase->fetchArray($Result_Id_Place)) {
                    array_push($IdPlaceArray, array("IdPlace" => $row['IdPlace'], "NamePlace" => $row['NamePlace']));
                }

                $IdLicenceArray = array();
                $query_Type_Licence = "Select * from togo.TypeLicenceLanguage where IdLanguage ='$LangId'";
                $Result_Type_Licence = $this->dataBase->query($query_Type_Licence);

                while ($row = $this->dataBase->fetchArray($Result_Type_Licence)) {
                    array_push($IdLicenceArray, array("IdTypeLicence" => $row['IdTypeLicence'], "TypeName" => $row['TypeName']));
                }

                $PersonalInfo = array();

                /* edited (get transporter image url) */

                /* old one */
                /*$query_get_Personal = "Select t.*, c.OdooId from TransporterTable t inner join customer c on c.id = t.CustomerId where c.id ='$TransporterId'";*/

                /* new one */
                $query_get_Personal = "Select t.*, PersonalImgPath as LogoUrl, c.OdooId 
                from togo.TransporterTable as t 
                inner join togo.customer as c on c.id = t.CustomerId where c.id ='$TransporterId'";


                $Result_Personal_Info = $this->dataBase->query($query_get_Personal);
                $row_Personal_Info = $this->dataBase->fetchArray($Result_Personal_Info);

                $id_Place = $row_Personal_Info['IDPlace'];
                $query_GetNamePlace = "Select * from togo.IDPlaceLanguage Where IdPlace='$id_Place' AND IdLanguage='$LangId'";

                $result_GetPlace = $this->dataBase->query($query_GetNamePlace);
                $row_Place = $this->dataBase->fetchArray($result_GetPlace);
                $NamePlace = $row_Place['NamePlace'];

                /* edited (add LogoUrl) */
                array_push($PersonalInfo, array(
                    "LogoUrl" => $row_Personal_Info['LogoUrl'], "FullName" => $row_Personal_Info['FirstName'] . ' ' . $row_Personal_Info['LastName'], "IDNumber" => $row_Personal_Info['IDNumber'], "IDPlace" => $row_Personal_Info['IDPlace'], "LicenceNumber" => $row_Personal_Info['LicenceNumber'], "TypeLicence" => $row_Personal_Info['TypeLicence'], "Email" => $row_Personal_Info['Email'], "NamePlace" => $NamePlace, "AccountName" => $row_Personal_Info['AccountName'], "BirthDay" => $row_Personal_Info['BirthDay'], "OdooId" => $row_Personal_Info['OdooId']
                ));

                $data = array("place" => $IdPlaceArray, "license" => $IdLicenceArray, "PersonalInfo" => $PersonalInfo);

                echo json_encode($data);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterProfileViewCityinfo($TransporterId, $LangId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $CityArray = array();

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $data = array();
                $IdPlaceArray = array();

                $query_get_Lang = "Select * from togo.Customer Where id='$TransporterId'";
                $result_Get_Lang = $this->dataBase->query($query_get_Lang);
                $row_Get_Lang = $this->dataBase->fetchArray($result_Get_Lang);
                // $LangId = $row_Get_Lang['LanguageId'];
                $RegionId = $row_Get_Lang['RegionId'];

                // $query_GetCits = "Select name As CityName ,areaId As id from arealang where languageId='$LangId'"; areaEdit
                /* $query_GetCits = "Select citylang.name As CityName ,citylang.cityId As id, governoratelang.name as govName
                from citylang 
                inner join citytable on citylang.cityId = citytable.id 
                inner join governoratelang on citytable.governorateId = governoratelang.governorateId
                where citylang.languageId='$LangId' and governoratelang.languageId='$LangId'"; */

                $query_GetCits = "Select citylang.name As CityName ,citylang.cityId As id, citytable.governorateId as govId
                from togo.citylang as citylang 
                inner join togo.citytable as citytable on citylang.cityId = citytable.id
                where citylang.languageId='$LangId'";

                $result_getCites = $this->dataBase->query($query_GetCits);


                $query_GetAll_City_Transporter = "Select * from togo.TransporterWorkCity where CustomerId='$TransporterId'";
                $result_City_Trans = $this->dataBase->query($query_GetAll_City_Transporter);

                while ($row_Get_TranspCity = $this->dataBase->fetchArray($result_City_Trans)) {
                    $CityId = $row_Get_TranspCity['CityId'];
                    $data[] = $CityId;
                }


                while ($row_Get_Lang = $this->dataBase->fetchArray($result_getCites)) {
                    $NammeCity = $row_Get_Lang['CityName'];
                    $id_City = $row_Get_Lang['id'];
                    $id_Governorate = $row_Get_Lang['govId'];


                    $query_Check_addedd = "Select * from togo.TransporterWorkCity Where CustomerId='$TransporterId' AND CityId='$id_City' AND deleted=0";
                    $result_Check_Addedd = $this->dataBase->query($query_Check_addedd);
                    $numRows_Check = $this->dataBase->numRows($result_Check_Addedd);


                    if ($numRows_Check > 0)
                        array_push($CityArray, array("IdCity" => $id_City, "CityName" => $NammeCity, "GovernorateId" => $id_Governorate, "CheckAdded" => "Added"));

                    else
                        array_push($CityArray, array("IdCity" => $id_City, "CityName" => $NammeCity, "GovernorateId" => $id_Governorate, "CheckAdded" => "NotAddedd"));
                }

                echo json_encode(array("CityResponse" => $CityArray));

                /* $IdPlaceArray = array();
            $query_GetCity = "Select TCity.Id As TCityWork,CityLang.CityName AS CityName from TransporterWorkCity As TCity,CityRegionLang As CityLang where CityLang.languageId='$LangId' AND TCity.CustomerId='$TransporterId'
            AND CityLang.CityId=TCity.CityId";

            $Result_City=$this->dataBase->query($query_GetCity);

            while($row= $this->dataBase->fetchArray($Result_City))
            {
                array_push($CityArray,array("IdCity"=>$row['TCityWork'],"CityName"=>$row['CityName']));
            }
            echo json_encode(array("CityResponse"=>$CityArray));*/
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function TransporterUpdateProfileCityinfo($TransporterId, $CityId, $CheckAction, $LangId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $CityId = $this->dataBase->escape($CityId);
        $CheckAction = $this->dataBase->escape($CheckAction);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $query_Check_addedd = "Select * from togo.TransporterWorkCity Where CustomerId='$TransporterId' AND CityId='$CityId'";
                $result_Check_Addedd = $this->dataBase->query($query_Check_addedd);
                $numRows_Check = $this->dataBase->numRows($result_Check_Addedd);


                if ($numRows_Check > 0) {
                    $row = $this->dataBase->fetchArray($result_Check_Addedd);
                    $query_Update_Add = "Update togo.TransporterWorkCity set deleted=0 where CustomerId='$TransporterId' AND CityId='$CityId'";
                    $query_Update_Remove = "Update togo.TransporterWorkCity set deleted=1 where CustomerId='$TransporterId' AND CityId='$CityId'";
                    if ($CheckAction == "Add") {


                        if ($row['deleted'] == 1) {
                            $result = $this->dataBase->query($query_Update_Add);
                            if ($result == true) {
                                echo "UpdatedAddSucessfully";
                            } else {
                                echo "NotUpdated";
                            }
                        } else {
                            echo "NotUpdated";
                        }
                    } else
                        if ($CheckAction == "Remove") {
                        if ($row['deleted'] == 0) {

                            $result = $this->dataBase->query($query_Update_Remove);
                            if ($result == true) {
                                echo "UpdatedRemoveSucessfully";
                            } else {
                                echo "NotUpdated";
                            }
                        } else {
                            echo "NotUpdated";
                        }
                    }
                } else {
                    if ($CheckAction == "Add") {
                        $query_add_City = "Insert into togo.TransporterWorkCity (CustomerId,CityId) Values('$TransporterId','$CityId')";
                        $result_added = $this->dataBase->query($query_add_City);

                        if ($result_added == true) {
                            echo "AddeddSucessfully";
                        } else {
                            echo "NotAddedd";
                        }
                    } else {
                        echo "AlreadyRemoved";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }


    // TO_REM TRANS_SERVICE
    public function TransporterProfileViewTimeinfo($TransporterId, $LangId, $TokenDevice)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $TimeArray = array();

        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {

                $query_GetTime = "Select * from togo.WorkDaysTime Where CustomerId='$TransporterId'";

                $Result_Time = $this->dataBase->query($query_GetTime);

                while ($row = $this->dataBase->fetchArray($Result_Time)) {
                    array_push($TimeArray, array(
                        "IdTime" => $row['id'], "SatTimeStart" => $row['SatTimeStart'],
                        "SatTimeFinish" => $row['SatTimeFinish'], "SunTimeStart" => $row['SunTimeStart'],
                        "SunTimeFinish" => $row['SunTimeFinish'], "MonTimeStart" => $row['MonTimeStart'],
                        "MonTimeFinish" => $row['MonTimeFinish'], "TueTimeStart" => $row['TueTimeStart'],
                        "TueTimeFinish" => $row['TueTimeFinish'], "WenTimeStart" => $row['WenTimeStart'],
                        "WenTimeFinish" => $row['WenTimeFinish'], "ThuTimeStart" => $row['ThuTimeStart'],
                        "ThuTimeFinish" => $row['ThuTimeFinish'], "FriTimeStart" => $row['FriTimeStart'],
                        "FriTimeFinish" => $row['FriTimeFinish']
                    ));
                }
                echo json_encode(array("TimeResponse" => $TimeArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM TRANS_SERVICE
    public function GetBalanceTransporter($TransporterId, $TokenDevice)
    {
        // echo "Transporterid".$TransporterId;
        $TransporterId = $this->dataBase->escape($TransporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $id = $TransporterId;
        if ($this->CheckToken($TransporterId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $result_Balance = $this->getBalance($id);
                $BalanceArray = array();

                array_push($BalanceArray, array("TransporterBalance" => $result_Balance));
                echo json_encode(array("server_response" => $BalanceArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getBalanceTestttttt($key, $customerId)
    {
        if ($key != "0592325932") {
            echo "wrong code!";
            return;
        }
        $id = $customerId;
        $result_Balance = $this->getBalance($id);
        $BalanceArray = array();

        /* echo json_encode($result_Balance);
        return; */

        array_push($BalanceArray, array("TransporterBalance" => $result_Balance));
        echo json_encode(array("server_response" => $BalanceArray));
    }

    // TO_REM TRANS_SERVICE
    public function UpdateWorkTranspoterParameter($myarrayTime, $CustomerId, $TokenDevice)
    {


        $CustomerId = $this->dataBase->escape($CustomerId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        if ($this->CheckToken($CustomerId, $TokenDevice) == true) {


            $query_Check_customer_Exists_Work = "Select * from togo.WorkDaysTime Where CustomerId='$CustomerId'";
            $result_check_Customer_Work = $this->dataBase->query($query_Check_customer_Exists_Work);
            $row_count_Work = $this->dataBase->numRows($result_check_Customer_Work);

            if ($row_count_Work > 0) {
                foreach ($myarrayTime['TransportrTime'] as $WorkItem) {

                    $SatTimeStart = $WorkItem['SatTimeStart'];
                    $SatTimeFinish = $WorkItem['SatTimeFinish'];
                    $SunTimeStart = $WorkItem['SunTimeStart'];
                    $SunTimeFinish = $WorkItem['SunTimeFinish'];
                    $MonTimeStart = $WorkItem['MonTimeStart'];
                    $MonTimeFinish = $WorkItem['MonTimeFinish'];
                    $TueTimeStart = $WorkItem['TueTimeStart'];
                    $TueTimeFinish = $WorkItem['TueTimeFinish'];
                    $WenTimeStart = $WorkItem['WenTimeStart'];
                    $WenTimeFinish = $WorkItem['WenTimeFinish'];
                    $ThuTimeStart = $WorkItem['ThuTimeStart'];
                    $ThuTimeFinish = $WorkItem['ThuTimeFinish'];
                    $FriTimeStart = $WorkItem['FriTimeStart'];
                    $FriTimeFinish = $WorkItem['FriTimeFinish'];

                    $query_Set_Work_Day = "Update togo.WorkDaysTime set SatTimeStart='$SatTimeStart'
                            ,SatTimeFinish='$SatTimeFinish',SunTimeStart='$SunTimeStart'
                            ,SunTimeFinish='$SunTimeFinish',MonTimeStart='$MonTimeStart'
                            ,MonTimeFinish='$MonTimeFinish',TueTimeStart='$TueTimeStart'
                            ,TueTimeFinish='$TueTimeFinish',WenTimeStart='$WenTimeStart'
                            ,WenTimeFinish='$WenTimeFinish',ThuTimeStart='$ThuTimeStart'
                            ,ThuTimeFinish='$ThuTimeFinish',FriTimeStart='$FriTimeStart'
                            ,FriTimeFinish='$FriTimeFinish' 

                            where CustomerId='$CustomerId'";

                    $result_Set_Work_Day = $this->dataBase->query($query_Set_Work_Day);

                    if ($result_Set_Work_Day == true) {
                        echo "WorkTimeUpdated";
                    } else {
                        echo "WorkTimeNotUpdated";
                    }
                }
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM CLIENT_SERVICE
    public function ClientGetLastLocationSaved($ClientId, $LangId, $TokenDevice)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $LangId = $this->dataBase->escape($LangId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        $villagevar = "";
        $villagedesvar = "";

        if ($this->CheckToken($ClientId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {
                $query_Get_LastLocation = "Select DISTINCT  OrderAddress.IdCity As IdCity ,OrderAddress.NameNeighborhood As NameNeighborhood
                ,OrderAddress.NameStreet As NameStreet
                ,OrderAddress.NameBuilding As NameBuilding 
                ,OrderAddress.FloorNumbers As FloorNumbers 
                ,OrderAddress.ApartmentNumber As ApartmentNumber 
                ,OrderAddress.LatSender As LatSender 
                ,OrderAddress.LongSender As LongSender 
                ,OrderAddress.LatReciver As LatReciver 
                ,OrderAddress.LongReciver As LongReciver 
                ,OrderAddress.IdCityDes As IdCityDes 
                ,OrderAddress.NameNeighborhoodDes As NameNeighborhoodDes 
                ,OrderAddress.NameStreetDes As NameStreetDes 
                ,OrderAddress.NameBuildingDes As NameBuildingDes 
                ,OrderAddress.FloorNumbersDes As FloorNumbersDes 
                ,OrderAddress.ApartmentNumberDes As ApartmentNumberDes 
                ,OrderAddress.ReceiverAddressNum As ReceiverAddressNum 
                ,OrderAddress.OtherDetails As OtherDetails 
                ,OrderAddress.NameBuilding As NameBuilding 
                ,OrderAddress.OtherDetailsDes As OtherDetailsDes,OrderAddress.Village,OrderAddress.VillageDestination
                    
            from togo.OrderBidAddress As OrderAddress 
                , togo.OrderBidEngin As OrderEngin
            where 
                OrderAddress.IdOrderBidEngin=OrderEngin.id 
                AND OrderEngin.CustomerId = '$ClientId' group by NameNeighborhoodDes,NameStreet,NameBuilding,FloorNumbers,ApartmentNumber
            Order By OrderEngin.createdAt DESC LIMIT 10 ;
            ";

                $LastLocation = array();

                $Result_LastLocation = $this->dataBase->query($query_Get_LastLocation);

                while ($row = $this->dataBase->fetchArray($Result_LastLocation)) {
                    if ($row['Village'] != null || $row['Village'] != "") {
                        $villagevar = $row['Village'];
                    }
                    if ($row['VillageDestination'] != null || $row['VillageDestination'] != "") {
                        $villagedesvar = $row['VillageDestination'];
                    }

                    $IdCityDes = $row['IdCity'];

                    // $query_GetCity = "Select * from arealang Where languageId ='$LangId' AND areaId='$IdCityDes'";
                    $query_GetCity = "Select * from togo.citylang Where languageId ='$LangId' AND cityId='$IdCityDes'";

                    $Result_City = $this->dataBase->query($query_GetCity);
                    $row_City_Source = $this->dataBase->fetchArray($Result_City);
                    $NameCitySource = $row_City_Source['name'];

                    array_push($LastLocation, array(
                        "IdCity" => $row['IdCity'], "CityName" => $NameCitySource, "NameNeighborhood" => $row['NameNeighborhood'],
                        "NameStreet" => $row['NameStreet'], "FloorNumbers" => $row['FloorNumbers'],
                        "ApartmentNumber" => $row['ApartmentNumber'], "LatSender" => $row['LatSender'],
                        "LongSender" => $row['LongSender'], "LatReciver" => $row['LatReciver'],
                        "LongReciver" => $row['LongReciver'], "IdCityDes" => $row['IdCityDes'],
                        "NameNeighborhoodDes" => $row['NameNeighborhoodDes'], "NameStreetDes" => $row['NameStreetDes'],
                        "NameBuildingDes" => $row['NameBuildingDes'], "FloorNumbersDes" => $row['FloorNumbersDes'],
                        "ApartmentNumberDes" => $row['ApartmentNumberDes'],
                        "ReceiverAddressNum" => $row['ReceiverAddressNum'],
                        "OtherDetails" => $row['OtherDetails'],
                        "OtherDetailsDes" => $row['OtherDetailsDes'],
                        "NameBuilding" => $row['NameBuilding'], "village" => $villagevar, "villageDes" => $villagedesvar
                    ));
                }
                echo json_encode(array("LastLocation" => $LastLocation));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM COMMON_SERVICE
    public function GenerateUUID()
    {

        $uuid = sprintf(
            '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
            // 32 bits for "time_low"
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),

            // 16 bits for "time_mid"
            mt_rand(0, 0xffff),

            // 16 bits for "time_hi_and_version",
            // four most significant bits holds version number 4
            mt_rand(0, 0x0fff) | 0x4000,

            // 16 bits, 8 bits for "clk_seq_hi_res",
            // 8 bits for "clk_seq_low",
            // two most significant bits holds zero and one for variant DCE1.1
            mt_rand(0, 0x3fff) | 0x8000,

            // 48 bits for "node"
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff),
            mt_rand(0, 0xffff)
        );

        $query = "insert into togo.AuthorizationData (QRId , CustomerId , TokenDevice) Values('$uuid',null,null)";
        $this->dataBase->query($query);


        echo $uuid;
    }

    // TO_REM COMMON_SERVICE
    public function setUserCredentials($UUID, $customerId, $token)
    {
        $query = "Update togo.AuthorizationData set CustomerId = '$customerId', TokenDevice = '$token' WHERE QRId = '$UUID'";
        $result = $this->dataBase->query($query);
        if ($result == true) {
            echo "Updated";
        } else {
            echo "NotUpdated";
        }
    }

    // TO_REM TRANS_SERVICE
    public function startPickup($qrCode, $orderId, $transporterId, $tokenDevice, $senderLatitude, $senderLongitude)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/PickupService.php");
                $pickupService = new PickupService($this->dataBase);
                $orderIdFromQR = $pickupService->checkQrCode($qrCode, $transporterId, $orderId);
                if ($orderIdFromQR != null) {
                    $orderId = $orderIdFromQR;
                    $pickupDate = date("Y-m-d H:i:s");
                    $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$orderId'";
                    $result = $this->dataBase->query($query);

                    if ($result == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($transporterId, -1, $orderId, -1, '', "Order Picked Up", 8);

                        /* edited - timeline (add pickup date to a transporter in the timeline) */
                        $newPickupDate = date("Y-m-d H:i:s");
                        $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$newPickupDate' where order_id='$orderId' and transporter_id='$transporterId'"; // toto
                        $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

                        /* edited (add/update pickup date in orderbidengin) */
                        $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$newPickupDate', order_status='Out for Delivery' where id='$orderId'"; // oooo
                        $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

                        echo "Updated";

                        $tokens = array();
                        $webTokens = array();

                        $query = "select obe.customerId as customerId, oba.ReceiverAddressNum, c.token, c.WebToken, c.phonenumber, oba.SenderAddressId, oba.id as orderAddId
                              from togo.orderbidengin as obe
                              inner join togo.orderbidaddress as oba on obe.id = oba.IdOrderBidEngin
                              inner join togo.customer as c on obe.customerId = c.id
                              where obe.id='$orderId'";
                        $result = $this->dataBase->query($query);

                        while ($row = $this->dataBase->fetchArray($result)) {
                            $transporter = $this->getTransporterNameAndImage($transporterId);
                            $SenderAddressId = $row['SenderAddressId'];
                            $OrderAddressId = $row['orderAddId'];
                            $update_address_query = "update togo.addresses set latitude = '$senderLatitude', longitude = '$senderLongitude' where id = '$SenderAddressId'";
                            $update_address_result = $this->dataBase->query($update_address_query);
                            $update_orderaddress_query = "update togo.orderbidaddress set LatSender = '$senderLatitude', LongSender = '$senderLongitude' where id = '$OrderAddressId'";
                            $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query);

                            array_push($tokens, $row['token']);
                            array_push($webTokens, $row['WebToken']);

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $data = array(
                                'orderId' => $orderId,
                                'transporterName' => $transporter['AccountName'],
                                'transporterImageUrl' => $transporter['PersonalImgPath'],
                                'intent' => 'OrderPickedUp'
                            );

                            $title = "Order Picked Up";
                            $body = $transporter['AccountName'] . " picked up order " . $orderId;
                            // $image = $transporter['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            $ch = curl_init();
                            $phoneNumber = "+972" . substr($row['ReceiverAddressNum'], 1);

                            $msg = urlencode("Order #$orderId has been picked up, to track the shipment, use our app www.google.com");
                            // to check (send message method)

                            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phoneNumber&msg=$msg");
                            curl_setopt($ch, CURLOPT_HEADER, 0);
                            curl_exec($ch);
                            curl_close($ch);
                        }
                    } else {
                        echo "NotUpdated";
                    }
                } else {
                    echo "QrCodeNotMatch";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // TO_REM
    public function startPickupAlbarqOrder($orderId, $transporterId, $albarqTrackingId)
    {
        $pickupDate = date("Y-m-d H:i:s");
        $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$orderId'";
        $result = $this->dataBase->query($query);

        if ($result == true) {

            /* edited (record the action) */
            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
            $this->recordAction($transporterId, -1, $orderId, -1, 'Al-Barq Order Picked Up', "Al-Barq shipment (" . $albarqTrackingId . ") Picked Up for order " . $orderId, 30);

            /* edited - timeline (add pickup date to a transporter in the timeline) */
            $newPickupDate = date("Y-m-d H:i:s");
            $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$newPickupDate' where order_id='$orderId' and transporter_id='$transporterId'"; // toto
            $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

            /* edited (add/update pickup date in orderbidengin) */
            $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$newPickupDate', order_status='Out for Delivery' where id='$orderId'"; // oooo
            $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

            echo "Updated";

            $tokens = array();
            $webTokens = array();

            $query = "select obe.customerId as customerId, oba.ReceiverAddressNum, c.token, c.WebToken, c.phonenumber, oba.SenderAddressId, oba.id as orderAddId
                              from togo.orderbidengin as obe
                              inner join togo.orderbidaddress as oba on obe.id = oba.IdOrderBidEngin
                              inner join togo.customer as c on obe.customerId = c.id
                              where obe.id='$orderId'";
            $result = $this->dataBase->query($query);

            while ($row = $this->dataBase->fetchArray($result)) {
                $transporter = $this->getTransporterNameAndImage($transporterId);
                /* $SenderAddressId = $row['SenderAddressId'];
                $OrderAddressId = $row['orderAddId'];
                $update_address_query = "update addresses set latitude = '$senderLatitude', longitude = '$senderLongitude' where id = '$SenderAddressId'";
                $update_address_result = $this->dataBase->query($update_address_query);
                $update_orderaddress_query = "update orderbidaddress set LatSender = '$senderLatitude', LongSender = '$senderLongitude' where id = '$OrderAddressId'";
                $update_orderaddress_result = $this->dataBase->query($update_orderaddress_query); */

                array_push($tokens, $row['token']);
                array_push($webTokens, $row['WebToken']);

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $data = array(
                    'orderId' => $orderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderPickedUp'
                );

                $title = "Order Picked Up";
                $body = $transporter['AccountName'] . " picked up order " . $orderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                $ch = curl_init();
                $phoneNumber = "+972" . substr($row['ReceiverAddressNum'], 1);

                $msg = urlencode("Order #$orderId has been picked up, to track the shipment, use our app www.google.com");
                // to check (send message method)

                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phoneNumber&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                curl_close($ch);
            }
        } else {
            echo "NotUpdated";
        }
    }

    public function getClientCurrentOrders($clientId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $orderService = new OrderService($this->dataBase);
                $clientService = new ClientService($this->dataBase);
                $response = array(
                    'orderDetails' => $orderService->getClientOrders($clientId, $langId),
                    'clientDetails' => $clientService->getClient($clientId)
                );
                echo json_encode($response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getExclusiveClientActiveOrders($clientId, $tokenDevice, $langId)
    {
        if (!$this->CheckToken($clientId, $tokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($clientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // get active orders

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        receiverAddress.name AS receiverName,
        receiverAddress.phone_number AS receiverPhone,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.CustomerId = '$clientId'
        AND (orderEngin.order_status = 'Bid Accepted' OR orderEngin.order_status = 'Out for Delivery')
        AND orderEngin.Orderfinished IS NULL
        AND orderEngin.deleted = 0
        AND orderEngin.IsDeleted IS NULL";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveClientActiveOrdersByPage($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "ClientId: " . $ClientId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($ClientId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($ClientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        receiverAddress.name AS receiverName,
        receiverAddress.phone_number AS receiverPhone,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.CustomerId = '$ClientId'
        AND (orderEngin.order_status = 'Bid Accepted' OR orderEngin.order_status = 'Out for Delivery')
        AND orderEngin.Orderfinished IS NULL
        AND orderEngin.IsDeleted IS NULL
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveClientFinishedDeletedOrdersByPage($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "ClientId: " . $ClientId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($ClientId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($ClientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.isReviewed,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        receiverAddress.name AS receiverName,
        receiverAddress.phone_number AS receiverPhone,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.CustomerId = '$ClientId'
        AND (orderEngin.order_status = 'Delivered' OR orderEngin.order_status = 'Deleted')
        AND (orderEngin.Orderfinished = 1 OR orderEngin.IsDeleted = 1)
        AND orderEngin.isReviewed = 0
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveTransporterFinishedDeletedOrdersByPage($transporterId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $transporterId = $this->dataBase->escape($transporterId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "ClientId: " . $ClientId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($transporterId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($transporterId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        foreignOrder.loges_barcode AS foreignOrderId,
        senderAddress.foreign_area_" . $lang_selecter . "_name AS senderVillageName,
        senderAddress.foreign_region_" . $lang_selecter . "_name AS senderRegionName,
        receiverAddress.name AS receiverName,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS senderAddress ON orderAddresses.SenderAddressId = senderAddress.id
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.DeliveryId = '$transporterId'
        AND (orderEngin.order_status = 'Delivered' OR orderEngin.order_status = 'Deleted')
        AND (orderEngin.Orderfinished = 1 OR orderEngin.IsDeleted = 1)
        AND orderEngin.isTransporterReviewed = 0
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveClientReviewedOrdersByPage($ClientId, $TokenDevice, $PageSize, $PageNumber, $searchStr, $langId)
    {
        $ClientId = $this->dataBase->escape($ClientId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);
        $PageNumber = $this->dataBase->escape($PageNumber);
        $PageSize = $this->dataBase->escape($PageSize);
        $searchStr = $this->dataBase->escape($searchStr);

        /* echo "ClientId: " . $ClientId . ", PageSize: " . $PageSize . ", PageNumber: " . $PageNumber . ", searchStr: " . $searchStr . ", langId: " . $langId;
        return; */

        // $PageNumber = 1;

        if (!$this->CheckToken($ClientId, $TokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($ClientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($PageSize < 0) {
            $PageSize = 0;
        }

        $PageNumber = $PageNumber * $PageSize;

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $searchQuery = $searchStr == "no_str" ? "" : " AND (orderEngin.id LIKE '%" . $searchStr . "%' OR foreignOrder.foreignOrderId LIKE '%" . $searchStr . "%' OR foreignOrder.loges_barcode LIKE '%" . $searchStr . "%' OR receiverAddress.name LIKE '%" . $searchStr . "%' OR receiverAddress.foreign_area_" . $lang_selecter . "_name LIKE '%" . $searchStr . "%') ";

        // get active orders

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.isReviewed,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        receiverAddress.name AS receiverName,
        receiverAddress.phone_number AS receiverPhone,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.CustomerId = '$ClientId'
        AND (orderEngin.order_status = 'Delivered' OR orderEngin.order_status = 'Deleted')
        AND (orderEngin.Orderfinished = 1 OR orderEngin.IsDeleted = 1)
        AND orderEngin.isReviewed = 1
        AND orderEngin.deleted = 0
        " . $searchQuery . "
        ORDER BY orderEngin.createdAt DESC LIMIT $PageSize OFFSET $PageNumber";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getExclusiveClientFinishedOrders($clientId, $tokenDevice, $langId)
    {
        if (!$this->CheckToken($clientId, $tokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($clientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // get finished orders

        $lang_selecter = $langId == "1" ? "en" : "ar"; 

        $query_get_orders = "SELECT
        orderEngin.id AS orderId,
        orderEngin.TypeLoad AS packageType,
        orderEngin.CostLoad AS cod,
        bid.CostDelivery AS deliveryCost,
        orderEngin.currency AS currency,
        orderEngin.from_currency_value AS fromCurrencyValue,
        orderEngin.DateLoad AS orderTime,
        orderEngin.order_status AS orderStatus,
        foreignOrder.loges_barcode AS foreignOrderBarcode,
        receiverAddress.name AS receiverName,
        receiverAddress.phone_number AS receiverPhone,
        receiverAddress.foreign_area_" . $lang_selecter . "_name AS receiverVillageName,
        receiverAddress.foreign_region_" . $lang_selecter . "_name AS receiverRegionName
        FROM
        togo.orderbidengin AS orderEngin
        LEFT OUTER JOIN togo.foreign_order_id_conversion AS foreignOrder ON orderEngin.id = foreignOrder.togoOrderId
        LEFT OUTER JOIN togo.orderbidaddress AS orderAddresses ON orderEngin.id = orderAddresses.IdOrderBidEngin
        LEFT OUTER JOIN togo.addresses AS receiverAddress ON orderAddresses.ReciverAddressId = receiverAddress.id
        LEFT OUTER JOIN togo.deliveryacceptordertable AS bid ON orderEngin.id = bid.IdOrder AND orderEngin.DeliveryId = bid.IdTransporter
        WHERE
        orderEngin.CustomerId = '$clientId'
        AND orderEngin.order_status = 'Delivered'
        AND orderEngin.Orderfinished = 1
        AND orderEngin.deleted = 0
        AND orderEngin.IsDeleted IS NULL";
        
        $result_get_orders = $this->dataBase->query($query_get_orders);

        if (!$result_get_orders) {
            echo json_encode(array("status" => "error", "error" => "get_orders query error"));
            return;
        }

        $orders = array();

        while ($row_get_orders = $this->dataBase->fetchArray($result_get_orders)) {
            array_push($orders, $row_get_orders);
        }

        echo json_encode(array("status" => "success", "orders" => $orders));
    }

    public function getClientFinishedOrders($clientId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $orderService = new OrderService($this->dataBase);
                $clientService = new ClientService($this->dataBase);
                $response = array(
                    'orderDetails' => $orderService->getClientFinishedOrders($clientId, $langId),
                    'clientDetails' => $clientService->getClient($clientId)
                );
                echo json_encode($response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getClientAddresses($clientId, $tokenDevice)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getClientAddresses($clientId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // edited (add getClientDefaultAddress)
    public function getClientDefaultAddress($clientId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getClientDefaultAddress($clientId, $langId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getLogestechsExclusiveClientDefaultAddress($clientId, $tokenDevice, $langId)
    {
        if (!$this->CheckToken($clientId, $tokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($clientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($langId == 1) {
            $languageEnAr = "en";
        } else {
            $languageEnAr = "ar";
        }

        $query_get_default_address = "SELECT 
        a.name, 
        a.details, 
        a.foreign_area_" . $languageEnAr . "_name AS areaName, 
        a.id, 
        a.phone_number,
        a.areaId AS villageId,
        a.provinceId AS regionId
        FROM togo.addresses AS a
        WHERE a.customer_id = '$clientId' AND is_default = 1";
                
        $result_get_default_address = $this->dataBase->query($query_get_default_address);

        if (!$result_get_default_address) {
            echo json_encode(array("status" => "error", "error" => "get_default_address query error"));
            return;
        }

        $row_get_default_address = $this->dataBase->fetchArray($result_get_default_address);

        echo json_encode(
            array(
                "status" => "success", 
                "pickup_address" => array(
                    "name" => $row_get_default_address['name'],
                    "details" => $row_get_default_address['details'],
                    "areaName" => $row_get_default_address['areaName'],
                    "phone_number" => $row_get_default_address['phone_number'],
                    "id" => $row_get_default_address['id'],
                    "villageId" => $row_get_default_address['villageId'],
                    "regionId" => $row_get_default_address['regionId'],
                )
            )
        );
    }

    // edited (add getClientTempAddress)
    public function getClientTempAddress($clientId, $tokenDevice, $langId, $addressId)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getClientTempAddress($langId, $addressId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // edited (add setClientDefaultAddress)
    public function setClientDefaultAddress($clientId, $tokenDevice, $addressId)
    {
        $data = $clientId . " - " . $addressId;
        file_put_contents("client_defualt_address_test.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                $clientService->setClientDefaultAddress($clientId, $addressId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function setLogestechsExclusiveClientDefaultAddress($clientId, $tokenDevice, $addressId)
    {
        if (!$this->CheckToken($clientId, $tokenDevice)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($clientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        $addressId = intval($addressId);

        $query_clear_previous_default = "UPDATE togo.addresses SET is_default = 0 WHERE customer_id = '$clientId'";
        $result_clear_previous_default = $this->dataBase->query($query_clear_previous_default);

        if(!$result_clear_previous_default) {
            echo json_encode(array("status" => "error", "error" => "clear_previous_default query error"));
            return;
        }

        $query_set_new_default = "UPDATE togo.addresses SET is_default = 1 WHERE id = '$addressId'";
        $result_set_new_default = $this->dataBase->query($query_set_new_default);

        if (!$result_set_new_default) {
            echo json_encode(array("status" => "error", "error" => "set_new_default query error"));
            return;
        }

        echo json_encode(array("status" => "success", "response" => "default address set successfully"));
    }

    public function getAddresses($creatorId, $searchText, $tokenDevice, $langId)
    {
        if (/* $this->CheckToken($creatorId, $tokenDevice) == true */true) {
            if (/* $this->CheckBlockedCustomer($creatorId) == false */true) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getAddresses($creatorId, $searchText, $langId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getPrivateAddresses($creatorId, $searchText, $tokenDevice, $langId)
    {
        if ($this->CheckToken($creatorId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($creatorId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getPrivateAddresses($creatorId, $searchText, $langId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }


    public function getSbytaniAddresses($customerId, $tokenDevice)
    {
        if ($this->CheckSbytaniToken($customerId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {
                require_once(dirname(__FILE__) . "/Services/ClientService.php");
                $clientService = new ClientService($this->dataBase);
                echo json_encode($clientService->getClientAddresses($customerId));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (get all orders related to the transporter using the timeline) */
    /* replaced by "getTransporterRelatedOrdersByPage" function below, to get orders by page (for web) */
    /*  public function getTransporterRelatedOrders($filter, $transporterId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/TransporterService.php");
                $orderService = new OrderService($this->dataBase);
                $transporterService = new TransporterService($this->dataBase);
                $response = array(
                    'orders' => $orderService->getTransporterRelatedOrders($filter, $transporterId, $langId),
                    'transporter' => $transporterService->getTransporter($transporterId)
                );
                echo json_encode($response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    } */

    /* edited (get transporter orders by page, for table pagination display, for web) */
    public function getTransporterRelatedOrdersByPage($filter, $transporterId, $tokenDevice, $langId, $PageSize, $PageNumber, $searchStr)
    {
        $searchStr = $this->dataBase->escape($searchStr);
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/TransporterService.php");
                $orderService = new OrderService($this->dataBase);
                $transporterService = new TransporterService($this->dataBase);
                $response = array(
                    'orders' => $orderService->getTransporterRelatedOrdersByPage($filter, $transporterId, $langId, $PageSize, $PageNumber, $searchStr),
                    'transporter' => $transporterService->getTransporter($transporterId)
                );

                return $response;
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* replaced by "getTransporterRelatedOrders" function above to get all related orders to this transporter*/
    public function getTransporterOrders($filter, $transporterId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/TransporterService.php");
                $orderService = new OrderService($this->dataBase);
                $transporterService = new TransporterService($this->dataBase);
                $response = array(
                    'orders' => $orderService->getTransporterOrders($filter, $transporterId, $langId),
                    'transporter' => $transporterService->getTransporter($transporterId)
                );
                echo json_encode($response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterOrdersTest()
    {

        require_once(dirname(__FILE__) . "/Services/OrderService.php");
        require_once(dirname(__FILE__) . "/Services/TransporterService.php");
        $orderService = new OrderService($this->dataBase);
        $transporterService = new TransporterService($this->dataBase);
        $response = array(
            'orders' => $orderService->getTransporterOrdersTest("MY_ORDERS", 40, 1),
            'transporter' => $transporterService->getTransporter($transporterId)
        );
        echo json_encode($response);
    }

    public function getTransporterTeamOrders($filter, $transporterId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                require_once(dirname(__FILE__) . "/Services/OrderService.php");
                require_once(dirname(__FILE__) . "/Services/TransporterService.php");
                $orderService = new OrderService($this->dataBase);
                $transporterService = new TransporterService($this->dataBase);
                $response = array(
                    'orders' => $orderService->getTransporterTeamOrders($filter, $transporterId, $langId),
                    'transporter' => $transporterService->getTransporter($transporterId)
                );
                echo json_encode($response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterOrdersToExport($id, $token, $filterStr, $langId, $startDate,  $endDate)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {
                // echo "getTransporterOrdersToExport - " . $filterStr;

                ////////////////////////////////////////////////////////////////

                $startDate = new DateTime($startDate);
                $endDate = new DateTime($endDate);

                $dateFilter =  " and DATE(log_date) BETWEEN '" . $startDate->format('Y-m-d') . "' AND '" . $endDate->format('Y-m-d') . " ";

                // get orders ids from transporterstimelinetb related to this transporter
                $query_get_order_id = "select order_id from togo.transporterstimelinetb where transporter_id='$id'";
                $result_get_order_id = $this->dataBase->query($query_get_order_id);
                $orders_ids = array();

                while ($row = $this->dataBase->fetchArray($result_get_order_id)) {
                    array_push($orders_ids, $row['order_id']);
                }

                $strArr = implode(",", $orders_ids);

                // edited (for new orders, transporterworkcity.deleted is checked to get non-deleted cities for this transporter (if deleted=0))
                $whereQuery = "";
                switch ($filterStr) {
                    case "new":
                        $whereQuery = " orderbidengin.DeliveryId IS NULL AND orderbidengin.IsDeleted IS NULL AND (orderbidengin.IsCreatedByTransporter <> '1' || orderbidengin.CreatedByTransporterId='$id') AND orderbidaddress.IdCity in (select CityId from transporterworkcity where CustomerId = '$id' and deleted=0) AND orderbidaddress.IdCityDes in (select CityId from transporterworkcity where CustomerId = '$id' and deleted=0)"; // edited ("and deleted=0" added)
                        break;
                    case "active":
                        if ($strArr)
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id' or orderbidengin.id IN (" . $strArr . ")) and orderbidengin.Orderfinished IS NULL and orderbidengin.IsDeleted IS NULL";
                        else
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id') and orderbidengin.Orderfinished IS NULL and orderbidengin.IsDeleted IS NULL";
                        break;
                    case "finished":
                        if ($strArr)
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id' or orderbidengin.id IN (" . $strArr . ")) and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 0";
                        else
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id') and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 0";
                        break;
                    case "reviewed":
                        if ($strArr)
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id' or orderbidengin.id IN (" . $strArr . ")) and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 1";
                        else
                            $whereQuery = " (orderbidengin.DeliveryId='$id' or orderbidengin.OriginalDeliveryId='$id') and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 1";
                        break;
                }

                $whereQuery .= " and ";

                $orders = array();

                /* edited (add order_status, IsReturnedOrder, IsStuckOrder) (and filter by page) */
                $query = "Select orderbidengin.id as 'Order Number', foreign_id_table.loges_barcode as 'Logestechs Barcode Number', orderbidengin.CostLoad as 'COD', orderbidengin.DateLoad as 'Order Date',
                    concat(orderbidaddress.OtherDetails, ', ', fromCityRegion.name) as 'From', receiverAddress.name as 'Receiver Name', concat(orderbidaddress.OtherDetailsDes, ', ', toCityRegion.name) as 'To', orderbidengin.order_status as 'Order Status'
                    From togo.orderbidengin as orderbidengin
                    inner join togo.orderbidaddress as orderbidaddress On orderbidengin.id = orderbidaddress.idorderbidengin
                    left outer join togo.citylang as fromCityRegion on orderbidaddress.IdCity = fromCityRegion.cityId
                    left outer join togo.citylang as toCityRegion on orderbidaddress.IdCityDes = toCityRegion.cityId
                    left outer join togo.foreign_order_id_conversion as foreign_id_table on orderbidengin.id = foreign_id_table.togoOrderId
                    left outer join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id
                    where $whereQuery
                    fromCityRegion.languageId = '$langId' and toCityRegion.languageId = '$langId'
                    order by orderbidengin.createdAt desc"; // edited (citylang -> arealang / fromCityRegion.CityId -> fromCityRegion.areaId / toCityRegion.CityId -> toCityRegion.areaId)

                $result = $this->dataBase->query($query);
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($orders, $row);
                }

                echo json_encode(array("response" => $orders));

                ////////////////////////////////////////////////////////////////
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getClientOrdersToExport($id, $token, $filterStr, $langId, $startDate,  $endDate)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {
                // echo "getClientOrdersToExport - " . $filterStr;

                ////////////////////////////////////////////////////////////////

                $startDate = new DateTime($startDate);
                $endDate = new DateTime($endDate);

                $dateFilter =  " and DATE(log_date) BETWEEN '" . $startDate->format('Y-m-d') . "' AND '" . $endDate->format('Y-m-d') . " ";

                // edited (for new orders, transporterworkcity.deleted is checked to get non-deleted cities for this transporter (if deleted=0))
                $whereQuery = "";
                switch ($filterStr) {
                    case "new":
                        $whereQuery = " orderbidengin.DeliveryId IS NULL AND orderbidengin.IsDeleted IS NULL AND (orderbidengin.IsCreatedByTransporter <> '1') AND orderbidengin.CustomerId = '$id'  and order_status = 'Waiting for Bids'"; // edited ("and deleted=0" added)
                        break;
                    case "active":
                        $whereQuery = " orderbidengin.CustomerId='$id' and orderbidengin.Orderfinished IS NULL and orderbidengin.IsDeleted IS NULL and order_status <> 'Waiting for Bids'";
                        break;
                    case "finished":
                        $whereQuery = " orderbidengin.CustomerId='$id' and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 0";
                        break;
                    case "reviewed":
                        $whereQuery = " orderbidengin.CustomerId='$id' and (orderbidengin.Orderfinished=1 or orderbidengin.IsDeleted=1) and orderbidengin.isReviewed = 1";
                        break;
                }

                $whereQuery .= " and ";

                $orders = array();

                /* edited (add order_status, IsReturnedOrder, IsStuckOrder) (and filter by page) */
                $query = "Select orderbidengin.id as 'Order Number', foreign_id_table.loges_barcode as 'Logestechs Barcode Number', orderbidengin.CostLoad as 'COD', orderbidengin.DateLoad as 'Order Date',
                    transporterstimelinetb.transporter_bidprice as 'Delivery Cost', receiverAddress.name as 'Receiver Name', concat(orderbidaddress.OtherDetailsDes, ', ', toCityRegion.name) as 'To', orderbidengin.order_status as 'Order Status'
                    From togo.orderbidengin as orderbidengin
                    inner join togo.orderbidaddress as orderbidaddress On orderbidengin.id = orderbidaddress.idorderbidengin
                    left outer join togo.citylang as fromCityRegion on orderbidaddress.IdCity = fromCityRegion.cityId
                    left outer join togo.citylang as toCityRegion on orderbidaddress.IdCityDes = toCityRegion.cityId
                    left outer join togo.foreign_order_id_conversion as foreign_id_table on orderbidengin.id = foreign_id_table.togoOrderId
                    left outer join togo.addresses as receiverAddress on orderbidaddress.ReciverAddressId = receiverAddress.id
                    left outer join togo.transporterstimelinetb as transporterstimelinetb on orderbidengin.id = transporterstimelinetb.order_id and transporterstimelinetb.isCurrent = 1
                    where $whereQuery
                    fromCityRegion.languageId = '$langId' and toCityRegion.languageId = '$langId'
                    order by orderbidengin.createdAt desc"; // edited (citylang -> arealang / fromCityRegion.CityId -> fromCityRegion.areaId / toCityRegion.CityId -> toCityRegion.areaId)

                $result = $this->dataBase->query($query);
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($orders, $row);
                }

                echo json_encode(array("response" => $orders));

                ////////////////////////////////////////////////////////////////
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterTransactionsToExport($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {
                $odooApi = new OdooApi();

                $params = json_encode(array(
                    "jsonrpc" => "2.0",
                    "params" => array("customer_id" => $id)
                ));

                $data = $odooApi->callOdooUrl("/partner/entries", "POST", $params);

                echo json_encode(array("response" => $data));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function customerEditCOD($id, $token, $orderId, $newCod, $newCurrency)
    {
        $newCod = $this->dataBase->escape($newCod);

        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                /* echo " - api not activated error - ";
                return; */

                /* echo $newCod . " - error - " . $newCurrency;
                return; */
                
                // if currency is JOD change it and get its ILS value
                // if currency is ILS just change cod value

                $query_get_info = "SELECT CostLoad AS cod FROM togo.orderbidengin WHERE id = '$orderId'";
                $result_get_info = $this->dataBase->query($query_get_info);

                if (!$result_get_info) {
                    echo " - get_info query error - ";
                    return;
                }

                $row_count_get_info = $this->dataBase->numRows($result_get_info);

                if ($row_count_get_info == 0) {
                    echo " - order [" . $orderId . "] not found error - ";
                    return;
                }

                $from_currency_value = null;
                $cod = $newCod;
                if ($newCurrency == 2) {
                    $from_currency_value = $newCod;
                    $cod = $this->JODtoILS($newCod);
                }

                /* echo $cod . " - error - " . $from_currency_value;
                return; */ 

                if ($from_currency_value == null) {
                    $query_update_cod = "UPDATE togo.orderbidengin SET CostLoad = '$cod', from_currency_value = NULL, currency = $newCurrency WHERE id = '$orderId'";
                } else {
                    $query_update_cod = "UPDATE togo.orderbidengin SET CostLoad = '$cod', from_currency_value = '$from_currency_value', currency = $newCurrency WHERE id = '$orderId'";
                }

                $result_update_cod = $this->dataBase->query($query_update_cod);

                if (!$result_update_cod) {
                    echo " - update_cod query error - ";
                    return;
                }

                echo " - cod updated successfully - ";

            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function customerEditOrderNotes($id, $token, $orderId, $notes)
    {
        $notes = $this->dataBase->escape($notes);

        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                $query_update_notes = "UPDATE togo.orderbidengin SET DetailsLoad = '$notes'";
                $result_update_notes = $this->dataBase->query($query_update_notes);

                if (!$result_update_notes) {
                    echo " - update_notes query error - ";
                    return;
                }

                echo " - notes updated successfully - ";

            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getOrderInfoForReturnedOrder($id, $token, $orderId, $langId)
    {
        $notes = $this->dataBase->escape($notes);

        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                $query_get_order_info = "SELECT

                engin.TypeLoad AS packageType,
                engin.WeightLoad AS loadWeight,
                engin.HeightLoad AS loadHeight,
                engin.WidthLoad AS loadWidth,
                engin.LengthLoad AS loadLength,

                senderAddress.id AS senderAddressId,
                senderAddress.name AS senderAddressName,
                senderAddress.phone_number AS senderAddressPhone,
                senderAddress.details AS senderAddressDetails,
                senderAddress.longitude AS senderAddressLongitude,
                senderAddress.latitude AS senderAddressLatitude,
                senderAddress.areaId AS senderAddressAreaId,
                senderAddress.cityId AS senderAddressCityId,
                senderAddress.governoratId AS senderAddressGovernoratId,
                senderAddress.provinceId AS senderAddressProvinceId,
                senderArea.name AS senderAddressAreaName,

                receiverAddress.id AS receiverAddressId,
                receiverAddress.name AS receiverAddressName,
                receiverAddress.phone_number AS receiverAddressPhone,
                receiverAddress.details AS receiverAddressDetails,
                receiverAddress.additional_info AS receiverAddressAdditionalInfo,
                receiverAddress.longitude AS receiverAddressLongitude,
                receiverAddress.latitude AS receiverAddressLatitude,
                receiverArea.name AS receiverAreaName,
                receiverCity.name AS receiverCityName,
                receiverGov.name AS receiverGovName,
                receiverProv.name AS receiverProvName,
                receiverAddress.areaId AS receiverAddressAreaId,
                receiverAddress.cityId AS receiverAddressCityId,
                receiverAddress.governoratId AS receiverAddressGovernoratId,
                receiverAddress.provinceId AS receiverAddressProvinceId

                FROM togo.orderbidengin AS engin
                INNER JOIN togo.orderbidaddress AS addresses ON engin.id = addresses.IdOrderBidEngin
                LEFT OUTER JOIN togo.addresses AS senderAddress ON  addresses.SenderAddressId = senderAddress.id
                LEFT OUTER JOIN togo.addresses AS receiverAddress ON  addresses.ReciverAddressId = receiverAddress.id
                LEFT OUTER JOIN togo.arealang AS senderArea ON senderAddress.areaId = senderArea.areaId AND senderArea.languageId = '$langId'
                LEFT OUTER JOIN togo.arealang AS receiverArea ON receiverAddress.areaId = receiverArea.areaId AND receiverArea.languageId = '$langId'
                LEFT OUTER JOIN togo.citylang AS receiverCity ON receiverAddress.cityId = receiverCity.cityId AND receiverCity.languageId = '$langId'
                LEFT OUTER JOIN togo.governoratelang AS receiverGov ON receiverAddress.governoratId = receiverGov.governorateId AND receiverGov.languageId = '$langId'
                LEFT OUTER JOIN togo.provincelang AS receiverProv ON receiverAddress.provinceId = receiverProv.provinceId AND receiverProv.languageId = '$langId'
                WHERE engin.id = '$orderId'";

                $result_get_order_info = $this->dataBase->query($query_get_order_info);

                if (!$result_get_order_info) {
                    echo " - get_order_info query error - ";
                    return;
                }

                $row_count_get_order_info = $this->dataBase->numRows($result_get_order_info);

                if ($row_count_get_order_info == 0) {
                    echo " - order not found error - ";
                    return;
                }

                $row_get_order_info = $this->dataBase->fetchArray($result_get_order_info);

                echo json_encode(array(
                    "packageType" => $row_get_order_info['packageType'],
                    "loadWeight" => $row_get_order_info['loadWeight'],
                    "loadHeight" => $row_get_order_info['loadHeight'],
                    "loadWidth" => $row_get_order_info['loadWidth'],
                    "loadLength" => $row_get_order_info['loadLength'],

                    "senderAddressId" => $row_get_order_info['senderAddressId'],
                    "senderAddressName" => $row_get_order_info['senderAddressName'],
                    "senderAddressPhone" => $row_get_order_info['senderAddressPhone'],
                    "senderAddressDetails" => $row_get_order_info['senderAddressDetails'],
                    "senderAddressLongitude" => $row_get_order_info['senderAddressLongitude'],
                    "senderAddressLatitude" => $row_get_order_info['senderAddressLatitude'],
                    "receiverAreaName" => $row_get_order_info['receiverAreaName'],
                    "receiverCityName" => $row_get_order_info['receiverCityName'],
                    "receiverGovName" => $row_get_order_info['receiverGovName'],
                    "receiverProvName" => $row_get_order_info['receiverProvName'],
                    "senderAddressAreaId" => $row_get_order_info['senderAddressAreaId'],
                    "senderAddressCityId" => $row_get_order_info['senderAddressCityId'],
                    "senderAddressGovernoratId" => $row_get_order_info['senderAddressGovernoratId'],
                    "senderAddressProvinceId" => $row_get_order_info['senderAddressProvinceId'],
                    "senderAddressAreaName" => $row_get_order_info['senderAddressAreaName'],

                    "receiverAddressId" => $row_get_order_info['receiverAddressId'],
                    "receiverAddressName" => $row_get_order_info['receiverAddressName'],
                    "receiverAddressPhone" => $row_get_order_info['receiverAddressPhone'],
                    "receiverAddressDetails" => $row_get_order_info['receiverAddressDetails'],
                    "receiverAddressAdditionalInfo" => $row_get_order_info['receiverAddressAdditionalInfo'],
                    "receiverAddressLongitude" => $row_get_order_info['receiverAddressLongitude'],
                    "receiverAddressLatitude" => $row_get_order_info['receiverAddressLatitude'],
                    "receiverAddressAreaId" => $row_get_order_info['receiverAddressAreaId'],
                    "receiverAddressCityId" => $row_get_order_info['receiverAddressCityId'],
                    "receiverAddressGovernoratId" => $row_get_order_info['receiverAddressGovernoratId'],
                    "receiverAddressProvinceId" => $row_get_order_info['receiverAddressProvinceId']
                ));

            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function createNewAddress($name, $phoneNumber, $details, $additionalInfo, $country, $zipCode, $isShared, $customerId, $creatorId, $deviceToken, $cityId, $provId, $govId, $areaId)
    {

        /* echo "name: " . $name . " ==== " . "phoneNumber: " . $phoneNumber . " ==== " . "details: " . $details . " ==== " . "additionalInfo: " . $additionalInfo . " ==== " . "country: " . $country . " ==== " . "zipCode: " . $zipCode . " ==== " . "isShared: " . $isShared . " ==== " . "customerId: " . $customerId . " ==== " . "creatorId: " . $creatorId . " ==== " . "deviceToken: " . $deviceToken . " ==== " . "cityId: " . $cityId . " ==== " . "provId: " . $provId . " ==== " . "govId: " . $govId . " ==== " . "areaId: " . $areaId;
        return; */

        // echo $areaId;
        if ($this->CheckToken($creatorId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($creatorId) == false) {

                // if area is not selected match area name with city name
                /* if ($areaId == "") {
                    $query_getCityName = "select name from citytable where id='$cityId'";
                    $result_getCityName = $this->dataBase->query($query_getCityName);
                    $row_cityName = $this->dataBase->fetchArray($result_getCityName);
                    $calledCityName = $row_cityName['name'];

                    $query_getAreaId = "select id from areatable where name='$calledCityName'";
                    $result_getAreaId = $this->dataBase->query($query_getAreaId);
                    $row_areaId = $this->dataBase->fetchArray($result_getAreaId);
                    $areaId = $row_areaId['id'];
                } */

                if ($areaId == "") {
                    $areaId = -1;
                }

                $query = "insert into togo.addresses (name, phone_number, details, additional_info, cityId, provinceId, governoratId, areaId, country, zip_code, is_shared, customer_id, creator_id) 
                         Values('$name', '$phoneNumber', '$details', '$additionalInfo', '$cityId', '$provId', '$govId', '$areaId', '$country', '$zipCode', $isShared, $customerId, $creatorId )";


                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "Created";
                } else {
                    echo "Something went wrong";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // addressDetails, addressAditionalInfo, contactPhone, contactName, villageId, cityId, regionId, villageEnName, villageArName, regionName
    public function createExclusiveLogestechsAddress(
        $contactName, 
        $contactPhone, 
        $addressDetails, 
        $addressAditionalInfo, 
        $customerId, 
        $creatorId, 
        $deviceToken, 
        $cityId, 
        $regionId, 
        $villageId,
        $villageEnName,
        $villageArName,
        $regionName
    )
    {

        /* echo "contactName: " . $contactName . ", contactPhone: " . $contactPhone . ", addressDetails: " . $addressDetails . ", addressAditionalInfo: " . $addressAditionalInfo . ", customerId: " . $customerId . ", creatorId: " . $creatorId . ", deviceToken: " . $deviceToken . ", cityId: " . $cityId . ", regionId: " . $regionId . ", villageId: " . $villageId . ", villageErName: " . $villageEnName . ", villageArName: " . $villageArName . ", regionName: " . $regionName;
        return; */
        
        // get foreign comany id

        $query_get_company_id = "SELECT lti.company_id 
        FROM client_network AS cn
        INNER JOIN togo.logestechs_transporter_info AS lti ON cn.TransporterId = lti.togo_trans_id
        WHERE cn.ClientId = '$customerId'";

        $result_get_company_id = $this->dataBase->query($query_get_company_id);

        if (!$result_get_company_id) {
            echo json_encode(array("status" => "error", "error" => "get_company_id query error"));
            return;
        }

        $row_count_get_company_id = $this->dataBase->numRows($result_get_company_id);

        if ($row_count_get_company_id == 0) {
            echo json_encode(array("status" => "error", "error" => "transporter not found"));
            return;
        }

        $row_get_company_id = $this->dataBase->fetchArray($result_get_company_id);
        $company_id = $row_get_company_id['company_id'];

        // get logestechs' region info (searched by $villageName which is the village name)

        $regionInfoResponse = $this->getLogestechsRegionInfo($company_id, $regionName, $regionId);

        if ($regionInfoResponse == -1) {
            return;
        }

        $regionEnName = $regionInfoResponse->name;
        $regionArName = $regionInfoResponse->arabicName;

        /* echo $regionEnName . " - " . $regionArName;
        return; */

        if ($this->CheckToken($creatorId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($creatorId) == false) {

                if ($areaId == "") {
                    $areaId = -1;
                }

                $query_add_address = "INSERT INTO togo.addresses (
                    name,
                    phone_number,
                    details,
                    additional_info,
                    cityId,
                    provinceId,
                    areaId,
                    customer_id,
                    creator_id,
                    foreign_area_en_name,
                    foreign_area_ar_name,
                    foreign_region_en_name,
                    foreign_region_ar_name
                ) 
                VALUES(
                    '$contactName',
                    '$contactPhone',
                    '$addressDetails',
                    '$addressAditionalInfo',
                    '$cityId',
                    '$regionId',
                    '$villageId',
                    $customerId,
                    $creatorId,
                    '$villageEnName',
                    '$villageArName',
                    '$regionEnName',
                    '$regionArName'
                )";


                $result_add_address = $this->dataBase->query($query_add_address);

                if (!$result_add_address) {
                    echo json_encode(array("status" => "error", "error" => "add_address query error"));
                    return;
                }

                echo json_encode(array("status" => "success", "response" => "new address added successfully"));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // this will be called within "createNewLogestechsExclusiveClientOrder" function
    private function createExclusiveLogestechsAddress_helper(
        $contactName, 
        $contactPhone, 
        $addressDetails, 
        $addressAditionalInfo, 
        $customerId, 
        $creatorId,
        $cityId, 
        $regionId, 
        $villageId,
        $villageEnName,
        $villageArName,
        $regionName
    )
    {
        
        // get foreign comany id

        $query_get_company_id = "SELECT lti.company_id 
        FROM client_network AS cn
        INNER JOIN togo.logestechs_transporter_info AS lti ON cn.TransporterId = lti.togo_trans_id
        WHERE cn.ClientId = '$customerId'";

        $result_get_company_id = $this->dataBase->query($query_get_company_id);

        if (!$result_get_company_id) {
            echo json_encode(array("status" => "error", "error" => "[create address] get_company_id query error"));

            // log
            $data = "(error)[create address] get_company_id query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_count_get_company_id = $this->dataBase->numRows($result_get_company_id);

        if ($row_count_get_company_id == 0) {
            echo json_encode(array("status" => "error", "error" => "[create address] transporter not found"));

            // log
            $data = "(error)[create address] transporter not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_get_company_id = $this->dataBase->fetchArray($result_get_company_id);
        $company_id = $row_get_company_id['company_id'];

        // get logestechs' region info (searched by $villageName which is the village name)

        $regionInfoResponse = $this->getLogestechsRegionInfo($company_id, $regionName, $regionId);

        if ($regionInfoResponse == -1) {
            return array("status" => "error");
        }

        $regionEnName = $regionInfoResponse->name;
        $regionArName = $regionInfoResponse->arabicName;

        // log
        $data = "(success)[create address] regionEnName: " . $regionEnName . ", regionArName: " . $regionArName;
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $query_add_address = "INSERT INTO togo.addresses (
            name,
            phone_number,
            details,
            additional_info,
            cityId,
            provinceId,
            areaId,
            customer_id,
            creator_id,
            foreign_area_en_name,
            foreign_area_ar_name,
            foreign_region_en_name,
            foreign_region_ar_name
        ) 
        VALUES(
            '$contactName',
            '$contactPhone',
            '$addressDetails',
            '$addressAditionalInfo',
            '$cityId',
            '$regionId',
            '$villageId',
            $customerId,
            $creatorId,
            '$villageEnName',
            '$villageArName',
            '$regionEnName',
            '$regionArName'
        )";


        $result_add_address = $this->dataBase->query($query_add_address);

        if (!$result_add_address) {
            echo json_encode(array("status" => "error", "error" => "[create address] add_address query error"));

            // log
            $data = "(error)[create address] add_address query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        // log
        $data = "(success)[create address] new address added successfully";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
        
        // get last inserted address id

        $query_get_last_inserted_address_id = "SELECT id FROM togo.addresses WHERE customer_id = '$customerId' ORDER BY createdAt DESC LIMIT 1";
        $result_get_last_inserted_address_id = $this->dataBase->query($query_get_last_inserted_address_id);

        if (!$result_get_last_inserted_address_id) {
            echo json_encode(array("status" => "error", "error" => "[create address] get_last_inserted_address_id query error"));

            // log
            $data = "(error)[create address] get_last_inserted_address_id query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_count_get_last_inserted_address_id = $this->dataBase->numRows($result_get_last_inserted_address_id);

        if ($row_count_get_last_inserted_address_id == 0) {
            echo json_encode(array("status" => "error", "error" => "[create address] address not found"));

            // log
            $data = "(error)[create address] address not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_get_last_inserted_address_id = $this->dataBase->fetchArray($result_get_last_inserted_address_id);
        $last_inserted_address_id = $row_get_last_inserted_address_id['id'];

        // log
        $data = "(success)[create address] last inserted address id: " . $last_inserted_address_id;
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        return array("status" => "success", "address_id" => $last_inserted_address_id);
    }

    private function getLogestechsRegionInfo($companyId, $regionName, $regionId)
    {

        $str = urlencode($regionName);

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/regions?search=' . $str,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'company-id: ' . $companyId
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        $error = json_decode($output)->error;

        if ($error) {
            $status = json_decode($output)->status;
            echo json_encode(array("status" => "error", "error" => "logestechs api error: " . $status . ", " . $error));

            // log
            $data = "(error)[get logestechs region info] logestechs api error: " . $status . ", " . $error;
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return -1;
        }

        // extract only the data(list of areas) and decode json object to php object/arr
        $dataArr = json_decode($output)->data;

        if (count($dataArr) > 1) {
            foreach ($dataArr as $region) {
                if ($region->id == $regionId) {
                    $response_region = $region;
                    break;
                }
            }
        } else {
            $response_region = $dataArr[0];
        }

        return $response_region;
    }

    public function getLogestechsExclusiveClientAddresses($clientId, $searchText, $token, $langId)
    {
        if (!$this->CheckToken($clientId, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($clientId)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        if ($langId == 1) {
            $languageEnAr = "en";
        } else {
            $languageEnAr = "ar";
        }

        $query_get_addresses = "SELECT 
        a.name, 
        a.details, 
        a.foreign_area_" . $languageEnAr . "_name AS areaName, 
        a.foreign_region_" . $languageEnAr . "_name AS provName, 
        a.id, 
        a.is_default, 
        a.phone_number, 
        a.additional_info,
        a.areaId AS villageId,
        a.provinceId AS regionId
        FROM togo.addresses AS a
        WHERE a.customer_id = '$clientId' AND (a.name LIKE '%$searchText%' OR a.phone_number LIKE '%$searchText%')";
                
        $result_get_addresses = $this->dataBase->query($query_get_addresses);

        if (!$result_get_addresses) {
            echo json_encode(array("status" => "error", "error" => "get_addresses query error"));
            return;
        }

        $addresses = array();

        while ($row_get_addresses = $this->dataBase->fetchArray($result_get_addresses)) {
            array_push($addresses, $row_get_addresses);
        }

        echo json_encode(array("status" => "success", "addresses" => $addresses));
    }

    /* team functions */

    public function createNewTeam($transporterId, $teamName, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_get_OdooId = "select OdooId from togo.customer as customer inner join togo.transportertable as transportertable on customer.id = transportertable.CustomerId where transportertable.CustomerId='$transporterId'";
                $result_Get_OdooId = $this->dataBase->query($query_get_OdooId);
                $row_Get_OdooId = $this->dataBase->fetchArray($result_Get_OdooId);
                $OdooId = $row_Get_OdooId['OdooId'];
                $query = "INSERT INTO togo.teams (Name,OwnerId,OdooId) VALUES ('$teamName','$transporterId','$OdooId')";
                $result = $this->dataBase->query($query);
                if ($result == true) {
                    echo "Team Created Successfully";
                } else {
                    echo "Error while creating team";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function deleteTeam($transporterId, $teamId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query = "Delete from togo.teams where id='$teamId' and OwnerId='$transporterId'";
                $result = $this->dataBase->query($query);
                $query_members = "Update togo.transportertable SET IsTeamActivated=0, TeamVerfiyCode=null, OnlyTeamWork=null,TeamId=-1 where TeamId='$teamId'";
                $result_members = $this->dataBase->query($query_members);
                if ($result == true) {
                    echo "Team Deleted Successfully";
                } else {
                    echo "Error while deleting team";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function updateTeamName($transporterId, $teamId, $teamNewName, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query = "Update togo.teams SET Name='$teamNewName' where id='$teamId'";
                $result = $this->dataBase->query($query);
                if ($result == true) {
                    echo "Team Updated Successfully";
                } else {
                    echo "Error while updating team";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function deleteTeamMember($transporterId, $memberId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_members = "Update togo.transportertable SET IsTeamActivated=0, TeamVerfiyCode=null, OnlyTeamWork=null,TeamId=-1 where CustomerId='$memberId'";
                $result_members = $this->dataBase->query($query_members);
                if ($result_members == true) {
                    echo "Member Deleted Successfully";
                } else {
                    echo "Error while deleting member";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTeamMembers($transporterMasterId, $TeamId, $deviceToken)
    {
        if ($this->CheckToken($transporterMasterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterMasterId) == false) {
                $TeamsArray = array();
                $query_Get_Team_Mem = "Select tt.IsTeamActivated,tt.AccountName,tt.FirstName,tt.LastName, cus.phonenumber, cus.id as TransporterId from togo.transportertable as tt inner join togo.customer as cus on tt.CustomerId = cus.id where TeamId = '$TeamId'";
                $result_Get_Team_Mem = $this->dataBase->query($query_Get_Team_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Team_Mem)) {
                    $transporterBalance = $this->getBalance($row['TransporterId']);
                    if ($row['IsTeamActivated'] == 1 || $row['IsTeamActivated'] == "1") {
                        array_push($TeamsArray, array("FullName" => $row['FirstName'] . " " . $row['LastName'], "AccountName" => $row['AccountName'], "TransporterId" => $row['TransporterId'], "TeamStatus" => "Active", "PhoneNumber" => $row['phonenumber'], "Balance" => $transporterBalance));
                    } else {
                        array_push($TeamsArray, array("FullName" => $row['FirstName'] . " " . $row['LastName'], "AccountName" => $row['AccountName'], "TransporterId" => $row['TransporterId'], "TeamStatus" => "Pending", "PhoneNumber" => $row['phonenumber'], "Balance" => $transporterBalance));
                    }
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getAllTeamsMembers($transporterMasterId, $deviceToken)
    {
        if ($this->CheckToken($transporterMasterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterMasterId) == false) {
                $TeamsArray = array();
                $query_Get_Team_Mem = "Select tt.FirstName,tt.LastName,tt.AccountName, cus.phonenumber, cus.id as TransporterId, teams.Name as TeamName from togo.transportertable as tt inner join togo.customer as cus on tt.CustomerId = cus.id inner join togo.teams as teams on teams.id = tt.TeamId where teams.OwnerId ='$transporterMasterId' and tt.IsTeamActivated = 1";
                $result_Get_Team_Mem = $this->dataBase->query($query_Get_Team_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Team_Mem)) {
                    array_push($TeamsArray, array("FullName" => $row['FirstName'] . " " . $row['LastName'], "AccountName" => $row['AccountName'], "TransporterId" => $row['TransporterId'], "PhoneNumber" => $row['phonenumber'], "TeamName" => $row['TeamName']));
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterMasterTeams($transporterMasterId, $deviceToken)
    {
        if ($this->CheckToken($transporterMasterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterMasterId) == false) {
                $TeamsArray = array();
                $query_Get_Owned_Teams = "Select * from togo.teams where OwnerId = '$transporterMasterId'";
                $result_Get_Owned_Teams = $this->dataBase->query($query_Get_Owned_Teams);
                while ($row = $this->dataBase->fetchArray($result_Get_Owned_Teams)) {
                    array_push($TeamsArray, array("id" => $row['id'], "Name" => $row['Name'], "OdooId" => $row['OdooId']));
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function activateTeam($transporterId, $verifyCode, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_get_VerfiyCode = "select TeamVerfiyCode,id,TeamId from togo.transportertable where customerId='$transporterId'";
                $result_Get_VerfiyCode = $this->dataBase->query($query_get_VerfiyCode);
                $row_Get_VerfiyCode = $this->dataBase->fetchArray($result_Get_VerfiyCode);
                $TeamVerfiyCode = $row_Get_VerfiyCode['TeamVerfiyCode'];
                $TransId = $row_Get_VerfiyCode['id'];
                $TeamId = $row_Get_VerfiyCode['TeamId'];
                if ($TeamVerfiyCode == $verifyCode) {
                    $TeamInfo = array();
                    $query_get_TeamName = "select Name from togo.teams where id='$TeamId'";
                    $result_Get_TeamName = $this->dataBase->query($query_get_TeamName);
                    $row_Get_TeamName = $this->dataBase->fetchArray($result_Get_TeamName);
                    $TeamName = $row_Get_TeamName['Name'];
                    $query_Update_Status = "Update togo.transportertable Set IsTeamActivated='1' Where id='$TransId'";
                    $result_Update_Status = $this->dataBase->query($query_Update_Status);
                    if ($result_Update_Status == true) {
                        echo "Verified";
                        array_push($TeamInfo, array("TeamId" => $TeamId, "TeamName" => $TeamName, "Status" => "Updated"));
                        echo json_encode(array("server_response" => $TeamInfo));
                    } else {
                        echo "NotUpdated";
                    }
                } else {
                    echo "Wrong_Code";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function unsubscribeFromTeam($transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_Update_Status = "Update togo.transportertable Set IsTeamActivated = 0, TeamId = -1, TeamVerfiyCode = 0 Where CustomerId='$transporterId'";
                $result_Update_Status = $this->dataBase->query($query_Update_Status);
                if ($result_Update_Status == true) {
                    echo "Updated";
                } else {
                    echo "NotUpdated";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function finishTeamOrderByMaster($transporterId, $orderId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_Get_Cost_Load = "Select deliveryWay, CostLoad, TeamMemberId  From togo.OrderBidEngin where id='$orderId' 
				AND (Orderfinished Is NULL Or Orderfinished = 0) AND (IsDeleted Is NULL Or IsDeleted = 0)";

                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {
                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];
                    $TeamMemberId = $row_Get_Cost_Load['TeamMemberId'];
                    if ($TeamMemberId != null && $TeamMemberId != 'NULL') {
                        if ($deliveryWay == 2) {
                            $this->delivToTrans($transporterId, $CostLoad);
                            $result_member_master = $this->delivery_request($TeamMemberId, $CostLoad, 0);
                            $this->addInvoice($result_member_master['total_amount'], $result_member_master['tax_discount'], $result_member_master['togo_discount'], $result_member_master['date_invoice'], $OrderId, $transporterId, $TeamMemberId, $result_member_master['time_invoice']);
                        } else if ($deliveryWay == 4) {
                            $this->delivToTrans($TeamMemberId, $CostLoad);
                            $result_member_master = $this->delivery_request($transporterId, $CostLoad, 0);
                            $this->addInvoice($result_member_master['total_amount'], $result_member_master['tax_discount'], $result_member_master['togo_discount'], $result_member_master['date_invoice'], $OrderId, $TeamMemberId, $transporterId, $result_member_master['time_invoice']);
                        }
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }


    //            public function TransferFromMasterToMember($masterId, $memberId, $amount, $deviceToken)
    //            {
    //                if ($this->CheckToken($masterId, $deviceToken) == true) {
    //                    if ($this->CheckBlockedCustomer($masterId) == false) {
    //                        //$dttt = $this->delivToTrans($masterId, $amount);
    //                        $charge_amount = -1 * $amount;
    //                        $result0 = $this->delivery_request($masterId, $charge_amount, 0);
    //                        $result1 = $this->delivery_request($memberId, $amount, 0);
    //                        $this->addInvoice($result1['total_amount'], $result1['tax_discount'],'Transfer from TransporterMaster To TeamMember', $result1['date_invoice'], '-1', $amount, $memberId, $masterId, $result1['time_invoice']);
    //                        echo "Updated";
    //                    } else {
    //                        echo "Blocked";
    //                    }
    //                } else {
    //                    echo "TokenError";
    //                }
    //            }
    //
    //            public function TransferFromMemberToMaster($masterId, $memberId, $amount, $deviceToken)
    //            {
    //                if ($this->CheckToken($masterId, $deviceToken) == true) {
    //                    if ($this->CheckBlockedCustomer($masterId) == false) {
    //                        $charge_amount = -1 * $amount;
    //                        $result0 = $this->delivery_request($memberId, $charge_amount, 0);
    //                        $result1 = $this->delivery_request($masterId, $amount, 0);
    //                        $this->addInvoice($result1['total_amount'], $result1['tax_discount'],'Transfer from TeamMember To TransporterMaster', $result1['date_invoice'], '-1', $amount, $memberId, $masterId, $result1['time_invoice']);
    //                        echo "Updated";
    //                    } else {
    //                        echo "Blocked";
    //                    }
    //                } else {
    //                    echo "TokenError";
    //                }
    //            }

    public function TransferFromMasterToMember($masterId, $memberId, $amount, $deviceToken)
    {
        if ($this->CheckToken($masterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($masterId) == false) {
                $result = $this->addTeamTransaction(-1, $masterId, $memberId, $amount, "Payment from Master to Member");
                if ($result == "Inserted") {
                    echo "Updated";
                } else {
                    echo "Error";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function TransferFromMemberToMaster($masterId, $memberId, $amount, $deviceToken)
    {
        if ($this->CheckToken($masterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($masterId) == false) {
                $result = $this->addTeamTransaction(-2, $memberId, $masterId, $amount, "Payment from Member to Master");
                if ($result == "inserted") {
                    echo "Updated";
                } else {
                    echo "Error";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function addTeamMember($transporterMasterId, $mobileNumber, $teamId, $token)
    {
        if ($this->CheckToken($transporterMasterId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterMasterId) == false) {

                $query_get_TeamId = "select transportertable.id as transId, transportertable.TeamId as TeamId,customer.PhoneNumber as PhoneNumber from togo.transportertable as transportertable inner join togo.customer as customer on transportertable.CustomerId = customer.id where customer.PhoneNumber='$mobileNumber' AND transportertable.IsTransporterMaster <> 1";
                $result_Get_TeamId = $this->dataBase->query($query_get_TeamId);
                $row_Get_TeamId = $this->dataBase->fetchArray($result_Get_TeamId);
                $ExistTeamId = $row_Get_TeamId['TeamId'];
                $PhoneNumber = $row_Get_TeamId['PhoneNumber'];
                $TransId = $row_Get_TeamId['transId'];

                if ($ExistTeamId == -1) {
                    $query_get_TeamName = "select Name from togo.teams where id='$teamId'";
                    $result_Get_TeamName = $this->dataBase->query($query_get_TeamName);
                    $row_Get_TeamName = $this->dataBase->fetchArray($result_Get_TeamName);
                    $TeamName = $row_Get_TeamName['Name'];
                    $Code_Verify = mt_rand(1000, 9999);
                    $query_Update_Code = "Update togo.transportertable Set TeamVerfiyCode='$Code_Verify', TeamId='$teamId', IsTeamActivated='0', OnlyTeamWork='1' Where id='$TransId'";
                    $result_Update_Code = $this->dataBase->query($query_Update_Code);

                    if ($result_Update_Code == true) {

                        $ch = curl_init();
                        $MessageBody = "You're%20Invited%20To%20Join%20" . $TeamName . "%20Team,%20Activation%20Code%20Is:%20" . $Code_Verify;
                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$PhoneNumber&msg=$MessageBody");
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        $reslt_Send = curl_exec($ch);
                        curl_close($ch);
                        if ($reslt_Send != "Message Sent Successfully!") {
                            echo "NotUpdated";
                        } else {
                            /* edited, add verification code record */
                            $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                            values ('$Code_Verify', '$PhoneNumber', 'Add Team Member')";
                            $result_recordCode = $this->dataBase->query($query_recordCode);

                            echo "Updated";
                        }
                    } else {
                        echo "NotUpdated";
                    }
                } else {
                    echo "Transporter Is Already Team Member";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function addTransporterToClientNetwork($clientId, $mobileNumber, $token)
    {
        if ($this->CheckToken($clientId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {

                $query_get_Transporter = "select * from togo.customer where PhoneNumber='$mobileNumber'";
                $result_Get_Transporter = $this->dataBase->query($query_get_Transporter);

                if ($this->dataBase->numRows($result_Get_Transporter) > 0) {
                    $row_Get_Transporter = $this->dataBase->fetchArray($result_Get_Transporter);
                    $TransporterId = $row_Get_Transporter['id'];

                    $query_get_mem = "select * from togo.client_network where ClientId='$clientId' and TransporterId='$TransporterId'";
                    $result_Get_mem = $this->dataBase->query($query_get_mem);
                    $row_Get_mem = $this->dataBase->fetchArray($result_Get_mem);
                    $MasterId = $row_Get_mem['ClientId'];
                    if ($MasterId == $clientId) {
                        echo "Already Exists";
                    } else {
                        $query = "INSERT INTO togo.client_network (ClientId, TransporterId) VALUES ('$clientId','$TransporterId')";
                        $result = $this->dataBase->query($query);
                        if ($result == true) {
                            echo "Inserted";
                        } else {
                            echo "insertError!";
                        }
                    }
                } else {
                    echo "No transporter with this number!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getClientNetwork($clientId, $token)
    {
        if (
            $this->CheckToken($clientId, $token) == true ||
            $this->CheckSbytaniToken($clientId, $token) == true
        ) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $membersData = array();

                $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName,
				cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, client_net.isApproved, client_net.isAutoOffer 
                from togo.client_network as client_net
                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                inner join togo.customer as cust on client_net.TransporterId = cust.id
                where client_net.ClientId = '$clientId' order by client_net.id desc";

                $result_get_client_network = $this->dataBase->query($query_get_client_network);
                while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                    array_push($membersData, array("FullName" => $row['FullName'], "PhoneNumber" => $row['PhoneNumber'], "Image" => $row['Image'], "CustomerId" => $row['CustomerId'], "deliveryPrice" => $row['price'], "isApproved" => $row['isApproved'], "isAutoOffer" => $row['isAutoOffer']));
                }
                echo json_encode(array("membersData" => $membersData));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    // temp edit from the function apove for web (until it fixed on mobile)
    public function getClientNetworkForWeb($clientId, $token, $fromId, $toId)
    {
        $fromId = $this->dataBase->escape($fromId);
        $toId = $this->dataBase->escape($toId);

        if (
            $this->CheckToken($clientId, $token) == true ||
            $this->CheckSbytaniToken($clientId, $token) == true
        ) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $membersData = array();

                $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName,
				cust.PhoneNumber, cust.id as CustomerId, trans.PersonalImgPath as Image, client_net.isApproved, client_net.isAutoOffer 
                from togo.client_network as client_net
                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                inner join togo.customer as cust on client_net.TransporterId = cust.id
                where client_net.ClientId = '$clientId' order by client_net.id desc";

                $result_get_client_network = $this->dataBase->query($query_get_client_network);
                while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                    array_push($membersData, array("FullName" => $row['FullName'], "PhoneNumber" => $row['PhoneNumber'], "Image" => $row['Image'], "CustomerId" => $row['CustomerId'], "deliveryPrice" => $row['price'], "isApproved" => $row['isApproved'], "isAutoOffer" => $row['isAutoOffer']));
                }
                echo json_encode(array("membersData" => $membersData));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTransporterClientNetwork($transporterId, $token)
    {
        if ($this->CheckToken($transporterId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $membersData = array();

                $query_get_client_network = "select concat( client.FirstName , ' ' , client.Lastname) as FullName,
				cust.PhoneNumber 
                from togo.client_network as client_net 
                inner join togo.clienttable as client on client_net.ClientId=client.CustomerId
                inner join togo.customer as cust on client_net.ClientId = cust.id 
				where client_net.TransporterId = '$transporterId'";
                $result_get_client_network = $this->dataBase->query($query_get_client_network);
                while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                    array_push($membersData, array("FullName" => $row['FullName'], "PhoneNumber" => $row['PhoneNumber']));
                }
                echo json_encode(array("membersData" => $membersData));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function assignOrderToMember($masterId, $memberId, $orderId, $token)
    {
        echo "notworking!";
        return;
        if ($this->CheckToken($masterId, $token) == true) {
            if ($this->CheckBlockedCustomer($masterId) == false) {
                $query_Get_Team_Id = "select TeamId from togo.transportertable where CustomerId='$memberId' and IsTeamActivated = 1";
                $result_Get_Team_Id = $this->dataBase->query($query_Get_Team_Id);
                $row_Get_Team_Id = $this->dataBase->fetchArray($result_Get_Team_Id);
                $TeamId = $row_Get_Team_Id['TeamId'];
                if ($TeamId != NULL && $TeamId != -1) {
                    $query_Update_Code = "Update togo.orderbidengin Set TeamMemberId='$memberId', IsTeamOrder='1', TeamId='$TeamId' Where id='$orderId'";
                    $result_Update_Code = $this->dataBase->query($query_Update_Code);

                    if ($result_Update_Code == true) {
                        $this->Log_Order($orderId, $masterId, $memberId, -1, "Order Assigned from TransporterMaster to TeamMember");
                        $query_Get_Transporter_Token = "select Cus.Token as Token, Cus.WebToken as webTokenNotifiy, TT.IsTeamActivated as IsTeamActivated 
                        from togo.transportertable as TT 
                        inner join togo.customer as Cus on TT.CustomerId = Cus.id where Cus.id='$memberId'";
                        $result_Get_Transporter_Token = $this->dataBase->query($query_Get_Transporter_Token);
                        $row_Get_Transporter_Token = $this->dataBase->fetchArray($result_Get_Transporter_Token);
                        $Token = $row_Get_Transporter_Token['Token'];
                        $WebToken = $row_Get_Transporter_Token['webTokenNotifiy'];

                        if ($row_Get_Transporter_Token['IsTeamActivated'] == 1 || $row_Get_Transporter_Token['IsTeamActivated'] == '1') {
                            $query_Get_Client_Id = "select CustomerId from togo.orderbidengin where id='$orderId'";
                            $result_Get_Client_Id = $this->dataBase->query($query_Get_Client_Id);
                            $row_Get_Client_Id = $this->dataBase->fetchArray($result_Get_Client_Id);
                            $ClientId = $row_Get_Client_Id['CustomerId'];

                            $tokens = array();
                            $webTokens = array();

                            if ($Token != null) {
                                array_push($tokens, $Token);
                                array_push($webTokens, $WebToken);

                                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                    if ($row['adminTokenNotify'] != null) {
                                        array_push($webTokens, $row['adminTokenNotify']);
                                    }
                                }

                                $client = $this->getClientBusinessAndLogo($ClientId);
                                if ($client['BusinessName'] == 'null') {
                                    $client_names = $this->getClientName($ClientId);
                                    $client['BusinessName'] = $client_names['FullName'];
                                }

                                $data = array(
                                    'orderId' => $orderId,
                                    'clientName' => $client['BusinessName'],
                                    'clientImageUrl' => $client['LogoUrl'],
                                    'intent' => 'orderAssigned'
                                );

                                $title = "Order Assigned";
                                $body = $client['BusinessName'] . " assigned order " . $orderId;
                                // $image = $client['LogoUrl'];

                                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                                echo 'Updated';
                            } else {
                                echo 'No Token';
                            }
                        } else {
                            echo 'Transporter is not a team member';
                        }
                    } else {
                        echo "Error while assign order";
                    }
                } else {
                    echo "Isn't activated team member";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function transferOrderBetweenMembers($transporterId, $teamId, $qrCode, $token)
    {
        if ($this->CheckToken($transporterId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_Get_Order_Details = "select * from togo.orderbidengin where qr_code='$qrCode' and IsTeamOrder = 1 and TeamId = '$teamId' and (IsFinishedByMember Is NULL or IsFinishedByMember = 0) and (Orderfinished Is NULL or Orderfinished = 0)  and (IsDeleted Is NULL or IsDeleted = 0);";
                $result_Get_Order_Details = $this->dataBase->query($query_Get_Order_Details);
                $row_Get_Order_Details = $this->dataBase->fetchArray($result_Get_Order_Details);
                $OrderId = $row_Get_Order_Details['id'];
                if ($row_Get_Order_Details == true) {
                    $query_Update_Code = "Update togo.orderbidengin Set TeamMemberId='$transporterId' Where id='$OrderId'";
                    $result_Update_Code = $this->dataBase->query($query_Update_Code);
                    if ($result_Update_Code == true) {
                        $this->Log_Order($row_Get_Order_Details['id'], $row_Get_Order_Details['DeliveryId'], $transporterId, -1, "Order Transfered between team members");
                        echo 'Updated';
                    } else {
                        echo 'NotUpdated';
                    }
                } else {
                    echo 'QrCodeNotMatch';
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function UpdateCustomerLanguage($CustomerId, $LangId, $TokenDevice)
    {
        if ($this->CheckToken($CustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($CustomerId) == false) {
                $query_Update_Language = "Update togo.Customer set LanguageId = '$LangId' where id = '$CustomerId'";
                $result = $this->dataBase->query($query_Update_Language);
                if ($result == true) {
                    echo "Updated";
                } else {
                    echo "Not Updated";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getUserCredentials($UUID)
    {

        $user_type = "transporter";

        $ResultArray = array();
        $query = "select * from togo.AuthorizationData where QRId='$UUID'";
        $user_credentials = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($user_credentials);

        $customerId = $row['CustomerId'];

        $query = "select * from togo.ClientTable where CustomerId=$customerId";
        $user = $this->dataBase->query($query);
        $row_Get_Client = $this->dataBase->fetchArray($user); // edited (add $row_Get_Client)

        // is food client
        $query_check_food_client = "SELECT isFoodClient FROM togo.customer WHERE id = '$customerId'";
        $result_check_food_client = $this->dataBase->query($query_check_food_client);
        $row_check_food_client = $this->dataBase->fetchArray($result_check_food_client);
        
        $is_food_client = 0;
        if ($row_check_food_client['isFoodClient'] == 1) {
            $is_food_client = 1;
        }

        if ($this->dataBase->numRows($user) > 0) {
            $user_type = "client";
            /* edited (add FullName for client) */
            array_push($ResultArray, array("FullName" => $row_Get_Client['FirstName'] . ' ' . $row_Get_Client['LastName'], "CustomerId" => $row['CustomerId'], "TokenDevice" => $row['TokenDevice'], "UserType" => $user_type, "isFoodClient" => $is_food_client));
        } else {
            $query = "select * from togo.transportertable where CustomerId= $customerId";
            $result_Get_Transporter = $this->dataBase->query($query);
            $row_Get_Transporter = $this->dataBase->fetchArray($result_Get_Transporter);
            $IsTransporterMaster = $row_Get_Transporter['IsTransporterMaster'];
            if ($IsTransporterMaster == 1 || $IsTransporterMaster == '1') {
                $IsTransporterMaster = "true";
            } else {
                $IsTransporterMaster = "false";
            }
            $IsTeamMember = $row_Get_Transporter['IsTeamActivated'];
            if ($IsTeamMember == 1 || $IsTeamMember == '1') {
                $IsTeamMember = "true";
            } else {
                $IsTeamMember = "false";
            }
            /* edited (add FullName for transporter) */
            array_push($ResultArray, array("FullName" => $row_Get_Transporter['FirstName'] . ' ' . $row_Get_Transporter['LastName'], "CustomerId" => $row['CustomerId'], "TokenDevice" => $row['TokenDevice'], "UserType" => $user_type, "IsTransporterMaster" => $IsTransporterMaster, "IsTeamMember" => $IsTeamMember, "isFoodClient" => $is_food_client));
        }
        echo json_encode(array("ResultArray" => $ResultArray));
    }

    public function GetAllCities($id, $token, $type)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {
            if ($type == "transporters") {
                // $query = "select Name, LatRegion, LongRegion from cityregion where deleted=0";                
                $query = "select distinct cityregion.id, cityregion.Name, cityregion.LatRegion, cityregion.LongRegion 
                from togo.transporterworkcity as transporterworkcity 
                left outer join togo.cityregion as cityregion on transporterworkcity.CityId = cityregion.id 
                where cityregion.deleted=0 and transporterworkcity.deleted=0";

                $cities = array();
                $result = $this->dataBase->query($query);
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($cities, $row);
                }
                echo json_encode(array("cities_list" => $cities));
            } else if ($type == "clients") {
                $query = "select distinct cityregion.id, cityregion.Name, cityregion.LatRegion, cityregion.LongRegion 
                from togo.clientbusinesstable as clientbusinesstable 
                left outer join togo.cityregion as cityregion on clientbusinesstable.cityId = cityregion.id 
                where cityregion.deleted=0 and clientbusinesstable.cityId is not null";

                $cities = array();
                $result = $this->dataBase->query($query);
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($cities, $row);
                }
                echo json_encode(array("cities_list" => $cities));
            } else {
                echo "user type error";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getLocationUsers($id, $token, $cityId, $type)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);
        $cityId = $this->dataBase->escape($cityId);
        $type = $this->dataBase->escape($type);

        if ($this->AdminCheckToken($id, $token) == true) {
            if ($type == "transporters") {

                $transporters = array();
                $query = "select CustomerId from togo.transporterworkcity where CityId='$cityId' and deleted=0";
                $result = $this->dataBase->query($query);

                while ($row = $this->dataBase->fetchArray($result)) {
                    $info = $this->getTransporterInfoForLocation($row['CustomerId']);

                    if ($info)
                        array_push($transporters, $info);
                }

                echo json_encode(array("users_list" => $transporters));
            } else if ($type == "clients") {

                $clients = array();
                $query = "select distinct CustomerId from togo.clientbusinesstable where cityId='$cityId'";
                $result = $this->dataBase->query($query);

                while ($row = $this->dataBase->fetchArray($result)) {
                    $info = $this->getClientInfoForLocation($row['CustomerId']);

                    if ($info)
                        array_push($clients, $info);
                }

                echo json_encode(array("users_list" => $clients));
            } else {
                echo "TypeError";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (add getTransporterInfoForLocation) */
    public function getTransporterInfoForLocation($transporterId)
    {
        $transporter_query = "SELECT customerId as id, concat(FirstName, ' ', LastName) as fullName, PersonalImgPath as imgURL, AccountName as businessName, customer.PhoneNumber 
        FROM togo.transportertable as transportertable 
        inner join togo.customer as customer on customer.id='$transporterId' where customerId='$transporterId'";
        $result_query = $this->dataBase->query($transporter_query);
        $res_arr = $this->dataBase->fetchArray($result_query);

        return $res_arr;
    }

    /* edited (add getClientInfoForLocation) */
    public function getClientInfoForLocation($clientId)
    {
        $client_query = "SELECT cust.id, concat(ct.FirstName, ' ', ct.LastName) as fullName, cust.PhoneNumber, cbt.LogoUrl as imgURL, cbt.BusinessName as businessName 
        FROM togo.customer as cust 
        inner join clienttable as ct 
        inner join togo.clientbusinesstable as cbt on cust.id=ct.CustomerId and cust.id=cbt.CustomerId 
        where cust.id='$clientId'";
        $result_query = $this->dataBase->query($client_query);
        $res_arr = $this->dataBase->fetchArray($result_query);

        return $res_arr;
    }

    public function getAllNetworkMembers($transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $TeamsArray = array();
                /* edited (get memberId) */
                $query_Get_Network_Mem = "select net.NetworkMemberId as memberId, net.NetworkManagerId,net.NetworkMemberId,net.DeliveryCost,net.IsMemberAccepted,
				cus.PhoneNumber,concat(trans.FirstName, ' ', trans.LastName) as FullName, trans.PersonalImgPath, net.Note
				from togo.transporter_network as net 
                inner join togo.transportertable as trans on net.NetworkMemberId = trans.customerId
				inner join togo.customer as cus on net.NetworkMemberId = cus.id where NetworkManagerId = '$transporterId'";
                $result_Get_Network_Mem = $this->dataBase->query($query_Get_Network_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Network_Mem)) {
                    array_push($TeamsArray, array(
                        "memberId" => $row['memberId'], "Note" => $row['Note'], "NetworkManagerId" => $row['NetworkManagerId'], "NetworkMemberId" => $row['NetworkMemberId'],
                        "DeliveryCost" => $row['DeliveryCost'], "IsMemberAccepted" => $row['IsMemberAccepted'], "PhoneNumber" => $row['PhoneNumber'], "FullName" => $row['FullName'], "PersonalImgPath" => $row['PersonalImgPath']
                    ));
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }
    /* edited (get transporter's other netwokrs) */
    public function getTransporterOtherNetwork($transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $TeamsArray = array();
                $query_Get_Network_Mem = "select net.id as NetworkRowId, net.isAutoAccept, net.NetworkManagerId,net.NetworkMemberId,net.DeliveryCost,net.IsMemberAccepted,
				cus.PhoneNumber,concat(trans.FirstName, ' ', trans.LastName) as FullName, trans.PersonalImgPath, net.Note
				from togo.transporter_network as net 
                inner join togo.transportertable as trans on net.NetworkManagerId = trans.customerId
				inner join togo.customer as cus on net.NetworkManagerId = cus.id where NetworkMemberId = '$transporterId'";

                //NetworkManagerId to get by NetworkManagerId id

                $result_Get_Network_Mem = $this->dataBase->query($query_Get_Network_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Network_Mem)) {
                    array_push($TeamsArray, array(
                        "Note" => $row['Note'], "NetworkManagerId" => $row['NetworkManagerId'], "NetworkMemberId" => $row['NetworkMemberId'], "NetworkRowId" => $row['NetworkRowId'], "isAutoAccept" => $row['isAutoAccept'],
                        "DeliveryCost" => $row['DeliveryCost'], "IsMemberAccepted" => $row['IsMemberAccepted'], "PhoneNumber" => $row['PhoneNumber'], "FullName" => $row['FullName'], "PersonalImgPath" => $row['PersonalImgPath']
                    ));
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (get transporter's other netwokrs) */
    public function getTransporterDirectClients($transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $TeamsArray = array();

                $query_Get_Network_Mem = "select client_network.ClientId as clientId, client_network.id as NetworkMemberId, client_network.isAutoOffer, client_network.isApproved, concat(clienttable.FirstName,' ',clienttable.LastName) as FullName, customer.PhoneNumber, clientbusinesstable.LogoUrl as PersonalImgPath, clientbusinesstable.BusinessName
                                          from togo.client_network as client_network
                                          inner join togo.clienttable as clienttable on client_network.ClientId = clienttable.CustomerId
                                          inner join togo.customer as customer on client_network.ClientId = customer.id
                                          inner join togo.clientbusinesstable as clientbusinesstable on client_network.ClientId = clientbusinesstable.CustomerId
                                          where TransporterId='$transporterId'";

                $result_Get_Network_Mem = $this->dataBase->query($query_Get_Network_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Network_Mem)) {
                    array_push($TeamsArray, array(
                        "NetworkMemberId" => $row['NetworkMemberId'], "isAutoOffer" => $row['isAutoOffer'], "clientId" => $row['clientId'], "isApproved" => $row['isApproved'],
                        "PhoneNumber" => $row['PhoneNumber'], "FullName" => $row['FullName'], "BusinessName" => $row['BusinessName'], "PersonalImgPath" => $row['PersonalImgPath']
                    ));
                }
                echo json_encode(array("server_response" => $TeamsArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function updateClientAutoOffer($transporterId, $deviceToken, $status, $networkMemberId)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query = "update togo.client_network set isAutoOffer=$status where id='$networkMemberId'";
                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "updated";
                } else {
                    echo "updateError!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function acceptClientInvitation($transporterId, $deviceToken, $networkMemberId)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query = "update togo.client_network set isApproved=1 where id='$networkMemberId'";
                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "accepted";
                } else {
                    echo "acceptError!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function updateTransporterAutoAccept($transporterId, $deviceToken, $status, $networkMemberId)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query = "update togo.transporter_network set isAutoAccept=$status where id='$networkMemberId'";
                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "updated";
                } else {
                    echo "updateError!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function addNetworkMember($transporterId, $mobileNumber, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_get_customerId = "select id from togo.customer where PhoneNumber='$mobileNumber'";
                $result_get_customerId = $this->dataBase->query($query_get_customerId);
                $row_get_customerId = $this->dataBase->fetchArray($result_get_customerId);
                $MemberId = $row_get_customerId['id'];
                $query_check_member = "select * from togo.transporter_network where NetworkManagerId = '$transporterId' and NetworkMemberId = '$MemberId'";
                $result_check_member = $this->dataBase->query($query_check_member);
                $row_check_member = $this->dataBase->numRows($result_check_member);
                if ($row_check_member > 0) {
                    echo "MemberAlreadyExists";
                } else {
                    $Code_Verify = mt_rand(1000, 9999);
                    $query_get_name = "select concat(transportertable.FirstName,'%20',transportertable.LastName) as FullName from togo.transportertable as transportertable inner join togo.customer as customer on transportertable.CustomerId = customer.id where customer.id='$transporterId'";
                    $result_Get_name = $this->dataBase->query($query_get_name);
                    $row_Get_name = $this->dataBase->fetchArray($result_Get_name);

                    $query = "INSERT INTO togo.transporter_network (NetworkManagerId, NetworkMemberId, NetworkVerfiyCode, IsMemberAccepted) 
								VALUES ('$transporterId','$MemberId','$Code_Verify',0);";
                    $result = $this->dataBase->query($query);
                    $full_name = $row_Get_name['FullName'];
                    if ($result == true) {

                        $MessageBody = "You're%20Invited%20To%20Join%20" . $full_name . "%20Network,%20Activation%20Code%20Is:%20" . $Code_Verify;
                        $ch = curl_init();
                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$mobileNumber&msg=$MessageBody");
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        $reslt_Send = curl_exec($ch);
                        curl_close($ch);
                        if ($reslt_Send != "Message Sent Successfully!") {
                            echo "NotUpdated";
                        } else {
                            /* edited, add verification code record */
                            $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
                            values ('$Code_Verify', '$mobileNumber', 'Login')";
                            $result_recordCode = $this->dataBase->query($query_recordCode);

                            echo "MemberAdded";
                        }
                    } else
                        return "NotInserted";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function activateNetwork($transporterId, $networkOwnerId, $deliveryCost, $verifyCode, $deviceToken, $description)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_get_VerfiyCode = "select * from togo.transporter_network where NetworkManagerId = '$networkOwnerId' and NetworkMemberId = '$transporterId' and NetworkVerfiyCode = '$verifyCode'";
                $result_Get_VerfiyCode = $this->dataBase->query($query_get_VerfiyCode);
                $row_Get_VerfiyCode = $this->dataBase->fetchArray($result_Get_VerfiyCode);
                $NetworkVerfiyCode = $row_Get_VerfiyCode['NetworkVerfiyCode'];
                $NetworkId = $row_Get_VerfiyCode['id'];
                if ($NetworkVerfiyCode == $verifyCode) {
                    $query_Update_Status = "Update togo.transporter_network Set IsMemberAccepted='1', DeliveryCost = '$deliveryCost', Note = '$description' Where id='$NetworkId'";
                    $result_Update_Status = $this->dataBase->query($query_Update_Status);
                    if ($result_Update_Status == true) {
                        echo "Verified";
                    } else {
                        echo "NotUpdated";
                    }
                } else {
                    echo "Wrong_Code";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getAllNetworkInvitation($transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $NetworkArray = array();
                $query_Get_Network_Mem = "select network.NetworkManagerId, trans.CustomerId, concat(trans.FirstName, ' ', trans.LastName) as FullName, cust.PhoneNumber, trans.PersonalImgPath
				from togo.transporter_network as network 
				inner join togo.transportertable as trans on network.NetworkManagerId = trans.CustomerId
				inner join togo.customer as cust on cust.id = network.NetworkManagerId
				where NetworkMemberId = '$transporterId' and IsMemberAccepted != '1'";
                $result_Get_Network_Mem = $this->dataBase->query($query_Get_Network_Mem);
                while ($row = $this->dataBase->fetchArray($result_Get_Network_Mem)) {
                    array_push($NetworkArray, array("NetworkManagerId" => $row['NetworkManagerId'], "FullName" => $row['FullName'], "PhoneNumber" => $row['PhoneNumber'], "PersonalImgPath" => $row['PersonalImgPath'], "CustomerId" => $row['CustomerId']));
                }
                echo json_encode(array("server_response" => $NetworkArray));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function responseToAssignedOrder($orderId, $transporterId, $response, $deviceToken)
    {
        // temp
        /* echo "notWorking!";
        return; */

        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_get_order = "select * from togo.orderbidengin where id = '$orderId'";
                $result_get_order = $this->dataBase->query($query_get_order);
                $row_get_order = $this->dataBase->fetchArray($result_get_order);
                $deliveryWay = $row_get_order['deliveryWay'];
                $costLoad = $row_get_order['CostLoad'];
                $PrevDeliveryId = $row_get_order['PrevDeliveryId'];
                if ($response == "reject") {

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($transporterId, -1, $orderId, -1, '', "Assign Rejected", 11);

                    /* edited (add transporterAssignStatus = 3 -> assigned order is rejected) */
                    $query_assign_order = "update togo.orderbidengin set IsAssignAccepted = 0, DeliveryId = '$PrevDeliveryId', transporterAssignStatus = 3 where id = '$orderId'";
                    $result_Update_Status = $this->dataBase->query($query_assign_order);
                    echo "rejected";
                } else {

                    /* edited (add transporterAssignStatus = 2 -> assigned order is aaccepted, order_status -> 'Order Assigned', currentTransporterId) */ /* ------- (, order_status = 'Order Assigned') removed */
                    $query_assign_order = "update togo.orderbidengin set IsAssignAccepted = 1, transporterAssignStatus = 2, pickup_date = NULL, currentTransporterId='$transporterId' where id = '$orderId'";
                    $result_Update_Status = $this->dataBase->query($query_assign_order);
                    $query_get_cost = "Select DeliveryCost from togo.transporter_network where NetworkManagerId = '$PrevDeliveryId' and NetworkMemberId = '$transporterId'";
                    $result_get_cost = $this->dataBase->query($query_get_cost);
                    $row_get_cost = $this->dataBase->fetchArray($result_get_cost);
                    $cost_Delivery = $row_get_cost['DeliveryCost'];
                    if ($result_Update_Status == true) {

                        /* edited - timeline (insert into "transporterstimelinetb" table, new transporter to the same order) */

                        // 1. get DeliveryCost between the assigner and the assignee:
                        // a. get assigner id
                        $query_get_assigner_id = "select transporter_id from togo.transporterstimelinetb where order_id='$orderId' and isCurrent=1";
                        $result_get_assigner_id = $this->dataBase->query($query_get_assigner_id);
                        $get_assigner_id = $this->dataBase->fetchArray($result_get_assigner_id);
                        $assigner_id = $get_assigner_id['transporter_id'];

                        // b. get DeliveryCost
                        $query_get_delivery_cost = "select DeliveryCost from togo.transporter_network where NetworkManagerId='$assigner_id'  and NetworkMemberId='$transporterId'";
                        $result_get_delivery_cost = $this->dataBase->query($query_get_delivery_cost);
                        $get_delivery_cost = $this->dataBase->fetchArray($result_get_delivery_cost);
                        $delivery_cost = $get_delivery_cost['DeliveryCost'];

                        // 2. add new row in the timeline:
                        $assignDate = date("Y-m-d H:i:s");
                        $query_add_accepted_transporter = "insert into togo.transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$orderId', '$transporterId', '$assignDate', '$delivery_cost', 1)";
                        $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

                        // 3. change isCurrent to 0 for all other transporters on the same order:
                        $query_update_others_isCurrent = "update togo.transporterstimelinetb set isCurrent=0 where order_id='$orderId' and transporter_id!='$transporterId'";
                        $result_update_others_isCurrent = $this->dataBase->query($query_update_others_isCurrent);

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($transporterId, -1, $orderId, -1, '', "Assign Accepted", 12);

                        /////////////////////////////////

                        $query_insert_payment = "INSERT INTO togo.network_order_payment (OrderId, FromTransporterId, ToTransporterId, DeliveryCost, IsPaid)
							VALUES ('$orderId','$PrevDeliveryId','$transporterId','$cost_Delivery',0)";
                        $this->dataBase->query($query_insert_payment);
                        //herewego
                        $this->move_to_escrow($PrevDeliveryId, $orderId, $cost_Delivery);
                        if ($deliveryWay == 2) {
                            $this->exchange_cod_owner($PrevDeliveryId, $transporterId, $orderId, $costLoad);
                        }
                        echo "accepted";
                    } else {
                        echo "Error while assign order";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getTimeLine($orderId)
    {
        $query_get_timeline = "select *, concat(transportertable.FirstName, ' ', transportertable.LastName) as fullName, transportertable.PersonalImgPath, customer.PhoneNumber 
        from togo.transporterstimelinetb as transporterstimelinetb 
        inner join togo.transportertable as transportertable on transporterstimelinetb.transporter_id=transportertable.CustomerId 
        inner join togo.customer as customer on transporterstimelinetb.transporter_id=customer.id where order_id='$orderId' order by transporterstimelinetb.id";
        $result_get_timeline = $this->dataBase->query($query_get_timeline);
        $timeline = array();

        while ($row = $this->dataBase->fetchArray($result_get_timeline)) {
            array_push($timeline, array("PersonalImgPath" => $row['PersonalImgPath'], "PhoneNumber" => $row['PhoneNumber'], "fullName" => $row['fullName'], "transporter_id" => $row['transporter_id'], "assign_date" => $row['assign_date'], "transporter_bidprice" => $row['transporter_bidprice'], "transporter_pickupdate" => $row['transporter_pickupdate'], "isCurrent" => $row['isCurrent']));
        }

        echo json_encode(array("timeline" => $timeline));
    }

    public function assignOrderToNetworkMember($orderId, $transporterId, $networkMemberId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query_Get_cod = "select CostLoad,deliveryWay from togo.orderbidengin where deliveryWay = 2 and id = '$orderId'";
                $result_Get_cod = $this->dataBase->query($query_Get_cod);
                if ($result_Get_cod == true) {
                    $row_Get_cod = $this->dataBase->fetchArray($result_Get_cod);
                    $CostLoad = $row_Get_cod['CostLoad'];
                    $deliveryWay = $row_Get_cod['deliveryWay'];
                    if ($CostLoad != null && $CostLoad > 0) {
                        $var = $this->BalanceIsEnough($networkMemberId, $CostLoad);;
                        if ($var != 1) {
                            echo "NoBalanceMember";
                            return;
                        }
                    }

                    /* edited (add AssignerId, AssigneeId, transporterAssignStatus => if(0): "not assigned", if(1): "assigned and waiting", if(2): "accepted",  if(3): "rejected") */
                    $query_assign_order = "update togo.orderbidengin set DeliveryId ='$networkMemberId', PrevDeliveryId ='$transporterId', IsAssignAccepted = 0, transporterAssignStatus = 1, AssignerId='$transporterId', AssigneeId='$networkMemberId' where id = '$orderId'"; // 1o1o
                    $result_Update_Status = $this->dataBase->query($query_assign_order);
                    if ($result_Update_Status == true) {

                        /* edited (record the action) */
                        // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                        $this->recordAction($transporterId, $networkMemberId, $orderId, -1, '', "Order Assigned", 10);

                        $query_Get_Transporter_Token = "select Token, WebToken As webTokenNotifiy from togo.customer where id = '$networkMemberId'";
                        $result_Get_Transporter_Token = $this->dataBase->query($query_Get_Transporter_Token);
                        $row_Get_Transporter_Token = $this->dataBase->fetchArray($result_Get_Transporter_Token);
                        $Token = $row_Get_Transporter_Token['Token'];
                        $WebToken = $row_Get_Transporter_Token['webTokenNotifiy'];

                        $tokens = array();
                        $webTokens = array();

                        if ($Token != null) {
                            array_push($tokens, $Token);
                            array_push($webTokens, $WebToken);

                            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                                if ($row['adminTokenNotify'] != null) {
                                    array_push($webTokens, $row['adminTokenNotify']);
                                }
                            }

                            $client = $this->getTransporterNameAndImage($transporterId);

                            $data = array(
                                'orderId' => $orderId,
                                'clientName' => $client['AccountName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'NetworkOrderAssigned'
                            );

                            $title = "Order Assigned";
                            $body = $client['AccountName'] . " assigned order " . $orderId;
                            // $image = $client['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            echo 'Updated';
                        } else {
                            echo 'No Token';
                        }
                    } else {
                        echo "Error while assign order";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (Cancel assigned order (if assign is not accepted)) */
    public function cancelAssignedOrder($orderId, $transporterId, $deviceToken)
    {
        if ($this->CheckToken($transporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_cancel_assign = "update togo.orderbidengin set DeliveryId ='$transporterId', IsAssignAccepted = 0, transporterAssignStatus = 0, AssignerId='-1', AssigneeId='-1' where id = '$orderId'";
                $result_Update_Status = $this->dataBase->query($query_cancel_assign);
                if ($result_Update_Status == true) {

                    /* (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($transporterId, -1, $orderId, -1, '', "Assign Canceled", 17);

                    echo "Assign Canceled";
                } else {
                    echo "Error while cancel assign";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (get customer AccountName is isTransporter, BusinessName if isClient) */
    public function getCustomerGeneralName($CustomerId)
    {
        $query_party_one = "select IsTransporter from togo.customer where id='$CustomerId'";
        $result_party_one = $this->dataBase->query($query_party_one);
        $isTransporter = $this->dataBase->fetchArray($result_party_one);

        $partyName = "";

        if ($isTransporter['IsTransporter'] == 1) {
            $query_party_name = "select AccountName from togo.transportertable where CustomerId='$CustomerId'";
            $result_party_name = $this->dataBase->query($query_party_name);
            $row = $this->dataBase->fetchArray($result_party_name);
            $partyName = $row['AccountName'];
        } else {
            $query_party_name = "select BusinessName from togo.clientbusinesstable where CustomerId='$CustomerId'";
            $result_party_name = $this->dataBase->query($query_party_name);
            $row = $this->dataBase->fetchArray($result_party_name);
            $partyName = $row['BusinessName'];
        }

        return $partyName;
    }

    /* edited (send notification function) */
    public function sendFCMNotification($recieversTokens, $recieversWebTokens, $data, $title, $body)
    {

        // return; // temp

        ob_start();

        require_once('FcmExample3/Firebase.php');

        $firebase = new Firebase();

        /* $data = array(
            'orderId' => 1444,
            'transporterName' => "test name",
            'intent' => 'RequestOrderReturn'
        ); */

        if ($recieversTokens != -1) {
            $firebase->sendNotification($recieversTokens, $data);
            $firebase->sendIOSNotification($recieversTokens, $data);
        }

        $firebase->sendWebNotification($recieversWebTokens, $data, $title, $body/* , $image */);

        ob_end_clean();
    }

    public function sendFCMNotificationTest($token)
    {

        // return; // temp

        // ob_start();

        require_once('FcmExample3/Firebase.php');

        $firebase = new Firebase();

        $data = array(
            'orderId' => 1444,
            'transporterName' => "test name",
            'intent' => 'test',
            'audioURL' => 'img/BusinessLogo/output_audio.mp3'
        );
        
        $recieversTokens = array($token);

        // if ($recieversTokens != -1) {
            // $firebase->sendNotification($recieversTokens, $data);
            $firebase->sendIOSNotification($recieversTokens, $data);
            // $firebase->sendWebNotification($recieversTokens, $data);
        // }

        // $firebase->sendWebNotification($recieversWebTokens, $data, $title, $body/* , $image */);

        // ob_end_clean();
    }

    /* edited (recordAction function added) */
    /* 
    action_id:
        2 -> create new order            / party_1: who creted the order                                     , party_2: none
        3 -> bid                         / party_1: transporter who offered the bid                          , party_2: none
        4 -> cancel order                / party_1: client who canceled the order                            , party_2: none
        5 -> update bid                  / party_1: transporter who updated the bid                          , party_2: none
        6 -> cancel bid                  / party_1: transporter who canceled the bid                         , party_2: none
        7 -> accept bid                  / party_1: client who accepted the bid                              , party_2: the transporter that offered the bid
        8 -> pickup                      / party_1: transporter who picked up                                , party_2: none
        9 -> finish order                / party_1: transporter who finished the order                       , party_2: none
        10 -> assign order               / party_1: assigner transporter/client                              , party_2: assignee transporter
        11 -> reject assign              / party_1: transporter who rejected the assigned order              , party_2: none
        12 -> accept assign              / party_1: transporter who accepted the assigned order              , party_2: none
        17 -> cancel assign              / party_1: transporter who assigned the order and then canceled it  , party_2: none
        18 -> order created and assigned / party_1: client who created the order                             , party_2: the transporter for which the order is assigned
        19 -> order marked as stuck      / party_1: transporter who picked up the order                      , party_2: none
        20 -> order marked as returned   / party_1: transporter who picked up the order                      , party_2: none
        21 -> returned order accepted    / party_1: clinet who accepted the returned order                   , party_2: none
        22 -> returned order rejected    / party_1: client who rejected teh returned order                   , party_2: none
        23 -> order canceled by admin    / party_1: admin who canceled the order                             , party_2: none
        31 -> order finished by admin    / party_1: admin who finished the order                             , party_2: none
        32 -> undo canceled order by admin    / party_1: admin who undo the canceled order                   , party_2: none
        33 -> foreign deal-cost error    / party_1: customer who created the order                           , party_2: none

        Albarq actions:
        24 -> foreign action...          / party_1: albarq                                                   , party_2: none
        25 -> albarq out-for-delivery    / party_1: albarq                                                   , party_2: none
        26 -> albarq order deleted       / party_1: albarq                                                   , party_2: none
        27 -> albarq order error         / party_1: albarq                                                   , party_2: none
        29 -> albarq order received      / party_1: albarq                                                   , party_2: none
        28 -> recharge balance           / party_1: user/admin                                               , party_2: user/admin

        30 -> custom record with title and body message
    */
    public function recordAction($party_one_id, $party_two_id, $order_id, $price, $title, $description, $action_id)
    {
        $partyOneName = "";
        $partyTwoName = "";

        if ($action_id != 23) {
            $partyOneName = $this->getCustomerGeneralName($party_one_id);

            if ($party_two_id != -1) {
                $partyTwoName = $this->getCustomerGeneralName($party_two_id);
            }
        } else {
            $partyOneName = "" . $party_one_id;
        }

        // echo "party one: " . $partyOneName . ", party two: " . $partyTwoName;

        $query_add_record = "insert into togo.actionsrecordstb (party_one_id, party_one_name, party_two_id, party_two_name, order_id, price, title, description, action_id) values ('$party_one_id', '$partyOneName', '$party_two_id', '$partyTwoName', '$order_id', '$price', '$title', '$description', '$action_id')";
        $result_add_record = $this->dataBase->query($query_add_record);

        $query_insert_last_action = "update togo.orderbidengin set last_action = '$description' where id = '$order_id'";
        $result_insert_last_action = $this->dataBase->query($query_insert_last_action);

        /*  if ($result_add_record == true) {
            echo "record added successfully";
        } else {
            echo "record error";
        } */
    }

    // temp debug
    public function recordDebug($desc, $party_1_id, $party_2_id, $order_id)
    {
        $query = "insert into togo.foreign_debug_tb (description, party_1_id, party_2_id, order_id) values ('$desc', '$party_1_id', '$party_2_id', '$order_id')";
        $result = $this->dataBase->query($query);
    }

    /*  $result = $this->dataBase->query($query);
        $get_last_id = $this->dataBase->fetchArray($result);
        $last_id = $get_last_id['last_id'];
        echo $last_id; */

    public function getLastRecord($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $query_get_last_record = "select * from togo.actionsrecordstb where id=(SELECT MAX(id) from togo.actionsrecordstb)";

            $result = $this->dataBase->query($query_get_last_record);
            $get_last_record = $this->dataBase->fetchArray($result);

            echo json_encode(array("last_record" => $get_last_record));
        } else {
            echo "TokenError";
        }
    }

    /* edited (get order actions) */
    public function getOrderActions($orderId, $customerId, $tokenDevice)
    {
        if ($this->CheckToken($customerId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {
                $query_get_records = "select * from togo.actionsrecordstb where order_id='$orderId' order by id desc";

                $records = array();
                $result = $this->dataBase->query($query_get_records);
                $row_count_records = $this->dataBase->numRows($result);

                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($records, $row);
                }
                echo json_encode(array("records_list" => $records, "NumberOfRecords" => $row_count_records));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* edited (test the timeline) */

    /* public function acceptOffer($orderId, $transporterId, $bidPrice)
    {
        $assignDate = date("Y-m-d H:i:s");
        $query_add_accepted_transporter = "insert into transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$orderId', '$transporterId', '$assignDate', '$bidPrice', 1)";
        $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);
        echo "acceptOffer";
    }

    public function pickupPackage($orderId, $transporterId)
    {
        $newPickupDate = date("Y-m-d H:i:s");
        $query_add_pickup_date = "update transporterstimelinetb set transporter_pickupdate='$newPickupDate' where order_id='$orderId' and transporter_id='$transporterId'"; // toto
        $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);
        echo "pickupPackage";
    }

    public function acceptAssignedOrder($orderId, $transporterId)
    {
        // 1. get DeliveryCost between the assigner and the assignee:
            // a. get assigner id
            $query_get_assigner_id = "select transporter_id from transporterstimelinetb where order_id='$orderId' and isCurrent=1";
            $result_get_assigner_id = $this->dataBase->query($query_get_assigner_id);
            $get_assigner_id = $this->dataBase->fetchArray($result_get_assigner_id);
            $assigner_id = $get_assigner_id['transporter_id'];
                                
            // b. get DeliveryCost
            $query_get_delivery_cost = "select DeliveryCost from transporter_network where NetworkManagerId='$assigner_id'  and NetworkMemberId='$transporterId'";
            $result_get_delivery_cost = $this->dataBase->query($query_get_delivery_cost);
            $get_delivery_cost = $this->dataBase->fetchArray($result_get_delivery_cost);
            $delivery_cost = $get_delivery_cost['DeliveryCost'];

        // 2. add new row in the timeline:
        $assignDate = date("Y-m-d H:i:s");
        $query_add_accepted_transporter = "insert into transporterstimelinetb (order_id, transporter_id, assign_date, transporter_bidprice, isCurrent) values ('$orderId', '$transporterId', '$assignDate', '$delivery_cost', 1)";
        $result_add_accepted_transporter = $this->dataBase->query($query_add_accepted_transporter);

        // 3. change isCurrent to 0 for all other transporters on the same order:
        $query_update_others_isCurrent = "update transporterstimelinetb set isCurrent=0 where order_id='$orderId' and transporter_id!='$transporterId'";
        $result_update_others_isCurrent = $this->dataBase->query($query_update_others_isCurrent);

        echo "acceptAssignedOrder";
    } */


    public function MarkStuckOrder($TransporterId, $OrderId, $StuckComment, $deviceToken)
    {
        $StuckComment = $this->dataBase->escape($StuckComment);

        if ($this->CheckToken($TransporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_set_StuckOrder = "Update togo.orderbidengin set IsStuckOrder = 1, StuckOrderComment = '$StuckComment' where id = '$OrderId'";
                $result_set_StuckOrder = $this->dataBase->query($query_set_StuckOrder);
                if ($result_set_StuckOrder == true) {

                    /* edited (record the action) */
                    // $party_one_id, $party_two_id $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Order Stuck", 19);

                    echo "Stucked";
                } else {
                    echo "Fail";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function MarkReturnedOrder($TransporterId, $OrderId, $deviceToken)
    {
        if ($this->CheckToken($TransporterId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($TransporterId) == false) {
                $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnedOrder = 1 where id = '$OrderId'";
                $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
                if ($result_set_ReturnedOrder == true) {
                    echo "Returned";

                    /* edited (record the action) */
                    // $party_one_id, $party_two_id $order_id, $price, $description, $action_id	
                    $this->recordAction($TransporterId, -1, $OrderId, -1, '', "Order Marked as Returned", 20);

                    // edited (send notification) ↓

                    $query_Get_Token_Client = "Select CustomerClient.Token As TokenNotifiy, CustomerClient.WebToken As webTokenNotifiy From togo.OrderBidEngin As OrderBidEngin, togo.Customer As CustomerClient
                        Where OrderBidEngin.id='$OrderId' AND OrderBidEngin.CustomerId = CustomerClient.id";
                    $result_Token_Customer = $this->dataBase->query($query_Get_Token_Client);
                    $row_Token_Customer = $this->dataBase->fetchArray($result_Token_Customer);
                    $Token_Customer = $row_Token_Customer['TokenNotifiy'];
                    $Web_Token_Customer = $row_Token_Customer['webTokenNotifiy'];

                    $tokens = array();
                    $webTokens = array();

                    array_push($tokens, $Token_Customer);
                    array_push($webTokens, $Web_Token_Customer);

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);

                    $data = array(
                        'orderId' => $OrderId,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'RequestOrderReturn'
                    );

                    $title = "Order Returned";
                    $body = $transporter['AccountName'] . " requested to return order " . $OrderId;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                } else {
                    echo "Fail";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function AcceptReturnedOrder($ClientId, $OrderId, $IsAccepted, $deviceToken)
    {
        if ($this->CheckToken($ClientId, $deviceToken) == true) {
            if ($this->CheckBlockedCustomer($ClientId) == false) {

                // edited (send notification) ↓

                $query_Get_Token_Transporter = "Select CustomerTransporter.Token As TokenNotifiy, CustomerTransporter.WebToken As webTokenNotifiy
                From togo.OrderBidEngin As OrderBidEngin, togo.Customer As CustomerTransporter
                        Where OrderBidEngin.id='$OrderId' AND OrderBidEngin.currentTransporterId = CustomerTransporter.id";
                $result_Token_Customer = $this->dataBase->query($query_Get_Token_Transporter);
                $row_Token_Customer = $this->dataBase->fetchArray($result_Token_Customer);
                $Token_Customer = $row_Token_Customer['TokenNotifiy'];
                $Web_Token_Customer = $row_Token_Customer['webTokenNotifiy'];

                $tokens = array();
                $webTokens = array();

                array_push($tokens, $Token_Customer);
                array_push($webTokens, $Web_Token_Customer);

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $client = $this->getClientBusinessAndLogo($ClientId);

                if ($client['BusinessName'] == 'null') {
                    $client_names = $this->getClientName($ClientId);
                    $client['BusinessName'] = $client_names['FullName'];
                }

                if ($IsAccepted == "1") {
                    $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnAccepted = 1 where id = '$OrderId'";
                    $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
                    if ($result_set_ReturnedOrder == true) {

                        // nonohoho

                        /* $query_getSenderReceiverInfos = "select * from orderbidaddress where IdOrderBidEngin = '$OrderId'";
                        $result_getSenderReceiverInfos = $this->dataBase->query($query_getSenderReceiverInfos);
                        $row_getSenderReceiverInfos = $this->dataBase->fetchArray($result_getSenderReceiverInfos);

                        $IdCity = $row_getSenderReceiverInfos['IdCity'];
                        $IdCityDes = $row_getSenderReceiverInfos['IdCityDes'];
                        $LatSender = $row_getSenderReceiverInfos['LatSender'];
                        $LatReciver = $row_getSenderReceiverInfos['LatReciver'];
                        $LongSender = $row_getSenderReceiverInfos['LongSender'];
                        $LongReciver = $row_getSenderReceiverInfos['LongReciver'];
                        $OtherDetails = $row_getSenderReceiverInfos['OtherDetails'];
                        $OtherDetailsDes = $row_getSenderReceiverInfos['OtherDetailsDes'];
                        $SenderAddressId = $row_getSenderReceiverInfos['SenderAddressId'];
                        $ReciverAddressId = $row_getSenderReceiverInfos['ReciverAddressId'];

                        $query_set_Receiver = "update orderbidaddress set IdCity = '$IdCityDes', IdCityDes = '$IdCity', LatSender = '$LatReciver', LatReciver = '$LatSender',
						LongSender = '$LongReciver', LongReciver = '$LongSender', OtherDetails = '$OtherDetailsDes', OtherDetailsDes = '$OtherDetails' , 
						ReceiverAddressNum = (select phone_number from addresses where id = SenderAddressId) 
						, ReciverAddressId = '$SenderAddressId', SenderAddressId = '$ReciverAddressId',
						where IdOrderBidEngin = '$OrderId'"; */

                        /* old query (only set receiverInfo as senderInfo) */
                        $query_set_Receiver = "update togo.orderbidaddress set IdCityDes = IdCity, LatReciver = LatSender,
						LongReciver = LongSender, OtherDetailsDes = OtherDetails , 
						ReceiverAddressNum = (select phone_number from togo.addresses where id = SenderAddressId) 
						, ReciverAddressId = SenderAddressId
						where IdOrderBidEngin = '$OrderId'";

                        $result_set_Receiver = $this->dataBase->query($query_set_Receiver);
                        if ($result_set_Receiver == true) {

                            /* edited (record the action) */
                            // $party_one_id, $party_two_id $order_id, $description, $action_id
                            $this->recordAction($ClientId, -1, $OrderId, -1, '', "Returned Order Accepted", 21);

                            // edited (send notification) ↓
                            $data = array(
                                'orderId' => $OrderId,
                                'clientName' => $client['BusinessName'],
                                'clientImageUrl' => $client['LogoUrl'],
                                'intent' => 'AcceptReturnedOrder'
                            );

                            $title = "Returned Order Accepted";
                            $body = $client['BusinessName'] . " accepted the request to return order " . $OrderId;
                            // $image = $transporter['PersonalImgPath'];

                            $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                            echo "Returned";
                        } else {
                            echo "Fail";
                        }
                    } else {
                        echo "Fail";
                    }
                } else {
                    $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnedOrder = 0 where id = '$OrderId'";
                    $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);

                    if ($result_set_ReturnedOrder == true) {

                        $this->recordAction($ClientId, -1, $OrderId, -1, '', "Returned Order Rejected", 22);

                        // edited (send notification) ↓
                        $data = array(
                            'orderId' => $OrderId,
                            'clientName' => $client['BusinessName'],
                            'clientImageUrl' => $client['LogoUrl'],
                            'intent' => 'RejectReturnedOrder'
                        );

                        $title = "Returned Order Rejected";
                        $body = $client['BusinessName'] . " rejected the request to return order " . $OrderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                        echo "rejected";
                    } else {
                        echo "Fail";
                    }
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function updateWebNotificationToken($userId, $tokenDevice, $newWebToken)
    {
        $userId = $this->dataBase->escape($userId);
        $tokenDevice = $this->dataBase->escape($tokenDevice);
        $newWebToken = $this->dataBase->escape($newWebToken);

        if ($this->CheckToken($userId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($userId) == false) {
                $query_update_web_token = "update togo.customer set WebToken='$newWebToken' where id='$userId'";
                $result_update_web_token = $this->dataBase->query($query_update_web_token);

                if ($result_update_web_token) {
                    echo "web token updated!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* public function testNot($token)
    {
        require_once('FcmExample3/Firebase.php');
        $tokens = array();

        // array_push($tokens, 'd4iCoG85R5it2U65A4wkVX:APA91bFlNiJepB5DzXmg_hK0H9U9XMmF9Hy_dTwvTQCeDaas6rMFQcPhzexPNo_JNjgCFFHKvMXufYSoCzjWQtxjxHRLRNZJriXedv6F798o3noIq0Ng0JdUQpgcr6q10EAm83UGQtrN');
        array_push($tokens, $token);

        $firebase = new Firebase();

        $data = array(
            'orderId' => 1000,
            'clientName' => "client test name",
            'clientImageUrl' => '',
            'intent' => 'newAssignedOrder'
        );

        $firebase->sendNotification($tokens, $data);
        // echo $token;
    } */

    /* public function tempAddCity($id, $name)
    {
        if (false) {
            $id = $this->dataBase->escape($id);
            $name = $this->dataBase->escape($name);

            $langId = "1"; // <-----

            if ($langId == "2") {
                $query1 = "insert into areatable (id, name, cityId) values ('$id', '$name', '107')";
                $result1 = $this->dataBase->query($query1);

                $query2 = "insert into arealang (areaId, name, languageId) values ('$id', '$name', '$langId')";
                $result2 = $this->dataBase->query($query2);

                if ($result1) {
                    echo "success";
                } else {
                    echo "error adding " . $id . " - " . $name . " (for areatable)";
                }

                if ($result2) {
                    echo "success";
                } else {
                    echo "error adding " . $id . " - " . $name . " (for arealang)";
                }
            } else if ($langId == "1") {
                $query = "insert into arealang (areaId, name, languageId) values ('$id', '$name', '$langId')";
                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "success";
                } else {
                    echo "error adding " . $id . " - " . $name . " (for arealang)";
                }
            }
        } else {
            echo "enable editing!";
        }
    } */

    // to be edited
    public function GetCitiesArea($clientId, $type, $superId, $langId, $tokenDevice)
    {
        if ($this->CheckToken($clientId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($clientId) == false) {
                $type = $this->dataBase->escape($type);
                $superId = $this->dataBase->escape($superId);
                $langId = $this->dataBase->escape($langId);

                $mainTableName = "";
                $langTableName = "";
                $mainTableId = "";
                $superTableName = "";

                if ($type == "provinces") {
                    $mainTableName = "provincestable";
                    $langTableName = "provincelang";
                    $mainTableId = "provinceId";
                } else if ($type == "governorates") {
                    $mainTableName = "governoratetable";
                    $langTableName = "governoratelang";
                    $mainTableId = "governorateId";
                    $superTableName = "provinceId";
                } else if ($type == "cities") {
                    $mainTableName = "citytable";
                    $langTableName = "citylang";
                    $mainTableId = "cityId";
                    $superTableName = "governorateId";
                } else if ($type == "areas") {
                    $mainTableName = "areatable";
                    $langTableName = "arealang";
                    $mainTableId = "areaId";
                    $superTableName = "cityId";
                } else {
                    echo "typeError!";
                    return;
                }

                $query = "select `$mainTableName`.id, `$langTableName`.name from togo.`$mainTableName` inner join togo.`$langTableName` on `$mainTableName`.id = `$langTableName`.`$mainTableId` where `$langTableName`.languageId='$langId'";

                if ($superId == -1) {
                    $query = $query . " order by name";
                } else {
                    $query = $query . " and `$mainTableName`.`$superTableName`='$superId' order by name";
                }

                $result = $this->dataBase->query($query);

                if ($result) {
                    $resArr = array();

                    while ($row = $this->dataBase->fetchArray($result)) {
                        array_push($resArr, $row);
                    }

                    echo json_encode(array("server_response" => $resArr));
                } else {
                    echo "notFound!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function setTransporterRoadPrices($transporterId)
    {
        $query_getCities = "select id, name from togo.citytable";
        $result_getCities = $this->dataBase->query($query_getCities);

        $citiesArr = array();

        while ($row = $this->dataBase->fetchArray($result_getCities)) {
            array_push($citiesArr, array("id" => $row['id'], "name" => $row['name']));
        }

        // echo json_encode($citiesArr);

        for ($i = 0; $i < count($citiesArr); $i++) {
            for ($j = 0; $j < count($citiesArr); $j++) {

                $id1 = $citiesArr[$i]['id'];
                $name1 = $citiesArr[$i]['name'];
                $id2 = $citiesArr[$j]['id'];
                $name2 = $citiesArr[$j]['name'];

                $query3 = "insert into togo.transporterroadprice (transporterId, fromCityId, fromCityName, toCityId, toCityName, deliveryPrice) 
                values ('$transporterId', '$id1', '$name1', '$id2', '$name2', 20)";
                $result3 = $this->dataBase->query($query3);

                /* if ($result3) {
                    echo "yes -- ";
                } else {
                    echo "no -- ";
                } */
            }
        }
    }

    // TO_REM
    /* used to add prices to all old transporters */
    public function tempAddAlbarqRoadPrice()
    {
        // get all governorates ids
        // add to table

        $query_getCities = "select id, name from togo.citytable";
        $result_getCities = $this->dataBase->query($query_getCities);

        $query_getTrans = "select CustomerId from togo.transportertable";
        $result_getTrans = $this->dataBase->query($query_getTrans);

        $transArr = array();
        $citiesArr = array();

        while ($row = $this->dataBase->fetchArray($result_getCities)) {
            array_push($citiesArr, array("id" => $row['id'], "name" => $row['name']));
        }

        while ($row = $this->dataBase->fetchArray($result_getTrans)) {
            array_push($transArr, array("id" => $row['CustomerId']));
        }

        // echo json_encode($citiesArr);

        for ($t = 0; $t < count($transArr); $t++) {
            for ($i = 0; $i < count($citiesArr); $i++) {
                for ($j = 0; $j < count($citiesArr); $j++) {

                    $transId = $transArr[$t]['id'];
                    $id1 = $citiesArr[$i]['id'];
                    $name1 = $citiesArr[$i]['name'];
                    $id2 = $citiesArr[$j]['id'];
                    $name2 = $citiesArr[$j]['name'];

                    $query3 = "insert into togo.transporterroadprice (transporterId, fromCityId, fromCityName, toCityId, toCityName, deliveryPrice) 
                values ('$transId', '$id1', '$name1', '$id2', '$name2', 20)";
                    $result3 = $this->dataBase->query($query3);

                    if ($result3) {
                        echo "yes -- ";
                    } else {
                        echo "no -- ";
                    }
                }
            }
        }
    }

    public function tempAddFunction()
    {
        echo "enable first!";
        return;

        $query_getCities = "select id, name from togo.citytable";
        $result_getCities = $this->dataBase->query($query_getCities);

        $citiesArr = array();

        while ($row = $this->dataBase->fetchArray($result_getCities)) {
            array_push($citiesArr, array("id" => $row['id'], "name" => $row['name']));
        }

        for ($i = 0; $i < count($citiesArr); $i++) {
            $cityId = $citiesArr[$i]['id'];
            $query_add = "insert into togo.transporterworkcity (deleted, CustomerId, CityId, isNew) values ('0', '103', '$cityId', 'new')";
            $result_add = $this->dataBase->query($query_add);

            if ($result_add) {
                echo "yes -- ";
            } else {
                echo "no -- ";
            }
        }

        return;

        // get all governorates ids
        // add to table

        $query_getCities = "select id, name from togo.citytable";
        $result_getCities = $this->dataBase->query($query_getCities);

        $citiesArr = array();

        while ($row = $this->dataBase->fetchArray($result_getCities)) {
            array_push($citiesArr, array("id" => $row['id'], "name" => $row['name']));
        }

        // echo json_encode($citiesArr);

        for ($i = 0; $i < count($citiesArr); $i++) {
            for ($j = 0; $j < count($citiesArr); $j++) {

                $transId = 103;
                $id1 = $citiesArr[$i]['id'];
                $name1 = $citiesArr[$i]['name'];
                $id2 = $citiesArr[$j]['id'];
                $name2 = $citiesArr[$j]['name'];

                $query3 = "insert into togo.transporterroadprice (transporterId, fromCityId, fromCityName, toCityId, toCityName, deliveryPrice) 
                values ('$transId', '$id1', '$name1', '$id2', '$name2', 20)";
                $result3 = $this->dataBase->query($query3);

                if ($result3) {
                    echo "yes -- ";
                } else {
                    echo "no -- ";
                }
            }
        }
    }

    /* public function tempConvertTransCity()
    {
        $query1 = "select id from citytable";
        $result1 = $this->dataBase->query($query1);

        $query2 = "select CustomerId from transportertable";
        $result2 = $this->dataBase->query($query2);

        $cities = array();
        $transporters = array();

        while ($row = $this->dataBase->fetchArray($result2)) {
            array_push($transporters, $row['CustomerId']);
        }

        while ($row = $this->dataBase->fetchArray($result1)) {
            array_push($cities, $row['id']);
        }

        // echo json_encode($transporters);

        foreach ($transporters as $transId) {
            foreach ($cities as $cityId) {
                // echo json_encode(array("transID" => $transId, "cityID" => $cityId));
                $query3 = "insert into transporterworkcity (CustomerId, CityId) values ('$transId', '$cityId')";
                $result3 = $this->dataBase->query($query3);
            }
        }
    } */

    /* public function tempGetAlbarqPrices() {
        $query = "select * from transporterroadprice";
        $result = $this->dataBase->query($query);

        $tempArr = array();
        
        while ($row = $this->dataBase->fetchArray($result)) {
            // echo $row['fromGovernorateName'] . " -> " . $row['toGovernorateName'] . " ### ";
            array_push($tempArr, array("id" => $row['id'], "fromId" => $row['fromCityId'], "fromName" => $row['fromCityName'], "toId" => $row['toCityId'], "toName" => $row['toCityName'], "price" => $row['deliveryPrice']));
        }

        echo json_encode(array("response" => $tempArr));
    } */

    /* public function tempUpdateAlbarqPrices($id, $price) {
        $query = "update transporterroadprice set deliveryPrice='$price' where id='$id'";
        $result = $this->dataBase->query($query);

        if ($result) {
            echo "updated";
        } else {
            echo "error";
        }
    } */

    public function getTransporterCitiesPrices($transporterId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_gitActiveCities = "select CityId from togo.transporterworkcity where CustomerId='$transporterId' and deleted=0";
                $reslt_gitActiveCities = $this->dataBase->query($query_gitActiveCities);

                if ($reslt_gitActiveCities) {

                    $citiesArr = array();

                    while ($row = $this->dataBase->fetchArray($reslt_gitActiveCities)) {
                        array_push($citiesArr, $row['CityId']);
                    }

                    $pricesArr = array();

                    for ($i = 0; $i < count($citiesArr); $i++) {

                        $tempCityId = $citiesArr[$i];
                        $query_getPricesPerCity = "select * from togo.roadpricestable" . $tempCityId . " where transporterId = '$transporterId'";
                        $result_getPricesPerCity = $this->dataBase->query($query_getPricesPerCity);
                        $row_getPricesPerCity = $this->dataBase->fetchArray($result_getPricesPerCity);

                        for ($j = 0; $j < count($citiesArr); $j++) {

                            $fromToIds = $citiesArr[$i] . "_" . $citiesArr[$j];

                            $fromId = $citiesArr[$i];
                            $toId = $citiesArr[$j];
                            $price = $row_getPricesPerCity[$fromToIds];

                            $query_getFromCityName = "select name from togo.citylang where cityId = '$fromId' and languageId = '$langId'";
                            $query_getToCityName = "select name from togo.citylang where cityId = '$toId' and languageId = '$langId'";
                            $result_getFromCityName = $this->dataBase->query($query_getFromCityName);
                            $result_getToCityName = $this->dataBase->query($query_getToCityName);
                            $row_getFromCityName = $this->dataBase->fetchArray($result_getFromCityName);
                            $row_getToCityName = $this->dataBase->fetchArray($result_getToCityName);

                            array_push($pricesArr, array("transporterId" => $transporterId, "fromId" => $fromId, "fromName" => $row_getFromCityName['name'], "toId" => $toId, "toName" => $row_getToCityName['name'], "price" => $price));
                        }
                    }

                    echo json_encode(array("response" => $pricesArr));
                } else {
                    echo "get cities error!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function updateTransporterCitiesPrices($transporterId, $tokenDevice, $fromId, $toId, $price)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query = "update togo.`roadpricestable" . $fromId . "` set `" . $fromId . "_" . $toId . "`='$price' where transporterId='$transporterId'";
                $result = $this->dataBase->query($query);

                if ($result) {
                    echo "updated";
                } else {
                    echo "error";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getAllGovernorates($transporterId, $tokenDevice, $langId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {
                $query = "select * from togo.governoratelang where languageId='$langId' order by name";
                $result = $this->dataBase->query($query);

                $govArr = array();
                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($govArr, array("govId" => $row['governorateId'], "govName" => $row['name']));
                }

                if ($result) {
                    echo json_encode(array("response" => $govArr));
                } else {
                    echo "error";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getNotifications($id, $token)
    {
        if (!$this->CheckToken($id, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($id)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // get notifications

        $query_get_notifications = "SELECT
            id,
            isRead, 
            orderId, 
            titleEn, 
            titleAr, 
            descriptionEn, 
            descriptionAr 
        FROM togo.notificationstable
        WHERE customerId = '$id' 
        AND deleted = 0
        ORDER BY createdAt DESC";

        $result_get_notifications = $this->dataBase->query($query_get_notifications);

        if (!$result_get_notifications) {
            echo json_encode(array("status" => "error", "error" => "get_notifications query error"));
            return;
        }

        $notifications = array();

        while ($row_get_notifications = $this->dataBase->fetchArray($result_get_notifications)) {
            array_push($notifications, $row_get_notifications);
        }

        echo json_encode(array("status" => "success", "notifications" => $notifications));
    }

    public function getOrderNotification($id, $token, $orderId)
    {
        if (!$this->CheckToken($id, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($id)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // get notifications

        $query_get_notifications = "SELECT
            id,
            isRead, 
            orderId, 
            titleEn, 
            titleAr, 
            descriptionEn, 
            descriptionAr 
        FROM togo.notificationstable
        WHERE orderId = '$orderId' 
        AND deleted = 0
        ORDER BY createdAt DESC";

        $result_get_notifications = $this->dataBase->query($query_get_notifications);

        if (!$result_get_notifications) {
            echo json_encode(array("status" => "error", "error" => "get_notifications query error"));
            return;
        }

        $notifications = array();

        while ($row_get_notifications = $this->dataBase->fetchArray($result_get_notifications)) {
            array_push($notifications, $row_get_notifications);
        }

        echo json_encode(array("status" => "success", "notifications" => $notifications));
    }

    public function unmarkNotification($id, $token, $notificationId) {
        if (!$this->CheckToken($id, $token)) {
            echo json_encode(array("status" => "error", "error" => "token error"));
            return;
        }

        if ($this->CheckBlockedCustomer($id)) {
            echo json_encode(array("status" => "error", "error" => "user blocked"));
            return;
        }

        // unmark the notification

        $query_unmark_notification = "UPDATE togo.notificationstable SET isRead = 1 WHERE id = '$notificationId'";
        $result_unmark_notification = $this->dataBase->query($query_unmark_notification);

        if (!$result_unmark_notification) {
            echo json_encode(array("status" => "error", "error" => "unmark_notification query error"));
        } else {
            echo json_encode(array("status" => "success", "response" => "notification updated successfully"));
        }
    }

    private function addNotification($orderId, $customerId, $titleEn, $titleAr, $descriptionEn, $descriptionAr) {
        $query_add_notification = "INSERT INTO notificationstable (
            orderId, 
            customerId, 
            titleEn, 
            titleAr, 
            descriptionEn, 
            descriptionAr
        )
        VALUES (
            '$orderId', 
            '$customerId', 
            '$titleEn', 
            '$titleAr', 
            '$descriptionEn', 
            '$descriptionAr'
        )";

        $result_add_notification = $this->dataBase->query($query_add_notification);
    }

    // TO_REM
    public function albarqCheckFinishedOrder($orderId)
    {
        $query_Check_Order = "select order_status from togo.orderbidengin where id='$orderId'";
        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);

        if ($row_Check_Order['order_status'] == "Delivered") {
            return "1";
        }

        return "0";
    }

    public function albarqAddNewOrderCallback($togo_id, $tracking_id)
    {
        /* $query_addNewTrackingId = "update foreign_order_id_conversion set foreignOrderIdNew = '$tracking_id' where where togoOrderId = '$togo_id'";
        $result_addNewTrackingId = $this->dataBase->query($query_addNewTrackingId); */

        // if ($result_addNewTrackingId) {
        $notification_title = "Al-Barq Offer Accepted";
        $notification_description = "Al-Barq shipment (" . $tracking_id . ") status information received for order " . $togo_id;

        $this->recordAction(66, -1, $togo_id, -1, $notification_title, $notification_description, 30);

        $webTokens = array();

        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
            if ($row['adminTokenNotify'] != null) {
                array_push($webTokens, $row['adminTokenNotify']);
            }
        }

        $transporter = $this->getTransporterNameAndImage(66);
        $data = array(
            'orderId' => $togo_id,
            'transporterName' => $transporter['AccountName'],
            'transporterImageUrl' => $transporter['PersonalImgPath'],
            'intent' => 'AlbarqOrderOCreated'
        );

        $title = "Al-Barq Offer Accepted";
        $body = $transporter['AccountName'] . " shipment status information received for order " . $togo_id;

        $this->sendFCMNotification(-1, $webTokens, $data, $notification_title, $notification_description);
        // }
    }

    public function albarqFinishOrderCallback($tracking_id)
    {
        $query_getTogoId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$tracking_id'";
        $result_getTogoId = $this->dataBase->query($query_getTogoId);
        $row_getTogoId = $this->dataBase->fetchArray($result_getTogoId);
        $togo_id = $row_getTogoId['togoOrderId'];

        $TransporterId = 66;

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$togo_id' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] != "Delivered") {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$togo_id' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$togo_id'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($togo_id);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];
                    $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($togo_id);

                        $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($togo_id);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                        if ($IsReturnedOrder == "1") {
                            $ff2 = $this->release_escrow($TransporterId, $togo_id, $CostLoad, 0);
                        } else {
                            $ff2 = $this->release_escrow($ClientId, $togo_id, $CostLoad, $clientShareVal);
                        }
                    } else if ($deliveryWay == 3) {

                        $discountvalue = $this->getdiscountvalue($togo_id);
                        $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                    } else if ($deliveryWay == 4) {

                        $discountvalue = $this->getdiscountvalue($togo_id);
                        $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                        $idd1 = $this->release_escrow($TransporterId, $togo_id, $CostLoad, 0);
                    } else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    $this->Log_Order($togo_id, $TransporterId, -1, $ClientId, "Order Finished By Transporter");

                    $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
                    togo.network_order_payment where IsPaid = 0 And OrderId ='$togo_id'";
                    $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                    $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                    if ($row_count_payment > 0) {
                        $discountvalue = $this->getdiscountvalue($togo_id);
                        while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                            //$crv2 = $this->confirm_request($row['FromTransporterId'], $row['DeliveryCost']);
                            //$dttt = $this->delivToTrans($row['FromTransporterId'], $row['DeliveryCost']);
                            //$this->delivery_request($row['ToTransporterId'], $row['DeliveryCost'], $discountvalue);
                            $this->release_escrow($row['ToTransporterId'], $togo_id, $row['DeliveryCost'], $discountvalue);

                            $paymentId = $row['id'];
                            $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                            $this->dataBase->query($query_Update_Payment);
                        }
                    }
                } else {
                    echo "OrderNotFound";
                    return;
                }

                $finishDate = date("Y-m-d H:i:s");

                /* edited (update order status to 'Order Finished') */
                $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$togo_id'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $togo_id, -1, 'Order Finished', "Al-Barq shipment (" . $tracking_id . ") delivered for order " . $togo_id, 30);

                    echo "finishedOrder";

                    $tokens = array();
                    $webTokens = array();

                    $customerId = $row_Get_Cost_Load['CustomerId'];
                    $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                    $Result_query = $this->dataBase->query($client_query);
                    while ($row = $this->dataBase->fetchArray($Result_query)) {
                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);

                    $data = array(
                        'orderId' => $togo_id,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'OrderFinished'
                    );

                    $title = "Order Finished";
                    $body = $transporter['AccountName'] . " finished order " . $togo_id;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                }
            } else {
                echo "Orderdelivered!";
            }
        } else {
            echo "OrderNotFound!";
        }
    }

    public function albarqReverseOrderCallback($tracking_id)
    {
        $query_getTogoId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$tracking_id'";
        $result_getTogoId = $this->dataBase->query($query_getTogoId);
        $row_getTogoId = $this->dataBase->fetchArray($result_getTogoId);
        $OrderId = $row_getTogoId['togoOrderId'];

        $TransporterId = 66;

        $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnAccepted = 1, IsReturnedOrder = 1 where id = '$OrderId'";
        $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
        if ($result_set_ReturnedOrder == true) {

            $query_set_Receiver = "update togo.orderbidaddress set IdCityDes = IdCity, LatReciver = LatSender,
						LongReciver = LongSender, OtherDetailsDes = OtherDetails , 
						ReceiverAddressNum = (select phone_number from togo.addresses where id = SenderAddressId) 
						, ReciverAddressId = SenderAddressId
						where IdOrderBidEngin = '$OrderId'";
            $result_set_Receiver = $this->dataBase->query($query_set_Receiver);
            if ($result_set_Receiver == true) {

                $this->recordAction($TransporterId, -1, $OrderId, -1, 'Al-Barq Order Returned', "Al-Barq shipment (" . $tracking_id . ") returned for order " . $OrderId, 30);

                // edited (send notification) ↓
                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage($TransporterId);

                $data = array(
                    'orderId' => $OrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderReturned'
                );

                $title = "Al-Barq Order Returned";
                $body = $transporter['AccountName'] . " returned order " . $OrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);

                echo "Returned";
            } else {
                echo "Fail";
            }
        } else {
            echo "Fail";
        }
    }

    public function albarqDeleteOrderCallback($tracking_id)
    {
        $query_getTogoId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$tracking_id'";
        $result_getTogoId = $this->dataBase->query($query_getTogoId);
        $row_getTogoId = $this->dataBase->fetchArray($result_getTogoId);
        $orderId = $row_getTogoId['togoOrderId'];

        $orderId = $this->dataBase->escape($orderId);
        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];

        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] == "Waiting for Bids" || $row_Check_Order['order_status'] == "Deleted") {
                echo "notActiveOrder!";
            } else {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$orderId'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($orderId);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, 0);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($orderId);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0); // to check ********
                        $ff2 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0); // to check ********
                    }/*  else if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($orderId);
                            $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                        } else  if ($deliveryWay == 4) {
                            $discountvalue = $this->getdiscountvalue($orderId);
                            $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                            $idd1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0);
                        } */ else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    $this->Log_Order($orderId, $originalTransporterId, -1, $ClientId, "Order Canceled By Al-Barq"); // to check ********

                    // what if order was assigned and wating to be picked up !!!! // to check ********
                } else {
                    echo "OrderNotFound1";
                    return;
                }

                $query_Update = "Update togo.OrderBidEngin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {
                    echo "orderDeleted";

                    $this->recordAction(66, -1, $orderId, -1, 'Al-Barq Shipment Deleted', "Al-barq shipment (" . $tracking_id . ") deleted for order " . $orderId, 30);

                    $webTokens = array();

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage(66);
                    $data = array(
                        'orderId' => $orderId,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'AlbarqOrderDeleted'
                    );

                    $title = "Albarq order deleted";
                    $body = $transporter['AccountName'] . " deleted order " . $orderId;

                    $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
                } else {
                    echo "OrderStatusNotUpdated";
                }
            }
        } else {
            echo "OrderNotFound2";
        }
    }

    public function albarqPickupOrderCallback($tracking_id)
    {
        $query_getTogoId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$tracking_id'";
        $result_getTogoId = $this->dataBase->query($query_getTogoId);
        $row_getTogoId = $this->dataBase->fetchArray($result_getTogoId);
        $orderId = $row_getTogoId['togoOrderId'];

        $transporterId = 66;

        $pickupDate = date("Y-m-d H:i:s");
        $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$orderId'";
        $result = $this->dataBase->query($query);

        if ($result == true) {

            /* edited (record the action) */
            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
            $this->recordAction($transporterId, -1, $orderId, -1, 'Al-Barq Order Picked Up', "Al-Barq shipment (" . $tracking_id . ") Picked Up for order " . $orderId, 30);

            /* edited - timeline (add pickup date to a transporter in the timeline) */
            $newPickupDate = date("Y-m-d H:i:s");
            $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$newPickupDate' where order_id='$orderId' and transporter_id='$transporterId'"; // toto
            $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

            /* edited (add/update pickup date in orderbidengin) */
            $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$newPickupDate', order_status='Out for Delivery' where id='$orderId'"; // oooo
            $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

            echo "Updated";

            $tokens = array();
            $webTokens = array();

            $query = "select obe.customerId as customerId, oba.ReceiverAddressNum, c.token, c.WebToken, c.phonenumber, oba.SenderAddressId, oba.id as orderAddId
                              from togo.orderbidengin as obe
                              inner join togo.orderbidaddress as oba on obe.id = oba.IdOrderBidEngin
                              inner join togo.customer as c on obe.customerId = c.id
                              where obe.id='$orderId'";
            $result = $this->dataBase->query($query);

            while ($row = $this->dataBase->fetchArray($result)) {
                $transporter = $this->getTransporterNameAndImage($transporterId);

                array_push($tokens, $row['token']);
                array_push($webTokens, $row['WebToken']);

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $data = array(
                    'orderId' => $orderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderPickedUp'
                );

                $title = "Order Picked Up";
                $body = $transporter['AccountName'] . " picked up order " . $orderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                $ch = curl_init();
                $phoneNumber = "+972" . substr($row['ReceiverAddressNum'], 1);

                $msg = urlencode("Order #$orderId has been picked up, to track the shipment, use our app www.google.com");
                // to check (send message method)

                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phoneNumber&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                curl_close($ch);
            }
        } else {
            echo "NotUpdated";
        }
    }

    public function albarqRecordActionCallback($tracking_id, $action_type)
    {
        $query_getTogoId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$tracking_id'";
        $result_getTogoId = $this->dataBase->query($query_getTogoId);
        $row_getTogoId = $this->dataBase->fetchArray($result_getTogoId);
        $togo_id = $row_getTogoId['togoOrderId'];

        $notification_title = "Al-Barq Order Status Updated";
        $notification_description = "Al-Barq shipment (" . $tracking_id . ") " . $action_type . " for order " . $togo_id;

        $this->recordAction(66, -1, $togo_id, -1, $notification_title, $notification_description, 30);

        $webTokens = array();

        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
            if ($row['adminTokenNotify'] != null) {
                array_push($webTokens, $row['adminTokenNotify']);
            }
        }

        $transporter = $this->getTransporterNameAndImage(66);
        $data = array(
            'orderId' => $togo_id,
            'transporterName' => $transporter['AccountName'],
            'transporterImageUrl' => $transporter['PersonalImgPath'],
            'intent' => 'AlbarqStatusUpdated'
        );

        $title = "Al-Barq Order Status Updated";
        $body = $transporter['AccountName'] . " - " . $action_type . " for order " . $togo_id;

        $this->sendFCMNotification(-1, $webTokens, $data, $notification_title, $notification_description);
    }

    // TO_REM
    public function albarqCallback($params)
    {

        if ($params['action_type'] == 'shipment_status_information_received') {

            $notification_title = "Al-Barq Offer Accepted";
            $notification_description = "Al-Barq shipment (" . $params['tracking_id'] . ") status information received for order " . $params['invoice_ref'];
            $togo_order_id = $params['invoice_ref'];
            $albarq_tracking_id = $params['tracking_id'];

            $this->recordAction(66, -1, $togo_order_id, -1, $notification_title, $notification_description, 30);

            $webTokens = array();

            $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
            $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

            while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                if ($row['adminTokenNotify'] != null) {
                    array_push($webTokens, $row['adminTokenNotify']);
                }
            }

            $transporter = $this->getTransporterNameAndImage(66);
            $data = array(
                'orderId' => $togo_order_id,
                'transporterName' => $transporter['AccountName'],
                'transporterImageUrl' => $transporter['PersonalImgPath'],
                'intent' => 'AlbarqOrderOCreated'
            );

            $title = "Al-Barq Offer Accepted";
            $body = $transporter['AccountName'] . " shipment status with courier for order " . $togo_order_id;

            $this->sendFCMNotification(-1, $webTokens, $data, $notification_title, $notification_description);
        } else {

            // get albarq tracking id from post data
            $albarq_foreign_id = $params['tracking_id'];
            // query, get togo order id by albarq tracking id
            $query_getTogoOrderId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$albarq_foreign_id'";
            // execute query
            $result_getTogoOrderId = $this->dataBase->query($query_getTogoOrderId);
            // get result row
            $row_getTogoOrderId = $this->dataBase->fetchArray($result_getTogoOrderId);
            // get togo id
            // $togo_id = $row_getTogoOrderId['togoOrderId'];
            $togo_id = $params['invoice_ref'];

            ////////////////////////////////////

            // check for updated tracking_id (id new -> add new one)
            $query_checkUpdatedTrackingId = "select foreignOrderId from togo.foreign_order_id_conversion where togoOrderId = '$togo_id'";
            $result_checkUpdatedTrackingId = $this->dataBase->query($query_checkUpdatedTrackingId);
            $row_checkUpdatedTrackingId = $this->dataBase->fetchArray($result_checkUpdatedTrackingId);
            if ($row_checkUpdatedTrackingId['foreignOrderId'] != $albarq_foreign_id && $row_checkUpdatedTrackingId['foreignOrderIdNew'] == null) {
                // add new tracking_id
                $query_addNewTrackingId = "update togo.foreign_order_id_conversion set foreignOrderIdNew = '$albarq_foreign_id' where where togoOrderId = '$togo_id'";
                $result_addNewTrackingId = $this->dataBase->query($query_addNewTrackingId);
            }

            ///////////////////////////////////

            if ($params['action_type'] == 'shipment_status_picked_up') { // picked up ----------------------------------------------

                $this->startPickupAlbarqOrder($togo_id, 66, $params['tracking_id']);
            } /* else if ($params['action_type'] == 'shipment_status_with_courier') { // order out for delivery ----------------------------------------------

                $this->recordAction(66, -1, $togo_id, -1, 'Al-Barq Order out for delivery', "Al-barq shipment (" . $params['tracking_id'] . ") out for delivery for order " . $togo_id, 30);

                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage(66);
                $data = array(
                    'orderId' => $togo_id,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'AlbarqOrderOutForDelivery'
                );

                $title = "Al-Barq order out for delivery";
                $body = $transporter['AccountName'] . " shipment status with courier for order " . $togo_id;
                // $image = $client['LogoUrl'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
            } */ /* else if ($params['action_type'] == 'shipment_status_returned_to_shipper') {
                

                // rejected and returned -> 10 nis penalty on the client
                // $this->albarqReverseOrder(66, $togo_id, $params['tracking_id'], $params['base_shipment_tracking_id']);


            } */ else if ($params['is_reversed_shipment'] == '1') {
                $this->albarqReverseOrder(66, $togo_id, $params['tracking_id'], $params['base_shipment_tracking_id']);
            } else if (/* $params['action_type'] == 'shipment_status_delivered' ||  */$params['is_delivered'] == '1' && $params['action_type'] != 'shipment_status_returned_to_shipper') { // order finished ----------------------------------------------
                $this->albarqConfirmFinshTrip(66, $togo_id, $params['tracking_id']);
            } /* else if ($params['action_type'] == 'shipment_cost_changed') { // order trip cost changed ----------------------------------------------
                $this->recordAction(66, -1, $togo_id, -1, "Al-Barq Shipment Cost Changed", "Al-Barq shipment (" . $params['tracking_id'] . ") cost changed for order " . $togo_id, 30);

                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage(66);
                $data = array(
                    'orderId' => $togo_id,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'AlbarqShipmentCostChanged'
                );

                $title = "Al-Barq Shipment Cost Changed";
                $body = $transporter['AccountName'] . " shipment cost changed for order " . $togo_id;
                // $image = $client['LogoUrl'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
            } */ else if ($params['action_type'] == 'shipment_status_deleted') { // order deleted ----------------------------------------------

                // delete togo order
                $this->albarqDeleteTogoOrder($togo_id);

                $this->recordAction(66, -1, $togo_id, -1, 'Al-Barq Shipment Deleted', "Al-barq shipment (" . $params['tracking_id'] . ") deleted for order " . $togo_id, 30);

                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage(66);
                $data = array(
                    'orderId' => $togo_id,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'AlbarqOrderDeleted'
                );

                $title = "Albarq order deleted";
                $body = $transporter['AccountName'] . " deleted order " . $togo_id;

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
            } else {
                $this->recordAction(66, -1, $togo_id, -1, 'Al-Barq Shipment Status updated', "Al-barq shepment (" . $params['tracking_id'] . ") '" . $params['action_type'] . "' for order " . $togo_id, 30);

                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage(66);
                $data = array(
                    'orderId' => $togo_id,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'AlbarqOrderStatusUpdated'
                );

                $title = "Albarq Order Status Updated";
                $body = $transporter['AccountName'] . " " . $params['action_type'] . " for order " . $togo_id;

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
            }
        }
    }

    // TO_REM
    public function albarqDeleteTogoOrder($orderId)
    {
        $orderId = $this->dataBase->escape($orderId);
        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];

        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] == "Waiting for Bids" || $row_Check_Order['order_status'] == "Deleted") {
                echo "notActiveOrder!";
            } else {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$orderId'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($orderId);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, 0);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($orderId);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0); // to check ********
                        $ff2 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0); // to check ********
                    }/*  else if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($orderId);
                            $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                        } else  if ($deliveryWay == 4) {
                            $discountvalue = $this->getdiscountvalue($orderId);
                            $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                            $idd1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0);
                        } */ else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    $this->Log_Order($orderId, $originalTransporterId, -1, $ClientId, "Order Canceled By Al-Barq"); // to check ********

                    // what if order was assigned and wating to be picked up !!!! // to check ********
                } else {
                    echo "OrderNotFound1";
                    return;
                }

                $query_Update = "Update togo.OrderBidEngin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {
                    echo "orderDeleted";
                } else {
                    echo "OrderStatusNotUpdated";
                }
            }
        } else {
            echo "OrderNotFound2";
        }
    }

    /* edited, check user login status (if user logged out and logged in from mobile) */
    public function isUserLogedIn($useId, $TokenDevice)
    {
        if ($this->CheckToken($useId, $TokenDevice) == true) {
            if ($this->CheckBlockedCustomer($useId) == false) {
                echo "true";
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function recordRechargeBalance($amount, $mobile)
    {
        // ob_start();

        $mobile_noIntro = "";

        if ($mobile[0] == '+') {
            $mobile_noIntro = substr($mobile, 4);
        } else {
            $mobile_noIntro = ltrim($mobile, '0');
        }

        // get customer info

        $query_getCustomerInfo = "select * from togo.customer where PhoneNumber like '%" . $mobile_noIntro . "%'";
        $result_getCustomerInfo = $this->dataBase->query($query_getCustomerInfo);

        if ($result_getCustomerInfo) {

            $row_getCustomerInfo = $this->dataBase->fetchArray($result_getCustomerInfo);

            // $this->recordAction($row_getCustomerId['id'], -1, -1, $amount, "Recharge Balance", 28);

            $customer_id = $row_getCustomerInfo['id'];
            $customer_mobile = $row_getCustomerInfo['PhoneNumber'];

            if ($row_getCustomerInfo['IsClient'] == 1) {
                $customer_type = "Client";

                $query_getCustomerName = "select concat(FirstName, ' ', LastName) as fullName from togo.clienttable where CustomerId = '$customer_id'";
            } else {
                $customer_type = "Transporter";

                $query_getCustomerName = "select concat(FirstName, ' ', LastName) as fullName from togo.transportertable where CustomerId = '$customer_id'";
            }

            $result_getCustomerName = $this->dataBase->query($query_getCustomerName);
            $row_getCustomerName = $this->dataBase->fetchArray($result_getCustomerName);
            $customer_name = $row_getCustomerName['fullName'];

            // record charge balance action

            $query_recordBalanceAction = "insert into togo.balance_charge_actions (customer_id, customer_name, customer_type, customer_mobile, amount) values ('$customer_id', '$customer_name ', '$customer_type', '$customer_mobile', '$amount')";
            $result_recordBalanceAction = $this->dataBase->query($query_recordBalanceAction);

            if ($result_recordBalanceAction) {

                // send notification

                // ------------------------------------------------

                /* $amobile = "+970592325932";
    
                $ch = curl_init();
                $msg = "Test%20Recharge%20Balane%20" . $amount . "%20to%20" . $customer_id;
        
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
        
                curl_close($ch); */

                // ------------------------------------------------

                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $data = array(
                    'customerNumber' => $mobile,
                    'intent' => 'RechargeBalance'
                );

                $title = "Recharge Balance";
                $body = "Recharge balance to " . $customer_type  . " " . $customer_name;

                ob_get_contents();
                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);
                // ob_end_clean();
            } else {
                echo "BalanceRechargeActionNotInserted!";
            }
        } else {
            echo "CustomerNotFound!";
        }

        // ob_end_clean();
    }

    // TO_REM
    // convert to new prices tables for transporters road prices data
    public function tempUpdateNewTransporterPrices()
    {
        echo "disabled!!";
        return;

        $query_getCities = "select id, name from togo.citytable";
        $result_getCities = $this->dataBase->query($query_getCities);

        $citiesArr = array();

        if ($result_getCities) {
            while ($row_getCities = $this->dataBase->fetchArray($result_getCities)) {
                array_push($citiesArr, array("id" => $row_getCities['id'], "name" => $row_getCities['name']));
            }
        } else {
            echo "getCitiesError";
            return;
        }

        ////////////////////////

        for ($c = 0; $c < count($citiesArr); $c++) {

            $cityId = $citiesArr[$c]['id'];
            $transporterId = 112;

            $query = "insert into togo.transporterworkcity (CityId, CustomerId) values ('$cityId', '$transporterId')";
            $result = $this->dataBase->query($query);

            if ($result == true) {
                echo "yes -------";
            } else {
                echo "no (" . $cityId . ") -------";
            }
        }

        return;

        ///////////////////////

        /* $query_transporters = "select CustomerId from transporterTable";
        $result_transporters = $this->dataBase->query($query_transporters);

        $transArr = array();

        if ($result_transporters) {
            while ($row_getTransporters = $this->dataBase->fetchArray($result_transporters)) {
                array_push($transArr, array("id" => $row_getTransporters['CustomerId']));
            }
        } else {
            echo "getCitiesError";
            return;
        } */

        //for ($t = 0; $t < count($transArr); $t++) {
        for ($c = 0; $c < count($citiesArr); $c++) {

            $transId = 112;

            $query_addRecordPrice = "insert into togo.`roadpricestable" . $citiesArr[$c]['id'] . "` (transporterId) 
                values ('$transId')";

            $result_addRecordPrice = $this->dataBase->query($query_addRecordPrice);

            if ($result_addRecordPrice == true) {
                echo "yes -------";
            } else {
                echo "no (" . $citiesArr[$c]['id'] . ") -------";
            }
        }
        //}
    }

    public function finishReturnedOrder($transporterId, $tokenDevice, $orderId)
    {
        if ($this->CheckToken($transporterId, $tokenDevice) == true) {
            if ($this->CheckBlockedCustomer($transporterId) == false) {

                $query_markAsDelivered = "update togo.orderbidengin set isReturnedFinished = 1 where id = '$orderId'";
                $result_markAsDelivered = $this->dataBase->query($query_markAsDelivered);

                if ($result_markAsDelivered) {

                    // get client phone number:
                    $query_getClientPhoneNumber = "select customer.PhoneNumber from togo.orderbidengin as orderbidengin inner join togo.customer as customer on orderbidengin.CustomerId = customer.id where orderbidengin.id = '$orderId'";
                    $result_getClientPhoneNumber = $this->dataBase->query($query_getClientPhoneNumber);

                    if ($result_getClientPhoneNumber) {
                        $row_getClientPhoneNumber = $this->dataBase->fetchArray($result_getClientPhoneNumber);
                        $PhoneNumber = $row_getClientPhoneNumber['PhoneNumber'];

                        $ch = curl_init();
                        $message = "تم%20إنهاء%20الطلب%20المرتجع%20";

                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$PhoneNumber&msg=$message");
                        curl_setopt($ch, CURLOPT_HEADER, 0);

                        $reslt_Send = curl_exec($ch);

                        curl_close($ch);

                        if ($reslt_Send != "Message Sent Successfully!") {
                            echo "send error!";
                        } else {
                            // echo "message sent successfully";
                        }
                    } else {
                        echo "client/order not found error!";
                    }
                } else {
                    echo "error updating order!";
                }
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* 
        (begin) Al-barq APIs #####################################################################################################
    */

    // create al-barq order
    public function createAlbarqOrder($DeliveryParams, $AddressClint, $CustomerId, $TransporterId, $DeliveryCost, $orderId)
    {

        $this->recordDebug("createAlbarqOrder start", $CustomerId, $TransporterId, $orderId);

        $CustomerId = $this->dataBase->escape($CustomerId);

        /* 
                - shipment_cost_on: cost_on_shipper ->           (Shipper will pay shipment cost)
                                    cost_for_receiver ->         (Receiver will pay shipment cost)
                                    0 ->                         (Company will pay shipment cost)
                - invoice_ref:                                   (Unique shipment ID)
                - ref_date:                                      (Shipment date)
                - is_cod:          0 OR 1 ->                     (If shipment has A COD then make this = 1)
                - cod_type:        cash ->                       (COD will be cash)
                - cod_currency:    usd,ils,jod ->                (The currency of COD)
                - items.*.amount:                                (The COD cost per item)
                - customer_notes:                                (Leave some notes to Albarq)
            */

        $senderInfo = $this->getSenderInfo($CustomerId);

        $this->recordDebug("getSenderInfo done", $CustomerId, $TransporterId, $orderId);

        $str_to_replace = "0";
        $oldNum = $senderInfo['phone'];
        $senderMobileNum = $str_to_replace . substr($oldNum, 4);

        // $currentDate = date("Y-m-d");
        $currentDate = explode(" ", $DeliveryParams['DateLoad'])[0];

        // "package_type": "' . ($DeliveryParams['TypeLoad'] == "1" ? "food" : ($DeliveryParams['TypeLoad'] == "2" ? "small package & envelops" : ($DeliveryParams['TypeLoad'] == "3" ? "meduim package" : "large package"))) . '",

        /* 
                Notes:
                    - some filds are mandatory, so their values are just placeholders
            */

        $data = '{
                "shipper_address": {
                    "first_name": "' . $senderInfo['FirstName'] . '",
                    "middle_name": "",
                    "last_name": "' . $senderInfo['LastName'] . '",
                    "company": "' . $senderInfo['BusinessName'] . '",
                    "email": "' . $senderInfo['Email'] . '",
                    "phone": "",
                    "mobile": "' . $senderMobileNum . '",
                    "postal_code": "n\/a",
                    "street": "",
                    "address": "' . $AddressClint['OtherDetails'] . '",
                    "geo": {
                        "territory_id": "' . $AddressClint['IdProv'] . '",
                        "region_id": "' . $AddressClint['IdGov'] . '",
                        "city_id": "' . $AddressClint['IdCity'] . '",
                        "area_id": "' . $AddressClint['IdArea'] . '"
                    }
                },
                "receiver_address": {
                    "first_name": "' . $AddressClint['ReceiverAddressName'] . '",
                    "middle_name": "",
                    "last_name": "-",
                    "company": "",
                    "email": "",
                    "phone": "",
                    "mobile": "' . $AddressClint['ReceiverAddressNum'] . '",
                    "postal_code": "",
                    "street": "",
                    "address": "' . $AddressClint['OtherDetailsDes'] . '",
                    "geo": {
                        "territory_id": "' . $AddressClint['IdProvDes'] . '",
                        "region_id": "' . $AddressClint['IdGovDes'] . '",
                        "city_id": "' . $AddressClint['IdCityDes'] . '",
                        "area_id": "' . $AddressClint['IdAreaDes'] . '"
                    }
                },
                "shipment_details": {
                    "invoice_ref": "' . $orderId . '",
                    "ref_date":"' . $currentDate . '",
                    "status": "1",
                    "package_type": "box",
                    "shipment_category_id": "15",
                    "shipment_cost_on": "cost_on_shipper",
                    "is_cod": "' . ($DeliveryParams['deliveryWay'] == "2" ? 1 : 0) . '",
                    "items": [
                        {
                            "quantity": 1,
                            "weight": ' . ($DeliveryParams['WeightLoad'] == "" ? 0 : $DeliveryParams['WeightLoad']) . ',
                            "length": ' . ($DeliveryParams['LengthLoad'] == "" ? 0 : $DeliveryParams['LengthLoad']) . ',
                            "width": ' . ($DeliveryParams['WidthLoad'] == "" ? 0 : $DeliveryParams['WidthLoad']) . ',
                            "height": ' . ($DeliveryParams['HeightLoad'] == "" ? 0 : $DeliveryParams['HeightLoad']) . ',
                            "amount": ' . ($DeliveryParams['CostLoad'] == "" ? 0 : $DeliveryParams['CostLoad']) . ',
                            "details": "-"
                        }
                    ],
                        "method_of_receipt": "address_to_address",
                        "cod_type": "cash",
                        "cod_currency": "ils"
                },
                "service_options": {
                    "pickup_date": "' . $currentDate . '",
                    "office_closing_time": "17:00",
                    "customer_notes": "' . $DeliveryParams['DetailsLoad'] . '"
                }
            }';

        // ---------------------------------------------
        // test, check data
        /* echo $data;
            return; */
        // ---------------------------------------------

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://www.albarq.ps/api/platform/shipment/create',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'Api-Company-Id: 1400',
                'Api-Secret-Key: zAvWMdIGTKae6RBz8rOnAUMthmIYNj5FbQUgzAQTT482mZbYhniCEwtcPKY5iNxj9MIuFRunQ8ctknJ5dqtPZsdaFTuSfqCcROcV'
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        $this->recordDebug("createAlbarqOrder api done", $CustomerId, $TransporterId, $orderId);

        // -----------------------------------------------

        // add albarq tracking_id (order foreign_id) to foreign-transporter-companies-ids-conversion-table

        // create_shipment_status -> response.status => true
        // foreign_id -> response.data.items.tracking_id
        $response_data = json_decode($response);
        $albarq_createShipmentStatus = $response_data->status;
        $albarq_foreignId = $response_data->data->items->tracking_id;

        if ($albarq_createShipmentStatus == 1) {

            echo "albarq shimemt created successfuly";

            // insert foreign_id (companyId => 66 for albarq)
            $query_inserForiegnId = "insert into togo.foreign_order_id_conversion (companyId, foreignOrderId, togoOrderId) values ($TransporterId, '$albarq_foreignId', '$orderId')";
            $result_inserForiegnId = $this->dataBase->query($query_inserForiegnId);

            if ($result_inserForiegnId) {
                echo " foreign id added successfuly";
                $this->recordDebug("foreign id added successfuly", $CustomerId, $TransporterId, $orderId);
            } else {
                echo " foreignIdError!";
                $this->recordDebug("foreignIdError", $CustomerId, $TransporterId, $orderId);
            }
        } else {
            echo "albarqCreateShipmentError";
            $this->recordDebug("albarqCreateShipmentError (status: " . $albarq_createShipmentStatus . ")", $CustomerId, $TransporterId, $orderId);
        }
    }

    // record every al-barq actionin the database
    public function addBarqLog($record)
    {
        $action = $record['action'];
        $action_type = $record['action_type'];
        $company_id = $record['company_id'];
        $tracking_id = $record['tracking_id'];
        $invoice_ref = $record['invoice_ref'];
        $date = $record['date'];
        $is_delivered = $record['is_delivered'];
        $is_reversed_shipment = $record['is_reversed_shipment'];
        $base_shipment_tracking_id = $record['base_shipment_tracking_id'];
        $status_text = $record['status']['text'];
        $prev_status_text = $record['prev_status']['text'];

        $query_insertRecord = "insert into togo.albarqlogtable (action, action_type, company_id, tracking_id, invoice_ref, date, is_delivered, is_reversed_shipment, base_shipment_tracking_id, status_text, prev_status_text)
                                   values ('$action', '$action_type', '$company_id', '$tracking_id', '$invoice_ref', '$date', '$is_delivered', '$is_reversed_shipment','$base_shipment_tracking_id', '$status_text', '$prev_status_text')";

        $result_insertRecord = $this->dataBase->query($query_insertRecord);
    }

    /* 
        (end) Al-barq APIs #####################################################################################################
    */

    /* 
        (begin) Olivery APIs #####################################################################################################
    */

    public function createOliveryOrder($DeliveryParams, $AddressClint, $ClientId, $TransporterId, $OrderId)
    {

        // $this->recordDebug("olivery create order api entered", $ClientId, $TransporterId, $OrderId);

        /* $DeliveryParams['CostLoad'] = 100;

        $AddressClint['OtherDetails'] = "source address other details";
        $AddressClint['OtherDetailsDes'] = "target address other details";
        $AddressClint['IdArea'] = 1322;
        $AddressClint['IdAreaDes'] = 1211;
        $AddressClint['ReceiverAddressName'] = "receiver name";
        $AddressClint['ReceiverAddressNum'] = "0592325932";

        $TransporterId = 159;

        $ClientId = 41;

        $OrderId = 181818; */


        // get logestechs'transporter username and password
        $query_getTransporterInfo = "select username, password from togo.olivery_transporter_info where togo_trans_id = '$TransporterId'";
        $result_getTransporterInfo = $this->dataBase->query($query_getTransporterInfo);

        if ($result_getTransporterInfo) {

            $row_getTransporterInfo = $this->dataBase->fetchArray($result_getTransporterInfo);

            $username = $row_getTransporterInfo['username'];
            $password = $row_getTransporterInfo['password'];

            $this->recordDebug("olivery_transporter_info selected from, username: " . $username . " - password: " . $password, $ClientId, $TransporterId, $OrderId);

            // get sender info
            $senderInfo = $this->getSenderInfo($ClientId);
            $str_to_replace = "0";
            $oldNum = $senderInfo['phone'];
            $senderMobileNum = $str_to_replace . substr($oldNum, 4);

            $this->recordDebug("getSenderInfo called - phone: " . $senderMobileNum, $ClientId, $TransporterId, $OrderId);

            // get olivery' transporer' source and target areas


            ////////////////////////////////////////////////////////////////////////////////////

            // get area, city, governorate, and province ids for both source and destination

            $query_get_src_and_dest_ids = "select senderaddress.areaId as srcArea, senderaddress.cityId as srcCity, senderaddress.governoratId as srcGov, senderaddress.provinceId as srcProv,
            receiveraddress.areaId as destArea, receiveraddress.cityId as destCity, receiveraddress.governoratId as destGov, receiveraddress.provinceId as destProv
            from togo.orderbidengin as engin
            inner join togo.orderbidaddress as orderaddress on engin.id = orderaddress.IdOrderBidEngin
            inner join togo.addresses as senderaddress on orderaddress.SenderAddressId = senderaddress.id
            inner join togo.addresses as receiveraddress on orderaddress.ReciverAddressId = receiveraddress.id
            where engin.id = '$OrderId'";

            $result_get_src_and_dest_ids = $this->dataBase->query($query_get_src_and_dest_ids);
            $row_get_src_and_dest_ids = $this->dataBase->fetchArray($result_get_src_and_dest_ids);

            $srcArea = $row_get_src_and_dest_ids['srcArea'];
            $srcCity = $row_get_src_and_dest_ids['srcCity'];
            $srcGov = $row_get_src_and_dest_ids['srcGov'];
            $srcProv = $row_get_src_and_dest_ids['srcProv'];

            $destArea = $row_get_src_and_dest_ids['destArea'];
            $destCity = $row_get_src_and_dest_ids['destCity'];
            $destGov = $row_get_src_and_dest_ids['destGov'];
            $destProv = $row_get_src_and_dest_ids['destProv'];

            /* $this->recordDebug(
                "srcArea: (" . $srcArea . ") -- srcCity: (" . $srcCity . ") --- srcGov: (" . $srcGov . ") srcProv: (" . $srcProv
                    . ") >>>> destArea: (" . $destArea . ") -- destCity: (" . $destCity . ") --- destGov: (" . $destGov . ") destProv: (" . $destProv . ")",
                $CustomerId,
                $transId,
                $Id_Last_Order
            ); */

            // source area
            $query_check_src_prov = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$srcProv' and transporter_id = '$TransporterId' and togo_area_level = '1'";
            $query_check_src_gov = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$srcGov' and transporter_id = '$TransporterId' and togo_area_level = '2'";
            $query_check_src_city = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$srcCity' and transporter_id = '$TransporterId' and togo_area_level = '3'";
            $query_check_src_area = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$srcArea' and transporter_id = '$TransporterId' and togo_area_level = '4'";

            // $this->recordDebug("after src queries", $CustomerId, $transId, $Id_Last_Order);

            $result_check_src_prov = $this->dataBase->query($query_check_src_prov);
            $num_rows_check_src_prov = $this->dataBase->numRows($result_check_src_prov);

            $result_check_src_gov = $this->dataBase->query($query_check_src_gov);
            $num_rows_check_src_gov = $this->dataBase->numRows($result_check_src_gov);

            $result_check_src_city = $this->dataBase->query($query_check_src_city);
            $num_rows_check_src_city = $this->dataBase->numRows($result_check_src_city);

            $result_check_src_area = $this->dataBase->query($query_check_src_area);
            $num_rows_check_src_area = $this->dataBase->numRows($result_check_src_area);

            // $this->recordDebug("after src results", $CustomerId, $transId, $Id_Last_Order);

            $togo_src_area_id = "";

            if ($num_rows_check_src_prov > 0) {
                // $this->recordDebug("src-prov if begin - count: " . $num_rows_check_src_prov , $CustomerId, $transId, $Id_Last_Order);
                $row_check_src_prov = $this->dataBase->fetchArray($result_check_src_prov);
                $togo_src_area_id = $row_check_src_prov['togoAreaId'];
                // $this->recordDebug("src-prov if end" . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);
            } else if ($num_rows_check_src_gov > 0) {
                $row_check_src_gov = $this->dataBase->fetchArray($result_check_src_gov);
                $togo_src_area_id = $row_check_src_gov['togoAreaId'];
            } else if ($num_rows_check_src_city > 0) {
                $row_check_src_city = $this->dataBase->fetchArray($result_check_src_city);
                $togo_src_area_id = $row_check_src_city['togoAreaId'];
            } else if ($num_rows_check_src_area > 0) {
                $row_check_src_area = $this->dataBase->fetchArray($result_check_src_area);
                $togo_src_area_id = $row_check_src_area['togoAreaId'];
            }

            // $this->recordDebug("source olivery area: " . $olivery_src_area_name, $CustomerId, $transId, $Id_Last_Order);

            // destination area
            $query_check_dest_prov = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$destProv' and transporter_id = '$TransporterId' and togo_area_level = '1'";
            $query_check_dest_gov = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$destGov' and transporter_id = '$TransporterId' and togo_area_level = '2'";
            $query_check_dest_city = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$destCity' and transporter_id = '$TransporterId' and togo_area_level = '3'";
            $query_check_dest_area = "select togoAreaId from togo.olivery_areas_convert_table where togoAreaId = '$destArea' and transporter_id = '$TransporterId' and togo_area_level = '4'";

            $result_check_dest_prov = $this->dataBase->query($query_check_dest_prov);
            $num_rows_check_dest_prov = $this->dataBase->numRows($result_check_dest_prov);

            $result_check_dest_gov = $this->dataBase->query($query_check_dest_gov);
            $num_rows_check_dest_gov = $this->dataBase->numRows($result_check_dest_gov);

            $result_check_dest_city = $this->dataBase->query($query_check_dest_city);
            $num_rows_check_dest_city = $this->dataBase->numRows($result_check_dest_city);

            $result_check_dest_area = $this->dataBase->query($query_check_dest_area);
            $num_rows_check_dest_area = $this->dataBase->numRows($result_check_dest_area);

            $togo_dest_area_id = "";

            if ($num_rows_check_dest_prov > 0) {
                $row_check_dest_prov = $this->dataBase->fetchArray($result_check_dest_prov);
                $togo_dest_area_id = $row_check_dest_prov['togoAreaId'];
            } else if ($num_rows_check_dest_gov > 0) {
                $row_check_dest_gov = $this->dataBase->fetchArray($result_check_dest_gov);
                $togo_dest_area_id = $row_check_dest_gov['togoAreaId'];
            } else if ($num_rows_check_dest_city > 0) {
                $row_check_dest_city = $this->dataBase->fetchArray($result_check_dest_city);
                $togo_dest_area_id = $row_check_dest_city['togoAreaId'];
            } else if ($num_rows_check_dest_area > 0) {
                $row_check_dest_area = $this->dataBase->fetchArray($result_check_dest_area);
                $togo_dest_area_id = $row_check_dest_area['togoAreaId'];
            }

            ////////////////////////////////////////////////////////////////////////////////////

            $sourceTogoAreaId = $togo_src_area_id;
            $targetTogoAreaId = $togo_dest_area_id;

            $this->recordDebug("sourceTogoAreaId: " . $sourceTogoAreaId . " --- targetTogoAreaId: " . $targetTogoAreaId, $ClientId, $TransporterId, $OrderId);

            $sourceOliveryArea = $this->getOliveryArea($sourceTogoAreaId);
            $targetOliveryArea = $this->getOliveryArea($targetTogoAreaId);

            $togo_from_area_id = $sourceOliveryArea['togoAreaId'];
            $togo_from_area_name = $sourceOliveryArea['togoAreaName'];
            $togo_to_area_id = $targetOliveryArea['togoAreaId'];
            $togo_to_area_name = $targetOliveryArea['togoAreaName'];

            $olivery_from_area_id = $sourceOliveryArea['oliveryAreaId'];
            $olivery_from_area_name = $sourceOliveryArea['oliveryAreaName'];
            $olivery_to_area_id = $targetOliveryArea['oliveryAreaId'];
            $olivery_to_area_name = $targetOliveryArea['oliveryAreaName'];

            $togo_from_area_name = $this->dataBase->escape($togo_from_area_name);
            $togo_to_area_name = $this->dataBase->escape($togo_to_area_name);
            $olivery_from_area_name = $this->dataBase->escape($olivery_from_area_name);
            $olivery_to_area_name = $this->dataBase->escape($olivery_to_area_name);

            $this->recordDebug("getOliveryArea called - from: TOGO(" . $togo_from_area_id . " - " . $togo_from_area_name . ") / OLIVERY(" . $olivery_from_area_id . " - " . $olivery_from_area_name . ") -> to: TOGO(" . $togo_to_area_id . " - " . $togo_to_area_name . ") / OLIVERY(" . $olivery_to_area_id . " - " . $togo_to_area_name . ")", $ClientId, $TransporterId, $OrderId);

            // test get price:
            /* $delivery_cost = $this->getOliveryPrice($row_getTransporterInfo['username'], $row_getTransporterInfo['password'], $olivery_from_area_name, $olivery_to_area_name);
            echo " -- delivery_cost: " . $delivery_cost . " -- "; */

            // return;
            // create olivery order

            if ($olivery_from_area_id && $olivery_to_area_id) {

                // get togo areas names by ids:
                $togoSrcAreaID = $AddressClint['IdArea'];
                $togoDestAreaId = $AddressClint['IdAreaDes'];

                $query_getSrcAreaName = "select name from togo.arealang where areaId = '$togoSrcAreaID' and languageId = 2";
                $result_getSrcAreaName = $this->dataBase->query($query_getSrcAreaName);
                $row_getSrcAreaName = $this->dataBase->fetchArray($result_getSrcAreaName);
                $togoSrcAreaName = $row_getSrcAreaName['name'];

                $query_getDestAreaName = "select name from togo.arealang where areaId = '$togoDestAreaId' and languageId = 2";
                $result_getDestAreaName = $this->dataBase->query($query_getDestAreaName);
                $row_getDestAreaName = $this->dataBase->fetchArray($result_getDestAreaName);
                $togoDestAreaName = $row_getDestAreaName['name'];

                $cod = $DeliveryParams['CostLoad'] == "" ? 0 : $DeliveryParams['CostLoad'];
                $from_address_id = $olivery_from_area_id;
                $to_address_id = $olivery_to_area_id;
                $customer_address = $togoDestAreaName . ', ' . $AddressClint['OtherDetailsDes'];
                $customer_phone = $AddressClint['ReceiverAddressNum'];
                $customer_name = $AddressClint['ReceiverAddressName'];
                $client_business_name = $senderInfo['BusinessName'];
                $client_business_address = $togoSrcAreaName . ', ' . $AddressClint['OtherDetails'];
                $client_business_phone = $senderMobileNum;

                $notes = $DeliveryParams['DetailsLoad'];

                // staging data ->
                /* $data = '{
                    "jsonrpc": "2.0",
                    "params": {
                        "login": "' . $username . '",
                        "password": "' . $password . '",
                        "db": "redline",
                        "customer_address": "' . $customer_address . '",
                        "customer_mobile": "' . $customer_phone . '",
                        "customer_name": "' . $customer_name . '",
                        "customer_area": ' . $to_address_id . ',
                        "reference_id": "' . $OrderId . '",
                        "order_id": "' . $OrderId . '",
                        "cost": ' . $cod . ',
                        "copy_total_cost": ' . $cod . ',
                        "product_note": "' . $notes . '",
                        "latitude": "",
                        "longitude": "",
                        "order_type_id": 1,
                        "payment_type": "",
                        "delivery_cost_on_sender": true,
                        "business_information": {
                            "username": "' . $client_business_name . '",
                            "area_id": ' . $from_address_id . ',
                            "address": "' . $client_business_address . '",
                            "mobile_number": "' . $client_business_phone . '",
                            "longitude": "",
                            "latitude": ""
                        }
                    }
                }'; */

                /* $data = '{
                    "jsonrpc": "2.0",
                    "params": {
                        "login": "' . $username . '",
                        "password": "' . $password . '",
                        "db": "redline",
                        "customer_address": "' . $customer_address . '",
                        "customer_mobile": "' . $customer_phone . '",
                        "customer_name": "' . $customer_name . '",
                        "customer_area": ' . $to_address_id . ',
                        "customer_sub_area": "",
                        "reference_id": "' . $OrderId . '",
                        "cost": ' . $cod . ',
                        "no_of_items": 1,
                        "product_note": "' . $notes . '"
                    }
                }'; */

                $data = '{
                    "jsonrpc": "2.0",
                    "params": {
                        "login": "' . $username . '",
                        "password": "' . $password . '",
                        "db": "redline",
                        "customer_address": "' . $customer_address . '",
                        "customer_mobile": "' . $customer_phone . '",
                        "customer_name": "' . $customer_name . '",
                        "customer_area": "' . $to_address_id . '",
                        "reference_id": "",
                        "cost": ' . $cod . ',
                        "order_type_id": "1",
                        "show_alt_address": true,
                        "business_alt_area": "' . $from_address_id . '",
                        "business_alt_address": "' . $client_business_address . '",
                        "alt_mobile_number": "' . $client_business_phone . '",
                        "alt_business_name": "' . $client_business_name . '"
                    }
                }';

                file_put_contents("oliveryCreateOrderResponse.log", var_export($data, true) . "\n ------------------ \n", FILE_APPEND);

                // return;

                // vovovovovovovovo

                /* echo $data;
                return; */

                $curl = curl_init();

                // staging -> CURLOPT_URL => 'https://staging.olivery.io/create_order'

                // olivery -> Create Order by zone
                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://redline.olivery.app/create_order',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_SSL_VERIFYPEER => false,
                    CURLOPT_SSL_VERIFYHOST => 0,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS => $data,
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json'
                    ),
                ));

                $response = curl_exec($curl);
                // $info = curl_getinfo($curl);
                // $error = curl_error($curl);

                curl_close($curl);

                /* echo $response;
                return; */

                $response_data = json_decode($response)->result;

                file_put_contents("oliveryCreateOrderResponse.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);

                $this->recordDebug("olivery api done - response(success): " . $response_data->{'success'}, $ClientId, $TransporterId, $OrderId);

                // file_put_contents("test222.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);

                if ($response_data->{'success'} == 1) {

                    // o nono

                    // echo " -- olivery shipment created successfuly -- ";

                    $senderName = $senderInfo['BusinessName'];
                    $notification_title = "Olivery Offer Accepted";
                    $notification_description = $senderName . " Accepted Olivery transporter offer on order (" . $OrderId . ")";
                    $this->recordAction($TransporterId, -1, $OrderId, -1, $notification_title, $notification_description, 30);

                    $olivery_order_id = $response_data->{'id'};
                    $barcode = $response_data->{'Sequence'};
                    $olivery_deal_cost = $response_data->{'Delivery cost'};

                    // if foreign deal-price is greater of equal our sell-price then mark order
                    // 1- get sell-price
                    $query_get_sell_price = "SELECT CostDelivery FROM togo.deliveryacceptordertable WHERE IdOrder = '$OrderId' AND IdTransporter = '$TransporterId' LIMIT 1";
                    $result_get_sell_price = $this->dataBase->query($query_get_sell_price);
                    $row_get_sell_price = $this->dataBase->fetchArray($result_get_sell_price);
                    $sell_price = $row_get_sell_price['CostDelivery'];

                    if ($olivery_deal_cost >= $sell_price) {
                        // mark order 
                        $this->recordAction($TransporterId, -1, $OrderId, -1, 'foreign delivery cost', "foreign deal-cost [" . $olivery_deal_cost . "] is greater than or equal sell-price [" . $sell_price . "]", 30);
                        
                        $query_mark_order = "UPDATE togo.orderbidengin SET foreign_order_error = 1, SET last_action = 'foreign delivery cost problem' WHERE id = '$OrderId'";
                        $result_mark_order = $this->dataBase->query($query_mark_order);
                    }

                    $query_inserForiegnId = "insert into togo.foreign_order_id_conversion (companyId, foreignOrderId, togoOrderId, loges_barcode) 
                        values ('$TransporterId', '$olivery_order_id', '$OrderId', '$barcode')";
                    $result_inserForiegnId = $this->dataBase->query($query_inserForiegnId);

                    if ($result_inserForiegnId) {
                        // echo "foreign id added successfuly - " . $olivery_order_id . " - delivery cost: " . $response_data->{'Delivery cost'};
                        $this->recordDebug("foreign id added successfuly - " . $olivery_order_id . " - delivery cost: " . $response_data->{'Delivery cost'}, $ClientId, $TransporterId, $OrderId);
                    
                        // insert foreign delivery cost into orderbidengin
                        $query_insert_foreign_cost = "UPDATE togo.orderbidengin SET foreign_delivery_price = '$olivery_deal_cost' WHERE id = '$OrderId'";
                        $result_insert_foreign_cost = $this->dataBase->query($query_insert_foreign_cost);

                        if ($result_insert_foreign_cost) {
                            // echo " -- foreign delivery cost added successfuly -- ";
                            $this->recordDebug("foreign delivery cost added successfuly - cost: " . $olivery_deal_cost, $ClientId, $TransporterId, $OrderId);
                        } else {
                             // echo " -- foreignCostInsertError! -- ";
                            $this->recordDebug("foreignCostInsertError - cost: " . $olivery_deal_cost, $ClientId, $TransporterId, $OrderId);
                        }
                    } else {
                        // echo " -- foreignIdInsertError! -- ";
                        $this->recordDebug("foreignIdInsertError - " . $olivery_order_id, $ClientId, $TransporterId, $OrderId);
                    }
                } else {
                    // echo " -- oliveryCreateShipmentError -- ";
                    $error = $response_data->{'message'};
                    $this->recordDebug("oliveryCreateShipmentError - error: " . $error, $ClientId, $TransporterId, $OrderId);
                }
            } else {
                // echo " -- olivery areas not found -- ";
                $this->recordDebug("olivery areas not found", $ClientId, $TransporterId, $OrderId);
            }
        } else {
            // echo " -- olivery transporter info query error -- ";
            $this->recordDebug("olivery transporter info query error!", $ClientId, $TransporterId, $OrderId);
        }
    }

    public function getOliveryArea($togoAreaId)
    {
        $query = "select * from togo.olivery_areas_convert_table where togoAreaId = '$togoAreaId'";
        $result = $this->dataBase->query($query);
        $row = $this->dataBase->fetchArray($result);
        return $row;
    }

    public function getOliveryPrice($username, $password, $sourceName, $destinationName)
    {
        /* echo "nono";
        return; */

        // •	business_alt_area: is source area
        // •	customer_area: is destination area 

        /* $username = "maan_busin";
        $password = "12345678";
        $destinationName = "Ramallah";
        $sourceName = "nablus"; */

        $data = '{ 
            "jsonrpc": "2.0", 
            "params": { 
                "login":"' . $username . '",
                "password": "' . $password . '",
                "db":"redline",
                "order_type_id":"1",
                "customer_area": "' . $destinationName . '",
                "business_alt_area": "' . $sourceName . '"
            }    
        }';

        $curl = curl_init();

        // staging -> CURLOPT_URL => 'https://staging.olivery.io/get_delivery_cost'

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://redline.olivery.app/get_delivery_cost',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_SSL_VERIFYPEER => false,
            CURLOPT_SSL_VERIFYHOST => 0,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $output = curl_exec($curl);
        $info = curl_getinfo($curl);
        $error = curl_error($curl);

        curl_close($curl);

        $res = json_decode($output)->result;

        /* echo $output;
        return; */

        if ($res->status == 401) {
            return "-1";
        } else {
            return $res->{'delivery_cost'};
        }

        /* if ($res->{'Delivery cost'} != "0") {
            echo "0";
        } else {
            echo "cost";
        } */

        // echo $res->{'Delivery cost'};
        // echo $output;
    }

    public function getLogetechsGeneralPrice($sourceAreaId, $targetAreId)
    {
        // get togo areas names
        $sourceTogoAreaName = $this->getLogestechsAreaName($sourceAreaId);
        $targetTogoAreaName = $this->getLogestechsAreaName($targetAreId);

        if ($sourceTogoAreaName && $targetTogoAreaName) {

            $price_general = $this->getLogestechsPriceGeneral("101", $sourceTogoAreaName, $targetTogoAreaName);


            $rawPrice_general = json_decode($price_general);

            return $rawPrice_general->cost;
        } else {
            return "-2";
        }
    }

    // aaa
    public function oliveryCallback($callData)
    {
        $shipment_status = $callData['shipment_status'];
        $olivery_shipment_id = $callData['olivery_shipment_id'];
        // $togo_shipment_id = $callData['togo_shipment_id'];
        $cod = $callData['cod_changed'];

        // get togo order id:
        $query_get_togo_id = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$olivery_shipment_id'";
        $result_get_togo_id = $this->dataBase->query($query_get_togo_id);
        $row_get_togo_id = $this->dataBase->fetchArray($result_get_togo_id);
        $togo_shipment_id = $row_get_togo_id['togoOrderId'];

        // get order old price (and merchant id)
        // compare
        // record action and mark
        $query_getOldCod = "select CostLoad as cod, CustomerId as merchantId from togo.orderbidengin where id = '$togo_shipment_id'";
        $result_getOldCod = $this->dataBase->query($query_getOldCod);
        $row_getOldCod = $this->dataBase->fetchArray($result_getOldCod);
        $old_cod = $row_getOldCod['cod'];

        $isMarked = 0;
        if (($old_cod != $cod) && ($cod != "")) {
            $this->oliveryRecordAction($togo_shipment_id, $olivery_shipment_id, "ALTER_COD", $cod);
            $isMarked = 1;

            // store new cod amount
            $query_insert_new_cod = "UPDATE togo.orderbidengin SET newCod = '$cod' WHERE id = '$togo_shipment_id'";
            $result_insert_new_cod = $this->dataBase->query($query_insert_new_cod);

            // send SMS to merchant to inform it with the COD change
            // get merchant mobile number
            $merchantId = $row_getOldCod['merchantId'];
            $query_get_merchant_mobile = "select PhoneNumber as mobile from togo.customer where id = '$merchantId'";
            $result_get_merchant_mobile = $this->dataBase->query($query_get_merchant_mobile);
            $row_get_merchant_mobile = $this->dataBase->fetchArray($result_get_merchant_mobile);
            $mobile = $row_get_merchant_mobile['mobile'];

            if (substr($mobile, 0, 4) === "+972") {
                $mobile = "0" . substr($mobile, 4); // Replace +972 with 0
            }

            $mobile_extra = $mobile . ",0592325932,0599201899,0599658113,0599040022"; // to be removed

            // send the SMS
            $msg = "COD changed from (" . $old_cod . ") to (" . $cod . ") for TOGO order (" . $togo_shipment_id . ")";
            $res = $this->send_SMS($mobile, $msg);

            if ($res == "message not sent") {
                // echo " - message not sent - ";
            } else {
                // echo " - message sent successfully - ";
            }
        }

        // get togo-order-id by logestechs-order-id-number
        /* $query_getTogoOrderId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$olivery_shipment_id'";
        $result_getTogoOrderId = $this->dataBase->query($query_getTogoOrderId);
        $row_getTogoOrderId = $this->dataBase->fetchArray($result_getTogoOrderId);

        $togoOrderId = $row_getTogoOrderId['togoOrderId']; */

        if (($shipment_status == "canceled" || $shipment_status == "deleted") && $isMarked == 0) {
            // cancel
            $this->oliveryCancelOrder($togo_shipment_id, $olivery_shipment_id);
        } else if ($shipment_status == "picked_up" || $shipment_status == "in_progress") {
            // pickup
            $this->oliveryPickupOrder($togo_shipment_id, $olivery_shipment_id);
        } else if ($shipment_status == "returned_in_progress") {
            // return
            $this->oliveryReturnOrder($togo_shipment_id, $olivery_shipment_id);
            $this->oliveryRecordAction($togo_shipment_id, $olivery_shipment_id, $shipment_status, 0);
        } else if ($shipment_status == "completed_returned") {
            // finish returned
            // $this->oliveryFinishReturnOrder($togo_shipment_id, $olivery_shipment_id);
            $this->oliveryRecordAction($togo_shipment_id, $olivery_shipment_id, $shipment_status, 0);
        } else if (($shipment_status == "delivered" || $shipment_status == "money_in" || $shipment_status == "money_received" || $shipment_status == "returned_delivered") && $isMarked == 0) {
            // deliver
            $this->oliveryDeliverOrder($togo_shipment_id, $olivery_shipment_id, $shipment_status);
        } else if ($shipment_status == "stuck") {
            // stuck
            // $this->oliveryStuckOrder($togo_shipment_id, $olivery_shipment_id);
            $this->oliveryRecordAction($togo_shipment_id, $olivery_shipment_id, $shipment_status, 0);
        } else {
            $this->oliveryRecordAction($togo_shipment_id, $olivery_shipment_id, $shipment_status, 0);
        }
    }

    public function oliveryDeliverOrder($togoOrderId, $packageId, $statusDelivered)
    {
        // of order is marked as return, mark it for review, else, dilever the order

        $togo_id = $togoOrderId;

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$togo_id' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] != "Delivered") {

                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$togo_id' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                /* $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId, IsReturnedOrder From togo.OrderBidEngin where id='$togo_id'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load); */

                $query_Get_Cost_Load = "SELECT
                engin.deliveryWay,
                engin.CostLoad,
                foreignOrder.loges_barcode AS foreign_order_barcode,
                engin.foreign_delivery_price,
                engin.CustomerId,
                engin.IsReturnedOrder
                FROM togo.OrderBidEngin AS engin
                INNER JOIN togo.foreign_order_id_conversion AS foreignOrder ON engin.id = foreignOrder.togoOrderId
                WHERE engin.id='$togo_id'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($togo_id);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];
                    $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];
                    $foreign_order_barcode = $row_Get_Cost_Load['foreign_order_barcode'];
                    $foreign_delivery_price = $row_Get_Cost_Load['foreign_delivery_price'];

                    // performed

                    // o finish

                    ////////////////////////////////////////////////////////////////////////////

                    // new deal-logic:
                    // check if this transporter is deal-activated (from transportertable)
                    // if yes -> get foreign-delivery-cost (from orderbidengin)
                    // conrinue with thae same old deal logic
                    // create the in_invoice for this transporter
                    // ...

                    // check if deal activated fro this transporter
                    $query_check_transporter_deal = "SELECT deal_activated FROM togo.transportertable WHERE CustomerId = '$originalTransporterId'";
                    $result_check_transporter_deal = $this->dataBase->query($query_check_transporter_deal);
                    $row_check_transporter_deal = $this->dataBase->fetchArray($result_check_transporter_deal);
                    $deal_activated = $row_check_transporter_deal['deal_activated'];

                    // is deal ->
                    $is_deal = 0;
                    if ($deal_activated == 1/* $ClientId == 41 *//*  && false */) { // activate deal
                        $is_deal = 1;
                    }

                    ////////////////////////////////////////////////////////////////////////////

                    if ($deliveryWay == 1) {

                        if ($is_deal == 1) {
                            $this->release_escrow_deal_noneCOD($ClientId, $togo_id, $costDelivery);

                            // create in_invoice
                            $this->create_in_invoice($originalTransporterId, $togo_id, $foreign_order_barcode, $foreign_delivery_price);
                        } else {
                            $discountvalue = $this->getdiscountvalue($togo_id);

                            $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                        }
                    } else if ($deliveryWay == 2) {

                        $clientShareVal = $this->getClientShareValue($ClientId);

                        if ($is_deal == 1) {
                            if ($IsReturnedOrder == "1") {
                                $this->release_escrow($TransporterId, $togo_id, $CostLoad, 0);
                            } else {
                                $this->release_escrow_deal_COD($ClientId, $togo_id, $CostLoad, $clientShareVal, $costDelivery);
                                
                                // create in_invoice
                                $this->create_in_invoice($originalTransporterId, $togo_id, $foreign_order_barcode, $foreign_delivery_price);
                            }
                        } else {
                            $discountvalue = $this->getdiscountvalue($togo_id);

                            $result1 = $this->release_escrow($originalTransporterId, $togo_id, $costDelivery, $discountvalue);
                            if ($IsReturnedOrder == "1") {
                                $this->release_escrow($TransporterId, $togo_id, $CostLoad, 0);
                            } else {
                                $this->release_escrow($ClientId, $togo_id, $CostLoad, $clientShareVal);
                            }
                        }
                    } else if ($deliveryWay == 4) {

                        /* 
                        1- take new-cod amount from merchant to escrow
                        2- release new-cod amount to transporter

                        4-
                        if deal: {
                            1- release sell-price + invoice(sell-price) to merchant
                            2- create in-invoice(deal-price) to transporter
                        }

                        if non-deal: {
                            - release delivery-cost to transpoter
                        }
                        */

                        $this->move_to_escrow($ClientId, $togo_id, $CostLoad);
                        $this->release_escrow($TransporterId, $togo_id, $CostLoad, 0);

                        if ($is_deal == 1) {
                            $this->release_escrow_deal_noneCOD($ClientId, $togo_id, $costDelivery);
                            
                            // create in_invoice
                            $this->create_in_invoice($TransporterId, $togo_id, $foreign_order_barcode, $foreign_delivery_price);
                        } else {
                            $discountvalue = $this->getdiscountvalue($togo_id);

                            $this->release_escrow($TransporterId, $togo_id, $costDelivery, $discountvalue);
                        }
                    }  else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    
                    // $this->Log_Order($togo_id, $TransporterId, -1, $ClientId, "Order Finished By Transporter"); // to be removed

                    // $this->recordAction($originalTransporterId, -1, $togoOrderId, -1, 'Logestechs Order Delivered', "Logestechs order (" . $packageId . ") Delivered for order (" . $togoOrderId . ")", 30);

                    if (false) {
                        $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
                        togo.network_order_payment where IsPaid = 0 And OrderId ='$togo_id'";
                        $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                        $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                        if ($row_count_payment > 0) {
                            $discountvalue = $this->getdiscountvalue($togo_id);
                            while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                //$crv2 = $this->confirm_request($row['FromTransporterId'], $row['DeliveryCost']);
                                //$dttt = $this->delivToTrans($row['FromTransporterId'], $row['DeliveryCost']);
                                //$this->delivery_request($row['ToTransporterId'], $row['DeliveryCost'], $discountvalue);
                                $this->release_escrow($row['ToTransporterId'], $togo_id, $row['DeliveryCost'], $discountvalue);

                                $paymentId = $row['id'];
                                $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                $this->dataBase->query($query_Update_Payment);
                            }
                        }
                    }
                } else {
                    echo "OrderNotFound";
                    return;
                }

                $finishDate = date("Y-m-d H:i:s");

                /* edited (update order status to 'Order Finished') */
                $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$togo_id'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $togo_id, -1, 'Olivery Order Finished', "Olivery order (" . $packageId . ") delivered for order " . $togo_id, 30);

                    /* echo "finishedOrder";

                    $tokens = array();
                    $webTokens = array();

                    $customerId = $row_Get_Cost_Load['CustomerId'];
                    $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                    $Result_query = $this->dataBase->query($client_query);
                    while ($row = $this->dataBase->fetchArray($Result_query)) {
                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);

                    $data = array(
                        'orderId' => $togo_id,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'OrderFinished'
                    );

                    $title = "Order Finished";
                    $body = $transporter['AccountName'] . " finished order " . $togo_id;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body); */
                }
            } else {
                $this->oliveryRecordAction($togo_id, $packageId, $statusDelivered, 0);
                // echo "Orderdelivered!";
            }
        } else {
            echo "OrderNotFound!";
        }
    }

    public function oliveryFinishReturnOrder()
    {
        echo "olivery order finished";
    }

    public function oliveryCancelOrder($togoOrderId, $packageId)
    {
        $orderId = $this->dataBase->escape($togoOrderId);

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];

        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] == "Waiting for Bids" || $row_Check_Order['order_status'] == "Deleted") {
                echo "notActiveOrder!";
            } else {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$orderId'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $this->recordAction($originalTransporterId, -1, $togoOrderId, -1, 'Olivery Order Canceled', "Olivery order (" . $packageId . ") Canceled for order (" . $togoOrderId . ")", 30);

                    $ClientId = $this->GetClientBidEnginOdoo($orderId);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, 0);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($orderId);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0); // to check ********
                        $ff2 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0); // to check ********
                    } else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    // $this->Log_Order($orderId, $originalTransporterId, -1, $ClientId, "Order Canceled By Al-Barq"); // to check ********

                    // what if order was assigned and wating to be picked up !!!! // to check ********
                } else {
                    echo "OrderNotFound1";
                    return;
                }

                $query_Update = "Update togo.OrderBidEngin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {
                    echo "orderDeleted";
                } else {
                    echo "OrderStatusNotUpdated";
                }
            }
        } else {
            echo "OrderNotFound2";
        }
    }

    public function oliveryStuckOrder()
    {
    }

    public function oliveryReturnOrder()
    {
        echo "olivery order returned";
    }

    public function oliveryPickupOrder($togoOrderId, $packageId)
    {
        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $transporterId = $row_getCompanyId['companyId'];

        $query_Check_Order = "Select order_status from togo.OrderBidEngin where id='$togoOrderId'";
        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $togo_order_status = $row_Check_Order['order_status'];

        if ($togo_order_status != "Bid Accepted") {
            $this->recordAction($transporterId, -1, $togoOrderId, -1, 'Olivery Order Picked Up', "Olivery order (" . $packageId . ") Picked Up for order (" . $togoOrderId . ")", 30);
            return;
        }

        $pickupDate = date("Y-m-d H:i:s");
        $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$togoOrderId'";
        $result = $this->dataBase->query($query);

        if ($result == true) {

            /* edited (record the action) */
            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
            $this->recordAction($transporterId, -1, $togoOrderId, -1, 'Olivery Order Picked Up', "Olivery order (" . $packageId . ") Picked Up for order (" . $togoOrderId . ")", 30);

            /* edited - timeline (add pickup date to a transporter in the timeline) */
            $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$pickupDate' where order_id='$togoOrderId' and transporter_id='$transporterId'";
            $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

            /* edited (add/update pickup date in orderbidengin) */
            $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$pickupDate', order_status='Out for Delivery' where id='$togoOrderId'";
            $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

            echo "Updated";

            $tokens = array();
            $webTokens = array();

            $query = "select obe.customerId as customerId, oba.ReceiverAddressNum, c.token, c.WebToken, c.phonenumber, oba.SenderAddressId, oba.id as orderAddId
                             from togo.orderbidengin as obe
                             inner join togo.orderbidaddress as oba on obe.id = oba.IdOrderBidEngin
                             inner join togo.customer as c on obe.customerId = c.id
                             where obe.id='$togoOrderId'";
            $result = $this->dataBase->query($query);

            while ($row = $this->dataBase->fetchArray($result)) {
                $transporter = $this->getTransporterNameAndImage($transporterId);

                array_push($tokens, $row['token']);
                array_push($webTokens, $row['WebToken']);

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $data = array(
                    'orderId' => $togoOrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderPickedUp'
                );

                $title = "Order Picked Up";
                $body = $transporter['AccountName'] . " picked up order " . $togoOrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                $ch = curl_init();
                $phoneNumber = "+972" . substr($row['ReceiverAddressNum'], 1);

                $msg = urlencode("Order #$togoOrderId has been picked up, to track the shipment, use our app www.google.com");
                // to check (send message method)

                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phoneNumber&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                curl_close($ch);
            }
        } else {
            echo "NotUpdated";
        }
    }

    public function oliveryRecordAction($togoOrderId, $packageId, $action_type, $cod)
    {
        $togo_id = $togoOrderId;

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        if ($action_type == "ALTER_COD" && $cod != "") {
            $notification_title = "Olivery Order COD Updated";
            $notification_description = "Olivery shipment (" . $packageId . ") COD changed to [" . $cod . "] for order (" . $togo_id . ")";
        } else {
            $notification_title = "Olivery Order Status Updated";
            $notification_description = "Olivery shipment (" . $packageId . ") [" . $action_type . "] for order (" . $togo_id . ")";
        }

        $this->recordAction($TransporterId, -1, $togo_id, -1, $notification_title, $notification_description, 30);

        if ($action_type == "rejected" || ($action_type == "ALTER_COD" && $cod != "")) {
            $query_markOrder = "update togo.orderbidengin set foreign_order_error = 1 where id = '$togoOrderId'";
            $result_markOrder = $this->dataBase->query($query_markOrder);
        }

        // get client id
        $query_getClientId = "select CustomerId from togo.orderbidengin where id = '$togo_id'";
        $result_getClientId = $this->dataBase->query($query_getClientId);
        $row_getClientId = $this->dataBase->fetchArray($result_getClientId);

        $clientId = $row_getClientId['CustomerId'];

        $query_getTokens = "select Token, WebToken from togo.customer where id = '$clientId'";
        $result_getTokens = $this->dataBase->query($query_getTokens);

        $row_getTokens = $this->dataBase->fetchArray($result_getTokens);

        $tokens = array();
        $webTokens = array();

        if ($row_getTokens['Token'] != null) {
            array_push($tokens, $row_getTokens['Token']);
        }

        if ($row_getTokens['WebToken'] != null) {
            array_push($webTokens, $row_getTokens['WebToken']);
        }

        $webTokens = array();
        $tokens = array();

        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
            if ($row['adminTokenNotify'] != null) {
                array_push($webTokens, $row['adminTokenNotify']);
            }
        }

        $transporter = $this->getTransporterNameAndImage($TransporterId);
        $data = array(
            'orderId' => $togo_id,
            'transporterName' => $transporter['AccountName'],
            'transporterImageUrl' => $transporter['PersonalImgPath'],
            'intent' => 'AlbarqStatusUpdated'
        );

        $title = "Olivery Order Status Updated";
        $body = $transporter['AccountName'] . " - [" . $action_type . "] for order " . $togo_id;

        $this->sendFCMNotification(-1, $webTokens, $data, $notification_title, $notification_description);
    }

    /* 
        (end) Olivery APIs #####################################################################################################
    */

    /* 
        (begin) Admin APIs #####################################################################################################
    */

    // --------------------------- Admin Home APis ---------------------------

    // get number of transporters
    public function GetAllTransportersNum($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            $query = "select count(*) as NumberOfTransporters from togo.customer as cus inner join togo.transportertable as tt on cus.id=tt.CustomerId where cus.IsTransporter = 1 and cus.deleted = 0";

            $result = $this->dataBase->query($query);
            $row = $this->dataBase->fetchArray($result);

            echo json_encode(array("NumberOfTransporters" => $row['NumberOfTransporters']));
        } else {
            echo "TokenError";
        }
    }

    // get number of clients
    public function GetAllClientsNum($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $query = "select count(*) as NumberOfClients from togo.customer as cus inner join togo.clienttable as tt inner join togo.clientbusinesstable as bb on cus.id=tt.CustomerId and cus.id=bb.CustomerId where cus.IsClient = 1 and cus.deleted = 0";

            $result = $this->dataBase->query($query);
            $row = $this->dataBase->fetchArray($result);

            echo json_encode(array("NumberOfClients" => $row['NumberOfClients']));
        } else {
            echo "TokenError";
        }
    }

    // get orders counts
    public function getOrdersCount($id, $token) {
        if ($this->AdminCheckToken($id, $token) == true) {

            // get total new orders
            $query_get_new_num = "select count(*) as newOrdersCount from togo.orderbidengin as engin where engin.order_status = 'Waiting for Bids'";
            $result_get_new_num = $this->dataBase->query($query_get_new_num);
            $row_get_new_num = $this->dataBase->fetchArray($result_get_new_num);
            $newOrdersCount = $row_get_new_num['newOrdersCount'];

            // echo $newOrdersCount;

            // get total active orders
            $query_get_active_num = "select count(*) as activeOrdersCount from togo.orderbidengin as engin where engin.Orderfinished is NULL and (engin.IsDeleted Is NULL Or engin.IsDeleted = 0) and (engin.order_status = 'Bid Accepted' or engin.order_status = 'Out for Delivery')";
            $result_get_active_num = $this->dataBase->query($query_get_active_num);
            $row_get_active_num = $this->dataBase->fetchArray($result_get_active_num);
            $activeOrdersCount = $row_get_active_num['activeOrdersCount'];

            // echo $activeOrdersCount;

            // get total finished orders
            $query_get_finished_num = "select count(*) as finishedOrdersCount from togo.orderbidengin as engin where engin.Orderfinished = 1 and (engin.IsDeleted Is NULL Or engin.IsDeleted = 0)";
            $result_get_finished_num = $this->dataBase->query($query_get_finished_num);
            $row_get_finished_num = $this->dataBase->fetchArray($result_get_finished_num);
            $finishedOrdersCount = $row_get_finished_num['finishedOrdersCount'];

            // echo $finishedOrdersCount;

            echo json_encode(array("newOrdersCount" => $newOrdersCount, "activeOrdersCount" => $activeOrdersCount, "finishedOrdersCount" => $finishedOrdersCount));
        } else {
            echo "TokenError";
        }
    }

    public function getTotalTempBalance($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $totalBalance = $this->getTempBalance();

            echo json_encode($totalBalance);
        } else {
            echo "TokenError";
        }
    }

    public function getUserTotalTempBalance($id, $token, $userId)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $userBalance = $this->getUserTempBalance($userId);

            echo json_encode($userBalance);
        } else {
            echo "TokenError";
        }
    }

    public function getErrMsg($id, $token, $orderId)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $query = "select description from togo.actionsrecordstb where order_id = '$orderId' order by id desc limit 1";
            $result = $this->dataBase->query($query);
            $row = $this->dataBase->fetchArray($result);

            echo json_encode($row['description']);

        } else {
            echo "TokenError";
        }
    }

    // get total escrow balance
    public function getTotalBalance($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $odooApi = new OdooApi();

            $params = json_encode(array(
                "jsonrpc" => "2.0",
                "params" => array("account_id" => 372)
            ));
            $data = $odooApi->callOdooUrl("/account/get_account_balance", "POST", $params);

            echo json_encode(array("server_response" => $data));
        } else {
            echo "TokenError";
        }
    }

    // get total wallets balance
    public function getTotalWalletsBalance($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == false) {
            $odooApi = new OdooApi();

            $query_getAllCustomers = 'select id from customer';
            $result_getAllCustomers = $this->dataBase->query($query_getAllCustomers);

            $totalBalance = 0;

            while ($row = $this->dataBase->fetchArray($result_getAllCustomers)) {
                $totalBalance += $this->getBalance($row['id']);
            }

            // $this->getBalance($customerId);

            echo json_encode(array("server_response" => $totalBalance));
        } else {
            echo "TokenError";
        }
    }

    // get all new orders
    public function getAllNewOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllNewOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all new food orders
    public function admin_GetAllNewFoodOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllNewFoodOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all in-process orders
    public function getAllActiveOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllActiveOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all in-process food orders
    public function admin_GetAllActiveFoodOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllActiveFoodOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all marked orders
    public function GetAllMarkedOrders($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->GetAllMarkedOrders();

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all delivered orders
    public function getAllFinishedOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllFinishedOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all food delivered orders
    public function admin_GetAllFinishedFoodOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->getAllFinishedFoodOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all canceled orders
    public function GetAllDeletedOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->GetAllDeletedOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all canceled food orders
    public function admin_GetAllDeletedFoodOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->GetAllDeletedFoodOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all returned/stuck orders
    public function GetAllReturnedOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->GetAllReturnedOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // get all exception/error-orders
    public function GetAllExceptionOrders($id, $token, $searchStr, $filterDate)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            
            $searchStr = $this->dataBase->escape($searchStr);
            $searchStr = $this->dataBase->escape($searchStr);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $orders = $adminService->GetAllExceptionOrders($searchStr, $filterDate);

            echo json_encode(array("orders_list" => $orders, "NumberOfOrders" => count($orders)));
        } else {
            echo "TokenError";
        }
    }

    // --------------------------- Admin System Actions APIs ---------------------------

    // get all verifications codes
    public function getAllVerifyCodes($id, $token)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {
            $query_get_codes = "select * from togo.verifycodestable where toShow = 1 order by id desc";

            $codes = array();
            $result = $this->dataBase->query($query_get_codes);

            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($codes, $row);
            }
            echo json_encode(array("codes_list" => $codes));
        } else {
            echo "TokenError";
        }
    }

    // get all system actions
    public function getRecordsActions($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $query_get_records = "select * from togo.actionsrecordstb order by id desc";

            $records = array();
            $result = $this->dataBase->query($query_get_records);
            $row_count_records = $this->dataBase->numRows($result);

            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($records, $row);
            }
            echo json_encode(array("records_list" => $records, "NumberOfRecords" => $row_count_records));
        } else {
            echo "TokenError";
        }
    }

    // get all recharge-balance actions
    public function getAllBalanceChargeActions($id, $token)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {
            $query_get_recharges = "select * from togo.balance_charge_actions order by id desc";

            $recharges = array();
            $result = $this->dataBase->query($query_get_recharges);

            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($recharges, $row);
            }
            echo json_encode(array("recharges_list" => $recharges));
        } else {
            echo "TokenError";
        }
    }

    // --------------------------- Admin Order details APIs ---------------------------

    // get order details
    public function getOrderDetailsForAdmin($OrderId, $id, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->AdminCheckToken($id, $TokenDevice) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $OrderDetailsArray = $adminService->getOrderDetailsForAdmin($OrderId);

            echo json_encode(array("server_response" => $OrderDetailsArray));
        } else {
            echo "TokenError";
        }
    }

    // remove order foriegn error mark
    public function AdminRemoveAddErrorMark($OrderId, $status, $id, $TokenDevice)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $TokenDevice = $this->dataBase->escape($TokenDevice);

        if ($this->AdminCheckToken($id, $TokenDevice) == true) {

            /* echo $status;
            return; */

            if ($status == 1) {
                $marked = 1;
            } else {
                $marked = 0;
            }

            $query = "update togo.orderbidengin set foreign_order_error = $marked where id = '$OrderId'";
            $result = $this->dataBase->query($query);

            if ($result) {
                echo "done";
            } else {
                echo "error";
            }
        } else {
            echo "TokenError";
        }
    }

    // change new order cod
    // ...

    // change new order delivery price
    // ...

    // change active order cod
    public function alterActiveOrderCOD($orderId, $newCOD, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            /* echo " - function disabled error - ";
            return; */

            /* echo "order: " . $orderId . " - new COD: " . $newCOD;
            return; */

            // get old cod amount & trtamsporter id & new cod
            $query_get_old_cod_and_transId = "SELECT CostLoad AS cod, DeliveryId AS transId, CustomerId AS merchantId, newCod FROM togo.orderbidengin WHERE id = '$orderId'";
            $result_get_old_cod_and_transId = $this->dataBase->query($query_get_old_cod_and_transId);

            if (!$result_get_old_cod_and_transId) {
                echo " - get_old_cod query error - ";
                return;
            }

            $num_row_get_old_cod_and_transId = $this->dataBase->numRows($result_get_old_cod_and_transId);

            if ($num_row_get_old_cod_and_transId == 0) {
                echo " - order (" . $orderId . ") not found - ";
                return;
            }

            $row_get_old_cod_and_transId = $this->dataBase->fetchArray($result_get_old_cod_and_transId);
            $old_cod = $row_get_old_cod_and_transId['cod'];
            $transporter_id = $row_get_old_cod_and_transId['transId'];
            $merchant_id = $row_get_old_cod_and_transId['merchantId'];

            ///////////////////////// old logic
            
            /* // check transorter' balance (+old cod amount)
            $transporter_balance = $this->getBalance($transporter_id);
            $total_amount = $transporter_balance + $old_cod;

            if ($total_amount < $newCOD) {
                echo " - transporter balance (+old cod: " . $total_amount . ") is not enough - ";
                return;
            }
            // return the old cod amount to transporter
            // -> release escrow (to transporter' account) with old cod amount with 0 comission
            $this->release_escrow($transporter_id, $orderId, $old_cod, 0);
            
            // move the cod amount to escrow
            // -> debit transporter' account with the new cod amount
            $this->move_to_escrow($transporter_id, $orderId, $newCOD); */

            /////////////////////////

            ///////////////////////// new logic (old cod - new cod = the amount that will be released to the transporter account)
            
            // get new cod amount
            $newCod = $row_get_old_cod_and_transId['newCod'];
            // $newCod = abs($newCod); (canceled because of the following logic)
            
            // if the new-cod value is in minus then it will be taken from the merchant and given to the transporter
            // if it is positive value the old cod will be changed to this new value

            if ($newCod == null) {
                echo " - new cod amount is null error - ";
                return;
            }

            // (new-cod is in minus -> debit merchant & cerdit transporter)
            
            ($newCod < 0) ? $res = "negative" : $res = "positive";

            if ($res == "negative") {

                /* echo " - this functionality is not activiated error - ";
                return; */

                // check merchant balance before moving to escrow

                $res = $this->BalanceIsEnough($merchant_id, $newCod);
                if ($res != 1) {
                    echo " - insufficient merchant' balance error - ";
                    return;
                }

                $newCodAbs = abs($newCod);
                $this->move_to_escrow($merchant_id, $orderId, $newCodAbs); // why out ?!!!! (because it is a returned order [created as returned])
                $this->release_escrow($transporter_id, $orderId, $newCodAbs, 0); // not now, when finish order (but howwwww!!!!)

                // release delivery fee to transporter

                ////////////////////////////////////////////////////////////////////

                // get delivery-price
                $query_get_delivery_price = "SELECT CostDelivery FROM togo.deliveryacceptordertable WHERE IdOrder = '$orderId' AND IdTransporter = '$transporter_id' LIMIT 1";
                $result_get_delivery_price = $this->dataBase->query($query_get_delivery_price);

                if (!$result_get_delivery_price) {
                    echo " - get_delivery_price query error - ";
                    return;
                }

                $row_count_get_delivery_price = $this->dataBase->numRows($result_get_delivery_price);
                if ($row_count_get_delivery_price == 0) {
                    echo " - delivery price not found error - ";
                    return;
                }

                $row_get_delivery_price = $this->dataBase->fetchArray($result_get_delivery_price);
                $deliveryPrice = $row_get_delivery_price['CostDelivery'];

                // if deal -> perform deal logic:
                // release delivery cost to merchant & create invoice with the delivery cost
                // create in_invoice for the transporter

                // check if deal activated fro this transporter
                $query_check_transporter_deal = "SELECT deal_activated FROM togo.transportertable WHERE CustomerId = '$transporter_id'";
                $result_check_transporter_deal = $this->dataBase->query($query_check_transporter_deal);
                
                if (!$result_check_transporter_deal) {
                    echo " - check_transporter_deal query error - ";
                    return;
                }
                
                $row_check_transporter_deal = $this->dataBase->fetchArray($result_check_transporter_deal);
                $deal_activated = $row_check_transporter_deal['deal_activated'];

                $is_deal = 0;
                if ($deal_activated == 1) { // activate deal
                    $is_deal = 1;

                    $query_get_is_deal = "SELECT 
                    foreignOrder.loges_barcode AS foreign_order_barcode,
                    engin.foreign_delivery_price
                    FROM togo.orderbidengin AS engin 
                    INNER JOIN togo.foreign_order_id_conversion AS foreignOrder ON engin.id = foreignOrder.togoOrderId
                    WHERE engin.id = '$orderId'";
                    $result_get_is_deal = $this->dataBase->query($query_get_is_deal);
                    $row_get_is_deal = $this->dataBase->fetchArray($result_get_is_deal);

                    $foreign_order_barcode = $row_get_is_deal['foreign_order_barcode'];
                    $foreign_delivery_price = $row_get_is_deal['foreign_delivery_price'];
                }

                $clientShareVal = $this->getClientShareValue($merchant_id);

                if ($is_deal == 1) {
                    // release escrow to client -> journal entry with the delivery price & invoice with the delivery price
                    // (same as in release_escrow_deal_COD burt wihtout the cod journal entry and its 1% invoice)

                    $this->release_escrow_deal_delivery_price($merchant_id, $orderId, $deliveryPrice);
                        
                    // create in_invoice
                     $this->create_in_invoice($transporter_id, $orderId, $foreign_order_barcode, $foreign_delivery_price);
                } else {
                    $discountvalue = $this->getdiscountvalue($orderId);
                    $this->release_escrow($transporter_id, $orderId, $deliveryPrice, $discountvalue);
                }

                // update newCod value in DB to null 
                // (CostLoad = '$newCod' -> no, because it will be released to merchant when finsihing the order and it is already given to the merchant)
                $finishDate = date("Y-m-d H:i:s");
                $query_remove_new_cod_record = "UPDATE togo.orderbidengin SET newCod = null, CostLoad = '$newCod', Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' WHERE id = '$orderId'";
                $result_remove_new_cod_record = $this->dataBase->query($query_remove_new_cod_record);

                if (!$result_remove_new_cod_record) {
                    echo " - remove_new_cod_record query error - ";
                    return;
                }

                echo " - cod altered successfully - ";

                $this->addNotification(
                    $orderId,
                    $merchant_id,
                    "Order " . $orderId . " Finished",
                    "تم إنهاء الطلب " . $orderId,
                    "",
                    ""
                );

                return;
            }

            // (new-cod is positive value -> change the old cod amount)

            $difference = $old_cod - $newCod;

            $this->release_escrow($transporter_id, $orderId, $difference, 0);
           
            // update newCod value in DB to null
            $query_remove_new_cod_record = "UPDATE togo.orderbidengin SET newCod = null WHERE id = '$orderId'";
            $result_remove_new_cod_record = $this->dataBase->query($query_remove_new_cod_record);

            if (!$result_remove_new_cod_record) {
                echo " - remove_new_cod_record query error - ";
                return;
            }

            /////////////////////////

            // change cod value in db
            // -> update orderbidengin & deliveryacceptordertable with the new cod amount
            $query_update_orderbidengin_cod = "UPDATE togo.orderbidengin SET CostLoad='$newCod' WHERE id = '$orderId'";
            $result_update_orderbidengin_cod = $this->dataBase->query($query_update_orderbidengin_cod);

            if (!$result_update_orderbidengin_cod) {
                echo " - update_orderbidengin_cod query error - ";
                return;
            }

            /* $query_update_deliveryacceptordertable_cod = "UPDATE togo.deliveryacceptordertable SET CostDelivery='$newCOD' WHERE IdOrder = '$orderId' AND IdTransporter = '$transporter_id'";
            $result_update_deliveryacceptordertable_cod = $this->dataBase->query($query_update_deliveryacceptordertable_cod);

            if (!$result_update_deliveryacceptordertable_cod) {
                echo " - update_deliveryacceptordertable_cod query error - ";
                return;
            } */

            // record the action
            $this->recordAction($adminId, -1, $orderId, -1, '', "Order COD changed from [" . $old_cod . "] to [" . $newCOD . "] by Admin", 33);

            echo " - order [" . $orderId . "] COD changed from (" . $old_cod . ") to (" . $newCOD . ") successfully - ";

        } else {
            echo "TokenError";
        }
    }
    
    // undo canceled order
    public function undoCancledActiveOrder($orderId, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            // check if it was an active order by checking transporter' id

            // get cod, delivery-cost, transporter' id, merchant' id
            
            $query_get_order_info = "SELECT engin.CostLoad AS cod, engin.deliveryWay, engin.DeliveryId AS transporterId, engin.CustomerId AS merchantId, deliverOffers.CostDelivery AS deliveryPrice 
                                        FROM togo.orderbidengin AS engin
                                        INNER JOIN togo.deliveryacceptordertable AS deliverOffers ON engin.id = deliverOffers.IdOrder AND deliverOffers.IdTransporter = engin.DeliveryId
                                        WHERE engin.id = '$orderId' AND engin.order_status = 'Deleted'";
            $result_get_order_info = $this->dataBase->query($query_get_order_info);

            if (!$result_get_order_info) {
                echo " - get_order_info query error - ";
                return;
            }
            
            $row_count_get_order_info = $this->dataBase->numRows($result_get_order_info);

            if ($row_count_get_order_info == 0) {
                echo " - canceled order not found error - ";
                return;
            }

            $row_get_order_info = $this->dataBase->fetchArray($result_get_order_info);
            $cod = $row_get_order_info['cod'];
            $deliveryPrice = $row_get_order_info['deliveryPrice'];
            $merchantId = $row_get_order_info['merchantId'];
            $transporterId = $row_get_order_info['transporterId'];
            $deliveryWay = $row_get_order_info['deliveryWay'];

            // move cod to escrow from transporter' account
                // 1- check transporter' balance (if can move cod amount)
                // 2- move to escrow

            // move delivery-cost to escrow from merchant' account
                // 1- check merchant' balance (if can move delivery-cost amount)
                // 2- move to escrow

            // check transporter' balance with cod
            $transporter_balance = $this->getBalance($transporterId);

            if ($transporter_balance < $cod) {
                echo " - transporter balance (" . $transporter_balance . ") is not enough error - ";
                return;
            }

            // check merchant' balance with delivery-cost
            $merchant_balance = $this->getBalance($merchantId);

            if ($merchant_balance < $deliveryPrice) {
                echo " - merchant balance (" . $merchant_balance . ") is not enough error - ";
                return;
            }

            // update order status
            $query_update_order_status = "UPDATE togo.orderbidengin SET IsDeleted = NULL, order_status='Bid Accepted' WHERE id = '$orderId'";
            $result_update_order_status = $this->dataBase->query($query_update_order_status);

            if (!$result_update_order_status) {
                echo " - update_order_status query error error - ";
                return;
            }

            // record the action
            $this->recordAction($adminId, -1, $orderId, -1, '', "Order Uncanceled by Admin", 32);

            // echo "move to escrow: (" . $cod . ") from transporter (" . $transporterId . ") ---- (" . $deliveryPrice . ") from merchant (" . $merchantId . ") ---- for order (" . $orderId . ")";

            if ($deliveryWay == 4) {
                $this->move_to_escrow($merchantId, $orderId, $cod);
                $this->move_to_escrow($merchantId, $orderId, $deliveryPrice);
            } else {
                $this->move_to_escrow($transporterId, $orderId, $cod);
                $this->move_to_escrow($merchantId, $orderId, $deliveryPrice);
            }

            echo " - order uncanceled successfully - ";
        } else {
            echo "TokenError";
        }
    } 

    // change active order delivery price
    // ...

    // get order actions
    public function getOrderActionsForAdmin($orderId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $recordsArray = $adminService->getOrderActionsForAdmin($orderId);

            echo json_encode(array("records_list" => $recordsArray, "NumberOfRecords" => count($recordsArray)));
        } else {
            echo "TokenError";
        }
    }

    // get financial transactions for each customer for a specific order
    public function transactionsByOrderForAdmin($customerId, $orderId, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transactionsResponse = $adminService->transactionsByOrder($customerId, $orderId);

            echo json_encode($transactionsResponse);
        } else {
            echo "TokenError";
        }
    }

    // get order transportation timeline
    public function getTimeLineForAdmin($orderId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $timelineArray = $adminService->getTimeLineForAdmin($orderId);

            echo json_encode(array("timeline" => $timelineArray));
        } else {
            echo "TokenError";
        }
    }

    // force delete active order (even picked up orders, the function name need to be changed)
    public function deleteOrderBeforePickupForAdmin($orderId, $adminId, $adminToken)
    {
        $orderId = $this->dataBase->escape($orderId);
        $adminId = $this->dataBase->escape($adminId);
        $adminToken = $this->dataBase->escape($adminToken);

        if ($this->AdminCheckToken($adminId, $adminToken) == true) {
            $query_Check_Order = "Select * from togo.OrderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

            $result_Check_Order = $this->dataBase->query($query_Check_Order);
            $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
            $row_count_Order = $this->dataBase->numRows($result_Check_Order);
            $originalTransporterId = $row_Check_Order['DeliveryId'];

            $ClientId = $this->GetClientBidEnginOdoo($orderId);

            if ($row_count_Order > 0) {
                if ($row_Check_Order['order_status'] == "Waiting for Bids" || $row_Check_Order['order_status'] == "Deleted") {
                    echo "notActiveOrder!";
                } else {
                    $this->OdooDb();
                    $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$originalTransporterId'";
                    $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$orderId'";
                    $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                    if ($row_count_Load > 0) {

                        $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                        $CostLoad = $row_Get_Cost_Load['CostLoad'];



                        if ($deliveryWay == 1) {
                            $discountvalue = $this->getdiscountvalue($orderId);

                            $result1 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0);
                            print_r($result1);
                        } else if ($deliveryWay == 2) {

                            $discountvalue = $this->getdiscountvalue($orderId);
                            $clientShareVal = $this->getClientShareValue($ClientId);
                            // $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0); // to check ********
                            $ff2 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0);
                            $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0);
                        }/*  else if ($deliveryWay == 3) {
                            $discountvalue = $this->getdiscountvalue($orderId);
                            $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                        } */ else if ($deliveryWay == 4) {
                            $this->release_escrow($ClientId, $orderId, $costDelivery, 0);
                            $this->release_escrow($ClientId, $orderId, $CostLoad, 0);
                        } else {
                            echo "deliveryWayNotFound";
                            return;
                        }
                        // $this->Log_Order($orderId, $originalTransporterId, -1, $ClientId, "Order Canceled By Admin"); // to check ********

                        // to be added and edited -> return to each assigner transporter the delivery cost for the assignee transporter & the load cost will be returned to the last transporter 


                        // this is disabled (TODO) **********


                        if (false) {
                            $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
                            togo.network_order_payment where IsPaid = 0 And OrderId ='$orderId'";
                            $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                            $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                            if ($row_count_payment > 0) {
                                $discountvalue = $this->getdiscountvalue($orderId);

                                /*  while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                    $this->release_escrow($row['ToTransporterId'], $orderId, $row['DeliveryCost'], $discountvalue);

                                    $paymentId = $row['id'];
                                    $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                    $this->dataBase->query($query_Update_Payment);
                                } */

                                $tempTransportersArr = array();

                                $i = 0;
                                while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                    // array_push($tempTransportersArr, array('ToTransporterId' => $row['ToTransporterId'], 'DeliveryCost' => $row['DeliveryCost']));

                                    $this->release_escrow($row['FromTransporterId'], $orderId, $row['DeliveryCost'], 0);

                                    if (($i + 1) == $row_count_payment) {
                                        $this->release_escrow($row['ToTransporterId'], $orderId, $CostLoad, 0);
                                    }

                                    $i++;
                                }

                                /* for ($i = 0; $i < count($tempTransportersArr); $i++) {

                                    $this->release_escrow($tempTransportersArr[$i]['FromTransporterId'], $orderId, $tempTransportersArr[$i]['DeliveryCost'], 0);

                                    if (($i + 1) == count($tempTransportersArr)) {
                                        $this->release_escrow($tempTransportersArr[$i]['ToTransporterId'], $orderId, $CostLoad, 0);
                                    }
                                } */
                                
                            } else {
                                $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0);
                            }
                        }

                        $query_unmarkOrder = "UPDATE togo.orderbidengin set foreign_order_error = 0 where id = '$orderId'";
                        $result_unmarkOrder = $this->dataBase->query($query_unmarkOrder);

                        // goho
                    } else {
                        echo "OrderNotFound1";
                        return;
                    }

                    $query_Update = "UPDATE togo.orderbidengin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                    $result_Update_Order = $this->dataBase->query($query_Update);
                    if ($result_Update_Order) {

                        $this->recordAction($adminId, -1, $orderId, -1, '', "Order Canceled by Admin", 23);

                        $this->addNotification(
                            $orderId,
                            $ClientId,
                            "Order " . $orderId . " Canceled",
                            "تم إالغاء الطلب " . $orderId,
                            "",
                            ""
                        );

                        // echo "finishedOrder";

                        $tokens = array();
                        $webTokens = array();

                        $customerId = $row_Get_Cost_Load['CustomerId'];
                        $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id in ('$customerId', '$originalTransporterId')";

                        $Result_query = $this->dataBase->query($client_query);
                        while ($row = $this->dataBase->fetchArray($Result_query)) {
                            if ($row['TokenNotify'] != null) {
                                array_push($tokens, $row['TokenNotify']);
                            }

                            if ($row['webTokenNotifiy'] != null) {
                                array_push($webTokens, $row['webTokenNotifiy']);
                            }
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $data = array(
                            'orderId' => $orderId,
                            'adminId' => $adminId,
                            'intent' => 'OrderCanceled'
                        );

                        $title = "Order Canceled";
                        $body = "Admin " . $adminId . " canceled order " . $orderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                        // delete Logestechs new order -------------------------------------------------------------------------------------------------------------------------------------

                        // get transporter username & password & company id

                        $query_get_transporter_info = "select * from togo.logestechs_transporter_info where togo_trans_id = '$originalTransporterId'";
                        $result_get_transporter_info = $this->dataBase->query($query_get_transporter_info);
                        $row_get_transporter_info = $this->dataBase->fetchArray($result_get_transporter_info);

                        $username = $row_get_transporter_info['username'];
                        $password = $row_get_transporter_info['password'];
                        $companyId = $row_get_transporter_info['company_id'];

                        // get foreign order id

                        $query_get_foreign_order_id = "select foreignOrderId from togo.foreign_order_id_conversion where togoOrderId = '$orderId'";
                        $result_get_foreign_order_id = $this->dataBase->query($query_get_foreign_order_id);
                        $row_get_foreign_order_id = $this->dataBase->fetchArray($result_get_foreign_order_id);

                        $foreign_order_id = $row_get_foreign_order_id['foreignOrderId'];

                        $data = '{
                            "email": "' . $username . '",
                            "password": "' . $password . '"
                        }';

                        /*  echo $data;
                        return; */

                        $curl = curl_init();

                        curl_setopt_array($curl, array(
                            CURLOPT_URL => 'https://apisv2.logestechs.com/api/guests/' . $companyId . '/packages/' . $foreign_order_id . '/cancel',
                            CURLOPT_RETURNTRANSFER => true,
                            CURLOPT_ENCODING => '',
                            CURLOPT_MAXREDIRS => 10,
                            CURLOPT_TIMEOUT => 0,
                            CURLOPT_FOLLOWLOCATION => true,
                            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                            CURLOPT_CUSTOMREQUEST => 'PUT',
                            CURLOPT_POSTFIELDS => $data,
                            CURLOPT_HTTPHEADER => array(
                                'Content-Type: application/json',
                            ),
                        ));

                        $response = curl_exec($curl);

                        curl_close($curl);

                        // echo $response . " \n ########################## \n";

                        // record action and send notification

                        // -----------------------------------------------

                        // add logestechs id (order foreign_id) to foreign-transporter-companies-ids-conversion-table

                        $response_data = json_decode($response);

                        // $this->recordDebug("logestechs order canceled", $CustomerId, $originalTransporterId, $orderId);

                        // $response_data['test_time'] = date("Y-m-d H:i:s");
                        // $response_data['test_order_id'] = $orderId;

                        file_put_contents("testCancel.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);
                    } else {
                        echo "OrderStatusNotUpdated";
                    }
                }
            } else {
                echo "OrderNotFound2";
            }

            // ------------------------------------------------

        } else {
            echo "TokenError";
        }
    }

    // delete new orders
    public function deleteNewOrderForAdmin($orderId, $adminId, $adminToken)
    {
        $orderId = $this->dataBase->escape($orderId);
        $adminId = $this->dataBase->escape($adminId);
        $adminToken = $this->dataBase->escape($adminToken);

        if ($this->AdminCheckToken($adminId, $adminToken) == true) {
            $query_Check_Order = "Select * from togo.orderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

            $result_Check_Order = $this->dataBase->query($query_Check_Order);
            $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
            $row_count_Order = $this->dataBase->numRows($result_Check_Order);
            $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];

            if ($row_count_Order > 0) {
                if ($row_Check_Order['order_status'] !== "Waiting for Bids") {
                    echo "orderAlreadyAccepted!";
                } else {

                    $query_Get_ClientId = "Select CustomerId From togo.orderBidEngin where id='$orderId'";
                    $result_Get_ClientId = $this->dataBase->query($query_Get_ClientId);
                    $row_count_ClientId = $this->dataBase->numRows($result_Get_ClientId);

                    if ($row_count_ClientId > 0) {

                        $row_Get_ClientId = $this->dataBase->fetchArray($result_Get_ClientId);
                    } else {
                        echo "OrderNotFound1";
                        return;
                    }

                    $query_Update = "Update togo.OrderBidEngin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                    $result_Update_Order = $this->dataBase->query($query_Update);
                    if ($result_Update_Order == true) {

                        $this->recordAction($adminId, -1, $orderId, -1, '', "Order Canceled by Admin", 23);

                        echo "finishedOrder";

                        $tokens = array();
                        $webTokens = array();

                        $customerId = $row_Get_ClientId['CustomerId'];
                        $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.customer where id = '$customerId'";

                        $Result_query = $this->dataBase->query($client_query);
                        while ($row = $this->dataBase->fetchArray($Result_query)) {
                            if ($row['TokenNotify'] != null) {
                                array_push($tokens, $row['TokenNotify']);
                            }

                            if ($row['webTokenNotifiy'] != null) {
                                array_push($webTokens, $row['webTokenNotifiy']);
                            }
                        }

                        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                            if ($row['adminTokenNotify'] != null) {
                                array_push($webTokens, $row['adminTokenNotify']);
                            }
                        }

                        $data = array(
                            'orderId' => $orderId,
                            'adminId' => $adminId,
                            'intent' => 'OrderCanceled'
                        );

                        $title = "Order Canceled";
                        $body = "Admin " . $adminId . " canceled order " . $orderId;
                        // $image = $transporter['PersonalImgPath'];

                        $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                        $this->addNotification(
                            $orderId,
                            $customerId,
                            "Order " . $orderId . " Canceled",
                            "تم إالغاء الطلب " . $orderId,
                            "",
                            ""
                        );
                    } else {
                        echo "OrderStatusNotUpdated";
                    }
                }
            } else {
                echo "OrderNotFound2";
            }

            // ------------------------------------------------

        } else {
            echo "TokenError";
        }
    }

    // force finish active order (this function added to finish unfinished foreign orders like Al-Barq orders, this error might happen when order is finished on the foreign system but not togo system)
    public function forceFinishOrder($orderId, $adminId, $AdminToken)
    {
        if ($this->AdminCheckToken($adminId, $AdminToken) == true) {

            $query_checkOrder = "select * from togo.orderbidengin where id = '$orderId'";
            $result_checkOrder = $this->dataBase->query($query_checkOrder);
            $row_checkOrder_num = $this->dataBase->numRows($result_checkOrder);

            if ($row_checkOrder_num > 0) {

                // 1- mark order as finished
                // 2- release escrow

                $row_checkOrder = $this->dataBase->fetchArray($result_checkOrder);

                $deliveryWay = $row_checkOrder['deliveryWay'];
                $TransporterId = $row_checkOrder['DeliveryId'];
                $CostLoad = $row_checkOrder['CostLoad'];
                $IsReturnedOrder = $row_checkOrder['IsReturnedOrder'];
                $ClientId = $row_checkOrder['CustomerId'];

                $query_costDelivery = "select transporter_bidprice as costDelivery from togo.transporterstimelinetb where order_id = '$orderId' and isCurrent = 1";
                $result_costDelivery = $this->dataBase->query($query_costDelivery);
                $row_costDelivery_num = $this->dataBase->numRows($result_costDelivery);

                if ($row_costDelivery_num == 0) {
                    echo "delivary price not found error!";
                    return;
                }

                // review_logic_finish (only considering the deal logic)

                $row_costDelivery = $this->dataBase->fetchArray($result_costDelivery);
                $costDelivery = $row_costDelivery['costDelivery'];

                // to_perform

                ////////////////////////////////////////////////////////////////////////////

                // new deal-logic:
                // check if this transporter is deal-activated (from transportertable)
                // if yes -> get foreign-delivery-cost (from orderbidengin)
                // conrinue with thae same old deal logic
                // create the in_invoice for this transporter
                // ...

                // check if deal activated fro this transporter
                $query_check_transporter_deal = "SELECT deal_activated FROM togo.transportertable WHERE CustomerId = '$TransporterId'";
                $result_check_transporter_deal = $this->dataBase->query($query_check_transporter_deal);
                $row_check_transporter_deal = $this->dataBase->fetchArray($result_check_transporter_deal);
                $deal_activated = $row_check_transporter_deal['deal_activated'];

                // is deal ->
                $is_deal = 0;
                if ($deal_activated == 1/* $ClientId == 41 *//*  && false */) { // activate deal
                    $is_deal = 1;

                    $query_get_is_deal = "SELECT 
                    foreignOrder.loges_barcode AS foreign_order_barcode,
                    engin.foreign_delivery_price
                    FROM togo.orderbidengin AS engin 
                    INNER JOIN togo.foreign_order_id_conversion AS foreignOrder ON engin.id = foreignOrder.togoOrderId
                    WHERE engin.id = '$orderId'";
                    $result_get_is_deal = $this->dataBase->query($query_get_is_deal);
                    $row_get_is_deal = $this->dataBase->fetchArray($result_get_is_deal);

                    $foreign_order_barcode = $row_get_is_deal['foreign_order_barcode'];
                    $foreign_delivery_price = $row_get_is_deal['foreign_delivery_price'];
                }

                ////////////////////////////////////////////////////////////////////////////

                if ($deliveryWay == 1) {

                    if ($is_deal == 1) {
                        $ff2 = $this->release_escrow_deal_noneCOD($ClientId, $orderId, $costDelivery);

                        // create in_invoice
                        $this->create_in_invoice($TransporterId, $orderId, $foreign_order_barcode, $foreign_delivery_price);
                    } else {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($TransporterId, $orderId, $costDelivery, $discountvalue);
                    }

                } else if ($deliveryWay == 2) {

                    $clientShareVal = $this->getClientShareValue($ClientId);

                    // phoenix id = 178
                    /* if ($TransporterId == 178) {
                        $clientShareVal = 0;
                    } */

                    if ($is_deal == 1) {
                        
                        if ($IsReturnedOrder == "1") {
                            $ff2 = $this->release_escrow($TransporterId, $orderId, $CostLoad, 0);
                        } else {
                            $ff2 = $this->release_escrow_deal_COD($ClientId, $orderId, $CostLoad, $clientShareVal, $costDelivery);
                        
                            // create in_invoice
                            $this->create_in_invoice($TransporterId, $orderId, $foreign_order_barcode, $foreign_delivery_price);
                        }
                    } else {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($TransporterId, $orderId, $costDelivery, $discountvalue);
                        if ($IsReturnedOrder == "1") {
                            $ff2 = $this->release_escrow($TransporterId, $orderId, $CostLoad, 0);
                        } else {
                            $ff2 = $this->release_escrow($ClientId, $orderId, $CostLoad, $clientShareVal);
                        }
                    }

                    $query_unmarkOrder = "update togo.orderbidengin set foreign_order_error = 0 where id = '$orderId'";
                    $result_unmarkOrder = $this->dataBase->query($query_unmarkOrder);
                } else if ($deliveryWay == 4) {

                    /* 
                        1- take new-cod amount from merchant to escrow
                        2- release new-cod amount to transporter

                        4-
                        if deal: {
                            1- release sell-price + invoice(sell-price) to merchant
                            2- create in-invoice(deal-price) to transporter
                        }

                        if non-deal: {
                            - release delivery-cost to transpoter
                        }
                    */

                    $this->move_to_escrow($ClientId, $orderId, $CostLoad);
                    $this->release_escrow($TransporterId, $orderId, $CostLoad, 0);

                    if ($is_deal == 1) {
                        $this->release_escrow_deal_noneCOD($ClientId, $orderId, $costDelivery);
                        
                        // create in_invoice
                        $this->create_in_invoice($TransporterId, $orderId, $foreign_order_barcode, $foreign_delivery_price);
                    } else {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $this->release_escrow($TransporterId, $orderId, $costDelivery, $discountvalue);
                    }
                    
                } else {
                    echo "deliveryWayNotFound";
                    return;
                }

                // assigned transporters logic follows ->
                if(false) {
                    $query_Get_Network_Payment = "select id,FromTransporterId,ToTransporterId,DeliveryCost from
                    togo.network_order_payment where IsPaid = 0 And OrderId ='$orderId'";
                    $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                    $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                    if ($row_count_payment > 0) {
                        $discountvalue = $this->getdiscountvalue($orderId);
                        while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                            $this->release_escrow($row['ToTransporterId'], $orderId, $row['DeliveryCost'], $discountvalue);

                            $paymentId = $row['id'];
                            $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                            $this->dataBase->query($query_Update_Payment);
                        }
                    }
                }

                //////////////////////////////////////////////////////////////////

                $finishDate = date("Y-m-d H:i:s");

                $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$orderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {

                    $this->recordAction($adminId, -1, $orderId, -1, '', "Order Finished by Admin", 31);

                    echo "AdminFinishedOrder";
                }

                $this->addNotification(
                    $orderId, 
                    $ClientId, 
                    "Order " . $orderId . " Finished", 
                    "تم إنهاء الطلب " . $orderId, 
                    "", 
                    ""
                );
            } else {
                echo "order not found error!";
            }
        } else {
            echo "TokenError";
        }
    }

    // get customer info for order waybill display
    public function getCustomerInfoForWayBill($orderId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $infoArray = $adminService->getCustomerInfoForWayBill($orderId);

            echo json_encode($infoArray);
        } else {
            echo "TokenError";
        }
    }

    public function checkForForeignIdForAdmin($OrderId, $adminId, $AdminToken)
    {
        $OrderId = $this->dataBase->escape($OrderId);
        $adminId = $this->dataBase->escape($adminId);
        $AdminToken = $this->dataBase->escape($AdminToken);

        if ($this->AdminCheckToken($adminId, $AdminToken) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $checkId = $adminService->checkForForeignIdForAdmin($OrderId);

            echo json_encode($checkId);
        } else {
            echo "TokenError";
        }
    }

    public function forcePickup($orderId, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {
            $pickupDate = date("Y-m-d H:i:s");
            $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$orderId'";
            $result = $this->dataBase->query($query);

            if ($result == true) {

                /* edited (record the action) */
                // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                $this->recordAction($adminId, -1, $orderId, -1, 'Order Picked Up', "Admin " . $adminId . " marked order " . $orderId . " as out for delivery", 30);

                /* edited - timeline (add pickup date to a transporter in the timeline) */
                $newPickupDate = date("Y-m-d H:i:s");
                $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$newPickupDate' where order_id='$orderId' and transporter_id=66";
                $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

                /* edited (add/update pickup date in orderbidengin) */
                $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$newPickupDate', order_status='Out for Delivery' where id='$orderId'";
                $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

                echo "Updated";

                // get client id
                $query_get_client_id = "SELECT CustomerId FROM togo.orderbidengin WHERE id = '$orderId'";
                $result_get_client_id = $this->dataBase->query($query_get_client_id);
                $row_get_client_id = $this->dataBase->fetchArray($result_get_client_id);
                $ClientId = $row_get_client_id['CustomerId'];

                $this->addNotification(
                    $orderId, 
                    $ClientId, 
                    "Order " . $orderId . " Picked Up", 
                    "تم تحميل الطلب " . $orderId, 
                    "", 
                    ""
                );
            } else {
                echo "not updated error";
            }
        } else {
            echo "TokenError";
        }
    }

    // --------------------------- Admin Customers APIs ---------------------------

    // get all clients
    public function getAllClients($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $clients = $adminService->getAllClients();

            echo json_encode($clients);
        } else {
            echo "TokenError";
        }
    }

    // get all transporters
    public function getAllTransporters($id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporters = $adminService->getAllTransporters();

            echo json_encode($transporters);
        } else {
            echo "TokenError";
        }
    }

    // get client personal information
    public function getClientPersonalInfo($clientId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $clientInfo = $adminService->getClientPersonalInfo($clientId);

            echo json_encode($clientInfo);
        } else {
            echo "TokenError";
        }
    }

    // get cleint business information
    public function getClientBusinessInfo($clientId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $clientBusinessInfo = $adminService->getClientBusinessInfo($clientId);

            echo json_encode($clientBusinessInfo);
        } else {
            echo "TokenError";
        }
    }

    // get client network
    public function getClientNetworkForAdmin($id, $token, $clientId)
    {

        if ($this->AdminCheckToken($id, $token) == true) {
            $membersData = array();

            $query_get_client_network = "select concat( trans.FirstName , ' ' , trans.Lastname) as FullName,
				cust.PhoneNumber, cust.id as transId, trans.PersonalImgPath as Image, client_net.isApproved, client_net.isAutoOffer, client_net.id as NetworkMemberId 
                from togo.client_network as client_net
                inner join togo.transportertable as trans on client_net.TransporterId = trans.CustomerId 
                inner join togo.customer as cust on client_net.TransporterId = cust.id
                where client_net.ClientId = '$clientId' order by client_net.id desc";

            $result_get_client_network = $this->dataBase->query($query_get_client_network);
            while ($row = $this->dataBase->fetchArray($result_get_client_network)) {
                array_push($membersData, array("NetworkMemberId" => $row['NetworkMemberId'], "FullName" => $row['FullName'], "PhoneNumber" => $row['PhoneNumber'], "Image" => $row['Image'], "CustomerId" => $row['CustomerId'], "deliveryPrice" => $row['price'], "isApproved" => $row['isApproved'], "isAutoOffer" => $row['isAutoOffer']));
            }
            echo json_encode(array("membersData" => $membersData));
        } else {
            echo "TokenError";
        }
    }

    // get client's delivery price list
    public function getClientPriceList($id, $token, $clientId)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            $query_get_prices = "SELECT * FROM togo.merchantpricelist WHERE merchantId = '$clientId'";
            $result_get_prices = $this->dataBase->query($query_get_prices);

            $row_get_prices = $this->dataBase->fetchArray($result_get_prices);

            echo json_encode(array("priceList" => array(
                "ww" => $row_get_prices['WestbankToWestbank'],
                "wj" => $row_get_prices['WestbankToJerusalem'],
                "wd" => $row_get_prices['WestbankToAreas48'],
                "wa" => $row_get_prices['WestbankToJordan'],
                "jj" => $row_get_prices['JerusalemToJerusalem'],
                "jw" => $row_get_prices['JerusalemToWestbank'],
                "jd" => $row_get_prices['JerusalemToAreas48'],
                "ja" => $row_get_prices['JerusalemToJordan'],
                "dd" => $row_get_prices['Areas48ToAreas48'],
                "dw" => $row_get_prices['Areas48ToWestbank'],
                "dj" => $row_get_prices['Areas48ToJerusalem'],
                "da" => $row_get_prices['Areas48ToJordan']
            )));
            
        } else {
            echo "TokenError";
        }
    }

    public function updateClientDeliveryCostList($id, $token, $clientId, $cost, $areas)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            switch ($areas) {
            case "ww":
                $areas = "WestbankToWestbank";
                break;
            case "wj":
                $areas = "WestbankToJerusalem";
                break;
            case "wd":
                $areas = "WestbankToAreas48";
                break;
            case "wa":
                $areas = "WestbankToJordan";
                break;
            case "jw":
                $areas = "JerusalemToWestbank";
                break;
            case "jj":
                $areas = "JerusalemToJerusalem";
                break;
            case "jd":
                $areas = "JerusalemToAreas48";
                break;
            case "ja":
                $areas = "JerusalemToJordan";
                break;
            case "dw":
                $areas = "Areas48ToWestbank";
                break;
            case "dj":
                $areas = "Areas48ToJerusalem";
                break;
            case "dd":
                $areas = "Areas48ToAreas48";
                break;
            case "da":
                $areas = "Areas48ToJordan";
                break;
            default:
                echo "unknown areas symbol error!";
                return;
            }

            $query_update_price = "UPDATE togo.merchantpricelist SET " . $areas . " = '$cost' WHERE merchantId = '$clientId'";
            $result_update_price = $this->dataBase->query($query_update_price);

            if ($result_update_price) {
                echo "updated successfully!";
            } else {
                echo "update_price query error!";
            }
            
        } else {
            echo "TokenError";
        }
    }

    public function updateClientTogoShareValue($clientId, $value)
    {
        
    }

    // get all transporters to add to client network
    public function getAllTransportersToAddForAdmin($id, $token, $customerId)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $query = "select trans.*, customer.PhoneNumber as TransPhone, ratings.avgRate
        from togo.transportertable as trans
        left outer join togo.customer as customer on trans.CustomerId = customer.id
        left outer join togo.ratings on trans.CustomerId = ratings.customerid
        where trans.CustomerId not in (select net.TransporterId from togo.client_network as net where net.ClientId='$customerId')";
            $result = $this->dataBase->query($query);
            if ($result == true) {
                $num_rows = $this->dataBase->numRows($result);

                if ($num_rows > 0) {

                    $transporters = array();

                    while ($row = $this->dataBase->fetchArray($result)) {
                        array_push($transporters, array(
                            "AccountName" => $row['AccountName'], "TransPhone" => $row['TransPhone'], "PersonalImgPath" => $row['PersonalImgPath'], "AvgRating" => $row['avgRate']
                        ));
                    }
                    echo json_encode(array("server_response" => $transporters));
                } else
                    return "no records";
            } else
                return "query error";
        } else {
            echo "TokenError";
        }
    }

    // add transporter to client network
    public function AddTransporterToClientNetworkFoAdmin($id, $token, $clientId, $mobileNumber)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            $query_get_Transporter = "select * from togo.customer where PhoneNumber='$mobileNumber'";
            $result_Get_Transporter = $this->dataBase->query($query_get_Transporter);

            if ($this->dataBase->numRows($result_Get_Transporter) > 0) {
                $row_Get_Transporter = $this->dataBase->fetchArray($result_Get_Transporter);
                $TransporterId = $row_Get_Transporter['id'];

                $query_get_mem = "select * from togo.client_network where ClientId='$clientId' and TransporterId='$TransporterId'";
                $result_Get_mem = $this->dataBase->query($query_get_mem);
                $row_Get_mem = $this->dataBase->fetchArray($result_Get_mem);
                $MasterId = $row_Get_mem['ClientId'];
                if ($MasterId == $clientId) {
                    echo "Already Exists";
                } else {

                    /* echo $clientId . " - " . $TransporterId;
                    return; */

                    $query = "INSERT INTO togo.client_network (ClientId, TransporterId, isApproved) VALUES ('$clientId','$TransporterId', 1)";
                    $result = $this->dataBase->query($query);
                    if ($result == true) {
                        echo "Inserted";
                    } else {
                        echo "insertError!";
                    }
                }
            } else {
                echo "No transporter with this number!";
            }
        } else {
            echo "TokenError";
        }
    }

    // update cleint netwerk member auto offer 
    public function updateClientAutoOfferForAdmin($id, $token, $status, $networkMemberId)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            /*  echo $status . " - " . $networkMemberId;
            return; */

            $query = "update togo.client_network set isAutoOffer=$status where id='$networkMemberId'";
            $result = $this->dataBase->query($query);

            if ($result) {
                echo "updated";
            } else {
                echo "updateError!";
            }
        } else {
            echo "TokenError";
        }
    }

    // edit client personal information
    public function updateClientPersonalInfo(
        $id,
        $token,
        $infoArr,
        $personalImageCode,
        $personalImageName,
        $isPersonalImageUpdated,
        $isNewPersonalImage
    ) {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);
        $infoArr = $this->dataBase->escape($infoArr);

        $personalImageCode = $this->dataBase->escape($personalImageCode); // new-pesronal-image code to be uploaded as image file data
        $personalImageName = $this->dataBase->escape($personalImageName); // new-personal-image file name (including the extension)
        $isPersonalImageUpdated = $this->dataBase->escape($isPersonalImageUpdated); // true if there is a new image uploaded
        $isNewPersonalImage = $this->dataBase->escape($isNewPersonalImage); // true if there is no previous image for this client

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->updateClientPersonalInfo($infoArr, $personalImageCode, $personalImageName, $isPersonalImageUpdated, $isNewPersonalImage);
        } else {
            echo "TokenError";
        }
    }

    // edit cleint business information
    public function updateClientBusinessInfo($id, $token, $info)
    {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);
        $info = $this->dataBase->escape($info);

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->updateClientBusinessInfo($info);
        } else {
            echo "tokenError";
        }
    }

    // block/unblock user
    public function blockUser($customerId, $status, $id, $token)
    {

        $customerId = $this->dataBase->escape($customerId);
        $status = $this->dataBase->escape($status);
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->blockUser($customerId, $status);
        } else {
            echo "TokenError";
        }
    }

    // get client's orders number
    public function getClientTotalOrdersNum($clientId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $clientTotalOrders = $adminService->getClientTotalOrdersNum($clientId);

            echo json_encode($clientTotalOrders);
        } else {
            echo "TokenError";
        }
    }

    // get transporter personal information
    public function getTransporterPersonalInfo($transporterId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterPersonalInfo = $adminService->getTransporterPersonalInfo($transporterId);

            echo json_encode($transporterPersonalInfo);
        } else {
            echo "TokenError";
        }
    }

    // get transporter working times
    public function getTransporterWorkingTimes($TransporterId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $TransporterId = $this->dataBase->escape($TransporterId);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterTimes = $adminService->getTransporterWorkingTimes($TransporterId);

            echo json_encode($transporterTimes);
        } else {
            echo "TokenError";
        }
    }

    // get transporter areas of operation
    public function getTransporterBusinessLocation($TransporterId, $id, $token)
    {
        $TransporterId = $this->dataBase->escape($TransporterId);
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterLocations = $adminService->getTransporterBusinessLocation($TransporterId);

            echo json_encode($transporterLocations);
        } else {
            echo "TokenError";
        }
    }

    // get veicles information
    public function GetTransporterVehiclesInfo($TransporterId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {
            $TransporterId = $this->dataBase->escape($TransporterId);

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterVehiclesInfo = $adminService->GetTransporterVehiclesInfo($TransporterId);

            echo json_encode($transporterVehiclesInfo);
        } else {
            echo "TokenError";
        }
    }

    // edit transporter personal information 
    public function updateTransporterPersonalInfo(
        $id,
        $token,
        $infoArr,
        $personalImageCode,
        $personalImageName,
        $isPersonalImageUpdated,
        $isNewPersonalImage,
        $licenceImageCode,
        $licenceImageName,
        $isLicenceImageUpdated,
        $isNewLicenceImage
    ) {
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);
        $infoArr = $this->dataBase->escape($infoArr);

        $personalImageCode = $this->dataBase->escape($personalImageCode); // new-pesronal-image code to be uploaded as image file data
        $personalImageName = $this->dataBase->escape($personalImageName); // new-personal-image file name (including the extension)
        $isPersonalImageUpdated = $this->dataBase->escape($isPersonalImageUpdated); // true if there is a new image uploaded
        $isNewPersonalImage = $this->dataBase->escape($isNewPersonalImage); // true if there is no previous image for this transporter

        $licenceImageCode = $this->dataBase->escape($licenceImageCode); // new-licence-image code to be uploaded as image file data
        $licenceImageName = $this->dataBase->escape($licenceImageName); // new-licence-image file name (including the extension)
        $isLicenceImageUpdated = $this->dataBase->escape($isLicenceImageUpdated); // true if there is a new image uploaded
        $isNewLicenceImage = $this->dataBase->escape($isNewLicenceImage); // true if there is no previous licence image for this transporter

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->updateTransporterPersonalInfo($infoArr, $personalImageCode, $personalImageName, $isPersonalImageUpdated, $isNewPersonalImage, $licenceImageCode, $licenceImageName, $isLicenceImageUpdated, $isNewLicenceImage);
        } else {
            echo "TokenError";
        }
    }

    // edit transporter business locations
    public function updateTransporterBusinessLocations($cityId, $checked, $transporterId, $id, $token)
    {
        $cityId = $this->dataBase->escape($cityId);
        $checked = $this->dataBase->escape($checked);
        $transporterId = $this->dataBase->escape($transporterId);
        $id = $this->dataBase->escape($id);
        $token = $this->dataBase->escape($token);

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->updateTransporterBusinessLocations($cityId, $checked, $transporterId);
        } else {
            echo "TokenError";
        }
    }

    // get transporter's prices between cities
    public function getTransporterCitiesPricesForAdmin($transporterId, $langId, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterPrices = $adminService->getTransporterCitiesPricesForAdmin($transporterId);

            echo json_encode($transporterPrices);
        } else {
            echo "TokenError";
        }
    }

    // edit transporter's prices between cities
    public function updateTransporterCitiesPricesForAdmin($transporterId, $fromId, $toId, $price, $adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $adminService->updateTransporterCitiesPricesForAdmin($transporterId, $fromId, $toId, $price);
        } else {
            echo "TokenError";
        }
    }

    // get transporter's number of orders
    public function getTransporterTotalOrdersNum($transporterId, $id, $token)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $transporterTotalOrders = $adminService->getTransporterTotalOrdersNum($transporterId);

            echo json_encode($transporterTotalOrders);
        } else {
            echo "TokenError";
        }
    }

    public function lendMoney($adminId, $token, $userId, $amount, $code) {
        if ($this->AdminCheckToken($adminId, $token) == true) {

            // echo $userId . " -> " . $amount;

            $query_getCode = "select code from togo.verifycodestable where description = 'Loan Manage Request' and mobile = '+972599658113' order by id desc limit 1";
            $result_getCode = $this->dataBase->query($query_getCode);

            if (!$result_getCode) {
                echo 'error fetching code!';
                return;
            }

            $row_getCode = $this->dataBase->fetchArray($result_getCode);
            $verifyCode = $row_getCode['code'];

            if ($code != $verifyCode) {
                echo "wrong code error!";
                return;
            }

            // echo "done";

            $result = $this->lendToPartner($userId, $amount);

            echo "done";
            
            // echo "lend";
        } else {
            echo "TokenError";
        }
    }

    public function collectMoney($adminId, $token, $userId, $amount, $code) {
        if ($this->AdminCheckToken($adminId, $token) == true) {

            $query_getCode = "select code from togo.verifycodestable where description = 'Loan Manage Request' and mobile = '+972599658113' order by id desc limit 1";
            $result_getCode = $this->dataBase->query($query_getCode);
            $row_getCode = $this->dataBase->fetchArray($result_getCode);
            $verifyCode = $row_getCode['code'];

            if ($code != $verifyCode) {
                echo "wrong code!";
                return;
            }

            // echo "done";

            $result = $this->collectFromPartner($userId, $amount);

            echo "done";

            // echo "collect";
        } else {
            echo "TokenError";
        }
    }

    public function getTempTransactions($adminIdm, $token, $userId) {
        if ($this->AdminCheckToken($adminIdm, $token) == true) {

            // echo $userId . " -> " . $amount;

            $result = $this->getPartenrTempTransactions($userId);

            echo json_encode(array("server_response" => $result));
            
            // echo "lend";
        } else {
            echo "TokenError";
        }
    }

    public function sendLoanVerifyCodeForAdmin($adminId, $token, $fullName, $amount, $actionType) {
        if ($this->AdminCheckToken($adminId, $token) == true) {

            $Code_Verify = mt_rand(1000, 9999);

            $query_saveCode = "insert into togo.verifycodestable (code, description, mobile, toShow) values ('$Code_Verify', 'Loan Manage Request', '+972599658113', 0)";
            $result_saveCode = $this->dataBase->query($query_saveCode);

            if ($result_saveCode) {
                $amobile = "+972599658113";
                $amobile . "Mobile";

                // get admin name, to-customer name
                $query_getAminName = "select concat(FirstName, ' ', LastName) as fullName from togo.admin where id = '$adminId'";
                $result_getAminName = $this->dataBase->query($query_getAminName);

                if (!$result_getAminName) {
                    echo "get admin name error!";
                    return;
                }

                ob_start();
                
                // fodo

                /* $customer_name = "unkown";

                if ($customerType == 1){
                    // get client business name
                    $query_get_client_business_name = "SELECT bus.BusinessName as customerName from togo.clientbusinesstable as bus where bus.CustomerId = '$customerId'";
                    $result_client_business_name = $this->dataBase->query($query_get_client_business_name);
                    $row_client_business_name = $this->dataBase->fetchArray($result_client_business_name);
                    $customer_name = $row_client_business_name['customerName'];
                } else {
                    // get transporter account name
                    $query_get_trnasporter_account_name = "SELECT tr.AccountName as customerName from togo.transportertable as tr where tr.CustomerId = '$customerId'";
                    $result_trnasporter_account_name = $this->dataBase->query($query_get_trnasporter_account_name);
                    $row_trnasporter_account_name = $this->dataBase->fetchArray($result_trnasporter_account_name);
                    $customer_name = $row_trnasporter_account_name['customerName'];
                } */

                $ch = curl_init();

                $action = $actionType == "collect" ? "Collect" : "Lend";
                
                $row_getAminName = $this->dataBase->fetchArray($result_getAminName);
                $adminName = $row_getAminName['fullName'];

                $msg = urlencode($adminName . " " . $action . ": " . $amount . "NIS\nTo: " . $fullName . "\nCode: " . $Code_Verify);
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);

                $amobile = "+972599040022";
                $amobile . "Mobile";

                $ch = curl_init();

                $action = $actionType == "collect" ? "Collect" : "Lend";
                
                $row_getAminName = $this->dataBase->fetchArray($result_getAminName);
                $adminName = $row_getAminName['fullName'];

                $msg = urlencode($adminName . " " . $action . ": " . $amount . "NIS\nTo: " . $fullName . "\nCode: " . $Code_Verify);
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);

                $amobile = "+97259201899";
                $amobile . "Mobile";

                $ch = curl_init();

                $action = $actionType == "collect" ? "Collect" : "Lend";
                
                $row_getAminName = $this->dataBase->fetchArray($result_getAminName);
                $adminName = $row_getAminName['fullName'];

                $msg = urlencode($adminName . " " . $action . ": " . $amount . "NIS\nTo: " . $fullName . "\nCode: " . $Code_Verify);
    
                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                $reslt_Send = curl_exec($ch);
    
                curl_close($ch);

                ob_end_clean();
    
                if ($reslt_Send != "Message Sent Successfully!") {
                    echo "message error!";
                } else {
                    echo "code sent";
                }
            } else {
                echo "insert code record error!";
            }

        } else {
            echo "TokenError";
        }
    }

    // --------------------------- Admin Orders-Search APIs ---------------------------

    public function getAllOrders($id, $token, $searchStr)
    {

        if ($this->AdminCheckToken($id, $token) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $searchedOrders = $adminService->getAllOrders($searchStr);

            echo json_encode($searchedOrders);
        } else {
            echo "TokenError";
        }
    }

    // --------------------------- Admin Withdrawals APIs ---------------------------

    public function getCustomersWithdrawRequestsForAdmin($adminId, $adminToken)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            require_once(dirname(__FILE__) . "/Services/AdminService.php");
            $adminService = new AdminService($this->dataBase);
            $requests = $adminService->getCustomersWithdrawRequestsForAdmin();

            echo json_encode($requests);
        } else {
            echo "TokenError";
        }
    }

    public function completeWithdrawRequest($adminId, $adminToken, $withdrawalId, $ref)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            $query_getWithdraw = "select * from togo.withdrawrequeststb where id = '$withdrawalId'";
            $result_getWithdraw = $this->dataBase->query($query_getWithdraw);

            if ($result_getWithdraw) {

                $row_count_getWithdraw = $this->dataBase->numRows($result_getWithdraw);
                $row_getWithdraw = $this->dataBase->fetchArray($result_getWithdraw);

                if ($row_count_getWithdraw > 0) {

                    if ($row_getWithdraw['isRejected'] == 1) {
                        echo "request rejected error";
                        return;
                    }

                    if ($row_getWithdraw['isCanceled'] == 1) {
                        echo "request canceled error";
                        return;
                    }

                    if ($row_getWithdraw['isApproved'] == 1) {
                        echo "request already approved error";
                        return;
                    }

                    $customerId = $row_getWithdraw['customerId'];
                    $amount = $row_getWithdraw['amount'];

                    $res = $this->move_to_transfer_out_final($customerId, $amount, $ref);

                    if ($res == 1) {

                        echo "moved to transfer out final sucessfully";

                        $query_updateWithdraw = "update togo.withdrawrequeststb set isApproved = 1, ref = '$ref' where id = '$withdrawalId'";
                        $result_updateWithdraw = $this->dataBase->query($query_updateWithdraw);

                        if ($result_updateWithdraw) {
                            echo " - done";
                        } else {
                            echo " - error updating request";
                        }
                    } else {
                        echo "error moving to transfer out final";
                    }
                } else {
                    echo "there is no request error";
                }
            } else {
                echo "error fetching withdraw info";
            }
        } else {
            echo "TokenError";
        }
    }

    public function rejectWithdrawRequest($adminId, $adminToken, $withdrawalId)
    {
        if ($this->AdminCheckToken($adminId, $adminToken) == true) {

            $query_getWithdraw = "select * from togo.withdrawrequeststb where id = '$withdrawalId'";
            $result_getWithdraw = $this->dataBase->query($query_getWithdraw);

            if ($result_getWithdraw) {

                $row_count_getWithdraw = $this->dataBase->numRows($result_getWithdraw);
                $row_getWithdraw = $this->dataBase->fetchArray($result_getWithdraw);

                if ($row_count_getWithdraw > 0) {

                    if ($row_getWithdraw['isRejected'] == 1) {
                        echo "request already rejected error";
                        return;
                    }

                    if ($row_getWithdraw['isCanceled'] == 1) {
                        echo "request canceled error";
                        return;
                    }

                    if ($row_getWithdraw['isApproved'] == 1) {
                        echo "request approved error";
                        return;
                    }

                    $customerId = $row_getWithdraw['customerId'];
                    $amount = $row_getWithdraw['amount'];

                    $res = $this->reverse_move_to_transfer_out_temp($customerId, $amount);

                    if ($res == 1) {

                        echo "rejected sucessfully";

                        $query_updateWithdraw = "update togo.withdrawrequeststb set isRejected = 1 where id = '$withdrawalId'";
                        $result_updateWithdraw = $this->dataBase->query($query_updateWithdraw);

                        if ($result_updateWithdraw) {
                            echo " - done";
                        } else {
                            echo " - error updating request";
                        }
                    } else {
                        echo "error move from transfer out temp";
                    }
                } else {
                    echo "there is no request error";
                }
            } else {
                echo "error fetching withdraw info";
            }
        } else {
            echo "TokenError";
        }
    }

    public function aaaaaakhkhkhkhkh()
    {
        echo "aaaaaakhkhkhkhkh";
    }

    // --------------------------- Admin Login APIs ---------------------------

    public function isAdminLogedIn($adminId, $AdminToken)
    {
        if ($this->AdminCheckToken($adminId, $AdminToken) == true) {
            echo "true";
        } else {
            echo "TokenError";
        }
    }

    public function tempRegisterAdmin()
    {
        require_once(dirname(__FILE__) . "/Services/AdminService.php");
        $adminService = new AdminService($this->dataBase);
        $adminService->tempRegisterAdmin();
    }

    public function adminCheckToLoginLogin($username, $password)
    {

        $username = $this->dataBase->escape($username);
        $password = $this->dataBase->escape($password);

        $query_get_password = "select Password from togo.admin where Username='$username'";
        $result_get_password = $this->dataBase->query($query_get_password);
        $rowPass = $this->dataBase->fetchArray($result_get_password);

        if ($rowPass['Password']) {
            if (password_verify($password, $rowPass['Password'])) {

                // generate new token

                $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                $charactersLength = strlen($characters);
                $randomString = '';
                for ($i = 0; $i < 10; $i++) {
                    $randomString .= $characters[rand(0, $charactersLength - 1)];
                }

                $hashed_token = password_hash($randomString, PASSWORD_DEFAULT);

                $query_update_token = "update togo.admin set Token='$hashed_token' where Username='$username'";
                $result_update_token = $this->dataBase->query($query_update_token);

                if ($result_update_token) {

                    // login

                    $query_get_info = "select FirstName, LastName, Email, MobileNumber, Token, id from togo.admin where Username='$username'";
                    $result_get_info = $this->dataBase->query($query_get_info);
                    $rowInfo = $this->dataBase->fetchArray($result_get_info);

                    echo json_encode(array("id" => $rowInfo['id'], "FirstName" => $rowInfo['FirstName'], "LastName" => $rowInfo['LastName'], "Email" => $rowInfo['Email'], "MobileNumber" => $rowInfo['MobileNumber'], "Token" => $rowInfo['Token']));
                } else {
                    echo "Something went wrong!";
                }
            } else {
                echo "Wrong password!";
            }
        } else {
            echo "Wrong username!";
        }
    }

    public function adminLogin($id, $token, $code)
    {
        if ($this->AdminCheckToken($id, $token) == true) {

            // get code

            $query_get_code = "SELECT VerifyCode AS code FROM togo.admin WHERE id = '$id'";
            $result_get_code = $this->dataBase->query($query_get_code);

            if (!$result_get_code) {
                echo " - get_code query error - ";
                return;
            }

            $row_count_get_code = $this->dataBase->numRows($result_get_code);

            if ($row_count_get_code == 0) {
                echo " - admin (" . $id . ") code not found error - ";
                return;
            }

            $row_get_code = $this->dataBase->fetchArray($result_get_code);
            $fetched_code = $row_get_code['code'];

            if ($fetched_code == $code) {
                // update admin login status

                $query_update_login = "UPDATE togo.admin SET isLoggedIn = 1 WHERE id = '$id'";
                $result_update_login = $this->dataBase->query($query_update_login);

                if (!$result_update_login) {
                    echo " - update_login query error - ";
                    return;
                }

                echo " - logged in successfully - ";
            } else {
                echo " - wrong code error - ";
            }
        
            
        } else {
            echo "TokenError";
        }
    }

    public function sendAdminLoginVerificationCode($adminId)
    {
        // get admin phone number

        $query_get_phone_number = "SELECT MobileNumber AS phone FROM togo.admin WHERE id = '$adminId'";
        $result_get_phone_number = $this->dataBase->query($query_get_phone_number);

        if (!$result_get_phone_number) {
            echo "get_phone_number query error";
            return;
        }

        $row_count_get_phone_number = $this->dataBase->numRows($result_get_phone_number);

        if ($row_count_get_phone_number == 0) {
            echo "admin (" . $adminId . ") phone number not found error";
            return;
        }

        $row_get_phone_number = $this->dataBase->fetchArray($result_get_phone_number);
        $phone = $row_get_phone_number['phone'];
        
        // send code

        $code = mt_rand(1000, 9999);
        $msg = "Your login code is (" . $code . ")";
        $this->send_SMS($phone, $msg);

        // update code

        $query_update_code = "UPDATE togo.admin SET VerifyCode = '$code' WHERE id = '$adminId'";
        $result_update_code = $this->dataBase->query($query_update_code);

        $query_recordCode = "insert into togo.verifycodestable (code, mobile, description) 
        values ('$code', '$phone', 'Admin Login')";
        $result_recordCode = $this->dataBase->query($query_recordCode);
    }

    public function updateAdminWebNotificationToken($adminId, $adminToken, $newWebToken)
    {
        $adminId = $this->dataBase->escape($adminId);
        $adminToken = $this->dataBase->escape($adminToken);
        $newWebToken = $this->dataBase->escape($newWebToken);

        if ($newWebToken == 'null') {
            $islogin = 0;
        } else {
            $islogin = 1;
        }

        /* echo $newWebToken . " - " . $islogin;
        return; */

        if ($this->AdminCheckToken($adminId, $adminToken) == true) {
            $query_update_web_token = "update togo.admin set TokenNotify='$newWebToken', isLoggedIn=$islogin where id='$adminId'";
            $result_update_web_token = $this->dataBase->query($query_update_web_token);

            if ($result_update_web_token) {
                echo " - logged out - ";
            } else {
                echo " - query error - ";
            }
        } else {
            echo "TokenError";
        }
    }

    /* 
        (End) Admin APIs #####################################################################################################
    */


    /* 
        (begin) Logestechs APIs #####################################################################################################
    */

    // --------------------------- check for Logestechs price ---------------------------

    public function checkLogestechsPrice($foreign_company_id, $togoForeignId, $sourceAreaId, $targetAreId)
    {
        // get togo areas names
        $sourceTogoAreaName = $this->getLogestechsAreaName($sourceAreaId);
        $targetTogoAreaName = $this->getLogestechsAreaName($targetAreId);

        /* echo $sourceTogoAreaName . " -- " . $targetTogoAreaName;
        return; */

        if ($sourceTogoAreaName && $targetTogoAreaName) {
            /* echo $sourceTogoAreaName . " -- " . $targetTogoAreaName;
            return; */

            $price_deal = $this->getLogestechsPriceDeal($foreign_company_id, $togoForeignId, $sourceTogoAreaName, $targetTogoAreaName);
            $price_general = $this->getLogestechsPriceGeneral($foreign_company_id, $sourceTogoAreaName, $targetTogoAreaName);

            /*  echo $price;
            return; */

            $rawPrice_deal = json_decode($price_deal);
            $rawPrice_general = json_decode($price_general);

            return $rawPrice_general->cost . "-" . $rawPrice_deal->cost;
        } else {
            return "-2";
        }
    }

    public function checkLogestechsPriceTest()
    {
        $foreign_company_id = "15";
        $togoForeignId = "53277";
        $sourceAreaId = 543;
        $targetAreId = 2772;

        // get togo areas names
        $sourceTogoAreaName = $this->getLogestechsAreaName($sourceAreaId);
        $targetTogoAreaName = $this->getLogestechsAreaName($targetAreId);

        /* echo $sourceTogoAreaName . " -- " . $targetTogoAreaName;
        return; */

        if ($sourceTogoAreaName && $targetTogoAreaName) {
            /* echo $sourceTogoAreaName . " -- " . $targetTogoAreaName;
            return; */

            $price_deal = $this->getLogestechsPriceDeal($foreign_company_id, $togoForeignId, $sourceTogoAreaName, $targetTogoAreaName);
            $price_general = $this->getLogestechsPriceGeneral($foreign_company_id, $sourceTogoAreaName, $targetTogoAreaName);

            /* echo $price_deal . " -- " . $price_general;
            return; */

            $rawPrice_deal = json_decode($price_deal);
            $rawPrice_general = json_decode($price_general);

            // return $rawPrice_general->cost . "-" . $rawPrice_deal->cost;
            echo $rawPrice_general->cost . "-" . $rawPrice_deal->cost;
        } else {
            // return "-2";
            echo "-2";
        }
    }

    public function getLogestechsAreaName($togoAreaId)
    {
        $query_getAreaName = "select conversionTable.logesAreaName as name from togo.loges_areas_convert_table as conversionTable where conversionTable.togoAreaId = '$togoAreaId'";
        $result_getAreaName = $this->dataBase->query($query_getAreaName);

        if ($result_getAreaName) {
            $row_getAreaName = $this->dataBase->fetchArray($result_getAreaName);
            return $row_getAreaName['name'];
        } else {
            echo " -- area name query error -- ";
            return "-1";
        }
    }

    public function getLogestechsPriceDeal($companyId, $togoForeignId, $sourceAreaName, $targetAreaName)
    {

        /* echo $sourceAreaName . " -- " . $targetAreaName;
        return; */

        // get regions by areas' names
        // aoaoao
        $sourceRegion = $this->getLogestechsArea($sourceAreaName)->regionId;
        $tragetRegion = $this->getLogestechsArea($targetAreaName)->regionId;

        // return $sourceRegion . " -- " . $tragetRegion;

        if ($sourceRegion && $tragetRegion) {
            $data = '{
                "customerId": ' . $togoForeignId . ',
                "originRegionId": ' . $sourceRegion . ',
                "destinationRegionId": ' . $tragetRegion . '
            }';

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/guests/' . $companyId . '/cost',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json'
                ),
            ));

            $output = curl_exec($curl);

            curl_close($curl);

            return $output;
        } else {
            return "-1";
        }
    }

    public function getLogestechsPriceGeneral($companyId, $sourceAreaName, $targetAreaName)
    {

        /* echo $sourceAreaName . " -- " . $targetAreaName;
        return; */

        // get regions by areas' names
        // aoaoao
        $sourceRegion = $this->getLogestechsArea($sourceAreaName)->regionId;
        $tragetRegion = $this->getLogestechsArea($targetAreaName)->regionId;

        // return $sourceRegion . " -- " . $tragetRegion;

        if ($sourceRegion && $tragetRegion) {
            $data = '{
                "originRegionId": ' . $sourceRegion . ',
                "destinationRegionId": ' . $tragetRegion . '
            }';

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/guests/' . $companyId . '/cost',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'POST',
                CURLOPT_POSTFIELDS => $data,
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json'
                ),
            ));

            $output = curl_exec($curl);

            curl_close($curl);

            return $output;
        } else {
            return "-1";
        }
    }

    /* 
        get logestech' area, searched by its arabic name
    */
    public function getLogestechsArea($areaName, $companyId)
    {

        if ($areaName == "رام الله والبيرة") {
            $areaName = "رام الله";
        }

        if ($areaName == "48 Cities") {
            $areaName = "الطيبة 48";
        }

        // encode the string to be used as query parameter (without it, it will work with english but not arabic):-
        $str = urlencode($areaName);

        // call logestechs' api to get areas by name:-
        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?search=' . $str,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'company-id: ' . $companyId
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        // extract only the data(list of areas) and decode json object to php object/arr:-
        $dataArr = json_decode($output)->data;

        // it will contain the list of areas to handle:-
        $areasArr = array();

        foreach ($dataArr as $area) {
            array_push($areasArr, $area);
        }

        if ($areaName == "القدس") {
            foreach ($areasArr as $area) {
                if ($area->arabicName == "القدس") {
                    $resultArea = $area;
                    break;
                }
            }
        } else {
            $resultArea = $areasArr[0];
        }

        // return the matched area:-
        // echo json_encode($areasArr[$bestMatchIndex]->arabicName);
        return $resultArea;
    }

    // TO_REM
    public function getLogestechsAllAreas()
    {

        // get all areas
        $query_getAreas = "select name from areatable";
        $resut_getAreas = $this->dataBase->query($query_getAreas);

        $tempAreasArr = array();

        while ($row_getAreas = $this->dataBase->fetchArray($resut_getAreas)) {
            array_push($tempAreasArr, $row_getAreas['name']);
        }

        $resArr = array();

        $i = 0;
        foreach ($tempAreasArr as $area) {
            if ($i == 40) {
                break;
            }

            $str = urlencode($area);

            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?search=' . $str,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json',
                    'company-id: 101'
                ),
            ));

            $output = curl_exec($curl);

            curl_close($curl);

            if ($output) {
                // $dataArr = json_decode($output)->data;

                array_push($resArr, array("match" => $area));
            } else {
                array_push($resArr, array("no match" => $area));
            }

            $i++;
        }

        echo json_encode($resArr);

        return;

        $alpha = "abcdefghijklmnopqrstuvwxyz";

        // it will contain the list of areas to handle:-
        $areasArr = array();

        for ($i = 0; $i < strlen($alpha); $i++) {

            $str = $alpha[$i];

            // encode the string to be used as query parameter (without it, it will work with english but not arabic):-
            $str = urlencode($str);

            // call logestechs' api to get areas by name:-
            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?search=' . $str,
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json',
                    'company-id: 101'
                ),
            ));

            $output = curl_exec($curl);

            curl_close($curl);

            // extract only the data(list of areas) and decode json object to php object/arr:-
            $dataArr = json_decode($output)->data;

            foreach ($dataArr as $area1) {

                $found = 0;

                foreach ($areasArr as $area2) {

                    if ($area1->id == $area2->id) {
                        $found = 1;
                    }
                }

                if ($found == 0) {
                    array_push($areasArr, $area1);
                }
            }
        }

        // echo count($areasArr);

        foreach ($areasArr as $area) {

            echo json_encode($area) . "\n ------------------------- \n";
        }
    }

    // --------------------------- Logestechs Create Order ---------------------------

    public function createLogestechsOrder($DeliveryParams, $AddressClint, $CustomerId, $TransporterId, $orderId)
    {

        $this->recordDebug("logestechs create order api entered", $CustomerId, $TransporterId, $orderId);

        // to test
        /* $DeliveryParams['DetailsLoad'] = "some details";
        $DeliveryParams['LengthLoad'] = 15;
        $DeliveryParams['WidthLoad'] = 100;
        $DeliveryParams['HeightLoad'] = 30;
        $DeliveryParams['WeightLoad'] = 13;
        $DeliveryParams['CostLoad'] = 10;
        $DeliveryParams['TypeLoad'] = 3;
        $DeliveryParams['deliveryWay'] = 2;

        $AddressClint['OtherDetails'] = "source address other details";
        $AddressClint['OtherDetailsDes'] = "target address other details";
        $AddressClint['IdArea'] = 1322;
        $AddressClint['IdAreaDes'] = 1012;
        $AddressClint['ReceiverAddressName'] = "receiver name";
        $AddressClint['ReceiverAddressNum'] = "0592325932";

        $CustomerId = 41;

        $TransporterId = 122;

        $orderId = 22222; */


        // get logestechs'transporter username and password
        $query_getTransporterInfo = "SELECT * FROM togo.logestechs_transporter_info WHERE togo_trans_id = '$TransporterId'";
        $result_getTransporterInfo = $this->dataBase->query($query_getTransporterInfo);

        if ($result_getTransporterInfo) {

            $this->recordDebug("logestechs_transporter_info selected from", $CustomerId, $TransporterId, $orderId);

            $row_getTransporterInfo = $this->dataBase->fetchArray($result_getTransporterInfo);
            $username = $row_getTransporterInfo['username'];
            $password = $row_getTransporterInfo['password'];
            $companyId = $row_getTransporterInfo['company_id'];

            $this->recordDebug("getTransporterInfo called - comapnyId: " . $companyId, $CustomerId, $TransporterId, $orderId);

            // get sender info
            $senderInfo = $this->getSenderInfo($CustomerId);
            $str_to_replace = "0";
            $oldNum = $senderInfo['phone'];
            $senderMobileNum = $str_to_replace . substr($oldNum, 4);

            $this->recordDebug("getSenderInfo called - phone: " . $senderMobileNum, $CustomerId, $TransporterId, $orderId);

            // get logestechs'source and target areas
            $sourceTogoAreaId = $AddressClint['IdArea'];
            $targetTogoAreaId = $AddressClint['IdAreaDes'];

            // get togo areas names by ids:

            $query_getSrcAreaName = "SELECT name FROM togo.arealang WHERE areaId = '$sourceTogoAreaId' AND languageId = 2";
            $result_getSrcAreaName = $this->dataBase->query($query_getSrcAreaName);
            $row_getSrcAreaName = $this->dataBase->fetchArray($result_getSrcAreaName);
            $togoSrcAreaName = $row_getSrcAreaName['name'];

            $query_getDestAreaName = "SELECT name FROM togo.arealang WHERE areaId = '$targetTogoAreaId' AND languageId = 2";
            $result_getDestAreaName = $this->dataBase->query($query_getDestAreaName);
            $row_getDestAreaName = $this->dataBase->fetchArray($result_getDestAreaName);
            $togoDestAreaName = $row_getDestAreaName['name'];

            //////////////////////////

            // hakona matata

            $sourceTogoAreaName = $this->getLogestechsAreaName($sourceTogoAreaId);
            $targetTogoAreaName = $this->getLogestechsAreaName($targetTogoAreaId);

            $tempSourceTogoAreaName = $this->dataBase->escape($sourceTogoAreaName);
            $tempTargetTogoAreaName = $this->dataBase->escape($targetTogoAreaName);

            $this->recordDebug("getLogestechsAreaName called - from: " . $tempSourceTogoAreaName . " -> to: " . $tempTargetTogoAreaName, $CustomerId, $TransporterId, $orderId);

            $source = $this->getLogestechsArea($sourceTogoAreaName, $companyId);
            $target = $this->getLogestechsArea($targetTogoAreaName, $companyId);

            $sourceVillageId = $source->id;
            $sourceCityId = $source->cityId;
            $sourceRegionId = $source->regionId;

            $targetVillageId = $target->id;
            $targetCityId = $target->cityId;
            $targetRegionId = $target->regionId;

            $this->recordDebug("getLogestechsArea - from: (r_" . $sourceRegionId . ", c_" . $sourceCityId . ", v_" . $sourceVillageId . ") -> to: (r_" . $targetRegionId . ", c_" . $targetCityId . ", v_" . $targetVillageId . ")", $CustomerId, $TransporterId, $orderId);


            $this->recordDebug("addressLine1 sender: (" . $AddressClint['OtherDetails'] . ") -> addressLine1 receiver: (" .  $targetTogoAreaName . ", " . $AddressClint['OtherDetailsDes'] . ")", $CustomerId, $TransporterId, $orderId);

            if ($source != "-1" && $target != "-1") {
                // "package_type": "' . ($DeliveryParams['TypeLoad'] == "1" ? "food" : ($DeliveryParams['TypeLoad'] == "2" ? "small package & envelops" : ($DeliveryParams['TypeLoad'] == "3" ? "meduim package" : "large package"))) . '",

                $loadDetails = $DeliveryParams['DetailsLoad'];

                $data = '{
                        "email": "' . $username . '",
                        "password": "' . $password . '",
                        "pkg": {
                            "cod": ' . ($DeliveryParams['CostLoad'] == "" ? 0 : $DeliveryParams['CostLoad']) . ',
                            "notes": "' . $loadDetails . '",
                            "senderFirstName": "' . $senderInfo['FirstName'] . '",
                            "senderLastName": "' . $senderInfo['LastName'] . '",
                            "senderMiddleName": "",
                            "businessSenderName": "' . $senderInfo['BusinessName'] . '",
                            "senderPhone": "' . $senderMobileNum . '",
                            "receiverPhone": "' . $AddressClint['ReceiverAddressNum'] . '",
                            "receiverPhone2": "",
                            "receiverName": "' . $AddressClint['ReceiverAddressName'] . '",
                            "serviceType": "STANDARD",
                            "shipmentType": "' . ($DeliveryParams['deliveryWay'] == "2" ? "COD" : "REGULAR") . '",
                            "quantity": 1,
                            "devices": []
                    
                        },
                        "destinationAddress": {
                            "addressLine1": "' . $togoDestAreaName . ', ' . $AddressClint['OtherDetailsDes'] . '",
                            "cityId": ' . $targetCityId . ',
                            "villageId": ' . $targetVillageId . ',
                            "regionId": ' . $targetRegionId . '
                        },
                        "pkgUnitType": "METRIC",
                        "originAddress": {
                            "addressLine1": "' . $togoSrcAreaName . '",
                            "addressLine2": "' . $AddressClint['OtherDetails']  . '",
                            "cityId": ' . $sourceCityId . ',
                            "regionId": ' . $sourceRegionId . ',
                            "villageId": ' . $sourceVillageId . '
                        }
                    }';

                $curl = curl_init();

                curl_setopt_array($curl, array(
                    CURLOPT_URL => 'https://apisv2.logestechs.com/api/ship/request/by-email',
                    CURLOPT_RETURNTRANSFER => true,
                    CURLOPT_ENCODING => '',
                    CURLOPT_MAXREDIRS => 10,
                    CURLOPT_TIMEOUT => 0,
                    CURLOPT_FOLLOWLOCATION => true,
                    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => 'POST',
                    CURLOPT_POSTFIELDS => $data,
                    CURLOPT_HTTPHEADER => array(
                        'Content-Type: application/json',
                        'company-id: ' . $companyId,
                    ),
                ));

                $response = curl_exec($curl);

                curl_close($curl);

                // record action and send notification

                // -----------------------------------------------

                // add logestechs id (order foreign_id) to foreign-transporter-companies-ids-conversion-table

                $response_data = json_decode($response);

                $this->recordDebug("logestechs api done", $CustomerId, $TransporterId, $orderId);

                // $response_data['test_time'] = date("Y-m-d H:i:s");
                // $response_data['test_order_id'] = $orderId;

                file_put_contents("logestechsCreateOrderResponse.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);

                if ($response_data->id) { // l nono

                    // echo " -- logestechs shimemt created successfuly -- ";

                    $senderName = $senderInfo['BusinessName'];
                    $notification_title = "Logestechs Offer Accepted";
                    $notification_description = $senderName . " Accepted Logestechs transporter offer on order (" . $orderId . ")";
                    $this->recordAction($TransporterId, -1, $orderId, -1, $notification_title, $notification_description, 30);

                    $loges_order_id = $response_data->id;
                    $loges_barcode = $response_data->barcode;
                    $loges_barcode_img_url = $response_data->barcodeImage;
                    $loges_delivery_cost = $response_data->cost;

                    // if foreign deal-price is greater of equal our sell-price then mark order
                    // 1- get sell-price
                    $query_get_sell_price = "SELECT CostDelivery FROM togo.deliveryacceptordertable WHERE IdOrder = '$orderId' AND IdTransporter = '$TransporterId' LIMIT 1";
                    $result_get_sell_price = $this->dataBase->query($query_get_sell_price);
                    $row_get_sell_price = $this->dataBase->fetchArray($result_get_sell_price);
                    $sell_price = $row_get_sell_price['CostDelivery'];

                    if ($loges_delivery_cost >= $sell_price) {
                        // mark order 
                        $this->recordAction($TransporterId, -1, $orderId, -1, 'foreign delivery cost', "foreign deal-cost [" . $loges_delivery_cost . "] is greater than or equal sell-price [" . $sell_price . "]", 30);
                        
                        $query_mark_order = "UPDATE togo.orderbidengin SET foreign_order_error = 1, SET last_action = 'foreign delivery cost problem' WHERE id = '$orderId'";
                        $result_mark_order = $this->dataBase->query($query_mark_order);
                    }

                    $query_inserForiegnId = "INSERT INTO togo.foreign_order_id_conversion (companyId, foreignOrderId, togoOrderId, loges_barcode, loges_barcode_img) 
                    VALUES ('$TransporterId', '$loges_order_id', '$orderId', '$loges_barcode', '$loges_barcode_img_url')";
                    $result_inserForiegnId = $this->dataBase->query($query_inserForiegnId);

                    if ($result_inserForiegnId) {
                        // echo " -- foreign id added successfuly -- ";
                        $this->recordDebug("foreign id added successfuly - " . $loges_order_id, $CustomerId, $TransporterId, $orderId);

                        // insert foreign delivery cost into orderbidengin
                        $query_insert_foreign_cost = "UPDATE togo.orderbidengin SET foreign_delivery_price = '$loges_delivery_cost' WHERE id = '$orderId'";
                        $result_insert_foreign_cost = $this->dataBase->query($query_insert_foreign_cost);

                        if ($result_insert_foreign_cost) {
                            // echo " -- foreign delivery cost added successfuly -- ";
                            $this->recordDebug("foreign delivery cost added successfuly - cost: " . $loges_delivery_cost, $CustomerId, $TransporterId, $orderId);
                        } else {
                             // echo " -- foreignCostInsertError! -- ";
                            $this->recordDebug("foreignCostInsertError - cost: " . $loges_delivery_cost, $CustomerId, $TransporterId, $orderId);
                        }
                    } else {
                        // echo " -- foreignIdInsertError! -- ";
                        $this->recordDebug("foreignIdInsertError - " . $loges_order_id, $CustomerId, $TransporterId, $orderId);
                    }
                } else {
                    // echo " -- logestechsCreateShipmentError -- ";
                    $error = $response_data->error;
                    $this->recordDebug("logestechsCreateShipmentError - error: " . $error, $CustomerId, $TransporterId, $orderId);

                    // mark the order as uncompleted-logestechs-order

                    $query = "UPDATE togo.orderbidengin SET foreign_order_error = 1 WHERE id = '$orderId'";
                    $result = $this->dataBase->query($query);
                }
            } else {
                // echo " -- logestechs areas not found -- ";
                $this->recordDebug("logestechs areas not found", $CustomerId, $TransporterId, $orderId);
            }
        } else {
            // echo " -- logestechs transporter info query error -- ";
            $this->recordDebug("logestechs transporter info query error!", $CustomerId, $TransporterId, $orderId);
        }
    }

    private function createExclusiveLogestechsOrder($deliveryParams, $senderAddressId, $receiverAddressId, $customerId, $transporterId, $orderId, $togo_sell_price, $consignmentNo)
    {
        // initiate feilds

        $cod = $deliveryParams['CostLoad'] == "" ? 0 : $deliveryParams['CostLoad'];
        $notes = $deliveryParams['DetailsLoad'];

        if ($deliveryParams['deliveryWay'] == "1") {
            $delivery_type = "REGULAR";
        } else if ($deliveryParams['deliveryWay'] == "2") {
            $delivery_type = "COD";
        } else {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] delivery type errorm, delivery_type: " . $delivery_type));

            $data = "(error)[create logestech order] delivery type errorm, delivery_type: " . $delivery_type;
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $data = "(info)[create logestech order] delivery params: [cod: " . $cod . ", notes: " . $notes . ", delivery_type: " . $delivery_type . "]";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // get logestechs'transporter username and password

        $query_get_transporter_info = "SELECT * FROM togo.logestechs_transporter_info WHERE togo_trans_id = '$transporterId'";
        $result_get_transporter_info = $this->dataBase->query($query_get_transporter_info);

        if (!$result_get_transporter_info) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] get_transporter_info query error"));

            $data = "(error)[create logestech order] get_transporter_info query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }
        
        $row_count_get_transporter_info = $this->dataBase->numRows($result_get_transporter_info);

        if ($row_count_get_transporter_info == 0) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] transporter not found"));

            $data = "(error)[create logestech order] transporter not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_get_transporter_info = $this->dataBase->fetchArray($result_get_transporter_info);

        $username = $row_get_transporter_info['username'];
        $password = $row_get_transporter_info['password'];
        $companyId = $row_get_transporter_info['company_id'];

        $data = "(success)[create logestech order] transporter info: [username: " . $username . ", password: " . $password . ", companyId: " . $companyId . "]";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        // get sender and receiver infos

        // sender

        $query_get_sender_info = "SELECT * FROM togo.addresses WHERE id = '$senderAddressId'";
        $result_get_sender_info = $this->dataBase->query($query_get_sender_info);

        if (!$result_get_sender_info) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] get_sender_info query error"));

            $data = "(error)[create logestech order] get_sender_info query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_count_get_sender_info = $this->dataBase->numRows($result_get_sender_info);

        if ($row_count_get_sender_info == 0) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] sender address not found"));

            $data = "(error)[create logestech order] sender address not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        // receiver

        $query_get_receiver_info = "SELECT * FROM togo.addresses WHERE id = '$receiverAddressId'";
        $result_get_receiver_info = $this->dataBase->query($query_get_receiver_info);

        if (!$result_get_receiver_info) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] get_receiver_info query error"));

            $data = "(error)[create logestech order] get_receiver_info query error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_count_get_receiver_info = $this->dataBase->numRows($result_get_receiver_info);

        if ($row_count_get_receiver_info == 0) {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] receiver address not found"));

            $data = "(error)[create logestech order] receiver address not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }

        $row_get_sender_info = $this->dataBase->fetchArray($result_get_sender_info);

        $sender_village_id = $row_get_sender_info['areaId'];
        $sender_city_id = $row_get_sender_info['cityId'];
        $sender_region_id = $row_get_sender_info['provinceId'];
        $sender_phone = $row_get_sender_info['phone_number'];
        $sender_name = $row_get_sender_info['name'];
        $sender_address_details = $row_get_sender_info['details'];

        $data = "(success)[create logestech order] sender info: [sender_name: " . $sender_name . ", sender_phone: " . $sender_phone . ", sender_address_details: " . $sender_address_details . ", sender_village_id: " . $sender_village_id . ", sender_city_id: " . $sender_city_id . ", sender_region_id: " . $sender_region_id . "]";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $row_get_receiver_info = $this->dataBase->fetchArray($result_get_receiver_info);

        $receiver_village_id = $row_get_receiver_info['areaId'];
        $receiver_city_id = $row_get_receiver_info['cityId'];
        $receiver_region_id = $row_get_receiver_info['provinceId'];
        $receiver_phone = $row_get_receiver_info['phone_number'];
        $receiver_name = $row_get_receiver_info['name'];
        $receiver_address_details = $row_get_receiver_info['details'];

        $data = "(success)[create logestech order] receiver info: [receiver_name: " . $receiver_name . ", receiver_phone: " . $receiver_phone . ", receiver_address_details: " . $receiver_address_details . ", receiver_village_id: " . $receiver_village_id . ", receiver_city_id: " . $receiver_city_id . ", receiver_region_id: " . $receiver_region_id . "]";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
    
        // the API

        if (!$consignmentNo) {
            $consignmentNo = "";
            $data = "(success)[create logestech order] consignment number not found";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
        } else {
            $data = "(success)[create logestech order] consignment number: " . $consignmentNo;
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);
        }

        $data = '{
            "email": "' . $username . '",
            "password": "' . $password . '",
            "pkg": {
                "cod": ' . $cod . ',
                "notes": "' . $notes . '",
                "invoiceNumber": "' . $consignmentNo . '",
                "senderFirstName": "' . $sender_name . '",
                "senderLastName": "",
                "senderMiddleName": "",
                "businessSenderName": "' . $sender_name . '",
                "senderPhone": "' . $sender_phone . '",
                "receiverPhone": "' . $receiver_phone . '",
                "receiverPhone2": "",
                "receiverName": "' . $receiver_name . '",
                "serviceType": "STANDARD",
                "shipmentType": "' . $delivery_type . '",
                "quantity": 1,
                "devices": []
        
            },
            "destinationAddress": {
                "addressLine1": "' . $receiver_address_details . '",
                "cityId": ' . $receiver_city_id . ',
                "villageId": ' . $receiver_village_id . ',
                "regionId": ' . $receiver_region_id . '
            },
            "pkgUnitType": "METRIC",
            "originAddress": {
                "addressLine1": "' . $sender_address_details  . '",
                "addressLine2": "",
                "cityId": ' . $sender_city_id . ',
                "regionId": ' . $sender_region_id . ',
                "villageId": ' . $sender_village_id . '
            }
        }';

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/ship/request/by-email',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'company-id: ' . $companyId,
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        $data = "(info)[create logestech order] logestechs create order api done, see (logestechsCreateOrderResponse.log) for more info";
        file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        $response_data = json_decode($response);

        file_put_contents("logestechsCreateOrderResponse.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);
    
        if ($response_data->id) {

            $logestechs_order_id = $response_data->id;
            $logestechs_barcode = $response_data->barcode;
            $logestechs_barcode_img_url = $response_data->barcodeImage;
            $logestechs_delivery_cost = $response_data->cost;

            $data = "(success)[create logestech order] logestechs order created, order info: [logestechs_order_id: " . $logestechs_order_id . ", logestechs_barcode: " . $logestechs_barcode . ", logestechs_barcode_img_url: " . $logestechs_barcode_img_url . ", logestechs_delivery_cost: " . $logestechs_delivery_cost . "]";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // (caution) if foreign deal-price is greater than or equal our sell-price then mark order

            if ($logestechs_delivery_cost >= $togo_sell_price) {
                // mark order (and send SMS)
                $this->recordAction($transporterId, -1, $orderId, -1, 'foreign delivery cost', "foreign deal-cost [" . $logestechs_delivery_cost . "] is greater than or equal sell-price [" . $togo_sell_price . "]", 100);
                
                $data = "(warning)[create logestech order] foreign deal-cost [" . $logestechs_delivery_cost . "] is greater than or equal sell-price [" . $togo_sell_price . "]";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                $query_mark_order = "UPDATE togo.orderbidengin SET foreign_order_error = 1, last_action = 'foreign delivery cost problem' WHERE id = '$orderId'";
                $result_mark_order = $this->dataBase->query($query_mark_order);

                if (!$result_mark_order) {
                    echo json_encode(array("status" => "error", "error" => "[create logestech order] mark_order query error"));

                    $data = "(error)[create logestech order] mark_order query error";
                    file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                    return array("status" => "error");
                }
            }

            // insert foreign order id (togo-order-id/logestechs-order-id mapping)

            $query_insert_foreign_id = "INSERT INTO togo.foreign_order_id_conversion 
            (
                companyId,
                foreignOrderId,
                togoOrderId,
                loges_barcode,
                loges_barcode_img
            ) 
            VALUES (
                '$transporterId',
                '$logestechs_order_id',
                '$orderId',
                '$logestechs_barcode',
                '$logestechs_barcode_img_url'
            )";

            $result_insert_foreign_id = $this->dataBase->query($query_insert_foreign_id);

            if (!$result_insert_foreign_id) {
                echo json_encode(array("status" => "error", "error" => "[create logestech order] insert_foreign_id query error"));

                $data = "(error)[create logestech order] insert_foreign_id query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return array("status" => "error");
            }

            $data = "(success)[create logestech order] logestechs-order-id inserted";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            // insert foreign delivery cost into order record

            $query_insert_foreign_cost = "UPDATE togo.orderbidengin SET foreign_delivery_price = '$logestechs_delivery_cost' WHERE id = '$orderId'";
            $result_insert_foreign_cost = $this->dataBase->query($query_insert_foreign_cost);

            if (!$result_insert_foreign_cost) {
                echo json_encode(array("status" => "error", "error" => "[create logestech order] insert_foreign_cost query error"));

                $data = "(error)[create logestech order] insert_foreign_cost query error";
                file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

                return array("status" => "error");
            }

            $data = "(success)[create logestech order] logestechs api done, order created successfully";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "success");

        } else {
            echo json_encode(array("status" => "error", "error" => "[create logestech order] create logestechs api error"));

            $data = "(error)[create logestech order] create logestechs api error";
            file_put_contents("create_exclusive_order.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

            return array("status" => "error");
        }
    }

    // --------------------------- Logestechs Record Actions ---------------------------

    public function addLogestechsLog($record)
    {
        $packageId = $record['packageId'];
        $newStatus = $record['newStatus'];
        $barcode = $record['barcode'];
        $notes = $record['notes'];
        $reason = $record['reason'];

        $query_insertRecord = "insert into togo.logestechslogtable (packageId, newStatus, barcode, notes, reason)
                                   values ('$packageId', '$newStatus', '$barcode', '$notes', '$reason')";

        $result_insertRecord = $this->dataBase->query($query_insertRecord);
    }

    // --------------------------- Logestechs Callbacks ---------------------------

    //bbb
    // main function:
    public function logestechsCallback($callData)
    {

        $actionType = $callData['newStatus'];

        $packageId = $callData['packageId'];
        $barcode = $callData['barcode'];
        $notes = $callData['notes'];
        $reason = $callData['reason'];
        $cod = $callData['cod'];

        // get togo-order-id by logestechs-order-id-number
        $query_getTogoOrderId = "select togoOrderId from togo.foreign_order_id_conversion where foreignOrderId = '$packageId'";
        $result_getTogoOrderId = $this->dataBase->query($query_getTogoOrderId);
        $row_getTogoOrderId = $this->dataBase->fetchArray($result_getTogoOrderId);

        $togoOrderId = $row_getTogoOrderId['togoOrderId'];

        // get order status, if finished or deleted -> mark as red, and get COD
        $query_getOrderStatus = "select order_status, foreign_order_error, CostLoad as cod, CustomerId as merchantId from togo.orderbidengin where id = '$togoOrderId'";
        $result_getOrderStatus = $this->dataBase->query($query_getOrderStatus);
        $row_getOrderStatus = $this->dataBase->fetchArray($result_getOrderStatus);
        $order_status = $row_getOrderStatus['order_status'];

        $isMarked = $row_getOrderStatus['foreign_order_error'];
        $old_cod = $row_getOrderStatus['cod'];

        if ($old_cod != $cod && $cod != 0) {
            $this->logestechsRecordAction($togoOrderId, $packageId, "ALTER_COD", "from (" . $old_cod . ") to (" . $cod . ")", $reason);

            // store new cod amount
            $query_insert_new_cod = "UPDATE togo.orderbidengin SET newCod = '$cod' WHERE id = '$togoOrderId'";
            $result_insert_new_cod = $this->dataBase->query($query_insert_new_cod);

            // send SMS to merchant to inform it with the COD change
            // get merchant mobile number
            $merchantId = $row_getOrderStatus['merchantId'];
            $query_get_merchant_mobile = "select PhoneNumber as mobile from togo.customer where id = '$merchantId'";
            $result_get_merchant_mobile = $this->dataBase->query($query_get_merchant_mobile);
            $row_get_merchant_mobile = $this->dataBase->fetchArray($result_get_merchant_mobile);
            $mobile = $row_get_merchant_mobile['mobile'];

            if (substr($mobile, 0, 4) === "+972") {
                $mobile = "0" . substr($mobile, 4); // Replace +972 with 0
            }

            $mobile_extra = "0592325932," . $mobile . ",0599201899,0599658113,0599040022"; // to be removed

            // send the SMS
            $msg = "COD changed from (" . $old_cod . ") to (" . $cod . ") for TOGO order (" . $togo_shipment_id . ")";
            $res = $this->send_SMS($mobile, $msg);

            if ($res == "message not sent") {
                // echo " - message not sent - ";
            } else {
                // echo " - message sent successfully - ";
            }
        }

        if ($order_status == "Delivered" || $order_status == "Deleted" || $actionType == "RETURNED_BY_RECIPIENT" || ($old_cod != $cod)) {
            $query_markOrder = "update togo.orderbidengin set foreign_order_error = 1 where id = '$togoOrderId'";
            $result_markOrder = $this->dataBase->query($query_markOrder);
            $isMarked = 1;
        }

        if ($actionType == "CANCELLED" && $isMarked != 1) {
            // cancel
            $this->logestechsCancelOrder($togoOrderId, $packageId);

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Canceled", 
                "تم إالغاء الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else if ($actionType == "SCANNED_BY_DRIVER_AND_IN_CAR" && $notes != "Failed Delivery" && $isMarked != 1) {
            // pickup
            /* $query_markOrder = "update togo.orderbidengin set foreign_order_error = 0 where id = '$togoOrderId'";
            $result_markOrder = $this->dataBase->query($query_markOrder); */
            $this->logestechsPickupOrder($togoOrderId, $packageId);

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Picked Up", 
                "تم تحميل الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else if ($actionType == "RETURNED_BY_RECIPIENT" && false) {
            $query_markOrder = "update togo.orderbidengin set foreign_order_error = 1 where id = '$togoOrderId'";
            $result_markOrder = $this->dataBase->query($query_markOrder);
            // return
            // $this->logestechsReturnOrder($togoOrderId, $packageId, $notes, $reason);

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Returned", 
                "تم إرجاع الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else if ($actionType == "DELIVERED_TO_RECIPIENT" && $isMarked != 1) { ////////////////////////////////////////////////
            // deliver
            $this->logestechsDeliverOrder($togoOrderId, $packageId);

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Delivered", 
                "تم توصيل الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else if ($actionType == "DELAYED" && $isMarked != 1) {
            // stuck
            $this->logestechsStuckOrder($togoOrderId, $packageId);

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Delayed", 
                "تأخر الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else {
            $this->logestechsRecordAction($togoOrderId, $packageId, $actionType, $notes, $reason);
        }
    }

    public function testSMSNono()
    {
        echo "activate";
        return;

        $mobile = "+972567471692";

        if (substr($mobile, 0, 4) === "+972") {
            $mobile = "0" . substr($mobile, 4); // Replace +972 with 0
        }

        /* echo $mobile;
        return; */

        $mobile_extra = $mobile . ",0592325932"; // to be removed

        $old_cod = 20;
        $cod = 10;
        $togo_shipment_id = 1254;

        // send the SMS
        $msg = "COD changed from (" . $old_cod . ") to (" . $cod . ") for TOGO order (" . $togo_shipment_id . ")";
        $res = $this->send_SMS($mobile, $msg);

        echo $res;
    }

    // delete logestechs shipment
    private function logestechsCancelOrder($togoOrderId, $packageId)
    {
        $orderId = $this->dataBase->escape($togoOrderId);

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$orderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];

        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] == "Waiting for Bids" || $row_Check_Order['order_status'] == "Deleted") {
                echo "notActiveOrder!";
            } else {
                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$orderId' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "Select deliveryWay,CostLoad, CustomerId From togo.OrderBidEngin where id='$orderId'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $this->recordAction($originalTransporterId, -1, $togoOrderId, -1, 'Logestechs Order Canceled', "Logestechs order (" . $packageId . ") Canceled for order (" . $togoOrderId . ")", 30);

                    $ClientId = $this->GetClientBidEnginOdoo($orderId);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];

                    if ($deliveryWay == 1) {
                        $discountvalue = $this->getdiscountvalue($orderId);

                        $result1 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0);
                        print_r($result1);
                    } else if ($deliveryWay == 2) {

                        $discountvalue = $this->getdiscountvalue($orderId);
                        $clientShareVal = $this->getClientShareValue($ClientId);
                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $CostLoad, 0); // to check ********
                        $ff2 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0); // to check ********
                    } else if ($deliveryWay == 3) {
                        $discountvalue = $this->getdiscountvalue($orderId);
                        $result1 = $this->release_escrow($originalTransporterId, $orderId, $costDelivery, $discountvalue);
                    } else  if ($deliveryWay == 4) {
                        $discountvalue = $this->getdiscountvalue($orderId);
                        $result1 = $this->release_escrow($ClientId, $orderId, $costDelivery, 0);
                        $idd1 = $this->release_escrow($ClientId, $orderId, $CostLoad, 0);
                    } else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    $this->Log_Order($orderId, $originalTransporterId, -1, $ClientId, "Order Canceled By Al-Barq"); // to check ********

                    // what if order was assigned and wating to be picked up !!!! // to check ********
                } else {
                    echo "OrderNotFound1";
                    return;
                }

                $query_Update = "Update togo.OrderBidEngin set IsDeleted = 1, order_status='Deleted' Where id='$orderId'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {
                    echo "orderDeleted";
                } else {
                    echo "OrderStatusNotUpdated";
                }
            }
        } else {
            echo "OrderNotFound2";
        }
    }

    // return logestechs shipment
    private function logestechsReturnOrder($togoOrderId, $packageId, $notes, $reason)
    {
        $OrderId = $togoOrderId;

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        $query_set_ReturnedOrder = "Update togo.orderbidengin set IsReturnAccepted = 1, IsReturnedOrder = 1 where id = '$OrderId'";
        $result_set_ReturnedOrder = $this->dataBase->query($query_set_ReturnedOrder);
        if ($result_set_ReturnedOrder == true) {

            $query_set_Receiver = "update togo.orderbidaddress set IdCityDes = IdCity, LatReciver = LatSender,
						LongReciver = LongSender, OtherDetailsDes = OtherDetails , 
						ReceiverAddressNum = (select phone_number from togo.addresses where id = SenderAddressId) 
						, ReciverAddressId = SenderAddressId
						where IdOrderBidEngin = '$OrderId'";
            $result_set_Receiver = $this->dataBase->query($query_set_Receiver);
            if ($result_set_Receiver == true) {

                $this->recordAction($TransporterId, -1, $OrderId, -1, 'Logestechs Order Returned', "Logestechs order (" . $packageId . ") returned for order (" . $OrderId . "), " . $notes, 30);

                // edited (send notification) ↓
                $webTokens = array();

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $transporter = $this->getTransporterNameAndImage($TransporterId);

                $data = array(
                    'orderId' => $OrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderReturned'
                );

                $title = "Logestechs Order Returned";
                $body = $transporter['AccountName'] . " returned order " . $OrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification(-1, $webTokens, $data, $title, $body);

                echo "Returned";
            } else {
                echo "Fail";
            }
        } else {
            echo "Fail";
        }
    }

    // mark order as stuck (delayed)
    private function logestechsStuckOrder($togoOrderId, $packageId)
    {
        $StuckComment = "";

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        $query_set_StuckOrder = "Update togo.orderbidengin set IsStuckOrder = 1, StuckOrderComment = '$StuckComment' where id = '$togoOrderId'";
        $result_set_StuckOrder = $this->dataBase->query($query_set_StuckOrder);
        if ($result_set_StuckOrder == true) {

            $this->recordAction($TransporterId, -1, $togoOrderId, -1, 'Logestechs Order Stuck', "Logestechs order (" . $packageId . ") marked as stuck for order (" . $togoOrderId . ")", 30);

            // echo "Stucked";
        } else {
            // echo "Fail";
        }
    }

    // pickup logestechs shipment
    private function logestechsPickupOrder($togoOrderId, $packageId)
    {
        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $transporterId = $row_getCompanyId['companyId'];

        $pickupDate = date("Y-m-d H:i:s");
        $query = "update togo.orderbidengin set pickup_date ='$pickupDate' where id='$togoOrderId'";
        $result = $this->dataBase->query($query);

        if ($result == true) {

            /* edited (record the action) */
            // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
            $this->recordAction($transporterId, -1, $togoOrderId, -1, 'Logestechs Order Picked Up', "Logestechs order (" . $packageId . ") Picked Up for order (" . $togoOrderId . ")", 30);

            /* edited - timeline (add pickup date to a transporter in the timeline) */
            $query_add_pickup_date = "update togo.transporterstimelinetb set transporter_pickupdate='$pickupDate' where order_id='$togoOrderId' and transporter_id='$transporterId'";
            $result_add_pickup_date = $this->dataBase->query($query_add_pickup_date);

            /* edited (add/update pickup date in orderbidengin) */
            $query_update_pickup_date = "update togo.orderbidengin set pickup_date='$pickupDate', order_status='Out for Delivery' where id='$togoOrderId'";
            $result_update_pickup_date = $this->dataBase->query($query_update_pickup_date);

            echo "Updated";

            $tokens = array();
            $webTokens = array();

            $query = "select obe.customerId as customerId, oba.ReceiverAddressNum, c.token, c.WebToken, c.phonenumber, oba.SenderAddressId, oba.id as orderAddId
                              from togo.orderbidengin as obe
                              inner join togo.orderbidaddress as oba on obe.id = oba.IdOrderBidEngin
                              inner join togo.customer as c on obe.customerId = c.id
                              where obe.id='$togoOrderId'";
            $result = $this->dataBase->query($query);

            while ($row = $this->dataBase->fetchArray($result)) {
                $transporter = $this->getTransporterNameAndImage($transporterId);

                array_push($tokens, $row['token']);
                array_push($webTokens, $row['WebToken']);

                $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                    if ($row['adminTokenNotify'] != null) {
                        array_push($webTokens, $row['adminTokenNotify']);
                    }
                }

                $data = array(
                    'orderId' => $togoOrderId,
                    'transporterName' => $transporter['AccountName'],
                    'transporterImageUrl' => $transporter['PersonalImgPath'],
                    'intent' => 'OrderPickedUp'
                );

                $title = "Order Picked Up";
                $body = $transporter['AccountName'] . " picked up order " . $togoOrderId;
                // $image = $transporter['PersonalImgPath'];

                $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);

                $ch = curl_init();
                $phoneNumber = "+972" . substr($row['ReceiverAddressNum'], 1);

                $msg = urlencode("Order #$togoOrderId has been picked up, to track the shipment, use our app www.google.com");
                // to check (send message method)

                curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phoneNumber&msg=$msg");
                curl_setopt($ch, CURLOPT_HEADER, 0);
                curl_exec($ch);
                curl_close($ch);
            }
        } else {
            echo "NotUpdated";
        }
    }

    // finish logestechs shipment
    private function logestechsDeliverOrder($togoOrderId, $packageId)
    {

        // of order is marked as return, mark it for review, else, dilever the order

        $togo_id = $togoOrderId;

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        $query_Check_Order = "Select * from togo.OrderBidEngin where id='$togo_id' AND (Orderfinished Is NULL Or Orderfinished = 0) 
										AND  (IsDeleted Is NULL Or IsDeleted = 0)";

        $result_Check_Order = $this->dataBase->query($query_Check_Order);
        $row_Check_Order = $this->dataBase->fetchArray($result_Check_Order);
        $row_count_Order = $this->dataBase->numRows($result_Check_Order);
        $originalTransporterId = $row_Check_Order['OriginalDeliveryId'];
        if ($row_count_Order > 0) {
            if ($row_Check_Order['order_status'] != "Delivered") {

                $this->OdooDb();
                $query_Get_Cost_Tra = "Select CostDelivery from togo.DeliveryAcceptOrderTable where IdOrder='$togo_id' AND IdTransporter='$originalTransporterId'";
                $result_Get_Cost_Tra = $this->dataBase->query($query_Get_Cost_Tra);
                $row_Get_Cost_Tra = $this->dataBase->fetchArray($result_Get_Cost_Tra);
                $costDelivery = $row_Get_Cost_Tra['CostDelivery'];

                $query_Get_Cost_Load = "SELECT
                engin.deliveryWay,
                engin.CostLoad,
                foreignOrder.loges_barcode AS foreign_order_barcode,
                engin.foreign_delivery_price,
                engin.CustomerId,
                engin.IsReturnedOrder
                FROM togo.OrderBidEngin AS engin
                INNER JOIN togo.foreign_order_id_conversion AS foreignOrder ON engin.id = foreignOrder.togoOrderId
                WHERE engin.id='$togo_id'";
                $result_Get_Cost_Load = $this->dataBase->query($query_Get_Cost_Load);
                $row_count_Load = $this->dataBase->numRows($result_Get_Cost_Load);

                if ($row_count_Load > 0) {

                    $ClientId = $this->GetClientBidEnginOdoo($togo_id);

                    $row_Get_Cost_Load = $this->dataBase->fetchArray($result_Get_Cost_Load);
                    $deliveryWay = $row_Get_Cost_Load['deliveryWay'];
                    $CostLoad = $row_Get_Cost_Load['CostLoad'];
                    $foreign_order_barcode = $row_Get_Cost_Load['foreign_order_barcode'];
                    $foreign_delivery_price = $row_Get_Cost_Load['foreign_delivery_price'];
                    $IsReturnedOrder = $row_Get_Cost_Load['IsReturnedOrder'];

                    ////////////////////////////////////////////////////////////////////////////

                    // new deal-logic:
                    // check if this transporter is deal-activated (from transportertable)
                    // if yes -> get foreign-delivery-cost (from orderbidengin)
                    // conrinue with thae same old deal logic
                    // create the in_invoice for this transporter
                    // ...

                    // check if deal activated fro this transporter
                    $query_check_transporter_deal = "SELECT deal_activated FROM togo.transportertable WHERE CustomerId = '$originalTransporterId'";
                    $result_check_transporter_deal = $this->dataBase->query($query_check_transporter_deal);
                    $row_check_transporter_deal = $this->dataBase->fetchArray($result_check_transporter_deal);
                    $deal_activated = $row_check_transporter_deal['deal_activated'];

                    // is deal ->
                    $is_deal = 0;
                    if ($deal_activated == 1/* $ClientId == 41 *//*  && false */) { // activate deal
                        $is_deal = 1;
                    }

                    ////////////////////////////////////////////////////////////////////////////

                    if ($deliveryWay == 1) {

                        if ($is_deal == 1) {
                            $this->release_escrow_deal_noneCOD($ClientId, $togoOrderId, $costDelivery);

                            // create in_invoice
                            $this->create_in_invoice($originalTransporterId, $togoOrderId, $foreign_order_barcode, $foreign_delivery_price);
                        } else {
                            $discountvalue = $this->getdiscountvalue($togoOrderId);

                            $result1 = $this->release_escrow($originalTransporterId, $togoOrderId, $costDelivery, $discountvalue);
                        }
                    } else if ($deliveryWay == 2) {

                        $clientShareVal = $this->getClientShareValue($ClientId);

                        // phoenix id = 178
                        /* if ($TransporterId == 178) {
                            $clientShareVal = 0;
                        } */

                        if ($is_deal == 1) {
                            if ($IsReturnedOrder == "1") {
                                $this->release_escrow($TransporterId, $togoOrderId, $CostLoad, 0);
                            } else {
                                $this->release_escrow_deal_COD($ClientId, $togoOrderId, $CostLoad, $clientShareVal, $costDelivery);
                                
                                // create in_invoice
                                $this->create_in_invoice($originalTransporterId, $togoOrderId, $foreign_order_barcode, $foreign_delivery_price);
                            }
                        } else {
                            $discountvalue = $this->getdiscountvalue($togoOrderId);

                            $result1 = $this->release_escrow($originalTransporterId, $togoOrderId, $costDelivery, $discountvalue);
                            if ($IsReturnedOrder == "1") {
                                $this->release_escrow($TransporterId, $togoOrderId, $CostLoad, 0);
                            } else {
                                $this->release_escrow($ClientId, $togoOrderId, $CostLoad, $clientShareVal);
                            }
                        }
                    } else if ($deliveryWay == 4) {

                        /* 
                        1- take new-cod amount from merchant to escrow
                        2- release new-cod amount to transporter

                        4-
                        if deal: {
                            1- release sell-price + invoice(sell-price) to merchant
                            2- create in-invoice(deal-price) to transporter
                        }

                        if non-deal: {
                            - release delivery-cost to transpoter
                        }
                        */

                        $this->move_to_escrow($ClientId, $togoOrderId, $CostLoad);
                        $this->release_escrow($TransporterId, $togoOrderId, $CostLoad, 0);

                        if ($is_deal == 1) {
                            $this->release_escrow_deal_noneCOD($ClientId, $togoOrderId, $costDelivery);
                            
                            // create in_invoice
                            $this->create_in_invoice($TransporterId, $togoOrderId, $foreign_order_barcode, $foreign_delivery_price);
                        } else {
                            $discountvalue = $this->getdiscountvalue($togoOrderId);

                            $this->release_escrow($TransporterId, $togoOrderId, $costDelivery, $discountvalue);
                        }
                    }  else {
                        echo "deliveryWayNotFound";
                        return;
                    }
                    
                    // $this->Log_Order($togo_id, $TransporterId, -1, $ClientId, "Order Finished By Transporter"); // to be removed

                    // $this->recordAction($originalTransporterId, -1, $togoOrderId, -1, 'Logestechs Order Delivered', "Logestechs order (" . $packageId . ") Delivered for order (" . $togoOrderId . ")", 30);

                    if (false) { // assigned transporters logic follows ->
                        $query_Get_Network_Payment = "SELECT id, FromTransporterId, ToTransporterId, DeliveryCost FROM
                        togo.network_order_payment WHERE IsPaid = 0 AND OrderId ='$togo_id'";
                        $result_Get_Network_Payment = $this->dataBase->query($query_Get_Network_Payment);
                        $row_count_payment = $this->dataBase->numRows($result_Get_Network_Payment);
                        if ($row_count_payment > 0) {
                            $discountvalue = $this->getdiscountvalue($togo_id);
                            while ($row = $this->dataBase->fetchArray($result_Get_Network_Payment)) {
                                $this->release_escrow($row['ToTransporterId'], $togo_id, $row['DeliveryCost'], $discountvalue);
    
                                $paymentId = $row['id'];
                                $query_Update_Payment = "Update togo.network_order_payment set IsPaid = 1 where id = '$paymentId'";
                                $this->dataBase->query($query_Update_Payment);
                            }
                        }
                    }
                    
                } else {
                    echo "OrderNotFound";
                    return;
                }

                $finishDate = date("Y-m-d H:i:s");

                /* edited (update order status to 'Order Finished') */
                $query_Update = "Update togo.OrderBidEngin set Orderfinished = 1, order_status='Delivered', dateFinished='$finishDate' Where id='$togo_id'";
                $result_Update_Order = $this->dataBase->query($query_Update);
                if ($result_Update_Order == true) {

                    /* edited (record the action) */
                    // $party_one_id, $party_one_name, $party_two_id, $party_two_name, $order_id, $description, $action_id
                    $this->recordAction($TransporterId, -1, $togo_id, -1, 'Logestechs Order Finished', "Logestechs order (" . $packageId . ") delivered for order " . $togo_id, 30);

                    echo "finishedOrder";
                    return; // notifications ->

                    $tokens = array();
                    $webTokens = array();

                    $customerId = $row_Get_Cost_Load['CustomerId'];
                    $client_query = "select Token As TokenNotify, WebToken As webTokenNotifiy from togo.Customer where id='$customerId'";

                    $Result_query = $this->dataBase->query($client_query);
                    while ($row = $this->dataBase->fetchArray($Result_query)) {
                        if ($row['TokenNotify'] != null) {
                            array_push($tokens, $row['TokenNotify']);
                        }

                        if ($row['webTokenNotifiy'] != null) {
                            array_push($webTokens, $row['webTokenNotifiy']);
                        }
                    }

                    $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
                    $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

                    while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
                        if ($row['adminTokenNotify'] != null) {
                            array_push($webTokens, $row['adminTokenNotify']);
                        }
                    }

                    $transporter = $this->getTransporterNameAndImage($TransporterId);

                    $data = array(
                        'orderId' => $togo_id,
                        'transporterName' => $transporter['AccountName'],
                        'transporterImageUrl' => $transporter['PersonalImgPath'],
                        'intent' => 'OrderFinished'
                    );

                    $title = "Order Finished";
                    $body = $transporter['AccountName'] . " finished order " . $togo_id;
                    // $image = $transporter['PersonalImgPath'];

                    $this->sendFCMNotification($tokens, $webTokens, $data, $title, $body);
                }
            } else {
                echo "Orderdelivered!";
            }
        } else {
            echo "OrderNotFound!";
        }
    }

    private function logestechsRecordAction($togoOrderId, $packageId, $action_type, $notes, $reason)
    {
        $togo_id = $togoOrderId;

        //get transporter id
        $query_getCompanyId = "select companyId from togo.foreign_order_id_conversion where togoOrderId = '$togoOrderId'";
        $result_getCompanyId = $this->dataBase->query($query_getCompanyId);
        $row_getCompanyId = $this->dataBase->fetchArray($result_getCompanyId);

        $TransporterId = $row_getCompanyId['companyId'];

        if ($action_type == "PENDING_CUSTOMER_CARE_APPROVAL") {
            $action_descreption = "submitted shipment";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Submitted Shipment " . $togoOrderId,
                "Submitted Shipment " . $togoOrderId,
                "", 
                ""
            );
        } else if ($action_type == "APPROVED_BY_CUSTOMER_CARE_AND_WAITING_FOR_DISPATCHER") {
            $action_descreption = "ready for dispatching";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Ready for Dispatching",
                "Order " . $togoOrderId . " Ready for Dispatching",
                "", 
                ""
            );
        } else if ($action_type == "ASSIGNED_TO_DRIVER_AND_PENDING_APPROVAL") {
            $action_descreption = "assigned to drivers";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Assigned to Driver",
                "Order " . $togoOrderId . " Assigned to Driver",
                "", 
                ""
            );
        } else if ($action_type == "REJECTED_BY_DRIVER_AND_PENDING_MANGEMENT") {
            $action_descreption = "rejected by drivers";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Rejected by Driver",
                "Order " . $togoOrderId . " Rejected by Driver",
                "", 
                ""
            );
        } else if ($action_type == "ACCEPTED_BY_DRIVER_AND_PENDING_PICKUP") {
            $action_descreption = "pending pickup";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Pending Pickup",
                "Order " . $togoOrderId . " Pending Pickup",
                "", 
                ""
            );
        } else if ($action_type == "SCANNED_BY_DRIVER_AND_IN_CAR" && $notes == "Failed Delivery") {
            $action_descreption = "picked up - failed package";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Picked Up - Failed Package",
                "Order " . $togoOrderId . " Picked Up - Failed Package",
                "", 
                ""
            );
        } else if ($action_type == "SCANNED_BY_HANDLER_AND_UNLOADED") {
            $action_descreption = "pending sorting";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Pending Sorting",
                "Order " . $togoOrderId . " Pending Sorting",
                "", 
                ""
            );
        } else if ($action_type == "OPENED_ISSUE_AND_WAITING_FOR_MANAGEMENT") {
            $action_descreption = "reported to management";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " Reported to Management",
                "Order " . $togoOrderId . " Reported to Management",
                "", 
                ""
            );
        } else if ($action_type == "POSTPONED_DELIVERY") {
            $action_descreption = "postponded delivery";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " ؛ostponded", 
                "تم تأجيل الطلب " . $togoOrderId, 
                "", 
                ""
            );
        } else if ($action_type == "PARTIALLY_DELIVERED") {
            $action_descreption = "partilally delivered";

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'], 
                "Order " . $togoOrderId . " Partially Delevered", 
                "تم توصيل الطلب " . $togoOrderId . " بشكل جزئي", 
                "", 
                ""
            );
        } else if ($action_type == "ALTER_COD") {
            $action_descreption = "order COD changed";
        } else {
            $action_descreption = $action_type;

            $this->addNotification(
                $togoOrderId, 
                $row_getOrderStatus['merchantId'],
                "Order " . $togoOrderId . " - " . $action_type,
                "Order " . $togoOrderId . " - " . $action_type,
                "", 
                ""
            );
        }

        $action_descreption .= $notes != "" ? (" - " . $notes) : "";

        $notification_title = "Logestechs Order Status Updated";
        $notification_description = "Logestechs shipment (" . $packageId . ") [" . $action_descreption . "] for order (" . $togo_id . ")";

        $this->recordAction($TransporterId, -1, $togo_id, -1, $notification_title, $notification_description, 30);

        // get client id
        $query_getClientId = "select CustomerId from togo.orderbidengin where id = '$togo_id'";
        $result_getClientId = $this->dataBase->query($query_getClientId);
        $row_getClientId = $this->dataBase->fetchArray($result_getClientId);

        $clientId = $row_getClientId['CustomerId'];

        $query_getTokens = "select Token, WebToken from togo.customer where id = '$clientId'";
        $result_getTokens = $this->dataBase->query($query_getTokens);

        $row_getTokens = $this->dataBase->fetchArray($result_getTokens);

        $tokens = array();
        $webTokens = array();

        if ($row_getTokens['Token'] != null) {
            array_push($tokens, $row_getTokens['Token']);
        }

        if ($row_getTokens['WebToken'] != null) {
            array_push($webTokens, $row_getTokens['WebToken']);
        }

        $webTokens = array();
        $tokens = array();

        $query_Get_Token_Admin = "Select TokenNotify as adminTokenNotify From togo.admin";
        $result_Get_Token_Admin = $this->dataBase->query($query_Get_Token_Admin);

        while ($row = $this->dataBase->fetchArray($result_Get_Token_Admin)) {
            if ($row['adminTokenNotify'] != null) {
                array_push($webTokens, $row['adminTokenNotify']);
            }
        }

        $transporter = $this->getTransporterNameAndImage($TransporterId);
        $data = array(
            'orderId' => $togo_id,
            'transporterName' => $transporter['AccountName'],
            'transporterImageUrl' => $transporter['PersonalImgPath'],
            'intent' => 'AlbarqStatusUpdated'
        );

        $title = "Logestechs Order Status Updated";
        $body = $transporter['AccountName'] . " - [" . $action_descreption . "] for order " . $togo_id;

        $this->sendFCMNotification(-1, $webTokens, $data, $notification_title, $notification_description);
    }

    /* 
        (End) Logestechs APIs #####################################################################################################
    */


    public function getAllTransportersToAdd($customerId)
    {
        /* echo $customerId;
        return; */

        $query = "select trans.*, customer.PhoneNumber as TransPhone, ratings.avgRate
        from togo.transportertable as trans
        left outer join togo.customer as customer on trans.CustomerId = customer.id
        left outer join togo.ratings on trans.CustomerId = ratings.customerid
        where trans.CustomerId not in (select net.TransporterId from togo.client_network as net where net.ClientId='$customerId')";
        $result = $this->dataBase->query($query);
        if ($result == true) {
            $num_rows = $this->dataBase->numRows($result);

            if ($num_rows > 0) {

                $transporters = array();

                while ($row = $this->dataBase->fetchArray($result)) {
                    array_push($transporters, array(
                        "AccountName" => $row['AccountName'], "TransPhone" => $row['TransPhone'], "PersonalImgPath" => $row['PersonalImgPath'], "AvgRating" => $row['avgRate']
                    ));
                }
                echo json_encode(array("server_response" => $transporters));
            } else
                return "no records";
        } else
            return "query error";
    }

    public function getAllAreas()
    {
        $query = "select areatable.id, areatable.name as areaName, citytable.name as cityName from areatable inner join citytable on areatable.cityId = citytable.id";
        $result = $this->dataBase->query($query);
        $areas = array();
        while ($row = $this->dataBase->fetchArray($result)) {
            array_push($areas, array("id" => $row['id'], "areaName" => $row['areaName'], "cityName" => $row['cityName']));
        }

        echo json_encode(array("areas" => $areas));
    }

    public function addToLogesAreas($togoAreaId, $togoAreaName, $logesVillageName)
    {
        /* echo $togoAreaId . " ------>>> " . $logesVillageName;
        return; */

        $query_addLogesVillage = "insert into togo.loges_areas_convert_table (togoAreaId, togoAreaName, logesAreaName) values ('$togoAreaId', '$togoAreaName', '$logesVillageName')";
        $result_addLogesVillage = $this->dataBase->query($query_addLogesVillage);

        if ($result_addLogesVillage) {
            echo "inserted";
        } else {
            echo "error";
        }
    }

    public function updateTogoAreaName($areaId, $newArName, $newEnName)
    {
        /* echo $togoAreaId . " ------>>> " . $logesVillageName;
        return; */

        $checkMain = 1;
        $checkAr = 1;
        $checkEn = 1;

        $query_updateMainName = "update areatable set name = '$newArName' where id = '$areaId'";
        $result_updateMainName = $this->dataBase->query($query_updateMainName);

        if (!$result_updateMainName) {
            $checkMain = 0;
        }

        $query_updateArName = "update arealang set name = '$newArName' where areaId = '$areaId' and languageId = 2";
        $result_updateArName = $this->dataBase->query($query_updateArName);

        if (!$result_updateArName) {
            $checkAr = 0;
        }

        $query_updateEnName = "update arealang set name = '$newEnName' where areaId = '$areaId' and languageId = 1";
        $result_updateEnName = $this->dataBase->query($query_updateEnName);

        if (!$result_updateEnName) {
            $checkEn = 0;
        }

        echo $checkMain . " - " . $checkAr . " - " . $checkEn;
    }

    public function tempMarkArea($id, $areaName, $cityName)
    {
        $query = "insert into togo.tempmarkedareas (areaId, areaName, cityName) values ('$id', '$areaName', '$cityName')";
        $result = $this->dataBase->query($query);

        if ($result) {
            echo "counter-inserted";
        } else {
            echo "counter-error";
        }
    }

    //////////////////////////////////// superset 

    public function fetchSupersetGusetToken()
    {
        $data = '{
            "password": "admin",
            "provider": "db",
            "refresh": true,
            "username": "admin"
        }';

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'http://superset.zone.ps:8088/api/v1/security/login',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        $accessToken = json_decode($output)->access_token;

        $guestToken = $this->fetchSupersetGusetToken_2($accessToken);

        echo $guestToken;
    }

    public function fetchSupersetGusetToken_2($accessToken)
    {
        $data = '{
            "user": {
              "username": "admin",
              "first_name": "Superset",
              "last_name": "Admin"
            },
            "resources": [
                {"type": "dashboard","id": "63e35e3d-df1b-4c89-b9ce-bdc0a691e2a6"},
                {"type": "dashboard","id": "f03e7777-89ae-4351-af5d-33b160745694"},
                {"type": "dashboard","id": "6346ab5e-ccfb-4878-97d7-77a1a39389de"},
                {"type": "dashboard","id": "d3dfeaa0-45b5-4298-b93c-f520029b81ae"},
                {"type": "dashboard","id": "699ee2b3-f616-4f95-ba81-d2639ff53c2e"}
            ],
            "rls": [
            ]
          }';

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'http://superset.zone.ps:8088/api/v1/security/guest_token/',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                "Authorization: Bearer " . $accessToken
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        return $output;
    }

    public function getClientInfo($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                $query = "select 
                customer.PhoneNumber, 
                concat(clienttable.FirstName, ' ', clienttable.LastName) as fullName, clienttable.Email, clienttable.IdClient,
                clientbusinesstable.BusinessName, clientbusinesstable.LogoUrl
                from togo.customer as customer 
                inner join togo.clienttable as clienttable on customer.id = clienttable.CustomerId
                inner join togo.clientbusinesstable as clientbusinesstable on customer.id = clientbusinesstable.CustomerId
                where customer.id = '$id'";

                $result = $this->dataBase->query($query);

                $row = $this->dataBase->fetchArray($result);

                echo json_encode(array("response" => $row));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getClientActiveOrdersCount($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                $query = "select count(*) as activeCount from togo.orderbidengin as engin where CustomerId = '$id' and order_status <> 'Delivered' and order_status <> 'Deleted'";

                $result = $this->dataBase->query($query);

                $row = $this->dataBase->fetchArray($result);

                echo json_encode(array("response" => $row['activeCount']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function getClientFinishedOrdersCount($id, $token)
    {
        if ($this->CheckToken($id, $token) == true) {
            if ($this->CheckBlockedCustomer($id) == false) {

                $query = "select count(*) as finishedCount from togo.orderbidengin as engin where CustomerId = '$id' and order_status = 'Delivered'";

                $result = $this->dataBase->query($query);

                $row = $this->dataBase->fetchArray($result);

                echo json_encode(array("response" => $row['finishedCount']));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function nonoTest($isClient)
    {
        $query = "select PhoneNumber from togo.customer where IsClient = '$isClient'";
        $result = $this->dataBase->query($query);

        $tempArr = array();

        if ($result) {
            while ($row = $this->dataBase->fetchArray($result)) {
                array_push($tempArr, $row['PhoneNumber']);
            }
        }

        echo json_encode(array("response" => $tempArr));
    }

    public function sendSMS($phone, $msg)
    {
        $ch = curl_init();
        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$phone&msg=$msg");
        curl_setopt($ch, CURLOPT_HEADER, 0);
        curl_exec($ch);
        curl_close($ch);
    }

    public function getPotato($test)
    {
        if (!$test) {
            echo "test not set";
        } else {
            echo "test set";
        }


        return;

        require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
        $foodService = new FoodAppService($this->dataBase);
        $foodService->testFunc();

        return;

        $curl = curl_init();

        curl_setopt_array($curl, [
            CURLOPT_URL => "https://voicerss-text-to-speech.p.rapidapi.com/",
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => "",
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 30,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => "POST",
            CURLOPT_POSTFIELDS => "src=Hello%2C%20world!&hl=en-us&r=0&c=mp3&f=8khz_8bit_mono",
            CURLOPT_HTTPHEADER => [
                "X-RapidAPI-Host: voicerss-text-to-speech.p.rapidapi.com",
                "X-RapidAPI-Key: 95db41d162msh7b4e9c73f3f811ap132adcjsn79fa762db1e6",
                "content-type: application/x-www-form-urlencoded"
            ],
        ]);

        $response = curl_exec($curl);
        $err = curl_error($curl);

        curl_close($curl);

        if ($err) {
            echo "cURL Error #:" . $err;
        } else {
            echo $response;
        }

        // echo "not activated!";
        return;

        // get all customers
        $query_get_customers = "SELECT * from togo.customer WHERE IsClient";
        $result_get_customers = $this->dataBase->query($query_get_customers);
        
        while ($row_get_customers = $this->dataBase->fetchArray($result_get_customers)) {
            // insert default pricing list for each customer

            $temp_merchant_id = $row_get_customers['id'];

            /* $query_insert_price_list = "INSERT INTO togo.merchantpricelist (
                merchantId,
                WestbankToWestbank,
                WestbankToJerusalem,
                WestbankToAreas48,
                WestbankToJordan,
                JerusalemToJerusalem,
                JerusalemToWestbank,
                JerusalemToAreas48,
                JerusalemToJordan,
                Areas48ToAreas48,
                Areas48ToWestbank,
                Areas48ToJerusalem,
                Areas48ToJordan
            )
            VALUES (
                '$temp_merchant_id',
                '20',
                '30',
                '70',
                '70',
                '30',
                '30',
                '70',
                '70',
                '70',
                '70',
                '70',
                '70'
            )";

            $result_insert_price_list = $this->dataBase->query($query_insert_price_list); */

            if (/* $result_insert_price_list */false) {
                echo "inserted\n";
            } else {
                echo "query error\n";
            }
        }

        return; ////////////////////////////////////////////////////////

        $togoForeignId = '53277';
        $companyId = '15';
        $sourceRegion = 1;
        $tragetRegion = 1;

        $data = '{
            "customerId": ' . $togoForeignId . ',
            "originRegionId": ' . $sourceRegion . ',
            "destinationRegionId": ' . $tragetRegion . '
        }';

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/guests/' . $companyId . '/cost',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'POST',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json'
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        echo $output;

        return
        
        // get all logestechs areas from loges_areas_convert_table
        $query_get_loges_areas = "SELECT * from togo.loges_areas_convert_table ORDER BY id DESC";
        $result_get_loges_areas = $this->dataBase->query($query_get_loges_areas);

        $areas = array();
        
        while ($row = $this->dataBase->fetchArray($result_get_loges_areas)) {
            array_push($areas, array("togoAreaId" => $row['togoAreaId'], "togoAreaName" => $row['togoAreaName'], "logesAreaName" => $row['logesAreaName']));
        }

        echo json_encode($areas);

        return; //////////////////////////////////////////////////////

        $query_get_all_orders = "select engin.id from togo.orderbidengin as engin order by engin.id desc";
        $result_get_all_orders = $this->dataBase->query($query_get_all_orders);
        while($row_get_all_orders = $this->dataBase->fetchArray($result_get_all_orders)) {

            $temp_order_id = $row_get_all_orders['id'];

            $query_get_last_action = "select actions.description from togo.actionsrecordstb as actions where actions.order_id = '$temp_order_id' order by actions.id desc limit 1";
            $result_get_last_action = $this->dataBase->query($query_get_last_action);
            $row_get_last_action = $this->dataBase->fetchArray($result_get_last_action);

            $last_action = $row_get_last_action['description'];

            //////

            $query_insert_last_action = "update togo.orderbidengin set last_action = '$last_action' where id = '$temp_order_id'";
            $result_insert_last_action = $this->dataBase->query($query_insert_last_action);

            if ($result_insert_last_action) {
                echo "updated\n";
            } else {
                echo "not updated\n";
            }
        }

        return;

        /*  echo "potato";
        return; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

        $loges_areas_list = array();

        /* $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?page=' . 1 . '&pageSize=100',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        $response_data = json_decode($response)->data;

        foreach ($response_data as $item) {
            echo "ID: " . $item->id . ", Name: " . $item->name . "\n";
        }

        return; /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */

        // echo "before\n";

        // $j = 1;
        for ($i = 1; $i < 5; $i++) {
            // echo "in - " . $i . "\n";
            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?page=' . $i . '&pageSize=100',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json',
                    'company-id: 151'
                ),
            ));

            $response = curl_exec($curl);

            curl_close($curl);

            $response_data = json_decode($response)->data;

            foreach ($response_data as $item) {
                array_push($loges_areas_list, array("id" => $item->id, "name" => $item->name, "cityName" => $item->cityName, "regionName" => $item->regionName));
                // echo $j . " - ID: " . $item->id . ", Name: " . $item->name . "\n";
                // $j++;
            }
        }

        // echo "after\n";

        // $j = 1;
        foreach ($loges_areas_list as $item) {
            echo "ID: " . $item['id'] . " ------- Name: " . $item['name'] . " ------- City: " . $item['cityName'] . " ------- Region: " . $item['regionName'] . "\n";
            // $j++;
        }

        // echo "end";

        return; ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

        $username = "hussam@phoenix.ps";
        $password = "hussam123";
        $companyId = "151";

        $foreign_order_id = "130411056997";

        $data = '{
            "email": "' . $username . '",
            "password": "' . $password . '"
        }';

        /*  echo $data;
        return; */

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/guests/' . $companyId . '/packages/' . $foreign_order_id . '/cancel',
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'PUT',
            CURLOPT_POSTFIELDS => $data,
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
            ),
        ));

        $response = curl_exec($curl);

        curl_close($curl);

        // echo $response . " \n ########################## \n";

        // record action and send notification

        // -----------------------------------------------

        // add logestechs id (order foreign_id) to foreign-transporter-companies-ids-conversion-table

        $response_data = json_decode($response);

        // $this->recordDebug("logestechs order canceled", $CustomerId, $originalTransporterId, $orderId);

        // $response_data['test_time'] = date("Y-m-d H:i:s");
        // $response_data['test_order_id'] = $orderId;

        file_put_contents("testAAAAAAAA.log", var_export($response_data, true) . "\n ================ \n", FILE_APPEND);

        return;

        $phone = "00592325932";
        $type = "1";
        $data = $phone . " - " . $type;

        file_put_contents("tes_login.log", var_export($data, true) . "\n ================ \n", FILE_APPEND);

        return;

        $query = "insert into togo.colortable (version, Color) values ('1', 'new color')";

        $result = $this->dataBase->query($query);

        if ($result === true) {
            // If the query was successful, get the ID of the newly inserted row
            $inserted_id = $this->dataBase->getLastIdInserted();

            // Return the ID as a custom result
            echo $inserted_id;
        } else {
            // If the query failed, return false as usual
            echo false;
        }

        return;

        $query_getDestProvId = "select gov.id as govId
                                            from togo.areatable as area 
                                            inner join togo.citytable as city on area.cityId = city.id 
                                            inner join togo.governoratetable as gov on city.governorateId = gov.id
                                            where area.id = 677";
        $result_getDestProvId = $this->dataBase->query($query_getDestProvId);
        $row_getDestProvId = $this->dataBase->fetchArray($result_getDestProvId);
        $dest_govId = $row_getDestProvId['govId'];

        if ($dest_govId == 5) {
            echo 30;
        } else if ($dest_govId == 41 || $dest_govId == 64 || $dest_govId == 66 || $dest_govId == 68) {
            echo 70;
        } else {
            echo 20;
        }

        // echo $src_govId . " -> " . $dest_govId; 

        return;

        echo "batata";
        return;

        $query = "INSERT INTO togo.customer (PhoneNumber, IsClient, RegionId, LanguageId) 
                                     VALUES ('0522222222', '1', '1', '1')
                                     RETURNING id";

        $result = $this->dataBase->query($query);

        echo $result;
    }

    /* ---------------------------------------- (Food APIs) ---------------------------------------- */

    public function food_SendVerificationCode($phoneNumber)
    {
        require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
        $foodService = new FoodAppService($this->dataBase);
        $foodService->sendVerificationCode($phoneNumber);
    }

    public function food_registerUser($userInfo, $verificationCode)
    {
        require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
        $foodService = new FoodAppService($this->dataBase);
        $foodService->registerUser($userInfo, $verificationCode);
    }

    public function getCitiesAndAreas($langId)
    {
        require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
        $foodService = new FoodAppService($this->dataBase);
        $result = $foodService->getCitiesAndAreas($langId);

        echo $result;
    }

    public function food_getClientMainPersonalInfo($customerId, $token)
    {
        if ($this->CheckToken($customerId, $token) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getClientMainPersonalInfo($customerId);
                
                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getCustomers($customerId, $token, $langId)
    {
        if ($this->CheckToken($customerId, $token) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getCustomers($customerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getCustomersLocations($customerId, $token)
    {
        if ($this->CheckToken($customerId, $token) == true) {
            if ($this->CheckBlockedCustomer($customerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getCustomersLocations($customerId);

                echo json_encode(array("customers_locations" => $result));
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getClientAreas($clientCustomerId, $token, $langId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $areas = $foodService->getClientAreas($clientCustomerId, $langId);

                echo json_encode($areas);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_addCustomer($clientCustomerId, $token, $customerPhoneNumber, $areaId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->addCustomer($clientCustomerId, $customerPhoneNumber, $areaId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_createFoodOrder($clientCustomerId, $token, $deliveryParams, $addresses)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->createFoodOrder($deliveryParams, $addresses, $clientCustomerId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getClientOrderDetails($clientCustomerId, $token, $orderId, $langId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getClientOrderDetails($orderId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_clientCancelNewOrder($clientCustomerId, $token, $orderId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->clientCancelNewOrder($orderId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllNewOrders($clientCustomerId, $token, $langId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllNewOrders($clientCustomerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllActiveOrders($clientCustomerId, $token, $langId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllActiveOrders($clientCustomerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllFinishedOrders($clientCustomerId, $token, $langId)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllFinishedOrders($clientCustomerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllNewOrdersCount($clientCustomerId, $token)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllNewOrdersCount($clientCustomerId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllActiveOrdersCount($clientCustomerId, $token)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllActiveOrdersCount($clientCustomerId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getAllFinishedOrdersCount($clientCustomerId, $token)
    {
        if ($this->CheckToken($clientCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($clientCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getAllFinishedOrdersCount($clientCustomerId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    /* ----------- (food transporter apis) ----------- */

    public function food_updateAvailability($transporterCustomerId, $token, $status)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->updateAvailability($transporterCustomerId, $status);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_updateTransporterLocation($transporterCustomerId, $token, $long, $lat)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->updateTransporterLocation($transporterCustomerId, $long, $lat);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getTransporterActiveOrders($transporterCustomerId, $token, $langId)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getTransporterActiveOrders($transporterCustomerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getTransporterFinsihedOrders($transporterCustomerId, $token, $langId)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getTransporterFinsihedOrders($transporterCustomerId, $langId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_getTransporterTransactions($transporterCustomerId, $token)
    {
        if (/* $this->CheckToken($transporterCustomerId, $token) == true */true) {
            if (/* $this->CheckBlockedCustomer($transporterCustomerId) == false */true) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $result = $foodService->getTransporterTransactions($transporterCustomerId);

                echo json_encode($result);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_responseToNewOrder($transporterCustomerId, $token, $orderId, $response)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->responseToNewOrder($transporterCustomerId, $orderId, $response);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_pickupOrder($transporterCustomerId, $token, $orderId)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->pickupOrder($orderId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_finishOrder($transporterCustomerId, $token, $orderId)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->finishOrder($orderId);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function food_confirmFinishOrder($transporterCustomerId, $token, $orderId/* , $verificationCode */)
    {
        if ($this->CheckToken($transporterCustomerId, $token) == true) {
            if ($this->CheckBlockedCustomer($transporterCustomerId) == false) {
                require_once(dirname(__FILE__) . "/Services/FoodAppService.php");
                $foodService = new FoodAppService($this->dataBase);
                $foodService->confirmFinishOrder($transporterCustomerId, $orderId/* , $verificationCode */);
            } else {
                echo "Blocked";
            }
        } else {
            echo "TokenError";
        }
    }

    public function myTestFunc()
    {
        $txt = "يرجى الرد بنعم أو لا";
        $txt = htmlspecialchars($txt);
        $txt = rawurlencode($txt);
        $audio = file_get_contents('https://translate.google.com/translate_tts?ie=UTF-8&client=gtx&q=' . $txt . '&tl=ar-IN');

        // Specify the output file path
        $outputFilePath = '../audio/transporterFoodAudio/unclear.mp3';  // Change this to your desired file name and format

        // Save the audio to the output file
        $res = file_put_contents($outputFilePath, $audio);

        echo $res;
        return;

        echo "Audio saved as $outputFilePath";


        return;

        $text = "علاوي حبيب قلبي أبو حسين";

        // Run eSpeak command
        $outputFile = 'output_audio.wav';
        $command = "espeak -w $outputFile '$text'";
        exec($command);

        echo "Text converted to audio and saved as $outputFile";
    }

    public function getLogestechsAreaByName($customerId, $searchStr)
    {

        // get network-transporter id
        $query_get_transporter_id = "SELECT TransporterId FROM togo.client_network WHERE ClientId = '$customerId' AND deleted = 0 LIMIT 1";
        $result_get_transporter_id = $this->dataBase->query($query_get_transporter_id);

        if (!$result_get_transporter_id) {
            echo json_encode(array("status" => "error", "error" => "get_transporter_id query error"));
            return;
        }

        $row_count_get_transporter_id = $this->dataBase->numRows($result_get_transporter_id);

        if ($row_count_get_transporter_id == 0) {
            echo json_encode(array("status" => "error", "error" => "network member not found"));
            return;
        }

        $row_get_transporter_id = $this->dataBase->fetchArray($result_get_transporter_id);
        $transporterId = $row_get_transporter_id['TransporterId'];

        // get foreign company id
        $query_get_company_id = "SELECT company_id FROM togo.logestechs_transporter_info WHERE togo_trans_id = '$transporterId'";
        $result_get_company_id = $this->dataBase->query($query_get_company_id);

        if (!$result_get_company_id) {
            echo json_encode(array("status" => "error", "error" => "get_company_id query error"));
            return;
        }

        $row_count_get_company_id = $this->dataBase->numRows($result_get_company_id);

        if ($row_count_get_company_id == 0) {
            echo json_encode(array("status" => "error", "error" => "transporter not found"));
            return;
        }

        $row_get_company_id = $this->dataBase->fetchArray($result_get_company_id);
        $companyId = $row_get_company_id['company_id'];

        ////////////////////////////////////////////////////////////////////

        // call logestechs' api to get areas by name:-

        $str = urlencode($searchStr);

        $curl = curl_init();

        curl_setopt_array($curl, array(
            CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?search=' . $str,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_ENCODING => '',
            CURLOPT_MAXREDIRS => 10,
            CURLOPT_TIMEOUT => 0,
            CURLOPT_FOLLOWLOCATION => true,
            CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
            CURLOPT_CUSTOMREQUEST => 'GET',
            CURLOPT_HTTPHEADER => array(
                'Content-Type: application/json',
                'company-id: ' . $companyId
            ),
        ));

        $output = curl_exec($curl);

        curl_close($curl);

        $error = json_decode($output)->error;

        if ($error) {
            $status = json_decode($output)->status;
            echo json_encode(array("status" => "error", "error" => "logestechs api error: " . $status . ", " . $error));
            return;
        }

        // extract only the data(list of areas) and decode json object to php object/arr
        $dataArr = json_decode($output)->data;

        // it will contain the list of areas to handle
        $areasArr = array();

        foreach ($dataArr as $area) {
            array_push($areasArr, $area);
        }
        
        echo json_encode(array("status" => "success", "areas" => $areasArr));
    }

    public function getALlLogestechsAreas($customerId)
    {

        // get network-transporter id
        $query_get_transporter_id = "SELECT TransporterId FROM togo.client_network WHERE ClientId = '$customerId' AND deleted = 0 LIMIT 1";
        $result_get_transporter_id = $this->dataBase->query($query_get_transporter_id);
        $row_get_transporter_id = $this->dataBase->fetchArray($result_get_transporter_id);
        $transporterId = $row_get_transporter_id['TransporterId'];

        /* echo $transporterId;
        return; */

        // get foreign company id
        $query_get_company_id = "SELECT company_id FROM togo.logestechs_transporter_info WHERE togo_trans_id = '$transporterId'";
        $result_get_company_id = $this->dataBase->query($query_get_company_id);
        $row_get_company_id = $this->dataBase->fetchArray($result_get_company_id);
        $companyId = $row_get_company_id['company_id'];

        /* echo "transporterId: " . $transporterId . ", companyId: " . $companyId;
        return; */

        

        // it will contain the list of areas to handle:-
        $areasArr = array();

        $i = 1;
        while (true) {
           
            // call logestechs' api to get areas
            $curl = curl_init();

            curl_setopt_array($curl, array(
                CURLOPT_URL => 'https://apisv2.logestechs.com/api/addresses/villages?page=' . $i . '&pageSize=100',
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => '',
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 0,
                CURLOPT_FOLLOWLOCATION => true,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => 'GET',
                CURLOPT_HTTPHEADER => array(
                    'Content-Type: application/json',
                    'company-id: ' . 151
                ),
            ));

            $output = curl_exec($curl);

            curl_close($curl);

            // extract only the data(list of areas) and decode json object to php object/arr:-
            $dataArr = json_decode($output)->data;

            foreach ($dataArr as $area) {
                array_push($areasArr, $area);
            }

            if (count($dataArr) < 100) {
                break;
            }

            $i++;
        }
        
        echo json_encode(array("status" => "success", "areas" => $areasArr));
    }
}

try {

    $TOGOApp = new ToGo();
} catch (Exception $e) {
    echo 'Caught exception: ', $e->getMessage(), "\n";
}

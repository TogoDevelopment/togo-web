<?php
class ToGo
{
    public $params = array();
    public $options =  array( "Scrollable" => SQLSRV_CURSOR_KEYSET);

    private $dataBase;
    public $response = array();

    private $url;
    private $db;
    private $username;
    private $password;
    private $common;

    private $uid;
    private $models;
    public function Configration ()
    {

        
    }
/****** Odooo Functions ***********/
    public function OdooDb()
    {
        require_once('ripcord-master/ripcord.php');
        $this->url = "http://192.168.15.51";
        $url = "http://192.168.15.51";
        $this->db = "togo";
        $this->username = "mmm@mmm.mmm";
        $this->password = "ToGo@2018";
        $this->common=ripcord::client("$url/xmlrpc/2/common");
        $this->uid = $this->common->authenticate($this->db, $this->username, $this->password, array());
        $this->models = ripcord::client("$url/xmlrpc/2/object");

    }

    //Customer Change Youre Balanace in odoo {T or C} 
    public function editrecordPayment($idCustomere,$NewValue)
    {
        $this->OdooDb();
        $id=$idCustomere;
        $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
        array(array((int)$id), array('fax'=>(int)$NewValue)));
    }


    // Customer Get Balanace From Youre Account {Transporter or client}
    public function getBalance($idCustomere)
    { 
        $this->OdooDb();
        $id=$idCustomere;
      /*
        $this->OdooDb();
        $id=$idCustomere;
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
        'res.partner', 'search_read',
        array(array(array('street', '=', $id))),
        array('fields'=>array('fax'), 'limit'=>5));
        $Balance=$result[0]['fax'];
        return $Balance;
        */

        //New Code Balance Customer :
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
            'res.partner', 'search_read',
            array(array(array('street', '=', $id))),
            array('fields'=>array('credit'), 'limit'=>5));

        $Balance_credit=$result[0]['credit'];

     
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
        'res.partner', 'search_read',
        array(array(array('street', '=', $id))),
        array('fields'=>array('debit'), 'limit'=>5));

        $Balance_debit=$result[0]['debit'];
               
        $result_Balance=  $Balance_debit-$Balance_credit;//here 5ra
         if($result_Balance < 0)
        {
             
            return $result_Balance * -1;
        }
        else
        {
            
            return $result_Balance;
        } 

//echo "result".$result_Balance;
       
            // $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
            // 'res.partner', 'search_read',
            // array(array(array('street', '=', $id))),
            // array('fields'=>array('fax'), 'limit'=>5));
            // return $result[0]['fax'];
    }

//diala
public function BalanceIsEnough($idCustomere , $amount){
    $this->OdooDb();
    $id=$idCustomere;

    $result=$this->models->execute_kw($this->db,$this->uid,$this->password,'res.partner','can_request',array('self',$idCustomere,$amount));
    if($result==1){
        return true;
    }else if ($result==-1)
      return false;

    
}
    // Customer Get Odoo Id {Transporter or Client}
    public function getOdooId($idCustomere)
    {
        $query="Select OdooId from Customer Where id='$idCustomere'";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);

        return $row['OdooId'];
    }
    // Customer Get Balanace Trip From Odoo {Transporter or Client}
    public function getBalanceBidEngin($CustomerOdooId)
    {
        $this->OdooDb();
        $idCustomer=$CustomerOdooId;
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
                        'product.template', 'search_read',
                        array(array(array('name', '=', $idCustomer))),
                        array('fields'=>array('list_price'), 'limit'=>1));

        $Number=$result[0]['list_price'];
        return $Number;
    }

    public function GetIdOdootripId($type,$BidEnginId)
    {
        if($type == 1)
        {
            $query="Select OdooInvoiceClient From OrderBidEngin where id='$BidEnginId'";
            $result=$this->dataBase->query($query);
            $row=$this->dataBase->fetchArray($result);
            return $row['OdooInvoiceClient'];

        }
        else
        if($type == 2)
        {
            $query="Select OdooInvoiceTransporter From OrderBidEngin where id='$BidEnginId'";
            $result=$this->dataBase->query($query);
            $row=$this->dataBase->fetchArray($result);
            return $row['OdooInvoiceTransporter'];
        }
    }


    public function getEscrowwOdooId()
    {
        $query="Select EscrowIdOdoo from ConfigInvoiceTable";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);

        return $row['EscrowIdOdoo'];
    }

    public function getPhoneCustomer($idCustomere)
    {
        $query="Select PhoneNumber from Customer Where id='$idCustomere'";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);

        return $row['PhoneNumber'];
    }

    //Get Discount ToGo Trip 
    public function getdiscountTogoTrip()
    {
        $query= "Select DiscountToGo from ConfigInvoiceTable";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);

        return $row['DiscountToGo'];
    }
    //Get id odoo discount transnporter Trip 
    public function getdiscountIdCustomerOdooTrip($OrderId,$Type)
    {
        $OrderId=$OrderId;
        $Type=$Type;
        $query= "Select OdooInvoiceTransporter,OdooInvoiceClient from OrderBidEngin where id='$OrderId'";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);

        if($Type == "Transporter")
            return $row['OdooInvoiceTransporter'];
        else
         if($Type == "Client")
            return $row['OdooInvoiceClient'];
    }


    public function GetClientBidEnginOdoo($OrderId)
    {
        $OrderId=$OrderId;
        $query= "Select CustomerId from OrderBidEngin where id='$OrderId'";
        $result=$this->dataBase->query($query);
        $row=$this->dataBase->fetchArray($result);


        return $row['CustomerId'];

    }

    // New Odoo Invoice Functions
    public function CreateJournalTrip($idCustomer,$OrderId)
    {
        $journal_id = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'account.move', 'create',
                                    array(array('journal_id'=>'3','ref'=>$OrderId)));
        return $journal_id;
    }

    public function CreditJournalTrip($CustomerOdooId,$journalId,$CreditValue,$accountId,$label)
    {
        $journal_id_cridit = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'account.move.line', 'create',
                                    array(array('move_id'=>(int)$journalId,'account_id'=>(int)$accountId,'name'=>$label,'partner_id'=>(int)$CustomerOdooId,
                                        'debit'=>0.0,'credit'=>(float)$CreditValue),array('check_move_validity'=>False)));
        return $journal_id_cridit;
    }

    public function DebitJournalTrip($CustomerOdooId,$journalId,$DebitValue,$accountId,$label)
    {
        $journal_id_Debit = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'account.move.line', 'create',
                                    array(array('move_id'=>(int)$journalId,'account_id'=>(int)$accountId,'name'=>$label,'partner_id'=>(int)$CustomerOdooId,
                                        'debit'=>(float)$DebitValue,'credit'=>0.0),array('check_move_validity'=>False)));
        return $journal_id_Debit;
    }
    

   public function connectDatabase(){
        require_once ('database.php');  
        $this->dataBase = $database; 
    }
    

    public function setDatabase($dataBase){
        $this->dataBase=$dataBase;
    } 
    
    /***    Checkd Flags ***/
    
    public function CheckToken($CustomerId,$Token)
    {
        
        $CustomerId=$this->dataBase->escape($CustomerId);
        $Token=$this->dataBase->escape($Token);
        
        $query="Select * from Customer Where TokenDevice='$Token' AND id='$CustomerId'";
        $result=$this->dataBase->query($query);
        $row_count = $this->dataBase->numRows( $result );
        if($row_count > 0)
        {
            return true;   
        }
        else
        {
            return false;
        }
    }
    
    public function CheckBlockedCustomer($CustomerId)
    {
        $CustomerId=$this->dataBase->escape($CustomerId);
        $query="Select IsBlocked From Customer Where id='$CustomerId'";
        $result=$this->dataBase->query($query);
        $row= $this->dataBase->fetchArray($result);
        if($row['IsBlocked'] == 1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    
    public function CheckAcceptedTransporter($CustomerId)
    {
        $CustomerId=$this->dataBase->escape($CustomerId);
        $query="Select IsAccepted,IsTransporter From Customer Where id='$CustomerId'";
        $result=$this->dataBase->query($query);
        $row= $this->dataBase->fetchArray($result);
        
        if($row['IsTransporter'] == 1)
        {
            if($row['IsAccepted'] == 1)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        else
        {
            return true;
        }
    }
    
    public function GetCountRows($query)
    {
        $result=$this->dataBase->query($query);
        $row_count_phone = $this->dataBase->numRows( $result );
        
        return $row_count_phone;
        
    }
    
    public function GetTokenCustomer($IdCustomer)
    {
        $Query_Get_Token="Select Token From Customer Where id='$IdCustomer'";
        $result=$this->dataBase->query($Query_Get_Token);
        if($result == true)
        {
            $row= $this->dataBase->fetchArray($result);
            return $row['Token'];
        }
    }
    
    
    public function getDateFormat($dateParameter,$dateFormat)
    {
        $date_Param = strtotime($dateParameter);
        $DateFormat=date($dateFormat, $date_Param);
        
        return $DateFormat;
    }
    
    

    public function CustomerCheckRateTrip($CustomerId,$OrderId)
    {
        $query="Select * from TripRating where CustomerId='$CustomerId' AND TripId='$OrderId'";
        $result=$this->dataBase->query($query);
        $countRow=$this->dataBase->numRows($result);
        if($countRow > 0)
        {
            return '1';
        }
        else
        {
            return '2';
        }


    }
    /***   End Checkd Flags ***/
    
    //** Start Apis Functions **//
    public function GetAllLanguages()
    {
        $LangArray = array();
        $query_Get_All_Languages="Select * from Language where deleted=0";
       
        $result_Get_Lang=$this->dataBase->query($query_Get_All_Languages);
        while($row= $this->dataBase->fetchArray($result_Get_Lang))
        {
            array_push($LangArray,array("id"=>$row['id'],"Name"=>$row['LangName'],"Orintation"=>$row['LangOrintation']));
            
        }
            echo json_encode(array("server_response"=>$LangArray));
    }
    
    public function GetAllRegions($IdLang)
    {
        $IdLang=$this->dataBase->escape($IdLang);
        $RegionArray = array();
        $query_Get_All_Region="Select * from RegName Where  deleted=0 AND LangId='$IdLang'";
        $result_Get_Reg=$this->dataBase->query($query_Get_All_Region);
        while($row= $this->dataBase->fetchArray($result_Get_Reg))
        {
            array_push($RegionArray,array("RegId"=>$row['RegId'],"Name"=>$row['RegName']));
            
        }
           echo json_encode(array("server_response"=>$RegionArray));
    }
    
    
    public function GetPostRegions($IdReg)
    {
        $IdReg=$this->dataBase->escape($IdReg);
        $PostRegionArray = array();
        $query_Get_All_Post_Region="Select * from PostRegion Where RegionId='$IdReg' AND deleted=0";
        $result_Get_Post_Reg=$this->dataBase->query($query_Get_All_Post_Region);
        while($row= $this->dataBase->fetchArray($result_Get_Post_Reg))
        {
            array_push($PostRegionArray,array("id"=>$row['id'],"PostValue"=>$row['PostValue']));
            
        }
           echo json_encode(array("server_response"=>$PostRegionArray));
    } 
    
    public function Login($PhoneNumber,$TypeCustomer)
    {
        $this->OdooDb();
        $PhoneNumber=$this->dataBase->escape($PhoneNumber);
        $TypeCustomer=$this->dataBase->escape($TypeCustomer);
        
        $typeCustomerflag;
            
        if($TypeCustomer == "Client")
           
           $typeCustomer=1;
        else
        if($TypeCustomer == "Transporter")
       
           $typeCustomer=2;
             
            
        else
        
         $typeCustomer=0;
        
        
        
        $Check_phone="Select * from Customer Where PhoneNumber='$PhoneNumber' AND IsVerified=1";
        
        $result_check_Phone=$this->dataBase->query($Check_phone);
        $row_count_phone = $this->dataBase->numRows( $result_check_Phone );
        
        if($row_count_phone > 0)
        {
            if($typeCustomer == 1)
                $query_Check_Customer="Select * from Customer Where IsClient=1";
            else
            if($typeCustomer == 2)
                $query_Check_Customer="Select * from Customer Where IsTransporter=1";
            else
            {
                echo "TypeCustomer_Error";
                return;
                
            }
            if($typeCustomer!=1 && $typeCustomer!=2)
            {
                
            }
            else
            {
                $result_check_CustomerType=$this->dataBase->query($query_Check_Customer);
                $row_count_Customer = $this->dataBase->numRows( $result_check_CustomerType );
                
                if($row_count_Customer > 0)
                {
                    /*if($PhoneNumber == "+970563214566" || $PhoneNumber == "+9703675421212")
                    $Code_Verify = 5555;
                    else
                     $Code_Verify = mt_rand(1000, 9999);
                    */
                   // $Code_Verify = mt_rand(1000, 9999);
                    $Code_Verify=2222;
                    $query_Update_Code="Update Customer Set VerifiedKey='$Code_Verify' Where PhoneNumber=N'$PhoneNumber'";
                    $result_Update_Phone=$this->dataBase->query($query_Update_Code);
                    
                    if($result_Update_Phone == true)
                    {
                        //Send SMS
                        //echo "Updated";

                        $amobile=$PhoneNumber;
                        $amobile."Mobile";
                        //$Code_Verify=$Code_Verify;
                        $Code_Verify=2222;
                        $ch = curl_init();
                        $Code_Verify1="ToGo%20Code%20Is:%20".$Code_Verify;
                         
                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        $reslt_Send=curl_exec($ch);
                      
                         curl_close($ch);
                
                         
                        if($reslt_Send!="Message Sent Successfully!")
                        {
                            echo "NotUpdated";
                        }
                        else
                        {
                             echo "Updated";
                        }
                    }
                    else
                    {
                        echo "NotUpdated";
                    }
                }
                else
                {
                    echo "TypeCustomerError";
                }
            }
        }
        else
        {
          

            $query_delete_exists_Number="delete from Customer where PhoneNumber='$PhoneNumber'";
            $query_Get_Odoo_Id="Select OdooId From Customer Where PhoneNumber='$PhoneNumber'";
            $result_Get_Id=$this->dataBase->query($query_Get_Odoo_Id);

            $row_Get_Id=$this->dataBase->fetchArray($result_Get_Id);
            $OdooId=$row_Get_Id['OdooId'];
            
            $this->models->execute_kw($this->db, $this->uid, $this->password,
            'res.partner', 'unlink',array((int)$OdooId));
            $result_delete_customer=$this->dataBase->query($query_delete_exists_Number);
           /* if($PhoneNumber == "+970563214566" || $PhoneNumber == "+9703675421212")
                $Code_Verify = 5555;
            else
            $Code_Verify = mt_rand(1000, 9999);
            */

            //$Code_Verify = mt_rand(1000, 9999);
            $Code_Verify=2222;
            if($typeCustomer == 1)
                $query_Add_Phone="Insert into Customer (PhoneNumber,VerifiedKey,IsAccepted,IsClient) Values (N'$PhoneNumber','$Code_Verify',0,1)";
            else
            if($typeCustomer == 2)
               
                $query_Add_Phone="Insert into Customer (PhoneNumber,VerifiedKey,IsAccepted,IsTransporter) Values (N'$PhoneNumber','$Code_Verify',0,1)";
            else
            {
                echo "Error_Type";
            }
            if($typeCustomer!=1 && $typeCustomer!=2)
            {
                
            }
            else
            {
                $result_Add_Phone=$this->dataBase->query($query_Add_Phone);
                if($result_Add_Phone == true)
                {
                    // Send By SMS 

                    $query_Get_Last_Id="SELECT id FROM Customer WHERE createdAt=(SELECT MAX(createdAt)FROM Customer)";
                    $result_Last_Id=$this->dataBase->query($query_Get_Last_Id);
                    $row_Last_Id=$this->dataBase->fetchArray($result_Last_Id);
                    $CustomerId=$row_Last_Id['id'];



                   /* $id = $this->models->execute_kw($this->db, $this->uid, $this->password,
                    'res.partner', 'create',
                    array(array('name'=>$PhoneNumber,'street'=>$CustomerId,'street2'=>$typeCustomer)));*/
                    //diala area 
                    $id=$this->models->execute_kw($this->db,$this->uid,$this->password,'res.partner','create_partner',
                    array('self',$CustomerId,$PhoneNumber,$typeCustomer));

                    $query_Update_Customer="Update Customer set OdooId='$id' where id='$CustomerId'";
                    $result_Update=$this->dataBase->query($query_Update_Customer);


                        $amobile=$PhoneNumber;
                        $amobile."Mobile";
                        $Code_Verify=$Code_Verify;
                        $ch = curl_init();
                        $Code_Verify1="ToGo%20Code%20Is:%20".$Code_Verify;
                         
                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        $reslt_Send=curl_exec($ch);
                      
                         curl_close($ch);
                
                         
                        if($reslt_Send!="Message Sent Successfully!")
                        {
                            //echo "NotUpdated";
                        }
                        else
                        {
                             //echo "Updated";
                        }
                    echo "inserted";
                }
                else
                    echo "Not_Insert";
            }
        }
    }
 

 public function RecendCode($PhoneNumber)
 {
    $PhoneNumber=$this->dataBase->escape($PhoneNumber);
    

    $query_Get_Code="Select * from Customer where PhoneNumber='$PhoneNumber'";
    $result=$this->dataBase->query($query_Get_Code);
    $count_Num=$this->dataBase->numRows($result);
    if($count_Num > 0)
    {
        $row = $this->dataBase->fetchArray($result);
        $ActiveCode=$row['VerifiedKey'];


            $amobile=$PhoneNumber;
            //echo $amobile;
            $Code_Verify=$ActiveCode;
            $ch = curl_init();
            $Code_Verify1="ToGo%20Code%20Is:%20".$Code_Verify;
             
            curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
            curl_setopt($ch, CURLOPT_HEADER, 0);
            $reslt_Send=curl_exec($ch);
          
             curl_close($ch);
    
             
            if($reslt_Send!="Message Sent Successfully!")
            {
                
                echo "CodeNotSend";
            }
            else
                echo "CodeSend";

    }
    else
        echo "MobileNotFound";
    




 }
    public function VerifiedAcount($PhoneNumber,$Code,$TokenNotifiy,$TokenDevice,$RegionId,$LangId)
    {
        $CustomerInfoArray = array();
        
        $PhoneNumber=$this->dataBase->escape($PhoneNumber);
        $Code=$this->dataBase->escape($Code);
        $TokenNotifiy=$this->dataBase->escape($TokenNotifiy);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        $RegionId=$this->dataBase->escape($RegionId);
        $LangId=$this->dataBase->escape($LangId);
        
        $CompletRegistration="";
        
        $query_Verified="Select * from Customer Where PhoneNumber=N'$PhoneNumber' AND VerifiedKey='$Code'";
        $result_check_Phone=$this->dataBase->query($query_Verified);
        $row_count_phone = $this->dataBase->numRows( $result_check_Phone );
        
        if($row_count_phone > 0)
        {
            $query_Update_Activate="Update Customer set IsVerified=1,Token='$TokenNotifiy',TokenDevice='$TokenDevice',RegionId='$RegionId',LanguageId='$LangId' Where PhoneNumber='$PhoneNumber'";
            $result_Update_Activate=$this->dataBase->query($query_Update_Activate);
            if($result_Update_Activate == true)
            {
                $query_GetData_Customer="Select * from Customer Where PhoneNumber='$PhoneNumber'";
                $result_DataCustomer=$this->dataBase->query($query_GetData_Customer);
                $row=$this->dataBase->fetchArray($result_DataCustomer);
                
                if ( empty($row['IsClient']) )
                    $row['IsClient']="0";
                
                if (empty( $row['IsTransporter'] ))
                    $row['IsTransporter']="0";
                
                
                $CustomerId=$row['id'];
                
                  
                if( $row['IsClient']=="0" && $row['IsTransporter']=="0")
                {
                    $CompletRegistration="0";
                    array_push($CustomerInfoArray,array("id"=>$row['id'],"PhoneNumber"=>$row['PhoneNumber'],"IsClient"=>$row['IsClient'],"IsTransporter"=>$row['IsTransporter'],"IsAccepted"=>$row['IsAccepted'],"FlagRegistration"=>'0'));
                }
                else
                if($row['IsClient']=="1" && $row['IsTransporter']=="1")
                {
                    $CompletRegistration='ErrorType';
                    array_push($CustomerInfoArray,array("id"=>$row['id'],"PhoneNumber"=>$row['PhoneNumber'],"IsClient"=>$row['IsClient'],"IsTransporter"=>$row['IsTransporter'],"IsAccepted"=>$row['IsAccepted'],"FlagRegistration"=>'ErrorType'));

                }
                else
                if( $row['IsClient']!="0")
                {
                    $query_Check_Client_Personal_Info="Select * from ClientTable Where CustomerId='$CustomerId'";
                    $Count_Record=$this->GetCountRows($query_Check_Client_Personal_Info);
                    if($Count_Record > 0)
                    {
                        
                        $query_Check_BuisnessClient="Select * from ClientBusinessTable  Where CustomerId='$CustomerId'";
                        $Count_Record=$this->GetCountRows($query_Check_BuisnessClient);
                        if($Count_Record > 0)
                        {
                            $CompletRegistration="ClientRegistration";
                            array_push($CustomerInfoArray,array("id"=>$row['id'],"PhoneNumber"=>$row['PhoneNumber'],"IsClient"=>$row['IsClient'],"IsTransporter"=>$row['IsTransporter'],"IsAccepted"=>$row['IsAccepted'],"FlagRegistration"=>$CompletRegistration));
                            echo json_encode(array("server_response"=>$CustomerInfoArray)); 
                            return;
                        }
                        else
                        {
                            $CompletRegistration="ClientBusinessTable";
                        }
                    }
                    else
                    {
                        $CompletRegistration="ClientPersonalInfo";
                    }
                    
                }
                else
                if($row['IsTransporter']!="0")
                {
                    $query_Check_Personal_Info="Select * from TransporterTable Where CustomerId='$CustomerId'";
                    $Count_Record=$this->GetCountRows($query_Check_Personal_Info);
                    if($Count_Record > 0)
                    {
                        $query_Check_Buisness_Info="Select * from TransporterCarInfo Where CustomerId ='$CustomerId'";
                        $Count_Record=$this->GetCountRows($query_Check_Buisness_Info);
                        if($Count_Record > 0)
                        {
                            $query_Get_Time_Transporter="Select * from WorkDaysTime Where CustomerId='$CustomerId'";
                            $Count_Record=$this->GetCountRows($query_Get_Time_Transporter);
                            if($Count_Record > 0)
                            {
                                $query_Check_BuisnessTransporter="Select * from TransporterWorkCity Where CustomerId='$CustomerId'";
                                $Count_Record=$this->GetCountRows($query_Check_BuisnessTransporter);
                               
                                if($Count_Record > 0)
                                {
                                    $CompletRegistration="TransporterCompletedRegistration";
                                    array_push($CustomerInfoArray,array("id"=>$row['id'],"PhoneNumber"=>$row['PhoneNumber'],"IsClient"=>$row['IsClient'],"IsTransporter"=>$row['IsTransporter'],"IsAccepted"=>$row['IsAccepted'],"FlagRegistration"=>$CompletRegistration));
                                    echo json_encode(array("server_response"=>$CustomerInfoArray)); 
                                    return;
                                }
                                else
                                {
                                    $CompletRegistration="TransportreWorkCityInfo";
                                }
                            }
                            else
                            {
                                $CompletRegistration="TransportreWorkTimeInfo";
                            }
                        }
                        else
                        {
                            $CompletRegistration="TransportreCarInfo";
                        }
                    }
                    else
                    {
                        $CompletRegistration="TransporterPersonalInfo";
                    }
                    
                }
                array_push($CustomerInfoArray,array("id"=>$row['id'],"PhoneNumber"=>$row['PhoneNumber'],"IsClient"=>$row['IsClient'],"IsTransporter"=>$row['IsTransporter'],"IsAccepted"=>$row['IsAccepted'],"FlagRegistration"=>$CompletRegistration));
                echo json_encode(array("server_response"=>$CustomerInfoArray)); 
            }
            
            else
            echo "TryLater";
         
        }
        else
        echo "Wrong_Code";
        
    }
    
    public function ChangeNumber($PhoneNumber,$CustomerId,$TokenDevice)
    {
        $PhoneNumber=$this->dataBase->escape($PhoneNumber);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
            $query="update Customer set PhoneNumber='$PhoneNumber' where id='$CustomerId'";
            $result=$this->dataBase->query($query);
            if($result == true)
            {

            }
        }    
        else
        {
            echo "TokenError";
        }
    }
    public function SetTypeCustomer($CustomerId,$TypeCustomer,$TokenDevice)
    {
        $CustomerId=$this->dataBase->escape($CustomerId);
        $TypeCustomer=$this->dataBase->escape($TypeCustomer);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        
        if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
           /* if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                    $typeCustomer;
                    
                    if($TypeCustomer == "Client")
                        $typeCustomer=1;
                    else
                    if($TypeCustomer == "Transporter")
                        $typeCustomer=2;
                    else
                        $typeCustomer=0;
                    
                    if($typeCustomer == 1)
                        $query_SetType="Update Customer Set IsClient=1 Where id='$CustomerId'";
                    else
                    if($typeCustomer == 2)
                        $query_SetType="Update Customer Set IsTransporter=1 Where id='$CustomerId'";
                        
                    if($typeCustomer == 0)
                    {
                        echo "Error_Type";
                    }
                    else
                    {
                        $result=$this->dataBase->query($query_SetType);
                        if($result == true)
                            echo "Updated";
                        else
                            echo "NotUpdated";
                    }
               /* }
                else
                {
                    echo "NotAccepted";
                }
            } 
            else
            {
                echo "Blocked";
            }*/
        }    
        else
        {
            echo "TokenError";
        }
    }
    
    public function SetPersonalInfo($CustomerId,$FirstName,$LastName,$IdClient,$Email,$TokenDevice)

    {
        $CustomerId=$this->dataBase->escape($CustomerId);
        $FirstName=$this->dataBase->escape($FirstName);
        $LastName=$this->dataBase->escape($LastName);
        $IdClient=$this->dataBase->escape($IdClient);
        $Email=$this->dataBase->escape($Email);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        $this->odooDb();
        
        if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
           if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                /*if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/

                    $query_Check_Addedd="Select * from ClientTable Where CustomerId='$CustomerId' ";
                    $result_Check_addedd=$this->dataBase->query($query_Check_Addedd);
                    $row_count_Check = $this->dataBase->numRows( $result_Check_addedd );
                    if($row_count_Check > 0)
                    {
                        echo "CustomerAddedd";
                        return;
                    }
                    else
                    {  
                              //diala area
                    
                      

                        $query="Insert Into ClientTable (CustomerId,FirstName,LastName,IdClient,Email) Values ('$CustomerId',N'$FirstName',N'$LastName',N'$IdClient','$Email')";

                        
                        $result=$this->dataBase->query($query);

                        $this->$models->execute_kw($this->db,$this->uid,$this->password,'res.partner','edit_partner_data',
                    array('self',1169,array('identity_no'=>652020,'email'=>'email@email','name'=>'leoo')));
                    
                     

                        if($result == true){
                            echo "Inserted ";
                           
                        }

                        else
                            echo "NotInserted";

                        
                }
               
                /*}
                else
                    echo "NotAccepted";*/
            }
            else
            {
                echo "Blocked";
            }
        }
        else
        {
            echo "TokenError";
        }
    }
    
    public function GetTypeBusiness($Idlanguage,$CustomerId,$TokenDevice)
    {
        $Idlanguage=$this->dataBase->escape($Idlanguage);
        $CustomerId=$this->dataBase->escape($CustomerId);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        
        if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
            /*if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                    $BusinessArray = array();
                    $query="Select * from BusinessName Where LanguageId ='$Idlanguage'";
                    $result=$this->dataBase->query($query);
                    
                    while($row= $this->dataBase->fetchArray($result))
                    {
                        array_push($BusinessArray,array("id"=>$row['BusinessId'],"Name"=>$row['BusinessName']));
                        
                    }
                       echo json_encode(array("server_response"=>$BusinessArray));
                /*}
                else
                    echo "NotAccepted";
            }
            else
                echo "Blocked";*/
        }
        else
        {
            echo "TokenError";
        }
    }
     public function GetCarInfo($Idlanguage,$TransporterId,$TokenDevice)
    {
        $Idlanguage=$this->dataBase->escape($Idlanguage);
        $TransporterId=$this->dataBase->escape($TransporterId);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        
        if($this->CheckToken($TransporterId,$TokenDevice) == true)
        {
            /*if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                    $CarArray = array();
                    $query="Select VehicleNameLang.Name as VehicleName,VehicleNameLang.IdVehicle as vehicleid,TransporterCarInfo.LicenceCarNumber as LicenceNumber from TransporterCarInfo,VehicleNameLang Where TransporterCarInfo.CarImgId = VehicleNameLang.IdVehicle AND  CustomerId ='$TransporterId' AND IdLanguage ='$Idlanguage'";
                    $result=$this->dataBase->query($query);
                    if($this->dataBase->numRows($result) >0){
                    while($row= $this->dataBase->fetchArray($result))
                    {
                        array_push($CarArray,array("LicenceNumber"=>$row['LicenceNumber'],"Name"=>$row['VehicleName']));
                        
                    }
                     echo json_encode(array("server_response"=>$CarArray));
                }
                    else{
                      echo json_encode(array("server_response"=>"No Info Found"));  
                    }  
                /*}
                else
                    echo "NotAccepted";
            }
            else
                echo "Blocked";*/
        }
        else
        {
            echo "TokenError";
        }
    }
    public function SetBusinessInfo($CustomerId,$BusinessName,$BusinessPlace,$BusinessType,$ImgName,$ImgCode,$TokenDevice)
    {
        $CustomerId=$this->dataBase->escape($CustomerId);
        $BusinessName=$this->dataBase->escape($BusinessName);
        $BusinessPlace=$this->dataBase->escape($BusinessPlace);
        $BusinessType=$this->dataBase->escape($BusinessType);
        $ImgName=$this->dataBase->escape($ImgName);
        $ImgCode=$this->dataBase->escape($ImgCode);
        $TokenDevice=$this->dataBase->escape($TokenDevice);

        if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
            if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                /*if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                    $params = array();
                    $options =  array( "Scrollable" => SQLSRV_CURSOR_KEYSET );
                    
                    //Check Existss Or Not Customer Business Info
                    
                    $query_Check_Exists="Select * from ClientBusinessTable Where CustomerId='$CustomerId'";
                    $result_check=$this->dataBase->query($query_Check_Exists);
                    $row_count = $this->dataBase->numRows( $result_check );
                    
                    if($row_count > 0)
                    {
                        echo "CustomerExists";
                    }
                    else
                    {
                        //Upload Img 
                    


                        if($ImgCode == "NoImage")
                        {
                            $query_Add_Client_Business="Insert into ClientBusinessTable (CustomerId,BusinessName,BusinessPlace,BusinessType,LogoUrl) Values('$CustomerId',N'$BusinessName',N'$BusinessPlace',N'$BusinessType',N'$ImageName')";
                                $result_Add_Client_Business=$this->dataBase->query($query_Add_Client_Business);
                                
                            if($result_Add_Client_Business == true)
                                echo "Inserted";
                            else
                                echo "NotInserted";
                        }
                        else
                        {
                            $decoded_string = base64_decode($ImgCode);
                            $path = '../img/BusinessLogo/'.$ImgName;
                            $ImageName='img/BusinessLogo/'.$ImgName;
                            $file = fopen($path, 'wb');
                                    
                            $is_written = fwrite($file, $decoded_string);
                            fclose($file);
                            if($is_written > 0) 
                            {
                                $query_Add_Client_Business="Insert into ClientBusinessTable (CustomerId,BusinessName,BusinessPlace,BusinessType,LogoUrl) Values('$CustomerId',N'$BusinessName',N'$BusinessPlace',N'$BusinessType',N'$ImageName')";
                                $result_Add_Client_Business=$this->dataBase->query($query_Add_Client_Business);
                                
                                if($result_Add_Client_Business == true)
                                    echo "Inserted";
                                else
                                    echo "NotInserted";
                                
                            }
                            else
                                echo "ImgNotUpload";
                        }
                    }
                /*}
                else
                    echo "NotAccepted";*/
            }
            else
                echo "Blocked";
        }
        else
        {
            echo "TokenError";
        }
    }
    
    public function GetIdPlaceLicence($Idlanguage,$CustomerId,$TokenDevice)
    {
        $Idlanguage=$this->dataBase->escape($Idlanguage);
        $CustomerId=$this->dataBase->escape($CustomerId);
        $TokenDevice=$this->dataBase->escape($TokenDevice);
        
         if($this->CheckToken($CustomerId,$TokenDevice) == true)
        {
           /* if($this->CheckBlockedCustomer($CustomerId) == false)
            {
                if($this->CheckAcceptedTransporter($CustomerId) == true)
                {*/
                    $IdPalceArray = array();
                    $IdLicenceArray = array();
                    $queryPlaces="Select * from IDPlaceLanguage Where IdLanguage ='$Idlanguage'";
                    $queryLicence="Select * from TypeLicenceLanguage Where IdLanguage ='$Idlanguage'";
                    $resultPlace=$this->dataBase->query($queryPlaces);
                    $resultLicence=$this->dataBase->query($queryLicence);
                    
                    while($row= $this->dataBase->fetchArray($resultPlace))
                    {
                        array_push($IdPalceArray,array("IdPlace"=>$row['IdPlace'],"NamePlace"=>$row['NamePlace']));
                    }
                    
                    while($row= $this->dataBase->fetchArray($resultLicence))
                    {
                        array_push($IdLicenceArray,array("IdTypeLicence"=>$row['IdTypeLicence'],"TypeName"=>$row['TypeName']));
                        
                    }
                    $data = array("place"=>$IdPalceArray,"license" => $IdLicenceArray);
                   
                    echo json_encode($data);
                /*}
                else
                    echo "NotAccepted";
            }
            else
                echo "Blocked";*/
        }
        else
        {
            echo "TokenError";
        }
    }
    
public function SetTransporterInfo($CustomerId,$FirstName,$LastName,$BirthDay,$IDPlace,$IDNumber,$LicenceNumber,$LicenceType,$Email,$AccountName,$PersonalImgName,$PersonalImgCode,$LicenceImgName,$LicenceImgCode,
    $TokenDevice)
{
    $CustomerId=$this->dataBase->escape($CustomerId);
    $FirstName=$this->dataBase->escape($FirstName);
    $LastName=$this->dataBase->escape($LastName);
    $BirthDay=$this->dataBase->escape($BirthDay);
    $IDPlace=$this->dataBase->escape($IDPlace);
    $IDNumber=$this->dataBase->escape($IDNumber);
    $LicenceNumber=$this->dataBase->escape($LicenceNumber);
    $LicenceType=$this->dataBase->escape($LicenceType);
    $Email=$this->dataBase->escape($Email);
    $AccountName=$this->dataBase->escape($AccountName);
    $PersonalImgName=$this->dataBase->escape($PersonalImgName);
    $PersonalImgCode=$this->dataBase->escape($PersonalImgCode);
    $LicenceImgName=$this->dataBase->escape($LicenceImgName);
    $LicenceImgCode=$this->dataBase->escape($LicenceImgCode);
    $TokenDevice=$this->dataBase->escape($TokenDevice);
    $this->OdooDb();

    
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
    {
        // if($this->CheckBlockedCustomer($CustomerId) == false)
        // {
        //     if($this->CheckAcceptedTransporter($CustomerId) == true)
        //     {
                $decoded_string_PersonalImg = base64_decode($PersonalImgCode);
                $decoded_string_LicenceImg = base64_decode($LicenceImgCode);
                
                $path_Personal = '../img/PersonalImg/'.$PersonalImgName;
                $path_Personal_url = 'img/PersonalImg/'.$PersonalImgName;
                $path_Licence = '../img/LicenceImg/'.$LicenceImgName;
                $path_Licence_Url = 'img/LicenceImg/'.$LicenceImgName;
                $file_Personal = fopen($path_Personal, 'wb');
                $file_Licence = fopen($path_Licence, 'wb');
                
                $is_written_Personal = fwrite($file_Personal, $decoded_string_PersonalImg);
                $is_written_Licence = fwrite($file_Licence, $decoded_string_LicenceImg);
                
                fclose($file_Personal);
                fclose($file_Licence);
                
                if($is_written_Personal > 0 && $is_written_Licence > 0) 
                {
                     //diala area
                     $editapiresult=$this->$models->execute_kw($this->db,$this->uid,$this->password,'res.partner','edit_partner_data',
                    array('self',$CustomerId,array('email'=>'test45@hotmail.com')));
                   

                    $query="Insert Into TransporterTable (CustomerId,FirstName,LastName,IDPlace,IDNumber,LicenceNumber,TypeLicence,Email,AccountName,PersonalImgPath,LicenceImgPath,BirthDay) 
                            Values ('$CustomerId',N'$FirstName',N'$LastName',N'$IDPlace',N'$IDNumber',N'$LicenceNumber',N'$LicenceType','$Email',N'$AccountName',N'$path_Personal_url',N'$path_Licence_Url',N'$BirthDay')";
                    
                    $result=$this->dataBase->query($query);
                    

                    if($result == true)
                    {
                        echo "Inserted +api edit =".$editapiresult;
                       
                       
                    }
                    else
                    {
                        echo "NotInserted+api edit =".$editapiresult;
                    }
                    
                }
                else
                {
                    echo "ErrorImgUplode";
                }
            }
    //         else
    //             echo "NotAccepted";
    //     }
    //     else
    //         echo "Blocked";
    // } 
    else
    {
        echo "TokenError";
    }
}
public function GetColorPhotoCar($Idlanguage,$CustomerId,$TokenDevice)
{
    $Idlanguage=$this->dataBase->escape($Idlanguage);
    $CustomerId=$this->dataBase->escape($CustomerId);
    $TokenDevice=$this->dataBase->escape($TokenDevice);
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
    {
        // if($this->CheckBlockedCustomer($CustomerId) == false)
        // {
        //     if($this->CheckAcceptedTransporter($CustomerId) == true)
        //     {
                $ColorArray = array();
                $PhotoArray = array();
                
                $query_Get_Color="Select * from ColorNameLang where IdLanguage='$Idlanguage'";
                $result=$this->dataBase->query($query_Get_Color);
              
                $query_Get_PhotoCar="Select * from VehicleNameLang Where IdLanguage='$Idlanguage'";
                $result_GetPhoto=$this->dataBase->query($query_Get_PhotoCar);
                
                while($row= $this->dataBase->fetchArray($result))
                {
                    array_push($ColorArray,array("ColorId"=>$row['IdColor'],"Name"=>$row['ColorName']));
                    
                }
                
                while($row= $this->dataBase->fetchArray($result_GetPhoto))
                {
                    $IdVehicle=$row['IdVehicle'];
                    $query_Get_Url="Select VehiclPhoto From VehiclType  Where id='$IdVehicle' AND (IsHide IS NULL OR IsHide=0)";
                    $result_Get_Photo=$this->dataBase->query($query_Get_Url);
                    if($this->dataBase->numRows($result_Get_Photo) >0){
                    $row_Photo_Url= $this->dataBase->fetchArray($result_Get_Photo);
                    
                    array_push($PhotoArray,array("vehicleId"=>$row['IdVehicle'],"Name"=>$row['Name'],"PhotoUrl"=>$row_Photo_Url['VehiclPhoto']."")); 
                  }

                  //array_push($PhotoArray,array("vehicleId"=>""));
                }
                $data = array("Color"=>$ColorArray,"Photos" => $PhotoArray);
               
                echo json_encode($data);
            }
    //         else
    //             echo "NotAccepted";
    //     }
    //     else
    //         echo "Blocked";
    // }
    else
    {
        echo "TokenError";
    }
}
    
public function SetCarInfo($CustomerId,$RegistrationNumber,$RegistrationFinshDay,$LicenceCarNumber,$CarColorId,$CarImgName,$CarImgCode,$RegistrationImgName,$RegistrationImgCode,$CarImgId,$TokenDevice)
{
    $CustomerId=$this->dataBase->escape($CustomerId);
    $RegistrationNumber=$this->dataBase->escape($RegistrationNumber);
    $RegistrationFinshDay=$this->dataBase->escape($RegistrationFinshDay).time();
    $LicenceCarNumber=$this->dataBase->escape($LicenceCarNumber);
    $CarColorId=$this->dataBase->escape($CarColorId);
    $CarImgName=$this->dataBase->escape($CarImgName);
    $CarImgCode=$this->dataBase->escape($CarImgCode);
    $RegistrationImgName=$this->dataBase->escape($RegistrationImgName);
    $RegistrationImgCode=$this->dataBase->escape($RegistrationImgCode);
    $CarImgId=$this->dataBase->escape($CarImgId);
    $TokenDevice=$this->dataBase->escape($TokenDevice);
    
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
    {
        // if($this->CheckBlockedCustomer($CustomerId) == false)
        // {
        //     if($this->CheckAcceptedTransporter($CustomerId) == true)
        //     {
                $params = array();
                $options =  array( "Scrollable" => SQLSRV_CURSOR_KEYSET );
                
                //Check Existss Or Not Customer CarInfo Info
                
                $query_Check_Exists="Select * from TransporterCarInfo Where CustomerId='$CustomerId'";
                $result_check=$this->dataBase->query($query_Check_Exists);
                $row_count = $this->dataBase->numRows( $result_check );
                
                if($row_count > 0)
                {
                    echo "CustomerExists";
                }
                else
                {
                    $decoded_string_CarImg = base64_decode($CarImgCode);
                    $decoded_string_RegistrationImg = base64_decode($RegistrationImgCode);
                
                    $path_Car = '../img/CarImg/'.$CarImgName;
                    $path_Car_Url = 'img/CarImg/'.$CarImgName;
                    $path_Registration = '../img/RegistrationImg/'.$RegistrationImgName;
                    $path_Registration_Url = 'img/RegistrationImg/'.$RegistrationImgName;
                    $file_Car = fopen($path_Car, 'wb');
                    $file_Registration = fopen($path_Registration, 'wb');
                    
                    $is_written_Car = fwrite($file_Car, $decoded_string_CarImg);
                    $is_written_Registration = fwrite($file_Registration, $decoded_string_RegistrationImg);
                    
                    fclose($file_Car);
                    fclose($file_Registration);
                
                    if($is_written_Car > 0 && $is_written_Registration > 0) 
                    {
                        $query="Insert into TransporterCarInfo (CustomerId,RegistrationNumber,RegistrationFinshDay,LicenceCarNumber,CarColorId,CarImgPath,RegistrationImgPath,CarImgId) 
                                Values ('$CustomerId',N'$RegistrationNumber','$RegistrationFinshDay',N'$LicenceCarNumber','$CarColorId',N'$path_Car_Url',N'$path_Registration_Url',N'$CarImgId')";
                    
                        $result=$this->dataBase->query($query);
                        if($result == true)
                            echo "Inserted";
                        else
                            echo "NotInserted";
                    }
                    else
                    {
                        echo "ErrorImgUplode";
                    }
                }
            }
    //         else
    //             echo "NotAccepted";
    //     }
    //     else
    //         echo "Blocked";
    // } 
    else
    {
        echo "TokenError";
    }
}
    
public function GetCityRegion($Idlanguage,$IdRegion,$CustomerId,$TokenDevice)
{
   $Idlanguage=$this->dataBase->escape($Idlanguage);
   $IdRegion=$this->dataBase->escape($IdRegion);
   $CustomerId=$this->dataBase->escape($CustomerId);
   $TokenDevice=$this->dataBase->escape($TokenDevice);
   
   if($this->CheckToken($CustomerId,$TokenDevice) == true)
   {
    //   if($this->CheckBlockedCustomer($CustomerId) == false)
    //   {
    //         if($this->CheckAcceptedTransporter($CustomerId) == true)
    //         {
               $CityRegion = array();
               
               $query="Select Distinct CityReg.id As CityId ,CityReg.LatRegion As LatRegion ,CityReg.LongRegion As LongRegion,
               CityLang.CityName  as CityName from CityRegionLang As CityLang,CityRegion As CityReg 
               Where CityLang.languageId='$Idlanguage' AND  CityReg.RegionId='$IdRegion' AND CityLang.CityId=CityReg.id";
               
              // $query="Select * from CityRegion Where RegionId='$IdRegion'";
               $result=$this->dataBase->query($query);
               while($row= $this->dataBase->fetchArray($result))
               {
                   
                   if(empty($row['LatRegion']))
                   {
                       $row['LatRegion']="0";
                   }
                   if(empty($row['LongRegion']))
                   {
                       $row['LongRegion']="0";
                   }
                   
                 array_push($CityRegion,array("IdCity"=>$row['CityId'],"Name"=>$row['CityName'],"LatRegion"=>$row['LatRegion'],"LongRegion"=>$row['LongRegion']));
               }
               
                echo json_encode(array("server_response"=>$CityRegion));
            
//             else
//                 echo "NotAccepted";
//       }
//       else
//             echo "Blocked";
   }
   else
   {
       echo "TokenError";
   }
}
    
public function SetWorkTranspoterParameter( $myarrayCity,$myarrayTime,$CustomerId,$TokenDevice )
{
    $CustomerId = $this->dataBase->escape( $CustomerId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
   {
        // if($this->CheckBlockedCustomer($CustomerId) == false)
        // {
        //     if($this->CheckAcceptedTransporter($CustomerId) == true)
        //     {
                $CheckInsertCity=1;
                $CheckInsertWork=1;
                $CheckInsertCityFinshed=false;
                $CheckInsertWorkFinished=false;
                $Status = array();
                
                $query_Check_customer_Exists = "Select * from TransporterWorkCity Where CustomerId='$CustomerId'";
                $result_check_Cistomer=$this->dataBase->query($query_Check_customer_Exists);
                $row_count = $this->dataBase->numRows( $result_check_Cistomer );
                if($row_count > 0)
                {
                  $CheckInsertCityFinshed=true;
                  $CheckInsertCity=2; 
                }
                else
                {
                    foreach ( $myarrayCity['TransportrCity'] as $Cityitem )
                    {
                        $IdCity = $Cityitem['IdCity'];
                        
                        $query = "Insert Into TransporterWorkCity (CustomerId,CityId) Values ('$CustomerId','$IdCity')";
                        $result = $this->dataBase->query( $query );
                        if( $result == true )
                        {
                            $CheckInsertCityFinshed=true;
                            $CheckInsertCity = $CheckInsertCity * 1 ;
                          // $CheckInsertCityFinshed=$CheckInsertCityFinshed*1;
                        }
                        else
                        {
                            $CheckInsertCityFinshed=true;
                            $CheckInsertCity = 0 ;
                            $CheckInsertCityFinshed=0;
                        }
                    }
                }
                
                $query_Check_customer_Exists_Work = "Select * from WorkDaysTime Where CustomerId='$CustomerId'";
                $result_check_Customer_Work=$this->dataBase->query($query_Check_customer_Exists_Work);
                $row_count_Work = $this->dataBase->numRows( $result_check_Customer_Work );
                
                if($row_count_Work > 0)
                {
                    $CheckInsertWorkFinished=true;
                    $CheckInsertWork=2;
                }
                else
                {
                    foreach ( $myarrayTime['TransportrTime'] as $WorkItem )
                    {
                        $check_All_Time = $WorkItem['AllTimeFlag'];
                        if($check_All_Time == "1")
                        {
                            $From =  $WorkItem['AllTimeStart'];
                            $End =  $WorkItem['AllTimeFinish'];
                            
                            $query_Set_Work_Day = "Insert into WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$CustomerId','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End','$From','$End') " ;
                            
                            $result_Set_Work_Day=$this->dataBase->query($query_Set_Work_Day);
                            if($result_Set_Work_Day == true)
                            {
                                $CheckInsertWorkFinished=true;
                                $CheckInsertWork = $CheckInsertWork * 1 ;
                            }
                            else
                            {
                                $CheckInsertWorkFinished=true;
                                $CheckInsertWork = 0 ;
                            }
                        }
                        else
                        {
                            $SatTimeStart = $WorkItem['SatTimeStart'];
                            $SatTimeFinish = $WorkItem['SatTimeFinish'];
                            $SunTimeStart = $WorkItem['SunTimeStart'];
                            $SunTimeFinish = $WorkItem['SunTimeFinish'];
                            $MonTimeStart = $WorkItem['MonTimeStart'];
                            $MonTimeFinish = $WorkItem['MonTimeFinish'];
                            $TueTimeStart = $WorkItem['TueTimeStart'];
                            $TueTimeFinish = $WorkItem['TueTimeFinish'];
                            $WenTimeStart = $WorkItem['WenTimeStart'];
                            $WenTimeFinish = $WorkItem['WenTimeFinish'];
                            $ThuTimeStart = $WorkItem['ThuTimeStart'];
                            $ThuTimeFinish = $WorkItem['ThuTimeFinish'];
                            $FriTimeStart = $WorkItem['FriTimeStart'];
                            $FriTimeFinish = $WorkItem['FriTimeFinish'];
                            
                            $query_Set_Work_Day = "Insert into WorkDaysTime (CustomerId,SatTimeStart,SatTimeFinish,SunTimeStart,SunTimeFinish,MonTimeStart,MonTimeFinish,TueTimeStart,TueTimeFinish,WenTimeStart,WenTimeFinish,ThuTimeStart,ThuTimeFinish,FriTimeStart,FriTimeFinish)
                            Values ('$CustomerId','$SatTimeStart','$SatTimeFinish','$SunTimeStart','$SunTimeFinish','$MonTimeStart','$MonTimeFinish','$TueTimeStart','$TueTimeFinish','$WenTimeStart','$WenTimeFinish','$ThuTimeStart','$ThuTimeFinish','$FriTimeStart','$FriTimeFinish') " ;
                        
                            $result_Set_Work_Day=$this->dataBase->query($query_Set_Work_Day);
                            
                            if($result_Set_Work_Day == true)
                            {
                                $CheckInsertWorkFinished=true;
                                $CheckInsertWork = $CheckInsertWork * 1 ;
                            }
                            else
                            {
                                $CheckInsertWorkFinished=true;
                                $CheckInsertWork = 0 ;
                            }
                        } 
                    }
                }
                if($CheckInsertCityFinshed == false)
                {
                    $CheckInsertCity = 4;
                }
                
                if($CheckInsertWorkFinished == false)
                {
                    $CheckInsertWork=4;
                }
                
                array_push($Status,array("StatusCity"=>$CheckInsertCity,"StatusWork"=>$CheckInsertWork));
                echo json_encode(array("server_response"=>$Status));
            }
//             else
//                 echo "NotAccepted";
//         }
//         else
//             echo "Blocked";
//   }
   else
   {
       echo "TokenError";
   }
}

public function GetCityPhotosBidEngin($CustomerId,$TokenDevice,$Idlanguage,$IdRegion)
{
    $CustomerId = $this->dataBase->escape( $CustomerId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $Idlanguage = $this->dataBase->escape( $Idlanguage );
    $IdRegion = $this->dataBase->escape( $IdRegion );
    
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
    {
        // if($this->CheckBlockedCustomer($CustomerId) == false)
        // {
        //     if($this->CheckAcceptedTransporter($CustomerId) == true)
        //     {
                $PhotosArray = array();
                $CityArray = array();
                $query_Get_City="Select Distinct CityReg.id As CityId ,CityReg.LatRegion As LatRegion ,CityReg.LongRegion As LongRegion,
               CityLang.CityName  as CityName from CityRegionLang As CityLang,CityRegion As CityReg 
               Where CityLang.languageId='$Idlanguage' AND  CityReg.RegionId='$IdRegion' AND CityLang.CityId=CityReg.id";
                
               // $query_Get_City="Select * from CityRegion where RegionId='$IdRegion' AND languageId='$Idlanguage'";
                $result_Get_City=$this->dataBase->query($query_Get_City);
                
                while($row= $this->dataBase->fetchArray($result_Get_City))
                {
                    array_push($CityArray,array("IdCity"=>$row['CityId'],"Name"=>$row['CityName'],"LatRegion"=>$row['LatRegion'],"LongRegion"=>$row['LongRegion']));
                }
                
                $query_Get_Vehicl="Select * from VehiclType Where (IsHide IS NULL OR IsHide=0)";
                $result_Get_Vehicl=$this->dataBase->query($query_Get_Vehicl);
                while($row= $this->dataBase->fetchArray($result_Get_Vehicl))
                {
                     array_push($PhotosArray,array("vehicleId"=>$row['id'],"PhotoUrl"=>$row['VehiclPhoto'].""));
        
                }
                        
                $data = array("Photos"=>$PhotosArray,"Citys" => $CityArray);
                echo json_encode($data);
            }
    //         else
    //             echo "NotAccepted";
    //     }
    //     else
    //         echo "Blocked";
    // }
    else
    {
        echo "TokenError";
    }
}

public function OrderBidEnginParams($DeliveryParams,$AddressClint,$CustomerId,$TokenDevice)
{
    $CustomerId = $this->dataBase->escape( $CustomerId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($CustomerId) == false)
        {
            if($this->CheckAcceptedTransporter($CustomerId) == true)
            {
                
                foreach ( $DeliveryParams['DeliveryParam'] as $Deliveryitem )
                {
                    $Idvehicle = $Deliveryitem['Idvehicle'];
                    $deliveryWay = $Deliveryitem['deliveryWay'];
                    $DetailsLoad = $Deliveryitem['DetailsLoad'];
                    $LengthLoad = $Deliveryitem['LengthLoad'];
                    $WidthLoad = $Deliveryitem['WidthLoad'];
                    $HeightLoad = $Deliveryitem['HeightLoad'];
                    $WeightLoad = $Deliveryitem['WeightLoad'];
                    $CostLoad = $Deliveryitem['CostLoad'];
                    $DateLoad = $Deliveryitem['DateLoad'];
                    $TypeLoad = $Deliveryitem['TypeLoad'];
                   

                    $query_Insert_Order="Insert into OrderBidEngin(CustomerId,Idvehicle,deliveryWay,DetailsLoad,LengthLoad,WidthLoad,HeightLoad,WeightLoad,DateLoad,CostLoad,TypeLoad)
                    Values ('$CustomerId','$Idvehicle','$deliveryWay',N'$DetailsLoad',N'$LengthLoad',N'$WidthLoad',N'$HeightLoad',N'$WeightLoad','$DateLoad','$CostLoad','$TypeLoad')";
                    
                    $result_Insert_Order=$this->dataBase->query($query_Insert_Order);
                    if($result_Insert_Order == true)
                    {
                        $query_GetLastId_Order="SELECT id FROM OrderBidEngin WHERE createdAt=(SELECT MAX(createdAt)FROM OrderBidEngin)";
                        $result_LastId_Order=$this->dataBase->query($query_GetLastId_Order);
                        $row_LastId_Order = $this->dataBase->fetchArray($result_LastId_Order);
                        
                        $Id_Last_Order=$row_LastId_Order['id'];
                        
                        foreach ( $AddressClint['AddressParam'] as $Deliveryitem )
                        {
                            $IdCity = $Deliveryitem['IdCity'];
                            $NameNeighborhood = $Deliveryitem['NameNeighborhood'];
                            $NameStreet = $Deliveryitem['NameStreet'];
                            $NameBuilding = $Deliveryitem['NameBuilding'];
                            $FloorNumber = $Deliveryitem['FloorNumbers'];
                            $ApartmentNumber = $Deliveryitem['ApartmentNumber'];
                            $OtherDetails = $Deliveryitem['OtherDetails'];
                            
                            $IdCityDes = $Deliveryitem['IdCityDes'];
                            $NameNeighborhoodDes = $Deliveryitem['NameNeighborhoodDes'];
                            $NameStreetDes = $Deliveryitem['NameStreetDes'];
                            $NameBuildingDes = $Deliveryitem['NameBuildingDes'];
                            $FloorNumberDes = $Deliveryitem['FloorNumbersDes'];
                            $ApartmentNumberDes = $Deliveryitem['ApartmentNumberDes'];
                            $OtherDetailsDes = $Deliveryitem['OtherDetailsDes'];
                            
                            $ReceiverAddressNum = $Deliveryitem['ReceiverAddressNum'];
                            $LatSender = $Deliveryitem['LatSender'];
                            $LongSender = $Deliveryitem['LongSender'];
                            $LatReciver = $Deliveryitem['LatReciver'];
                            $LongReciver = $Deliveryitem['LongReciver'];
                            //Adding Villige 
                            $Village = $Deliveryitem['village'];
                            $VillageDes = $Deliveryitem['villageDes'];

                            //$Code_Verify = mt_rand(1000, 9999);
                            $Code_Verify=2222;
                            if(empty($LatSender))
                                $LatSender="0";
                            if(empty($LongSender))
                                $LongSender="0";
                            if(empty($LatReciver))
                                $LatReciver="0";
                            if(empty($LongReciver))
                                $LongReciver="0";
                                
                            $query_Set_Address_Order="Insert into OrderBidAddress (IdOrderBidEngin,IdCity,NameNeighborhood,NameStreet,NameBuilding,FloorNumbers,ApartmentNumber,OtherDetails,LatSender,LongSender,LatReciver,LongReciver,IdCityDes,NameNeighborhoodDes,NameStreetDes,NameBuildingDes,FloorNumbersDes,ApartmentNumberDes,OtherDetailsDes,ReceiverAddressNum,CodeVerifyReciver,Village,VillageDestination)
                            Values ('$Id_Last_Order','$IdCity',N'$NameNeighborhood',N'$NameStreet',N'$NameBuilding',N'$FloorNumber',N'$ApartmentNumber',N'$OtherDetails','$LatSender','$LongSender','$LatReciver','$LongReciver','$IdCityDes',N'$NameNeighborhoodDes',N'$NameStreetDes',N'$NameBuildingDes',N'$FloorNumberDes',N'$ApartmentNumberDes',N'$OtherDetailsDes','$ReceiverAddressNum','$Code_Verify',N'$Village',N'$VillageDes')";
                            
                            $result_Address_Order=$this->dataBase->query($query_Set_Address_Order);
                            
                            if($result_Address_Order == true)
                            {
                                // Send Notification Fo All Transporter In this Parameter.
                                echo "SuccsessInserted";
                                $query_Get_Transporter_Time="Select Distinct
                                TransporterCustomer.id As CustomerId,TransporterCustomer.LanguageId As LangCustmer,
                                TransporterCustomer.Token As TokenNotify,
                                OrderBid.createdAt As OrderDate,OrderBid.id As OrderID,
                                OrderBid.deliveryWay As DeliveryTiype,OrderAddress.IdCity As SourceCityId
                                ,OrderAddress.IdCityDes As DestinationCityId
                                From
                                TransporterWorkCity As WorkCity,TransporterCarInfo As TransporterCar,
                                OrderBidEngin As OrderBid , OrderBidAddress As OrderAddress ,Customer As TransporterCustomer
                                Where 
                                OrderAddress.IdOrderBidEngin=OrderBid.id AND TransporterCustomer.IsVerified=1 
                                AND TransporterCustomer.IsTransporter=1 AND (TransporterCustomer.IsBlocked=0 Or TransporterCustomer.IsBlocked IS NULL)
                                AND TransporterCustomer.IsAccepted=1 AND TransporterCustomer.IsTransporter=1
                                AND (OrderAddress.IdCity=WorkCity.CityId OR OrderAddress.IdCityDes=WorkCity.CityId)
                                AND OrderBid.Idvehicle=TransporterCar.CarImgId AND (OrderBid.Orderfinished = 0 OR OrderBid.Orderfinished IS NULL)
                                AND (OrderBid.IsDeleted = 0 OR OrderBid.IsDeleted IS NULL) AND (OrderBid.IsAcceptDelivery = 0 OR OrderBid.IsAcceptDelivery IS NULL)
                                AND OrderBid.id='$Id_Last_Order'
                                Order By OrderDate DESC";
                                
                                require_once('FcmExample3/Firebase.php');
                                $tokens = array(); 
                                
                                $Result_query=$this->dataBase->query($query_Get_Transporter_Time);
                                while($row= $this->dataBase->fetchArray($Result_query))
                                {
                                    if($row['TokenNotify']!=null)
                                    {
                                        array_push($tokens,$row['TokenNotify']);
                                    }
                                }
                                $firebase = new Firebase(); 
                                $firebase->sendToTransporterBidEngin($tokens,'New Order',$Id_Last_Order,$Id_Last_Order);

                            }
                            else
                            {
                                echo "ErrorInAddress";
                            }
                        }
                    }
                    else
                    {
                        echo "NotInserted";
                    }
                }
            }
            else
                echo "NotAccepted";
        }
        else
            echo "Blocked";
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterGetOrder($TransporterId,$TokenDevice,$Counter)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $Counter = $this->dataBase->escape( $Counter );
    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;
    
    $OrderArray = array();
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            if($this->CheckAcceptedTransporter($TransporterId) == true)
            {
                $params = array();
                $options =  array( "Scrollable" => SQLSRV_CURSOR_KEYSET);
                
                
                $query_check_Date_Work="Select WorkTime.SatTimeStart As TSatStart, WorkTime.SatTimeFinish As TSatEnd,
                WorkTime.SunTimeStart As TSunStart ,WorkTime.SunTimeFinish As TSunEnd,
                WorkTime.MonTimeStart As TMonStart ,WorkTime.MonTimeFinish As TMonEnd,
                WorkTime.TueTimeStart As TTusStart ,WorkTime.TueTimeFinish As TTusEnd,
                WorkTime.WenTimeStart As TWenStart ,WorkTime.WenTimeFinish As TWenEnd,
                WorkTime.ThuTimeStart As TThuStart ,WorkTime.ThuTimeFinish As TThuEnd,
                WorkTime.FriTimeStart As TFriStart ,WorkTime.FriTimeFinish As TFriEnd,
                TransporterCustomer.id As CustomerId
                From
                WorkDaysTime As WorkTime,Customer As TransporterCustomer
                Where 
                TransporterCustomer.IsVerified=1 AND WorkTime.CustomerId='$TransporterId'
                AND WorkTime.CustomerId=TransporterCustomer.id
                AND TransporterCustomer.IsTransporter=1 AND (TransporterCustomer.IsBlocked=0 Or TransporterCustomer.IsBlocked IS NULL )
                AND TransporterCustomer.IsAccepted=1 
                ";
                
                date_default_timezone_set('Asia/Jerusalem');
                $Date=date('H:i:s');
                
                $result_check_Date_Work=$this->dataBase->query($query_check_Date_Work); 
            
                $row= $this->dataBase->fetchArray($result_check_Date_Work);
            
                if(date('D') === 'Sat')
                {
                    
                    $date_s = strtotime($row['TSatStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TSatEnd']);
                    $end_time=date('H:i:s', $date_e);
                    
                }
                else
                if(date('D') === 'Sun') 
                {
                    
                    $date_s = strtotime($row['TSunStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TSunEnd']);
                    $end_time=date('H:i:s', $date_e);
                
                }
                else
                if(date('D') === 'Mon') 
                {
                    $date_s = strtotime($row['TMonStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TMonEnd']);
                    $end_time=date('H:i:s', $date_e);
                
                }
                else
                if(date('D') === 'Tue')
                {
                    $date_s = strtotime($row['TTusStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TTusEnd']);
                    $end_time=date('H:i:s', $date_e);
                }
                else
                if(date('D') === 'Wed') 
                {
                    $date_s = strtotime($row['TWenStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TWenEnd']);
                    $end_time=date('H:i:s', $date_e);
                }
                else
                if(date('D') === 'Thu') 
                {
                    //echo "Thursday";
                    $date_s = strtotime($row['TThuStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TThuEnd']);
                    $end_time=date('H:i:s', $date_e);
                }
                else
                if(date('D') === 'Fri') 
                {
                    $date_s = strtotime($row['TFriStart']);
                    $star_time=date('H:i:s', $date_s);
                    
                    $date_e = strtotime($row['TFriEnd']);
                    $end_time=date('H:i:s', $date_e);
                }
                
                $flag=0;
                if($star_time > $end_time)
                {
                    
                    $flag=1;
                    $query_Check_Status="select * from WorkDaysTime where CustomerId='$TransporterId' AND ('$Date' between '$end_time' AND '$star_time')";
                }
                else
                {
                    
                    $flag=0;
                    $query_Check_Status="select * from WorkDaysTime where CustomerId='$TransporterId' AND ('$Date' between '$star_time' AND '$end_time')";
                }
                
                $query_Get_Orders="Select Distinct
                TransporterCustomer.id As CustomerId,TransporterCustomer.LanguageId As LangCustmer,
                OrderBid.createdAt As OrderDate,OrderBid.id As OrderID,
                OrderBid.deliveryWay As DeliveryTiype,OrderAddress.IdCity As SourceCityId
                ,OrderAddress.IdCityDes As DestinationCityId,OrderBid.createdAt As DateOrder,
                OrderBid.DetailsLoad As DetailsOrder,OrderBid.deliveryWay As WaysDeliver
                From
                WorkDaysTime As WorkTime,TransporterWorkCity As WorkCity,TransporterCarInfo As TransporterCar,
                OrderBidEngin As OrderBid , OrderBidAddress As OrderAddress ,Customer As TransporterCustomer
                Where 
                OrderAddress.IdOrderBidEngin=OrderBid.id AND TransporterCustomer.IsVerified=1 
                AND TransporterCustomer.IsTransporter=1 AND (TransporterCustomer.IsBlocked=0 Or TransporterCustomer.IsBlocked IS NULL )
                AND OrderBid.IsDeleted Is NULL
                AND TransporterCustomer.IsAccepted=1 
                AND (OrderAddress.IdCity=WorkCity.CityId Or OrderAddress.IdCityDes=WorkCity.CityId)
                AND OrderBid.Idvehicle=TransporterCar.CarImgId 
                AND TransporterCustomer.id='$TransporterId' 
                AND TransporterCar.CustomerId=TransporterCustomer.id 
                AND WorkCity.CustomerId=TransporterCustomer.id AND (OrderBid.IsAcceptDelivery=0 OR OrderBid.IsAcceptDelivery IS NULL)
                Order By OrderDate DESC LIMIT $en OFFSET $startindex
                ";
                //AND OrderBid.createdAt > OrderBid.DateLoad
                $result_Status=$this->dataBase->query($query_Check_Status);
                $row_count = $this->dataBase->numRows( $result_Status );
                
                $Check_Flag_Work=false;
                
                if($flag==0)
                {
                   if($row_count>0)
                   {
                       $Check_Flag_Work=true;
                     //$Status="Open";
                   }
                   
                   else
                   {
                       $Check_Flag_Work=false;
                       //$Status="Close";
                   }
                }
                else
                {
                    if($flag==1)
                    {
                        if($row_count>0)
                        {
                            $Check_Flag_Work=false;
                            //$Status="Close";
                        }
                        else
                        {
                            $Check_Flag_Work=true;
                         
                            //$Status="Open";
                        }
                    }
                }
                if($Check_Flag_Work == true)
                {
                       $result_get_Order=$this->dataBase->query($query_Get_Orders);  
                       
                       while($row= $this->dataBase->fetchArray($result_get_Order))
                        {
                            $CityIdSource=$row['SourceCityId'];
                            $CityIdDestination=$row['DestinationCityId'];
                            $CustomerLang=$row['LangCustmer'];
                            
                            $query_GetCitySource="Select CityName From CityRegionLang  Where languageId='$CustomerLang' AND CityId='$CityIdSource'";
                            $result_CitySource=$this->dataBase->query($query_GetCitySource);
                            $row_CitySource= $this->dataBase->fetchArray($result_CitySource);
                            
                            $query_GetCityDes="Select CityName From CityRegionLang  Where languageId='$CustomerLang' AND CityId='$CityIdDestination'";
                            $result_CityDes=$this->dataBase->query($query_GetCityDes);
                            $row_CityDes= $this->dataBase->fetchArray($result_CityDes);
                        
                            array_push($OrderArray,array("idOrder"=>$row['OrderID'],"DateOrder"=>$this->getDateFormat($row['DateOrder'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateOrder'],'H:i:s'),"DeliveryWays"=>$row['WaysDeliver'],"DetailsLoad"=>$row['DetailsOrder'], "FromCity"=>$row_CitySource['CityName'], "ToCity"=>$row_CityDes['CityName']));
                        }
                       
                        echo json_encode(array("server_response"=>$OrderArray)); 
                }
                else
                {
                    echo "NotActiveNow";
                }
                
                /*$query_Get_Transporter_Time="Select WorkTime.SatTimeStart As TSatStart, WorkTime.SatTimeFinish As TSatEnd
                WorkTime.SunTimeStart As TSunStart ,WorkTime.SunTimeFinish As TSunEnd,
                WorkTime.MonTimeStart As TMonStart ,WorkTime.MonTimeFinish As TMonEnd,
                WorkTime.TueTimeStart As TTusStart ,WorkTime.TueTimeFinish As TTusEnd,
                WorkTime.WenTimeStart As TWenStart ,WorkTime.WenTimeFinish As TWenEnd,
                WorkTime.ThuTimeStart As TThuStart ,WorkTime.ThuTimeFinish As TThuEnd,
                WorkTime.FriTimeStart As TFriStart ,WorkTime.FriTimeFinish As TFriEnd,
                TransporterCar.CarImgId As vehicleId , OrderBid.Idvehicle As IdOrderBidVehicle
                From
                WorkDaysTime As WorkTime,TransporterWorkCity As WorkCity,TransporterCarInfo As TransporterCar,
                OrderBidEngin As OrderBid , OrderBidAddress As OrderAddress ,Customer As TransporterCustomer
                Where 
                AND OrderAddress.IdOrderBidEngin=OrderBid.id AND TransporterCustomer.IsVerified=1 
                AND TransporterCustomer.IsTransporter=1 AND (TransporterCustomer.IsBlocked=0 Or TransporterCustomer.IsBlocked IS NULL )
                AND TransporterCustomer.IsAccepted=1 
                AND (OrderAddress.IdCity=WorkCity.CityId OR OrderAddress.IdCityDes=WorkCity.CityId) AND WorkCity.CustomerId=TransporterCustomer.id
                AND TransporterCar.CustomerId=TransporterCustomer.id AND WorkTime.CustomerId = TransporterCustomer.id
                AND OrderBidEngin.Idvehicle=TransporterCar.CarImgId
                ";*/
            }
            else
                echo "NotAccepted";
        }
        else
            echo "Blocked"; 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterSetCostOrder($TransporterId,$OrderId,$CostDelivery,$TokenDevice)
{

    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    if($CostDelivery != "0"){$CostDelivery = $this->dataBase->escape($CostDelivery);}
   
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {

            $query_Get_Cost_Load="Select deliveryWay,CostLoad From OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
            AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";
            $result_Get_Cost_Load=$this->dataBase->query($query_Get_Cost_Load);
            $row_count_Load = $this->dataBase->numRows( $result_Get_Cost_Load );

            if($row_count_Load > 0)
            {

                $row_Get_Cost_Load= $this->dataBase->fetchArray($result_Get_Cost_Load);
                $deliveryWay=$row_Get_Cost_Load['deliveryWay'];
                $CostLoad=$row_Get_Cost_Load['CostLoad'];

                if($deliveryWay == 1)
                {
                    
                }
                else
                if($deliveryWay == 2)
                {
                    //if($this->getBalance($TransporterId) >= ($CostLoad+$CostDelivery))
                     if($this->BalanceIsEnough($TransporterId,$CostLoad+$CostDelivery)==true)

                    {

                    }
                    else
                    {
                        echo "ChargeBalanace";
                        return;
                    }
                }
                else
                if($deliveryWay == 3)
                {
                    
                }
                else
                if($deliveryWay == 4)
                {
                    
                }
                else
                {
                    echo "deliveryWayNotFound";
                    return;
                }   
                $query_Check_Transport_AddedValue="Select * from DeliveryAcceptOrderTable Where IdTransporter='$TransporterId' AND IdOrder='$OrderId'";
                $result_Check_Added_Value=$this->dataBase->query($query_Check_Transport_AddedValue);
                $row_count = $this->dataBase->numRows( $result_Check_Added_Value );
                
                if($row_count > 0)
                {
                    echo "AlreadyAddedValue";
                }
                else
                {
                    $query_Set_Price="Insert into DeliveryAcceptOrderTable (IdOrder,IdTransporter,CostDelivery)
                    Values ('$OrderId','$TransporterId','$CostDelivery')";
                    
                    echo "here".$CostDelivery;


                    $result_Set_Price=$this->dataBase->query($query_Set_Price);
                    if($result_Set_Price == true)
                    {
                        //SendNotify To Client
                        echo "InsertedBid";

                        $query_get_Transporter_Name="Select FirstName , LastName from TransporterTable Where CustomerId='$TransporterId'"; 
                        $result_Name_Customer=$this->dataBase->query($query_get_Transporter_Name);  
                        $row_Name_Customer= $this->dataBase->fetchArray($result_Name_Customer);
                        $Name_Customer=$row_Name_Customer['FirstName'].' '.$row_Name_Customer['LastName'];
                        
                        $query_Get_Token_Client="Select CustomerClient.Token As TokenNotifiy From OrderBidEngin As OrderBidEngin, Customer As CustomerClient
                        Where OrderBidEngin.id='$OrderId' AND OrderBidEngin.CustomerId = CustomerClient.id";
                        $result_Token_Customer=$this->dataBase->query($query_Get_Token_Client);  
                        $row_Token_Customer= $this->dataBase->fetchArray($result_Token_Customer);
                        $Token_Customer=$row_Token_Customer['TokenNotifiy'];

                        require_once('FcmExample3/Firebase.php');
                        $tokens = array(); 

                        array_push($tokens,$Token_Customer);
                        
                        $MessageData="New Price From :".$Name_Customer." and Cost Is : ".$CostDelivery;
                        $firebase = new Firebase(); 
                        $firebase->NotifyClientCostTransporter($tokens,"Order Offers",$MessageData,$OrderId);

                        
                    }
                    else
                    {
                        echo "NotInsertedBid";
                    }
                }
            }
            else
            {
                echo "OrderNotFound";
            }

        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}

public function ShowClientOrder($ClientId,$TokenDevice,$Counter)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $OrderArray = array();

    $Counter = $this->dataBase->escape( $Counter );
    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;

     if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query_Get_Orders="Select Distinct * 
                From
                    OrderBidEngin 
                Where 
                    CustomerId='$ClientId' AND (Orderfinished =0 Or Orderfinished IS NULL)
                    AND (IsDeleted=0 Or IsDeleted IS NULL) AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) Order by createdAt DESC LIMIT $en OFFSET $startindex;
                ";
            
            $result_get_Order=$this->dataBase->query($query_Get_Orders);
            while($row= $this->dataBase->fetchArray($result_get_Order))
            {
                array_push($OrderArray,array("idOrder"=>$row['id'],"DateOrder"=>$this->getDateFormat($row['DateLoad'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateLoad'],'H:i:s'),"DeliveryWays"=>$row['deliveryWay']));
            }          
            echo json_encode(array("server_response"=>$OrderArray)); 
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}
public function ClientShowBidRequists($ClientId,$OrderId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $OrderDetailsArray = array();
    $OrderCostArray = array();
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query_Show_Order="Select * from OrderBidEngin Where id='$OrderId'";
            $result_Get_Order_Details=$this->dataBase->query($query_Show_Order);
            $row_Show_Details_Order=$this->dataBase->fetchArray($result_Get_Order_Details);
            
            array_push($OrderDetailsArray,array("idOrder"=>$row_Show_Details_Order['id'],"DateOrder"=>$this->getDateFormat($row_Show_Details_Order['createdAt'],'Y-m-d H:i:s'),"DeliveryWay"=>$row_Show_Details_Order['deliveryWay']));

            $query_Get_Bid_costs="Select TransporterTableCustomer.CustomerId As IdTransporterBidRequist, VehiclTypeTable.VehiclPhoto As VehiclPhoto ,TransporterTableCustomer.FirstName As FullName,TransporterTableCustomer.LastName As LastName
            , DeliveryAcceptTable.CostDelivery As CostDelivery , DeliveryAcceptTable.IdTransporter As TransporterId,TransporterTableCustomer.PersonalImgPath As TPPhoto
            From
            VehiclType As VehiclTypeTable , TransporterTable As TransporterTableCustomer,DeliveryAcceptOrderTable As DeliveryAcceptTable
            , OrderBidEngin As BidOrder
            Where
            BidOrder.Idvehicle = VehiclTypeTable.id AND TransporterTableCustomer.CustomerId = DeliveryAcceptTable.IdTransporter
            AND DeliveryAcceptTable.IdOrder=BidOrder.id AND (BidOrder.IsAcceptDelivery=0 OR BidOrder.IsAcceptDelivery IS NULL)
            AND (BidOrder.Orderfinished = 0 Or BidOrder.Orderfinished IS NULL) AND DeliveryAcceptTable.IdOrder='$OrderId'
            ";
            
            $Result_Get_Bid_costs=$this->dataBase->query($query_Get_Bid_costs);
            while($row_Get_Bid_costs=$this->dataBase->fetchArray($Result_Get_Bid_costs))
            {
                $IdTrans=$row_Get_Bid_costs['TransporterId'];
               
                $query_Get_Car_Photo="select * from TransporterCarInfo where CustomerId='786'";
                $Result_Get_Transp_Car=$this->dataBase->query($query_Get_Car_Photo);
                $row_Get_Photo=$this->dataBase->fetchArray($Result_Get_Transp_Car);

                $query_GetRate="select OrderTrip.DeliveryId As DeliveryId ,Reate.RateValue As rate 
                from OrderBidEngin As OrderTrip , TripRating As Reate 
                where Reate.TripId=OrderTrip.id AND OrderTrip.DeliveryId='$IdTrans'";
                $Result_Get_Rate=$this->dataBase->query($query_GetRate);
                $CountRate=0;
                $SumRate=0;
                $RateTotal=0;
                while($row_Get_Rate=$this->dataBase->fetchArray($Result_Get_Rate))
                  {
                        $rateValue=$row_Get_Rate['rate'];
                        $CountRate++;
                        $SumRate+=$rateValue;
                  }

                if($CountRate == 0)
                {
                    $RateTotal=0;
                }
                else
                {
                    //$RateTotal = $rateValue/$CountRate;
                    $RateTotal = $SumRate/$CountRate;
                }


                array_push($OrderCostArray,array("IdTransporterBidRequist" =>$row_Get_Bid_costs['IdTransporterBidRequist'],"BidCost"=>$row_Get_Bid_costs['CostDelivery'],"TransporterName"=>$row_Get_Bid_costs['FullName'].' '.$row_Get_Bid_costs['LastName'] ,"TransporterPersonalImg"=>$row_Get_Bid_costs['TPPhoto'],"TotalRate"=>$RateTotal,"CarImg"=>$row_Get_Photo['CarImgPath']));
            }
            
            $data = array("OrderDetail"=>$OrderDetailsArray,"CostDetail" => $OrderCostArray);
            echo json_encode($data); 
            
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
    
}

public function AcceptClientBidEngie($ClientId,$TransporterId,$OrderId,$TokenDevice)
{
    
    $ClientId = $this->dataBase->escape( $ClientId );
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
 
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $this->OdooDb();
            $deliveryWay;
            $CostLoad;

            //echo "user bal:".$this->getBalance($ClientId);

            $query_Get_Cost_Tra="Select CostDelivery from DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
            $result_Get_Cost_Tra=$this->dataBase->query($query_Get_Cost_Tra);
            $row_Get_Cost_Tra= $this->dataBase->fetchArray($result_Get_Cost_Tra);
            $costDelivery=$row_Get_Cost_Tra['CostDelivery'];

            $query_Get_Cost_Load="Select deliveryWay,CostLoad From OrderBidEngin where id='$OrderId' AND (IsAcceptDelivery = 0 OR IsAcceptDelivery IS NULL) 
            AND (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";

            $result_Get_Cost_Load=$this->dataBase->query($query_Get_Cost_Load);
            $row_count_Load = $this->dataBase->numRows( $result_Get_Cost_Load );

            if($row_count_Load > 0)
            {

                $row_Get_Cost_Load= $this->dataBase->fetchArray($result_Get_Cost_Load);
                $deliveryWay=$row_Get_Cost_Load['deliveryWay'];
                $CostLoad=$row_Get_Cost_Load['CostLoad'];

                if($deliveryWay == 1)
                {
                    //if($this->getBalance($ClientId) >= $costDelivery )
                    if($this->BalanceIsEnough($ClientId,$CostDelivery)==true){

                    }
                    else
                    {
                        echo "ClientChargeBalanace";
                        return;
                    }
                }
                else
                if($deliveryWay == 2)
                {
                    //if($this->getBalance($ClientId) >= $costDelivery )
                    if($this->BalanceIsEnough($ClientId,$CostDelivery)==true){
                        //if($this->getBalance($TransporterId) >= ($CostLoad+$costDelivery))
                        if($this->BalanceIsEnough($TransporterId,$CostLoad+$CostDelivery)==true){

                        }
                        else
                        {
                            echo "TransporterNeedCharge";
                            return;
                        }
                    }
                    else
                    {
                        echo "ChargeBalanace";
                        return;
                    }
                }
                else
                if($deliveryWay == 3)
                {
                    //if($this->getBalance($ClientId) >= $costDelivery )
                        if($this->BalanceIsEnough($ClientId,$CostDelivery)==true)
                {

                    }
                    else
                    {
                        echo "ClientChargeBalanace";
                        return;
                    }
                }
                else
                if($deliveryWay == 4)
                {
                    //if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                      if($this->BalanceIsEnough($ClientId,$CostLoad+$CostDelivery)==true)
                  {

                    }
                    else
                    {
                        echo "ClientChargeBalanace";
                        return;
                    }
                }
                else
                {
                    echo "deliveryWayNotFound";
                    return;
                }   
            }
            else
            {
                echo "OrderNotFound";
                return;
            }
            $query_CheckAcceptedOrder="Select IsAcceptDelivery,IsDeleted From OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
            $Result_Check_Order=$this->dataBase->query($query_CheckAcceptedOrder);
            if($Result_Check_Order == true)
            {
                $row_Check_Order=$this->dataBase->fetchArray($Result_Check_Order);
            
                if($row_Check_Order['IsAcceptDelivery'] == 1 )
                {
                    echo "OrderAlreadyTaken";
                }
                else
                {
                    $query_Take_Order="Update OrderBidEngin set IsAcceptDelivery=1,DeliveryId='$TransporterId' Where id='$OrderId'";
                    $Result_Take_Order=$this->dataBase->query($query_Take_Order);
                    if($Result_Take_Order == true)
                    {
                            $Client_Phone=$this->getPhoneCustomer($ClientId);
                            $Transportre_Phone=$this->getPhoneCustomer($TransporterId);
                            $IdOdoo_client=$this->getOdooId($ClientId);
                            $IdOdoo_transporter=$this->getOdooId($TransporterId);
                            $Client_Cost=$this->getBalance($ClientId);
                            $Transporter_Cost=$this->getBalance($TransporterId);
                            $EscrowOdooId=$this->getEscrowwOdooId();
                            if($deliveryWay == 1)
                            {
                                
                                //if($this->getBalance($ClientId) >= $costDelivery )
                                  if($this->BalanceIsEnough($ClientId,$CostDelivery)==true)
                                {
                                
                                $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);

                                $creditEscrowItem=$this->CreditJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro2");

                                $debitClientItem=$this->DebitJournalTrip((int)$IdOdoo_client,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro1");

                                  //My Testing Code Here
                                    // echo "Client Balance:".$this->getBalance($ClientId);echo "<br/>";
                                    // echo "journal_id".$id_Journal_Discount."<br/>";
                                    // echo "credit".$creditEscrowItem."<br/>";
                                    // echo "debit".$debitClientItem."<br/>";

                                 $EscrowAmount = $costDelivery* 0.15;//0.15
                                 $TransporterAmount = $costDelivery - $EscrowAmount ;
                                //Another code to get transporter percentage.
                                $id_Journal_transporter_discount=$this->CreateJournalTrip($EscrowOdooId,$OrderId);

                                $creditEscrowItemTrans=$this->CreditJournalTrip((int)$IdOdoo_transporter,$id_Journal_transporter_discount,(float)$TransporterAmount,7,"FromEscrow");

                                $debitEscrowItemTrans=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_transporter_discount,(float)$TransporterAmount,7,"ToTransporter");
                                 //End of testing code

                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdDiscountClient='$id_Journal_Discount' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);

                                }
                                else
                                {
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            }
                            else
                            if($deliveryWay == 2)
                            {
                               // if($this->getBalance($ClientId) >= $costDelivery )
                                if($this->BalanceIsEnough($ClientId,$CostDelivery)==true)

                                {

                                    //if($this->getBalance($TransporterId) >= ($CostLoad+$costDelivery))
                                    if($this->BalanceIsEnough($TransporterId,$CostLoad+$CostDelivery)==true)
                                    {

                                    }
                                    else
                                    {
                                        echo "TransporterNeedCharge";
                                        return ;
                                    }


                                    $id_Journal_Discount_Client=$this->CreateJournalTrip($IdOdoo_client,$OrderId);

                                    $creditEscrowItem_Client=$this->CreditJournalTrip((int)$EscrowOdooId,$id_Journal_Discount_Client,(float)$costDelivery,7,"ClientToEscro2");
                                    $debitClientItem_Client=$this->DebitJournalTrip((int)$IdOdoo_client,$id_Journal_Discount_Client,(float)$costDelivery,7,"ClientToEscro1");


                                    $id_Journal_Discount_Transporter=$this->CreateJournalTrip($IdOdoo_transporter,$OrderId);

                                    $creditEscrowItem_Transporter=$this->CreditJournalTrip((int)$EscrowOdooId,$id_Journal_Discount_Transporter,(float)($costDelivery+$costDelivery),7,"ClientToEscro2");
                                    $debitTransportertItem_Transporter=$this->DebitJournalTrip((int)$IdOdoo_transporter,$id_Journal_Discount_Transporter,(float)($costDelivery+$costDelivery),7,"ClientToEscro1");



                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdDiscountClient='$id_Journal_Discount_Client',JournalTripIdDiscountTransporter='
                                    $id_Journal_Discount_Transporter' Where id='$OrderId'";
                                    //$query_Invoice_record="Update OrderBidEngin set OdooInvoiceId='$id_invoice' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);

                                }
                                else
                                {
                                    echo "ChargeBalanace";
                                    return;
                                }
                            }
                            else
                            if($deliveryWay == 3)
                            {
                               // if($this->getBalance($ClientId) >= $costDelivery )
                                if($this->BalanceIsEnough($ClientId,$CostDelivery)==true)               
                                {


                                    $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);
                                    $creditEscrowItem=$this->CreditJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)$costDelivery,17,"ClientToEscro2");
                                    $debitClientItem=$this->DebitJournalTrip((int)$IdOdoo_client,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro1");
                                    

                                    echo "a1".$creditEscrowItem."a2".$debitClientItem;

                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdDiscountClient='$id_Journal_Discount' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);



                                }
                                else
                                {
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            }
                            else
                            if($deliveryWay == 4)
                            {

                              //  if($this->getBalance($ClientId) >= ($CostLoad + $costDelivery) )
                         if($this->BalanceIsEnough($ClientId,$CostLoad+$CostDelivery)==true)
                          {

                            

                                    $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);
                                    $creditEscrowItem=$this->CreditJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)($costDelivery+$CostLoad),17,"ClientToEscro2");
                                    $debitClientItem=$this->DebitJournalTrip((int)$IdOdoo_client,$id_Journal_Discount,(float)($costDelivery+$CostLoad),7,"ClientToEscro1");
                                    

                                    echo "a1".$creditEscrowItem."a2".$debitClientItem;

                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdDiscountClient='$id_Journal_Discount' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);

                                }
                                else
                                {
                                    echo "ClientChargeBalanace";
                                    return;
                                }
                            }
                            else
                            {
                                echo "deliveryWayNotFound";
                                return;
                            }   
                    

                        $query_Get_Token_Transporter="Select * from Customer where id='$TransporterId'";
                        require_once('FcmExample3/Firebase.php');
                        $tokens = array(); 
                        
                        $Result_query=$this->dataBase->query($query_Get_Token_Transporter);
                        $row= $this->dataBase->fetchArray($Result_query);
                        if($row['Token']!=null)
                        {
                            array_push($tokens,$row['Token']);
                        }

                        $firebase = new Firebase(); 
                        $firebase->sendTransporterNotifyAcceptedOrder($tokens,'Accepted Order','Click To Track Your Order',$OrderId);


                        echo "OrderAcceptedSuccessfully";
                    }
                    else
                    {
                        echo "OrderNotAccept";
                    }
                }
            }
            else
            {
                echo "OrderNotFound";
            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}
public function CheckPriceTrip($TransporterId,$OrderId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $query="Select CostDelivery From DeliveryAcceptOrderTable Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
            $CostArray = array();
            $result=$this->dataBase->query($query);
            $row_count = $this->dataBase->numRows( $result );
            if($row_count)
            {
                $row_Cost_Order=$this->dataBase->fetchArray($result);
                array_push($CostArray,array("CostDelivery" =>$row_Cost_Order['CostDelivery']));
    
                echo json_encode(array("server_response"=>$CostArray)); 

            }
            else
            {
                echo "CostNotSend";

            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterEditPriceTrip($TransporterId,$OrderId,$NewCost,$TypeAction,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $NewCost = $this->dataBase->escape( $NewCost );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            if($TypeAction == "DeleteCost")
            {
                $query_delete_Cost="delete from DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                $result_delete=$this->dataBase->query($query_delete_Cost);
                if($result_delete == true)
                {
                    echo "deleteOrder";
                }
                else
                {
                    echo "NotdeleteOrder";
                }

            }
            else
            {

                $query="Select CostDelivery From DeliveryAcceptOrderTable Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                $CostArray = array();
                $result=$this->dataBase->query($query);
                $row_count = $this->dataBase->numRows( $result );
                if($row_count)
                {
                    $query_Update="Update DeliveryAcceptOrderTable set CostDelivery='$NewCost' Where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_update=$this->dataBase->query($query_Update);
                    if($result_update == true)
                    {
                        echo "UpdatedOrder";
                    }
                    else
                    {
                        echo "NotUpdateOrder";
                    }

                }
                else
                {
                    echo "CostNotSend";
                }
            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}


public function TransporterShowDetailsOrder($OrderId,$TransporterId,$TokenDevice)
{
    $OrderId = $this->dataBase->escape( $OrderId );
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $villagevar = "";
    $villagedesvar = "";
    $OrderDetailsArray = array();
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $Query_Get_Order_Details="Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad,OrderEngine.TypeLoad As TypeLoad, OrderEngine.LengthLoad As LengthLoad,OrderEngine.CostLoad as CostLoad,OrderEngine.DeliveryCost as DeliveryCost
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.HeightLoad As HeightLoad , 
            OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.ReceiverAddressNum As ReceiverAddressNum,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver,CustomerTable.PhoneNumber As PhoneCustomer
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes,OrderBidAddress.Village,OrderBidAddress.VillageDestination
            From
            OrderBidEngin As OrderEngine,OrderBidAddress As OrderBidAddress,Customer As CustomerTable
            ,ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            AND (OrderEngine.IsDeleted=0 Or OrderEngine.IsDeleted IS NULL)
            ";
            
            $Result_Get_Details_Array=$this->dataBase->query($Query_Get_Order_Details);
            $row_Details_Order=$this->dataBase->fetchArray($Result_Get_Details_Array);
            
            $CustomerId=$row_Details_Order['CustomerId'];
            $query_Get_Lang="Select LanguageId From Customer Where id='$CustomerId'";
            $result_Get_Customer=$this->dataBase->query($query_Get_Lang);
            $row_CustomerId= $this->dataBase->fetchArray($result_Get_Customer);
            
            $LangId=$row_CustomerId['LanguageId'];
            
            $CityIdSource=$row_Details_Order['IdCitySource'];
            $CityIdDestination=$row_Details_Order['IdCityDes'];
            
            $query_GetCitySource="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdSource'";
            $result_CitySource=$this->dataBase->query($query_GetCitySource);
            $row_CitySource= $this->dataBase->fetchArray($result_CitySource);
            
            $query_GetCityDes="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdDestination'";
            $result_CityDes=$this->dataBase->query($query_GetCityDes);
            $row_CityDes= $this->dataBase->fetchArray($result_CityDes);
            
            if($row_Details_Order == true)
            {
                if($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != ""){
                         $villagevar = $row_Details_Order['Village'];
                    }
                if($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != ""){
                         $villagedesvar = $row_Details_Order['VillageDestination'];
                    }
                array_push($OrderDetailsArray,array("deliveryWay" =>$row_Details_Order['deliveryWay'],"HeightLoad"=>$row_Details_Order['HeightLoad'],"FullNameCustomer"=>$row_Details_Order['FullNameCustomer']
                ,"DetailsLoad"=>$row_Details_Order['DetailsLoad'],"LengthLoad"=>$row_Details_Order['LengthLoad'],"WidthLoad"=>$row_Details_Order['WidthLoad']
                ,"HeightLoad"=>$row_Details_Order['HeightLoad'],"WeightLoad"=>$row_Details_Order['WeightLoad'],"CostLoad"=>$row_Details_Order['CostLoad'],"DeliveryCost"=>$row_Details_Order['DeliveryCost'],"DateLoad"=>$this->getDateFormat($row_Details_Order['DateLoad'],'H:i:s')
                ,"IdCitySource"=>$row_CitySource['CityName'],"IdCityDes"=>$row_CityDes['CityName'],"NameNeighborhood"=>$row_Details_Order['NameNeighborhood']
                ,"NameStreet"=>$row_Details_Order['NameStreet'],"NameBuilding"=>$row_Details_Order['NameBuilding'],"FloorNumbers"=>$row_Details_Order['FloorNumbers']
                ,"ApartmentNumber"=>$row_Details_Order['ApartmentNumber'],"OtherDetails"=>$row_Details_Order['OtherDetails'],
                "LatSender"=>$row_Details_Order['LatSender']
                ,"LongSender"=>$row_Details_Order['LongSender'],"LatReciver"=>$row_Details_Order['LatReciver'],"LongReciver"=>$row_Details_Order['LongReciver']
                ,"TypeLoad"=>$row_Details_Order['TypeLoad']
                ,"NameNeighborhoodDes"=>$row_Details_Order['NameNeighborhoodDes'] ,"NameStreetDes"=>$row_Details_Order['NameStreetDes'] ,"NameBuildingDes"=>$row_Details_Order['NameBuildingDes']
                ,"FloorNumbersDes"=>$row_Details_Order['FloorNumbersDes'],"ApartmentNumberDes"=>$row_Details_Order['ApartmentNumberDes'],"OtherDetailsDes"=>$row_Details_Order['OtherDetailsDes']
                ,"PhoneCustomer"=>$row_Details_Order['PhoneCustomer'],"ReceiverAddressNum"=>$row_Details_Order['ReceiverAddressNum'],"village"=>$villagevar,"villageDes"=>$villagedesvar));
    
                echo json_encode(array("server_response"=>$OrderDetailsArray)); 
            }
            else
            {
                echo "OrderNotFound";
            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}


public function TransporterShowDetailsOrderCurrent($OrderId,$TransporterId,$TokenDevice)
{
    $OrderId = $this->dataBase->escape( $OrderId );
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $OrderDetailsArray = array();
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $Query_Get_Order_Details="Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad,OrderEngine.TypeLoad As TypeLoad , OrderEngine.LengthLoad As LengthLoad
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver,CustomerTable.PhoneNumber As PhoneCustomer
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes
            From
            OrderBidEngin As OrderEngine,OrderBidAddress As OrderBidAddress,Customer As CustomerTable
            ,ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            AND (OrderEngine.IsDeleted=0 Or OrderEngine.IsDeleted IS NULL)
            ";
            
            $Result_Get_Details_Array=$this->dataBase->query($Query_Get_Order_Details);
            $row_Details_Order=$this->dataBase->fetchArray($Result_Get_Details_Array);
            
            $CustomerId=$row_Details_Order['CustomerId'];
            $query_Get_Lang="Select LanguageId From Customer Where id='$CustomerId'";
            $result_Get_Customer=$this->dataBase->query($query_Get_Lang);
            $row_CustomerId= $this->dataBase->fetchArray($result_Get_Customer);
            
            $LangId=$row_CustomerId['LanguageId'];
            
            $CityIdSource=$row_Details_Order['IdCitySource'];
            $CityIdDestination=$row_Details_Order['IdCityDes'];

            $query_GetCitySource="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdSource'";
            $result_CitySource=$this->dataBase->query($query_GetCitySource);
            $row_CitySource= $this->dataBase->fetchArray($result_CitySource);

            $query_GetCityDes="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdDestination'";
            $result_CityDes=$this->dataBase->query($query_GetCityDes);
            $row_CityDes= $this->dataBase->fetchArray($result_CityDes);
         
            if($row_Details_Order == true)
            {
                
                array_push($OrderDetailsArray,array("deliveryWay" =>$row_Details_Order['deliveryWay'],"FullNameCustomer"=>$row_Details_Order['FullNameCustomer'],"TypeLoad"=>$row_Details_Order['TypeLoad']
                ,"DetailsLoad"=>$row_Details_Order['DetailsLoad'],"LengthLoad"=>$row_Details_Order['LengthLoad'],"WidthLoad"=>$row_Details_Order['WidthLoad']
                ,"HeightLoad"=>$row_Details_Order['HeightLoad'],"WeightLoad"=>$row_Details_Order['WeightLoad'],"DateLoad"=>$this->getDateFormat($row_Details_Order['DateLoad'],'H:i:s')
                ,"IdCitySource"=>$row_CitySource['CityName'],"IdCityDes"=>$row_CityDes['CityName'],"NameNeighborhood"=>$row_Details_Order['NameNeighborhood']
                ,"NameStreet"=>$row_Details_Order['NameStreet'],"NameBuilding"=>$row_Details_Order['NameBuilding'],"FloorNumbers"=>$row_Details_Order['FloorNumbers']
                ,"ApartmentNumber"=>$row_Details_Order['ApartmentNumber'],"OtherDetails"=>$row_Details_Order['OtherDetails'],"LatSender"=>$row_Details_Order['LatSender']
                ,"LongSender"=>$row_Details_Order['LongSender'],"LatReciver"=>$row_Details_Order['LatReciver'],"LongReciver"=>$row_Details_Order['LongReciver']
                ,"NameNeighborhoodDes"=>$row_Details_Order['NameNeighborhoodDes'] ,"NameStreetDes"=>$row_Details_Order['NameStreetDes'] ,"NameBuildingDes"=>$row_Details_Order['NameBuildingDes']
                ,"FloorNumbersDes"=>$row_Details_Order['FloorNumbersDes'],"ApartmentNumberDes"=>$row_Details_Order['ApartmentNumberDes'],"OtherDetailsDes"=>$row_Details_Order['OtherDetailsDes']
                ,"PhoneCustomer"=>$row_Details_Order['PhoneCustomer']));
    
                echo json_encode(array("server_response"=>$OrderDetailsArray)); 
            }
            else
            {
                echo "OrderNotFound";
            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}

public function ClientShowDetailsOrder($OrderId,$ClientId,$TokenDevice)
{
    $OrderId = $this->dataBase->escape( $OrderId );
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $villagevar = " ";
    $villagedesvar = " ";
    $OrderDetailsArray = array();
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $Query_Get_Order_Details="Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad, OrderEngine.LengthLoad As LengthLoad
            ,OrderEngine.TypeLoad As TypeLoad
            ,OrderEngine.WidthLoad As WidthLoad,OrderEngine.HeightLoad As HeightLoad,OrderEngine.HeightLoad As HeightLoad,
            OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes,OrderBidAddress.Village As Village,OrderBidAddress.VillageDestination As VillageDestination
            From
            OrderBidEngin As OrderEngine,OrderBidAddress As OrderBidAddress,Customer As CustomerTable
            ,ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            ";
            
            $Result_Get_Details_Array=$this->dataBase->query($Query_Get_Order_Details);
            $row_Details_Order=$this->dataBase->fetchArray($Result_Get_Details_Array);
            


            $CustomerId=$row_Details_Order['CustomerId'];
            $query_Get_Lang="Select LanguageId From Customer Where id='$CustomerId'";
            $result_Get_Customer=$this->dataBase->query($query_Get_Lang);
            $row_CustomerId= $this->dataBase->fetchArray($result_Get_Customer);
            
            $LangId=$row_CustomerId['LanguageId'];
            
            $CityIdSource=$row_Details_Order['IdCitySource'];
            $CityIdDestination=$row_Details_Order['IdCityDes'];

            $query_GetCitySource="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdSource'";
            $result_CitySource=$this->dataBase->query($query_GetCitySource);
            $row_CitySource= $this->dataBase->fetchArray($result_CitySource);

            $query_GetCityDes="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdDestination'";
            $result_CityDes=$this->dataBase->query($query_GetCityDes);
            $row_CityDes= $this->dataBase->fetchArray($result_CityDes);


            if($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != ""){
                         $villagevar = $row_Details_Order['Village'];
                    }
                if($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != ""){
                         $villagedesvar = $row_Details_Order['VillageDestination'];
                    }


            array_push($OrderDetailsArray,array("deliveryWay" =>$row_Details_Order['deliveryWay'],"HeightLoad"=>$row_Details_Order['HeightLoad'],"FullNameCustomer"=>$row_Details_Order['FullNameCustomer']
            ,"TypeLoad"=>$row_Details_Order['TypeLoad']
            ,"DetailsLoad"=>$row_Details_Order['DetailsLoad'],"LengthLoad"=>$row_Details_Order['LengthLoad'],"WidthLoad"=>$row_Details_Order['WidthLoad']
            ,"HeightLoad"=>$row_Details_Order['HeightLoad'],"WeightLoad"=>$row_Details_Order['WeightLoad'],"DateLoad"=>$this->getDateFormat($row_Details_Order['DateLoad'],'H:i:s')
            ,"IdCitySource"=>$row_CitySource['CityName'],"IdCityDes"=>$row_CityDes['CityName'],"NameNeighborhood"=>$row_Details_Order['NameNeighborhood']
            ,"NameStreet"=>$row_Details_Order['NameStreet'],"NameBuilding"=>$row_Details_Order['NameBuilding'],"FloorNumbers"=>$row_Details_Order['FloorNumbers']
            ,"ApartmentNumber"=>$row_Details_Order['ApartmentNumber'],"OtherDetails"=>$row_Details_Order['OtherDetails'],"LatSender"=>$row_Details_Order['LatSender']
            ,"LongSender"=>$row_Details_Order['LongSender'],"LatReciver"=>$row_Details_Order['LatReciver'],"LongReciver"=>$row_Details_Order['LongReciver']
            ,"NameNeighborhoodDes"=>$row_Details_Order['NameNeighborhoodDes'] ,"NameStreetDes"=>$row_Details_Order['NameStreetDes'] ,"NameBuildingDes"=>$row_Details_Order['NameBuildingDes']
            ,"FloorNumbersDes"=>$row_Details_Order['FloorNumbersDes'],"ApartmentNumberDes"=>$row_Details_Order['ApartmentNumberDes'],"OtherDetailsDes"=>$row_Details_Order['OtherDetailsDes'],"village"=>$villagevar,"villageDes"=>$villagedesvar));

            echo json_encode(array("server_response"=>$OrderDetailsArray)); 
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}



public function ClientShowDetailsOrderCurrent($OrderId,$ClientId,$LangId,$TokenDevice)
{
    $OrderId = $this->dataBase->escape( $OrderId );
    $ClientId = $this->dataBase->escape( $ClientId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $villagevar = " ";
    $villagedesvar = " ";
    $OrderDetailsArray = array();
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {

            $query_Check_Order="Select * from OrderBidEngin Where id='$OrderId'";
            //$result_Check=$this->dataBase->query($query_Check_Order);
            if($this->GetCountRows($query_Check_Order) > 0)
            {

            $Query_Get_Order_Details="Select OrderEngine.deliveryWay As deliveryWay,OrderEngine.CustomerId AS CustomerId
            ,ClientCustomerTable.FirstName As FullNameCustomer, OrderEngine.DetailsLoad As DetailsLoad, OrderEngine.LengthLoad As LengthLoad
            ,OrderEngine.TypeLoad As TypeLoad
            ,OrderEngine.DeliveryId As DeliveryId, OrderEngine.Idvehicle As IdvehicleBid,OrderEngine.WidthLoad As WidthLoad
            ,OrderEngine.HeightLoad As HeightLoad,OrderEngine.WeightLoad As WeightLoad,OrderEngine.DateLoad As DateLoad
            ,OrderBidAddress.IdCity As IdCitySource,OrderBidAddress.IdCityDes As IdCityDes,OrderBidAddress.NameNeighborhood As NameNeighborhood
            ,OrderBidAddress.NameStreet As NameStreet,OrderBidAddress.NameBuilding As NameBuilding ,OrderBidAddress.FloorNumbers As FloorNumbers
            ,OrderBidAddress.ApartmentNumber As ApartmentNumber,OrderBidAddress.OtherDetails As OtherDetails,OrderBidAddress.LatSender As LatSender
            ,OrderBidAddress.LongSender As LongSender,OrderBidAddress.LatReciver As LatReciver,OrderBidAddress.LongReciver As LongReciver
            ,OrderBidAddress.NameNeighborhoodDes As NameNeighborhoodDes,OrderBidAddress.NameStreetDes As NameStreetDes,OrderBidAddress.NameBuildingDes As NameBuildingDes
            ,OrderBidAddress.FloorNumbersDes As FloorNumbersDes,OrderBidAddress.ApartmentNumberDes As ApartmentNumberDes,OrderBidAddress.OtherDetailsDes As OtherDetailsDes,OrderBidAddress.Village,OrderBidAddress.VillageDestination
            From
            OrderBidEngin As OrderEngine,OrderBidAddress As OrderBidAddress,Customer As CustomerTable
            ,ClientTable As ClientCustomerTable
            Where
            OrderBidAddress.IdOrderBidEngin=OrderEngine.id AND OrderEngine.id='$OrderId' AND
            CustomerTable.id=OrderEngine.CustomerId AND ClientCustomerTable.CustomerId=CustomerTable.id
            AND OrderEngine.IsAcceptDelivery=1 
            ";
            
           
            
            $Result_Get_Details_Array=$this->dataBase->query($Query_Get_Order_Details);
            $row_Details_Order=$this->dataBase->fetchArray($Result_Get_Details_Array);


            $CustomerId=$row_Details_Order['CustomerId'];
            $query_Get_Lang="Select LanguageId From Customer Where id='$CustomerId'";
            $result_Get_Customer=$this->dataBase->query($query_Get_Lang);
            $row_CustomerId= $this->dataBase->fetchArray($result_Get_Customer);
            
            $LangId=$row_CustomerId['LanguageId'];
            
            $CityIdSource=$row_Details_Order['IdCitySource'];
            $CityIdDestination=$row_Details_Order['IdCityDes'];

            $query_GetCitySource="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdSource'";
            $result_CitySource=$this->dataBase->query($query_GetCitySource);
            $row_CitySource= $this->dataBase->fetchArray($result_CitySource);

            $query_GetCityDes="Select CityName From CityRegionLang  Where languageId='$LangId' AND CityId='$CityIdDestination'";
            $result_CityDes=$this->dataBase->query($query_GetCityDes);
            $row_CityDes= $this->dataBase->fetchArray($result_CityDes);


            $ViclelId=$row_Details_Order['IdvehicleBid'];
            $DeliveryId=$row_Details_Order['DeliveryId'];
            
          
            $query_Get_Name_Transporter="Select FirstName From TransporterTable Where CustomerId='$DeliveryId'";
            $result_GetName_trans=$this->dataBase->query($query_Get_Name_Transporter);
            $row_Get_Name_transp=$this->dataBase->fetchArray($result_GetName_trans);
            
            $query_Get_Number_Transporter="Select * From Customer Where id='$DeliveryId'";
            $result_GetNumber_trans=$this->dataBase->query($query_Get_Number_Transporter);
            $row_Get_Number_transp=$this->dataBase->fetchArray($result_GetNumber_trans);
            


            $query_Get_Color_Licenc="Select CarColorId,LicenceCarNumber From TransporterCarInfo Where CustomerId='$DeliveryId'";
            $result_Get_color_Licenc=$this->dataBase->query($query_Get_Color_Licenc);
            $row_Details_Car_Transporter=$this->dataBase->fetchArray($result_Get_color_Licenc);
            
            
            $Color_Id=$row_Details_Car_Transporter['CarColorId'];
         
            
            $query_Get_Name_Car="Select Name From VehicleNameLang Where IdLanguage='$LangId' AND IdVehicle='$ViclelId'  ";
            $Result_Get_Name_Vichle=$this->dataBase->query($query_Get_Name_Car);
            $row_Details_Car_Name=$this->dataBase->fetchArray($Result_Get_Name_Vichle);
            
            $query_Get_Name_Color="Select ColorName From ColorNameLang  Where IdLanguage='$LangId' AND IdColor='$Color_Id'  ";
            $Result_Get_Name_Color=$this->dataBase->query($query_Get_Name_Color);
            $row_Details_Color_Name=$this->dataBase->fetchArray($Result_Get_Name_Color);
            
          if($row_Details_Order['Village'] != null || $row_Details_Order['Village'] != ""){
                         $villagevar = $row_Details_Order['Village'];
                    }
                if($row_Details_Order['VillageDestination'] != null || $row_Details_Order['VillageDestination'] != ""){
                         $villagedesvar = $row_Details_Order['VillageDestination'];
                    }
            array_push($OrderDetailsArray,array("deliveryWay" =>$row_Details_Order['deliveryWay'],"FullNameCustomer"=>$row_Get_Name_transp['FirstName']
            ,"TypeLoad"=>$row_Details_Order['TypeLoad']
            ,"DetailsLoad"=>$row_Details_Order['DetailsLoad'],"LengthLoad"=>$row_Details_Order['LengthLoad'],"WidthLoad"=>$row_Details_Order['WidthLoad']
            ,"HeightLoad"=>$row_Details_Order['HeightLoad'],"WeightLoad"=>$row_Details_Order['WeightLoad'],"DateLoad"=>$this->getDateFormat($row_Details_Order['DateLoad'],'H:i:s')
            ,"IdCitySource"=>$row_CitySource['CityName'],"IdCityDes"=>$row_CityDes['CityName'],"NameNeighborhood"=>$row_Details_Order['NameNeighborhood']
            ,"NameStreet"=>$row_Details_Order['NameStreet'],"NameBuilding"=>$row_Details_Order['NameBuilding'],"FloorNumbers"=>$row_Details_Order['FloorNumbers']
            ,"ApartmentNumber"=>$row_Details_Order['ApartmentNumber'],"OtherDetails"=>$row_Details_Order['OtherDetails'],"LatSender"=>$row_Details_Order['LatSender']
            ,"LongSender"=>$row_Details_Order['LongSender'],"LatReciver"=>$row_Details_Order['LatReciver'],"LongReciver"=>$row_Details_Order['LongReciver']
            ,"NameNeighborhoodDes"=>$row_Details_Order['NameNeighborhoodDes'] ,"NameStreetDes"=>$row_Details_Order['NameStreetDes'] ,"NameBuildingDes"=>$row_Details_Order['NameBuildingDes']
            ,"FloorNumbersDes"=>$row_Details_Order['FloorNumbersDes'],"ApartmentNumberDes"=>$row_Details_Order['ApartmentNumberDes'],"OtherDetailsDes"=>$row_Details_Order['OtherDetailsDes'],"village"=>$villagevar,"villageDes"=>$villagedesvar
            ,"TransporterName"=>$row_Get_Name_transp['FullName'],"CarLicenceNum"=>$row_Details_Car_Transporter['LicenceCarNumber'],"CarNumType"=>$row_Details_Car_Name['Name']
            ,"ColorName"=>$row_Details_Color_Name['ColorName'],"TransNumber"=>$row_Get_Number_transp['PhoneNumber']));

            echo json_encode(array("server_response"=>$OrderDetailsArray)); 
        }
        else
        echo "OrderNotFound";
    }
    
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}



public function ClientDeleteOrder($OrderId,$ClientId,$TokenDevice)
{
    $OrderId = $this->dataBase->escape( $OrderId );
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query_Check_Order="Select IsAcceptDelivery,IsDeleted,DeliveryId From OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
            $Result_Check_Order=$this->dataBase->query($query_Check_Order);
            if($Result_Check_Order == true)
            {
                $row_Check_Order=$this->dataBase->fetchArray($Result_Check_Order);
                
                if($row_Check_Order['IsAcceptDelivery'] == 1)
                {
                    //Send Notify Transporter & Delete Order With Actrion Cost !
                    $query_delete_Accept_Order="Update OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                    $Result_delete_Accept_Order=$this->dataBase->query($query_delete_Accept_Order);
                    if($Result_delete_Accept_Order)
                    {

                        // discount from client odoo cost 

                        $Client_Cost=$this->getBalance($ClientId);

                        $GetIdOdootripIdTransporter=$this->GetIdOdootripId(2,$OrderId);
                        $BalanceTripCustomer=$this->getBalanceBidEngin($GetIdOdootripIdTransporter);
                    

                        $query_Get_Balanace="select OdooInvoiceClient from ConfigInvoiceTable";

                        $result_Balanace=$this->dataBase->query($query_Get_Balanace);
                        $row_Balanace=$this->dataBase->fetchArray($result_Balanace);
                        $DiscountTValue=$row_Balanace['OdooInvoiceClient'];

                        $query_Notify_Transporter_Delete="Select CustomerOrder.Token As TokenNotify From 
                        OrderBidEngin AS OrerEngin , Customer As CustomerOrder Where OrerEngin.id='$OrderId'
                        AND OrerEngin.DeliveryId = CustomerOrder.id";
                        $Result_Id_T_Order=$this->dataBase->query($query_Notify_Transporter_Delete);
                        $row_Id_T=$this->dataBase->fetchArray($Result_Id_T_Order);

                        require_once('FcmExample3/Firebase.php');
                        $tokens = array(); 

                        array_push($tokens,$row_Id_T['TokenNotify']);
                       
                        $firebase = new Firebase(); 
                        $firebase->NotificationTranspoDeleteOrder($tokens,'Client Canceled Your Order','',$OrderId);

                        // Send Notification
                        echo "OrderDeletedSuccess";
                    }
                    else
                    {
                        echo "OrderNotDeletedSuccess";
                    }
                }
                else
                {
                    $query_delete_Not_Accept_Order="Update OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                    $Result_delete_Not_Accept_Order=$this->dataBase->query($query_delete_Not_Accept_Order);
                    if($Result_delete_Not_Accept_Order)
                    {
                        echo "OrderDeletedSuccess";
                    }
                    else
                    {
                        echo "OrderNotDeletedSuccess";
                    }
                }
            }
            else
            {
                echo "OrderNotFound";
            }
        }
        else
        {
            echo "Blocked"; 
        }
    }
    else
    {
        echo "TokenError";
    }
}

public function ClientShowBidRequistsAccepted($ClientId,$TokenDevice,$Counter)
{
   
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $OrderArray = array();

    $Counter = $this->dataBase->escape( $Counter );
    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;

    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        { 
            $query_Get_Orders="Select Distinct * 
                From
                    OrderBidEngin 
                Where 
                    CustomerId='$ClientId' AND IsAcceptDelivery=1 AND (IsDeleted=0 OR IsDeleted IS NULL)
                    AND (Orderfinished = 0 Or Orderfinished IS NULL) Order By createdAt DESC LIMIT $en OFFSET $startindex ;
                ";
            
            $result_get_Order=$this->dataBase->query($query_Get_Orders);
            while($row= $this->dataBase->fetchArray($result_get_Order))
            {
                array_push($OrderArray,array("idOrder"=>$row['id'],"DateOrder"=>$this->getDateFormat($row['DateLoad'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateLoad'],'H:i:s'),"DeliveryWays"=>$row['deliveryWay']));
            }
            echo json_encode(array("server_response"=>$OrderArray)); 
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function ClientHistoryOrder($ClientId,$TokenDevice,$Counter)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $Counter = $this->dataBase->escape( $Counter );

    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;
    $OrderArray = array();
     
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        { 
            $query_Get_Orders="Select Distinct * 
                From
                    OrderBidEngin 
                Where 
                    CustomerId='$ClientId' AND IsAcceptDelivery=1 AND (IsDeleted=1 OR Orderfinished = 1) 
                    Order By createdAt DESC LIMIT $en OFFSET $startindex;
                ";
            
            $result_get_Order=$this->dataBase->query($query_Get_Orders);
            while($row= $this->dataBase->fetchArray($result_get_Order))
            {
                $checkTripRated=$this->CustomerCheckRateTrip($ClientId,$row['id']);
                array_push($OrderArray,array("idOrder"=>$row['id'],"DateOrder"=>$this->getDateFormat($row['DateLoad'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateLoad'],'H:i:s'),"DeliveryWays"=>$row['deliveryWay'],"IsFinished"=>$row['Orderfinished'],"IsDeleted"=>$row['IsDeleted'],"IsRate"=>$checkTripRated));
            }
            echo json_encode(array("server_response"=>$OrderArray)); 
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterHistoryOrder($TransporterId,$TokenDevice,$Counter)
{
    $TransporterId = $this->dataBase->escape($TransporterId);
    $TokenDevice = $this->dataBase->escape($TokenDevice);
    $Counter = $this->dataBase->escape( $Counter );

    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;
   
    $OrderArray = array();
     
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        { 
            // $query_Get_Orders="Select Distinct * 
            //     From
            //         OrderBidEngin 
            //     Where 
            //         DeliveryId='$TransporterId' AND IsAcceptDelivery=1 AND (IsDeleted=1 OR Orderfinished = 1)
            //         Order By createdAt DESC LIMIT $en OFFSET $startindex; 
            //     ";
              $query_Get_Orders= "Select distinct OrderBidEngin.DeliveryId, OrderBidEngin.id,OrderBidEngin.CostLoad,OrderBidEngin.DateLoad,OrderBidEngin.deliveryWay,OrderBidEngin.IsDeleted,OrderBidEngin.Orderfinished,DeliveryAcceptOrderTable.CostDelivery,DeliveryAcceptOrderTable.IdTransporter
                From
                    OrderBidEngin,DeliveryAcceptOrderTable 
                Where  DeliveryAcceptOrderTable.IdTransporter=OrderBidEngin.DeliveryId And  DeliveryAcceptOrderTable.IdTransporter = '$TransporterId' And DeliveryId = '$TransporterId' and OrderBidEngin.id = DeliveryAcceptOrderTable.IdOrder And
    IsAcceptDelivery=1 AND (OrderBidEngin.IsDeleted=1 OR Orderfinished = 1)
                    Order By OrderBidEngin.createdAt DESC LIMIT $en OFFSET $startindex";            
            $result_get_Order=$this->dataBase->query($query_Get_Orders);
             $CostDelivery = 0;
            while($row= $this->dataBase->fetchArray($result_get_Order))
            {
                if( $row['CostDelivery'] != ""){
                    $CostDelivery =$row['CostDelivery']; 
                }
                $checkTripRated=$this->CustomerCheckRateTrip($TransporterId,$row['id']);
                array_push($OrderArray,array("idOrder"=>$row['id'],"DateOrder"=>$this->getDateFormat($row['DateLoad'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateLoad'],'H:i:s'),"CostLoad"=>$row['CostLoad'],
                    "CostDelivery"=>$CostDelivery,"DeliveryWays"=>$row['deliveryWay'],"IsFinished"=>$row['Orderfinished'],"IsDeleted"=>$row['IsDeleted'],"IsRate"=>$checkTripRated));
            }
            echo json_encode(array("server_response"=>$OrderArray)); 
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterOrderCurrent($TransporterId,$TokenDevice,$Counter)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    $Counter = $this->dataBase->escape( $Counter );
    $en=10;
    if($Counter <0)
    $Counter=0;
    $startindex=$Counter;
    $startindex = $startindex-1;

    $OrderArray = array();
     
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        { 
            $query_Get_Orders="Select Distinct * 
                From
                    OrderBidEngin 
                Where 
                    DeliveryId='$TransporterId' AND IsAcceptDelivery=1 AND (IsDeleted=0 OR IsDeleted IS NULL) AND (Orderfinished = 0 Or Orderfinished IS NULL) LIMIT $en OFFSET $startindex ;
                ";
            
            $result_get_Order=$this->dataBase->query($query_Get_Orders);
            while($row= $this->dataBase->fetchArray($result_get_Order))
            {
                array_push($OrderArray,array("idOrder"=>$row['id'],"DateOrder"=>$this->getDateFormat($row['createdAt'],'Y-m-d'),"TimeOrder"=>$this->getDateFormat($row['DateLoad'],'H:i:s'),"DeliveryWays"=>$row['deliveryWay'],"CostLoad"=>$row['CostLoad']));
                
            }
            echo json_encode(array("server_response"=>$OrderArray)); 
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}


public function TransporterDeleteOrder($TransporterId,$OrderId,$TokenDevice)
{

    $this->OdooDb();
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $OrderId = $this->dataBase->escape( $OrderId );
    
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $query_Check_Order="Select IsAcceptDelivery,IsDeleted,DeliveryId From OrderBidEngin Where id='$OrderId' AND (IsDeleted=0 Or IsDeleted IS NULL)";
            $Result_Check_Order=$this->dataBase->query($query_Check_Order);
            if($Result_Check_Order == true)
            {
                $row_Check_Order=$this->dataBase->fetchArray($Result_Check_Order);
                
                if($row_Check_Order['IsAcceptDelivery'] == 1)
                {

                    // discount transporter odoo cost value


                    $Transporter_Cost=$this->getBalance($TransporterId);

                    $GetIdOdootripIdClient=$this->GetIdOdootripId(1,$OrderId);
                    $BalanceTripCustomer=$this->getBalanceBidEngin($GetIdOdootripIdClient);
                

                    $query_Get_Balanace="select DiscountTransporter from ConfigInvoiceTable";

                    $result_Balanace=$this->dataBase->query($query_Get_Balanace);
                    $row_Balanace=$this->dataBase->fetchArray($result_Balanace);
                    $DiscountTValue=$row_Balanace['DiscountTransporter'];



                    //Send Notify Client & Delete Order With Actrion Cost !
                    $query_delete_Accept_Order="Update OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                    $Result_delete_Accept_Order=$this->dataBase->query($query_delete_Accept_Order);
                    if($Result_delete_Accept_Order)
                    {
                        // Send Notification
                        echo "OrderDeletedSuccess";
                        $query_Notify_Client_Delete="Select CustomerOrder.Token As TokenNotify From 
                        OrderBidEngin AS OrerEngin , Customer As CustomerOrder Where OrerEngin.id='$OrderId'
                        AND OrerEngin.DeliveryId = CustomerOrder.id";
                        $Result_Id_C_Order=$this->dataBase->query($query_Notify_Client_Delete);
                        $row_Id_C=$this->dataBase->fetchArray($Result_Id_C_Order);

                        require_once('FcmExample3/Firebase.php');
                        $tokens = array(); 

                        array_push($tokens,$row_Id_C['TokenNotify']);
                       
                        $firebase = new Firebase(); 
                        $firebase->NotificationClinetDeleteOrder($tokens,'Transporter Canceled Your Order','',$OrderId);
                        
                        
                    }
                    else
                    {
                        echo "OrderNotDeletedSuccess";
                    }
                }
                else
                {
                    $query_delete_Not_Accept_Order="Update OrderBidEngin set IsDeleted=1 Where id='$OrderId'";
                    $Result_delete_Not_Accept_Order=$this->dataBase->query($query_delete_Not_Accept_Order);
                    if($Result_delete_Not_Accept_Order)
                    {
                        echo "OrderDeletedSuccess";
                    }
                    else
                    {
                        echo "OrderNotDeletedSuccess";
                    }
                }
            }
            else
            {
                echo "OrderNotFound";
            }
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterSetLocationCurrentOrders($TransporterId,$TransporterLatLocation,$TransporterLongLocation,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $TransporterLatLocation = $this->dataBase->escape( $TransporterLatLocation );
    $TransporterLongLocation = $this->dataBase->escape( $TransporterLongLocation );
    
    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
        
        $query_Check_Trip_Transporter="Select * from OrderBidEngin Where IsAcceptDelivery=1 AND DeliveryId='$TransporterId' AND 
        (IsDeleted = 0 OR IsDeleted IS NULL) AND (Orderfinished = 0 OR Orderfinished IS NULL)";
            
        $Result_Trip_Transporter=$this->dataBase->query($query_Check_Trip_Transporter);
        $Count_Record=$this->GetCountRows($query_Check_Trip_Transporter);
 
        if($Count_Record > 0)
        {
            $query_Update_Data="Update OrderBidEngin set TransporterLatLocation='$TransporterLatLocation' , TransporterLongLoc='$TransporterLongLocation' Where DeliveryId='$TransporterId'";
            $result_Update=$this->dataBase->query($query_Update_Data);
            if($result_Update == true)
            {
                echo "UpdatedLocation";
                
            }
            else
            {
                echo "NotUpdateLocation";
            }
        }
        else
        {
            echo "NoTripFount";
        }
    
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function ClientTrackTransporterLocation($ClientId,$OrderId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $DetailsLocationArray = array();
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query_Get_Details_Location="Select TransporterLatLocation ,TransporterLongLoc,Orderfinished,IsDeleted 
            From OrderBidEngin Where id='$OrderId'";
            $result_Get_Details=$this->dataBase->query($query_Get_Details_Location);
            $row= $this->dataBase->fetchArray($result_Get_Details);
            
            array_push($DetailsLocationArray,array("TransporterLatLocation"=>$row['TransporterLatLocation'],"TransporterLongLoc"=>$row['TransporterLongLoc']
            ,"Orderfinished"=>$row['Orderfinished'],"IsDeleted"=>$row['IsDeleted']));

            echo json_encode(array("server_response"=>$DetailsLocationArray)); 

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}
public function TransporterFinshTrip($TransporterId,$OrderId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $Check_OrderFinshed="Select * from OrderBidEngin Where id='$OrderId' AND (Orderfinished=0 Or Orderfinished IS NULL) 
            AND (IsDeleted=0 OR IsDeleted IS NULL) AND IsAcceptDelivery=1";
            $result=$this->dataBase->query($Check_OrderFinshed);
            $Count_Record=$this->GetCountRows($Check_OrderFinshed);
            
            if($Count_Record > 0)
            {

                //$Code_Verify = mt_rand(1000, 9999);
                $Code_Verify=2222;
                $query_SetActiveCode="Update OrderBidAddress set CodeVerifyReciver='$Code_Verify' Where IdOrderBidEngin='$OrderId'";
                $result_UpdateCode=$this->dataBase->query($query_SetActiveCode);
                if($result_UpdateCode == true)
                {
                    $query_Get_Mobile_Customer="Select ReceiverAddressNum from OrderBidAddress Where IdOrderBidEngin='$OrderId'";
                    $result_Get_Number=$this->dataBase->query($query_Get_Mobile_Customer);
                    $row_Get_Number = $this->dataBase->fetchArray($result_Get_Number);

                    $Mobile_Reciver=$row_Get_Number['ReceiverAddressNum'];

                    //Send SMS To Verify Trip



                        $amobile="+97".$Mobile_Reciver;
                        $amobile."Mobile";
                        $Code_Verify=$Code_Verify;
                        $ch = curl_init();
                        $Code_Verify1="ToGo%20Code%20Is:%20".$Code_Verify;
                         
                        curl_setopt($ch, CURLOPT_URL, "http://sms.zone.ps/API/SendSMS.aspx?id=d597f4679d9e20c1a642d60ea904ef9d&sender=ToGo&to=$amobile&msg=$Code_Verify1");
                        curl_setopt($ch, CURLOPT_HEADER, 0);
                        $reslt_Send=curl_exec($ch);
                      
                         curl_close($ch);
                
                         
                        if($reslt_Send!="Message Sent Successfully!")
                        {
                             echo "TryAgin";
                        }
                        else
                        {
                             echo "Message_Send"; 
                        }
                       
                }
                else
                {
                    echo "TryAgin";
                } 
            }
            else
            {
                echo "OrderNotAvaliable";
            }
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}



public function TransporterConfirmFinshTrip($TransporterId,$OrderId,$CodeVerify,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $CodeVerify = $this->dataBase->escape( $CodeVerify );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
           $query_Check_code="Select * from OrderBidAddress where IdOrderBidEngin='$OrderId' ";

           $query_Check_Order="Select * from OrderBidEngin where id='$OrderId' AND (Orderfinished Is NULL Or Orderfinished = 0) 
           AND  (IsDeleted Is NULL Or IsDeleted = 0)";

           $result_Check_Order=$this->dataBase->query($query_Check_Order);
           $result_CheckCode=$this->dataBase->query($query_Check_code);
           $row_CheckCode= $this->dataBase->fetchArray($result_CheckCode);
           $row_count_Order = $this->dataBase->numRows( $result_Check_Order );
           $Code_verif=$row_CheckCode['CodeVerifyReciver'];
           if($CodeVerify ==$Code_verif && $row_count_Order > 0)
           {
                $query_Update="Update OrderBidEngin set Orderfinished = 1 Where id='$OrderId'";
                $result_Update_Order=$this->dataBase->query($query_Update);
                if($result_Update_Order == true)
                {
                    $this->OdooDb();
                    $query_Get_Cost_Tra="Select CostDelivery from DeliveryAcceptOrderTable where IdOrder='$OrderId' AND IdTransporter='$TransporterId'";
                    $result_Get_Cost_Tra=$this->dataBase->query($query_Get_Cost_Tra);
                    $row_Get_Cost_Tra= $this->dataBase->fetchArray($result_Get_Cost_Tra);
                    $costDelivery=$row_Get_Cost_Tra['CostDelivery'];

                    $query_Get_Cost_Load="Select deliveryWay,CostLoad From OrderBidEngin where id='$OrderId'";

                    $result_Get_Cost_Load=$this->dataBase->query($query_Get_Cost_Load);
                    $row_count_Load = $this->dataBase->numRows( $result_Get_Cost_Load );

                    if($row_count_Load > 0)
                    {

                        $ClientId=$this->GetClientBidEnginOdoo($OrderId);
                        $Client_Phone=$this->getPhoneCustomer($ClientId);
                        $Transportre_Phone=$this->getPhoneCustomer($TransporterId);
                        $IdOdoo_client=$this->getOdooId($ClientId);
                        $IdOdoo_transporter=$this->getOdooId($TransporterId);
                        $Client_Cost=$this->getBalance($ClientId);
                        $Transporter_Cost=$this->getBalance($TransporterId);
                        $EscrowOdooId=$this->getEscrowwOdooId();


                        $row_Get_Cost_Load= $this->dataBase->fetchArray($result_Get_Cost_Load);
                        $deliveryWay=$row_Get_Cost_Load['deliveryWay'];
                        $CostLoad=$row_Get_Cost_Load['CostLoad'];

                        $TransporterDiscount=$this->getdiscountIdCustomerOdooTrip($OrderId,"Transporter");
                        $ClientDiscount=$this->getdiscountIdCustomerOdooTrip($OrderId,"Client");

                        $ToGoDiscountPrice=$this->getdiscountTogoTrip();
                        if($deliveryWay == 1)
                        {
            
                                $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);
                                $debitClientItem=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro1");
                                $creditEscrowItem=$this->CreditJournalTrip((int)$IdOdoo_transporter,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro2");
                            
                                
                                $query_Invoice_record="Update OrderBidEngin set JournalTripIdReturnedClient='$id_Journal_Discount' Where id='$OrderId'";

                                $result_update=$this->dataBase->query($query_Invoice_record);


                                /* old code */

                                /*$ToGo_Dicount=$Client_Price-($Client_Price*($ToGoDiscountPrice/100.0));

                                $Client_Price_Discount_Togo=$Client_Price*($ToGoDiscountPrice/100.0);

                                $Transporter_Cost_New=$Transporter_Cost+ $ToGo_Dicount;

                                $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
                                    array(array((int)$IdOdoo_transporter), array('fax'=>$Transporter_Cost_New)));

                                $query_Update_Price_ToGo="Update OrderBidEngin set ToGoDiscountPrice='$Client_Price_Discount_Togo' Where id='$OrderId'";

                                $result_Update_ToGo=$this->dataBase->query($query_Update_Price_ToGo);*/
                        }
                        else
                        if($deliveryWay == 2)
                        {


                            $id_Journal_Discount_Client=$this->CreateJournalTrip($IdOdoo_client,$OrderId);

                            $creditEscrowItem_Client=$this->CreditJournalTrip((int)$IdOdoo_client,$id_Journal_Discount_Client,(float)($CostLoad+$costDelivery),7,"ClientToEscro2");
                            $debitClientItem_Client=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_Discount_Client,(float)($CostLoad+$costDelivery),7,"ClientToEscro1");

                            $id_Journal_Discount_Transporter=$this->CreateJournalTrip($IdOdoo_transporter,$OrderId);

                            $creditEscrowItem_Transporter=$this->CreditJournalTrip((int)$IdOdoo_transporter,$id_Journal_Discount_Transporter,(float)$costDelivery,7,"ClientToEscro2");
                            $debitTransportertItem_Transporter=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_Discount_Transporter,(float)$costDelivery,7,"ClientToEscro1");

                            $query_Invoice_record="Update OrderBidEngin set JournalTripIdReturnedClient='$id_Journal_Discount_Client',JournalTripIdReturnedTransporter='
                            $id_Journal_Discount_Transporter' Where id='$OrderId'";
                            //$query_Invoice_record="Update OrderBidEngin set OdooInvoiceId='$id_invoice' Where id='$OrderId'";

                            $result_update=$this->dataBase->query($query_Invoice_record);



                            /**  old code  **/
                        /*  $records_Transporter = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                'product.template', 'read', array((int)$TransporterDiscount));
                            $Transporter_Price=$records[0]['list_price'];

                            $records_Client = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                'product.template', 'read', array((int)$ClientDiscount));
                            $Client_Price=$records_Client[0]['list_price'];

                            $ToGo_Dicount=$Client_Price-($Client_Price*($ToGoDiscountPrice/100.0));

                            $Client_Price_Discount_Togo=$Client_Price*($ToGoDiscountPrice/100.0);

                            $Transporter_Cost_New=$Transporter_Cost+ $ToGo_Dicount;


                            $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
                                array(array((int)$IdOdoo_transporter), array('fax'=>$Transporter_Cost_New)));

                                $Client_New_Price=$Client_Cost+$CostLoad;
                                $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
                                array(array((int)$IdOdoo_client), array('fax'=>$Client_New_Price)));

                            $query_Update_Price_ToGo="Update OrderBidEngin set ToGoDiscountPrice='$Client_Price_Discount_Togo' Where id='$OrderId'";

                            $result_Update_ToGo=$this->dataBase->query($query_Update_Price_ToGo);*/
                        }
                        else
                        if($deliveryWay == 3)
                        {


                                    $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);
                                    $creditEscrowItem=$this->CreditJournalTrip((int)$IdOdoo_transporter,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro2");
                                    $debitClientItem=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)$costDelivery,7,"ClientToEscro1");
                                    

                                    echo "a1".$creditEscrowItem."a2".$debitClientItem;

                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdReturnedTransporter='$id_Journal_Discount' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);


                            /*** oold code **/
                                /*$records_Transporter = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'product.template', 'read', array((int)$TransporterDiscount));
                                $Transporter_Price=$records[0]['list_price'];

                                $records_Client = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'product.template', 'read', array((int)$ClientDiscount));
                                $Client_Price=$records_Client[0]['list_price'];

                                $ToGo_Dicount=$Client_Price-($Client_Price*($ToGoDiscountPrice/100.0));

                                $Client_Price_Discount_Togo=$Client_Price*($ToGoDiscountPrice/100.0);

                                $Transporter_Cost_New=$Transporter_Cost+ $ToGo_Dicount;


                                $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
                                    array(array((int)$IdOdoo_transporter), array('fax'=>$Transporter_Cost_New)));


                                $query_Update_Price_ToGo="Update OrderBidEngin set ToGoDiscountPrice='$Client_Price_Discount_Togo' Where id='$OrderId'";

                                $result_Update_ToGo=$this->dataBase->query($query_Update_Price_ToGo);*/
                        }
                        else
                        if($deliveryWay == 4)
                        {


                                    $id_Journal_Discount=$this->CreateJournalTrip($IdOdoo_client,$OrderId);
                                    $creditEscrowItem=$this->CreditJournalTrip((int)$IdOdoo_transporter,$id_Journal_Discount,(float)($costDelivery+$CostLoad),7,"ClientToEscro2");
                                    $debitClientItem=$this->DebitJournalTrip((int)$EscrowOdooId,$id_Journal_Discount,(float)($costDelivery+$CostLoad),7,"ClientToEscro1");
                                    
                                    echo "a1".$creditEscrowItem."a2".$debitClientItem;

                                    $query_Invoice_record="Update OrderBidEngin set JournalTripIdReturnedTransporter='$id_Journal_Discount' Where id='$OrderId'";

                                    $result_update=$this->dataBase->query($query_Invoice_record);

                            /*** old code ***/
                                /*$records_Transporter = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'product.template', 'read', array((int)$TransporterDiscount));
                                $Transporter_Price=$records[0]['list_price'];

                                $records_Client = $this->models->execute_kw($this->db, $this->uid, $this->password,
                                    'product.template', 'read', array((int)$ClientDiscount));
                                $Client_Price=$records_Client[0]['list_price'];

                                    $deliveryCost=$Client_Price-$CostLoad;

                                $ToGo_Dicount=$deliveryCost-($deliveryCost*($ToGoDiscountPrice/100.0));

                                $Client_Price_Discount_Togo=$deliveryCost*($ToGoDiscountPrice/100.0);

                                $Transporter_Cost_New=$Transporter_Cost+ $ToGo_Dicount+$CostLoad;

                                $this->models->execute_kw($this->db, $this->uid, $this->password, 'res.partner', 'write',
                                    array(array((int)$IdOdoo_transporter), array('fax'=>$Transporter_Cost_New)));


                                $query_Update_Price_ToGo="Update OrderBidEngin set ToGoDiscountPrice='$Client_Price_Discount_Togo' Where id='$OrderId'";

                                $result_Update_ToGo=$this->dataBase->query($query_Update_Price_ToGo);*/
                        }
                        else
                        {
                            echo "deliveryWayNotFound";
                            return;
                        }
                    }
                    else
                    {
                        echo "OrderNotFound";
                        return;
                    }

                    echo "finishedOrder";
                }

           }
           else
           {
                echo "CodeError";
           }
        }
        else
        {
            echo "Blocked"; 
        } 
    }


    else
    {
        echo "TokenError";
    }
}



public function ClientRateTrip($ClientId,$OrderId,$RateValue,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $OrderId = $this->dataBase->escape( $OrderId );
    $RateValue = $this->dataBase->escape( $RateValue );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {

            $query_Check_TripRate="Select * from TripRating where TripId='$OrderId' AND CustomerId='$ClientId'";
            $result_CheckTrip=$this->dataBase->query($query_Check_TripRate);
            $NumberReate=$this->dataBase->numRows($result_CheckTrip);
            if($NumberReate > 0)
            {
                echo "OrderRated";
            }
            else
            {
                $query_AddRate="Insert into TripRating (TripId,RateValue,FromTransporter,FromClient,CustomerId) Values ('$OrderId','$RateValue',1,0,'$ClientId')";
                $result_AddRate=$this->dataBase->query($query_AddRate);
                if($result_AddRate == true)
                {
                    echo "TripRateSuccess";
                }
                else
                {
                    echo "TripNotRated";
                }
            }
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }

}

// Client Edit Profile 


public function ClientProfileGetDataTypeWork($ClientId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $BusinessDataArray = array();
            $query="Select * from ClientBusinessTable where CustomerId='$ClientId'";
            $result=$this->dataBase->query($query);
            $row= $this->dataBase->fetchArray($result);
            array_push($BusinessDataArray,array("BusinessName"=>$row['BusinessName'],"BusinessTypeId"=>$row['BusinessType'],"BusinessPlace"=>$row['BusinessPlace']));
            echo json_encode(array("server_response"=>$BusinessDataArray));         
              
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function ClientProfileGetTypeWork($ClientId,$LangId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $BusinessArray = array();
            $query="Select * from BusinessName Where LanguageId ='$LangId'";
            $result=$this->dataBase->query($query);

            while($row= $this->dataBase->fetchArray($result))
            {
                array_push($BusinessArray,array("id"=>$row['BusinessId'],"Name"=>$row['BusinessName']));
                
            }
               echo json_encode(array("server_response"=>$BusinessArray));

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}


public function ClientProfileEditWorkInfo($ClientId,$WorkName,$WorkPlace,$WorkTypeId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $WorkName = $this->dataBase->escape( $WorkName );
    $WorkPlace = $this->dataBase->escape( $WorkPlace );
    $WorkTypeId = $this->dataBase->escape( $WorkTypeId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query="Update ClientBusinessTable set";
         
            $CheckEnterValue=0;
            if($WorkName != "%notupdate*" && !empty($WorkName))
            {
                $query.=" BusinessName=N'$WorkName',";
                $CheckEnterValue+=1;
            }
            
            if($WorkPlace != "%notupdate*" && !empty($WorkPlace))
            {
                $query.=" BusinessPlace=N'$WorkPlace',";
                $CheckEnterValue+=1;
            }

            if($WorkTypeId != "%notupdate*" && !empty($WorkTypeId))
            {
                $query.=" BusinessType=N'$WorkTypeId'";
                $CheckEnterValue+=1;
            }
            if($CheckEnterValue > 0)
            {
                echo $CheckEnterValue;
                if($CheckEnterValue < 3)
                    {
                        $query=substr($query, 0, -1);
                        $query.=" Where CustomerId='$ClientId'";
                    }
                    else
                    {
                        $query.=" Where CustomerId='$ClientId'";
                    }
         
                $Result=$this->dataBase->query($query);
                if($Result == true)
                    echo "Edited";
                else
                    echo "NotEdited";
            }
            else
            {
                echo "NoValueSended";
            }

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }

}

public function ClientProfileViewPersonalInfo($ClientId,$TokenDevice)
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $PersonalInfo = array();
            $query_get_Personal="Select * from ClientTable where CustomerId='$ClientId'";
            $Result_get_Personal=$this->dataBase->query($query_get_Personal);
            $row_Personal_Info= $this->dataBase->fetchArray($Result_get_Personal);
            array_push($PersonalInfo,array("FullName"=>$row_Personal_Info['FirstName'].' '.$row_Personal_Info['LastName'],"Email"=>$row_Personal_Info['Email']));
            echo json_encode(array("server_response"=>$PersonalInfo));
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterProfileEditPersonalinfo($TransporterId,$LangId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $IdPlaceArray = array();
            $query_Id_Place = "Select * from IDPlaceLanguage where IdLanguage='$LangId'";
    
            $Result_Id_Place=$this->dataBase->query($query_Id_Place);
            
            while($row= $this->dataBase->fetchArray($Result_Id_Place))
            {
                array_push($IdPlaceArray,array("IdPlace"=>$row['IdPlace'],"NamePlace"=>$row['NamePlace']));
            }
            
            $IdLicenceArray = array();
            $query_Type_Licence="Select * from TypeLicenceLanguage where IdLanguage ='$LangId'";
            $Result_Type_Licence=$this->dataBase->query($query_Type_Licence);

            while($row= $this->dataBase->fetchArray($resultLicence))
            {
                array_push($IdLicenceArray,array("IdTypeLicence"=>$row['IdTypeLicence'],"TypeName"=>$row['TypeName']));
                
            }

            $PersonalInfo = array(); 

            $query_get_Personal="Select * from TransporterTable Where CustomerId='$TransporterId'";

            
            $Result_Personal_Info=$this->dataBase->query($query_get_Personal);
            $row_Personal_Info= $this->dataBase->fetchArray($Result_Personal_Info);

            $id_Place=$row_Personal_Info['IDPlace'];
            $query_GetNamePlace="Select * from IDPlaceLanguage Where IdPlace='$id_Place' AND IdLanguage='$LangId'";

            $result_GetPlace=$this->dataBase->query($query_GetNamePlace);
            $row_Place= $this->dataBase->fetchArray($result_GetPlace);
            $NamePlace=$row_Place['NamePlace'];


            array_push($PersonalInfo,array("FullName"=>$row_Personal_Info['FirstName'].' '.$row_Personal_Info['LastName'],"IDNumber"=>$row_Personal_Info['IDNumber'],"IDPlace"=>$row_Personal_Info['IDPlace'],"LicenceNumber"=>$row_Personal_Info['LicenceNumber'],"TypeLicence"=>$row_Personal_Info['TypeLicence'],"Email"=>$row_Personal_Info['Email']
                ,"NamePlace"=>$NamePlace,"AccountName"=>$row_Personal_Info['AccountName'],"BirthDay"=>$row_Personal_Info['BirthDay']));
            
            $data = array("place"=>$IdPlaceArray,"license" => $IdLicenceArray,"PersonalInfo" => $PersonalInfo);
           
            echo json_encode($data);

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }

} 


public function TransporterProfileViewCityinfo($TransporterId,$LangId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $CityArray = array();

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {

            $data=array();
            $IdPlaceArray = array();

            $query_get_Lang="Select * from Customer Where id='$TransporterId'";
            $result_Get_Lang=$this->dataBase->query($query_get_Lang);
            $row_Get_Lang=$this->dataBase->fetchArray($result_Get_Lang);
            $LangId=$row_Get_Lang['LanguageId'];
            $RegionId=$row_Get_Lang['RegionId'];

            $query_GetCits="Select CityRegionLang.CityName As CityName ,CityRegion.id As id from CityRegionLang,CityRegion 
            where CityRegion.RegionId='$RegionId' AND CityRegionLang.CityId=CityRegion.id
            AND CityRegionLang.languageId='$LangId'
            ";
            $result_getCites=$this->dataBase->query($query_GetCits);


            $query_GetAll_City_Transporter="Select * from TransporterWorkCity where CustomerId='$TransporterId'";
            $result_City_Trans=$this->dataBase->query($query_GetAll_City_Transporter);
            
            while($row_Get_TranspCity=$this->dataBase->fetchArray($result_City_Trans))
            {
                $CityId=$row_Get_TranspCity['CityId'];
                $data[] = $CityId;
                
            }


            while($row_Get_Lang=$this->dataBase->fetchArray($result_getCites))
            {
                $NammeCity=$row_Get_Lang['CityName'];
                $id_City=$row_Get_Lang['id'];



                $query_Check_addedd="Select * from TransporterWorkCity Where CustomerId='$TransporterId' AND CityId='$id_City' AND deleted=0";
                $result_Check_Addedd=$this->dataBase->query($query_Check_addedd);
                $numRows_Check=$this->dataBase->numRows($result_Check_Addedd);


                if($numRows_Check > 0)
                    array_push($CityArray,array("IdCity"=>$id_City,"CityName"=>$NammeCity,"CheckAdded"=>"Added"));

                else
                    array_push($CityArray,array("IdCity"=>$id_City,"CityName"=>$NammeCity,"CheckAdded"=>"NotAddedd"));

            }
        
            echo json_encode(array("CityResponse"=>$CityArray));

           /* $IdPlaceArray = array();
            $query_GetCity = "Select TCity.Id As TCityWork,CityLang.CityName AS CityName from TransporterWorkCity As TCity,CityRegionLang As CityLang where CityLang.languageId='$LangId' AND TCity.CustomerId='$TransporterId'
            AND CityLang.CityId=TCity.CityId";
    
            $Result_City=$this->dataBase->query($query_GetCity);
            
            while($row= $this->dataBase->fetchArray($Result_City))
            {
                array_push($CityArray,array("IdCity"=>$row['TCityWork'],"CityName"=>$row['CityName']));
            }
            echo json_encode(array("CityResponse"=>$CityArray));*/

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function TransporterUpdateProfileCityinfo($TransporterId,$CityId,$CheckAction,$LangId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $CityId = $this->dataBase->escape( $CityId );
    $CheckAction = $this->dataBase->escape( $CheckAction );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

     if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {

            $query_Check_addedd="Select * from TransporterWorkCity Where CustomerId='$TransporterId' AND CityId='$CityId'";
            $result_Check_Addedd=$this->dataBase->query($query_Check_addedd);
            $numRows_Check=$this->dataBase->numRows($result_Check_Addedd);

        
            if($numRows_Check > 0)
            {
                $row=$this->dataBase->fetchArray($result_Check_Addedd);
                $query_Update_Add="Update TransporterWorkCity set deleted=0 where CustomerId='$TransporterId' AND CityId='$CityId'";
                $query_Update_Remove="Update TransporterWorkCity set deleted=1 where CustomerId='$TransporterId' AND CityId='$CityId'";
                if($CheckAction == "Add")
                {
                

                    if($row['deleted'] == 1)
                    {
                        $result=$this->dataBase->query($query_Update_Add);
                        if($result == true)
                        {
                            echo "UpdatedAddSucessfully";

                        }
                        else
                        {
                            echo "NotUpdated";
                        }
                    }
                    else
                    {
                        echo "NotUpdated";
                    }
                }
                else
                if($CheckAction == "Remove")
                {
                    if($row['deleted'] == 0)
                    {
                        
                        $result=$this->dataBase->query($query_Update_Remove);
                        if($result == true)
                        {
                            echo "UpdatedRemoveSucessfully";
                        }
                        else
                        {
                            echo "NotUpdated";
                        }
                    }
                    else
                    {
                        echo "NotUpdated";
                    }
                }
                
            }
            else
            {
                if($CheckAction == "Add")
                {
                    $query_add_City="Insert into TransporterWorkCity (CustomerId,CityId) Values('$TransporterId','$CityId')";
                    $result_added=$this->dataBase->query($query_add_City);

                    if($result_added == true )
                    {
                        echo "AddeddSucessfully";
                    }
                    else 
                    {
                        echo "NotAddedd";
                    }
                }
                else
                {
                    echo "AlreadyRemoved";
                }
            }

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}



public function TransporterProfileViewTimeinfo($TransporterId,$LangId,$TokenDevice)
{
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $TimeArray = array();

    if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            
            $query_GetTime = "Select * from WorkDaysTime Where CustomerId='$TransporterId'";
    
            $Result_Time=$this->dataBase->query($query_GetTime);
            
            while($row= $this->dataBase->fetchArray($Result_Time))
            {
                array_push($TimeArray,array("IdTime"=>$row['id'],"SatTimeStart"=>$row['SatTimeStart'],
                "SatTimeFinish"=>$row['SatTimeFinish'],"SunTimeStart"=>$row['SunTimeStart'],
                "SunTimeFinish"=>$row['SunTimeFinish'],"MonTimeStart"=>$row['MonTimeStart'],
                "MonTimeFinish"=>$row['MonTimeFinish'],"TueTimeStart"=>$row['TueTimeStart'],
                "TueTimeFinish"=>$row['TueTimeFinish'],"WenTimeStart"=>$row['WenTimeStart'],
                "WenTimeFinish"=>$row['WenTimeFinish'],"ThuTimeStart"=>$row['ThuTimeStart'],
                "ThuTimeFinish"=>$row['ThuTimeFinish'],"FriTimeStart"=>$row['FriTimeStart'],
                "FriTimeFinish"=>$row['FriTimeFinish']));
            }
            echo json_encode(array("TimeResponse"=>$TimeArray));

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}
public function GetBalanceTransporter($TransporterId,$TokenDevice)
{
   // echo "Transporterid".$TransporterId;
    $TransporterId = $this->dataBase->escape( $TransporterId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    $id = $TransporterId;
     if($this->CheckToken($TransporterId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($TransporterId) == false)
        {
            $this->OdooDb();
            $OdooId=$this->getOdooId($TransporterId);
            
            //$TransporterBalance=$this->getBalance($TransporterId);


            //New Code Balance Customer :
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
            'res.partner', 'search_read',
            array(array(array('street', '=', $id))),
            array('fields'=>array('credit'), 'limit'=>5));

//print_r($result);
        $Balance_credit=$result[0]['credit'];
      // echo "cridet:".$Balance_credit;
        $result=$this->models->execute_kw($this->db, $this->uid, $this->password,
        'res.partner', 'search_read',
        array(array(array('street', '=', $id))),
        array('fields'=>array('debit'), 'limit'=>5));

        $Balance_debit=$result[0]['debit'];

       // $TransporterBalance = $Balance_debit;
        //$result_Balance=$Balance_debit-$Balance_credit;//here 5ra
          //echo$result_Balance;
        if($Balance_debit < 0)
        {
           $result_Balance = $result_Balance * -1;
        }
        else
        {
           $result_Balance = $result_Balance;
        }   
 $result_Balance=$Balance_debit-$Balance_credit;
            $BalanceArray = array();

            array_push($BalanceArray,array("TransporterBalance"=>$result_Balance));
                       
            echo json_encode(array("server_response"=>$BalanceArray));   
        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

public function UpdateWorkTranspoterParameter($myarrayTime,$CustomerId,$TokenDevice)
{


    $CustomerId = $this->dataBase->escape( $CustomerId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );
    if($this->CheckToken($CustomerId,$TokenDevice) == true)
   {
              
                
                $query_Check_customer_Exists_Work = "Select * from WorkDaysTime Where CustomerId='$CustomerId'";
                $result_check_Customer_Work=$this->dataBase->query($query_Check_customer_Exists_Work);
                $row_count_Work = $this->dataBase->numRows( $result_check_Customer_Work );
                
                if($row_count_Work > 0)
                {
                     foreach ( $myarrayTime['TransportrTime'] as $WorkItem )
                    {
                      
                            $SatTimeStart = $WorkItem['SatTimeStart'];
                            $SatTimeFinish = $WorkItem['SatTimeFinish'];
                            $SunTimeStart = $WorkItem['SunTimeStart'];
                            $SunTimeFinish = $WorkItem['SunTimeFinish'];
                            $MonTimeStart = $WorkItem['MonTimeStart'];
                            $MonTimeFinish = $WorkItem['MonTimeFinish'];
                            $TueTimeStart = $WorkItem['TueTimeStart'];
                            $TueTimeFinish = $WorkItem['TueTimeFinish'];
                            $WenTimeStart = $WorkItem['WenTimeStart'];
                            $WenTimeFinish = $WorkItem['WenTimeFinish'];
                            $ThuTimeStart = $WorkItem['ThuTimeStart'];
                            $ThuTimeFinish = $WorkItem['ThuTimeFinish'];
                            $FriTimeStart = $WorkItem['FriTimeStart'];
                            $FriTimeFinish = $WorkItem['FriTimeFinish'];
                            
                            $query_Set_Work_Day = "Update WorkDaysTime set SatTimeStart='$SatTimeStart'
                            ,SatTimeFinish='$SatTimeFinish',SunTimeStart='$SunTimeStart'
                            ,SunTimeFinish='$SunTimeFinish',MonTimeStart='$MonTimeStart'
                            ,MonTimeFinish='$MonTimeFinish',TueTimeStart='$TueTimeStart'
                            ,TueTimeFinish='$TueTimeFinish',WenTimeStart='$WenTimeStart'
                            ,WenTimeFinish='$WenTimeFinish',ThuTimeStart='$ThuTimeStart'
                            ,ThuTimeFinish='$ThuTimeFinish',FriTimeStart='$FriTimeStart'
                            ,FriTimeFinish='$FriTimeFinish' 

                            where CustomerId='$CustomerId'";
                         
                            $result_Set_Work_Day=$this->dataBase->query($query_Set_Work_Day);
                            
                            if($result_Set_Work_Day == true)
                            {
                                echo "WorkTimeUpdated";
                            }
                            else
                            {
                                echo "WorkTimeNotUpdated";
                            }
                        }
                }
              
              
                
             
          
            }

   else
   {
       echo "TokenError";
   }
}

public function ClientGetLastLocationSaved($ClientId,$LangId,$TokenDevice) 
{
    $ClientId = $this->dataBase->escape( $ClientId );
    $LangId = $this->dataBase->escape( $LangId );
    $TokenDevice = $this->dataBase->escape( $TokenDevice );

    $villagevar = "";
    $villagedesvar = "";

    if($this->CheckToken($ClientId,$TokenDevice) == true)
    {
        if($this->CheckBlockedCustomer($ClientId) == false)
        {
            $query_Get_LastLocation="Select DISTINCT  OrderAddress.IdCity As IdCity ,OrderAddress.NameNeighborhood As NameNeighborhood
                ,OrderAddress.NameStreet As NameStreet
                ,OrderAddress.NameBuilding As NameBuilding 
                ,OrderAddress.FloorNumbers As FloorNumbers 
                ,OrderAddress.ApartmentNumber As ApartmentNumber 
                ,OrderAddress.LatSender As LatSender 
                ,OrderAddress.LongSender As LongSender 
                ,OrderAddress.LatReciver As LatReciver 
                ,OrderAddress.LongReciver As LongReciver 
                ,OrderAddress.IdCityDes As IdCityDes 
                ,OrderAddress.NameNeighborhoodDes As NameNeighborhoodDes 
                ,OrderAddress.NameStreetDes As NameStreetDes 
                ,OrderAddress.NameBuildingDes As NameBuildingDes 
                ,OrderAddress.FloorNumbersDes As FloorNumbersDes 
                ,OrderAddress.ApartmentNumberDes As ApartmentNumberDes 
                ,OrderAddress.ReceiverAddressNum As ReceiverAddressNum 
                ,OrderAddress.OtherDetails As OtherDetails 
                ,OrderAddress.NameBuilding As NameBuilding 
                ,OrderAddress.OtherDetailsDes As OtherDetailsDes,OrderAddress.Village,OrderAddress.VillageDestination
                    
            from OrderBidAddress As OrderAddress 
                ,OrderBidEngin As OrderEngin
            where 
                OrderAddress.IdOrderBidEngin=OrderEngin.id 
                AND OrderEngin.CustomerId = '$ClientId' group by NameNeighborhoodDes,NameStreet,NameBuilding,FloorNumbers,ApartmentNumber
            Order By OrderEngin.createdAt DESC LIMIT 10 ;
            ";

            $LastLocation = array();

            $Result_LastLocation=$this->dataBase->query($query_Get_LastLocation);
            
            while($row= $this->dataBase->fetchArray($Result_LastLocation))
            {
                if($row['Village'] != null || $row['Village'] != ""){
                         $villagevar = $row['Village'];
                    }
                if($row['VillageDestination'] != null || $row['VillageDestination'] != ""){
                         $villagedesvar = $row['VillageDestination'];
                    }

            $IdCityDes=$row['IdCity'];

            $query_GetCity = "Select * from CityRegionLang Where languageId ='$LangId' AND CityId='$IdCityDes'";

            $Result_City=$this->dataBase->query($query_GetCity);
            $row_City_Source= $this->dataBase->fetchArray($Result_City);
            $NameCitySource = $row_City_Source['CityName'];

            array_push($LastLocation,array("IdCity"=>$row['IdCity'],"CityName"=>$NameCitySource,"NameNeighborhood"=>$row['NameNeighborhood'],
                "NameStreet"=>$row['NameStreet'],"FloorNumbers"=>$row['FloorNumbers'],
                "ApartmentNumber"=>$row['ApartmentNumber'],"LatSender"=>$row['LatSender'],
                "LongSender"=>$row['LongSender'],"LatReciver"=>$row['LatReciver'],
                "LongReciver"=>$row['LongReciver'],"IdCityDes"=>$row['IdCityDes'],
                "NameNeighborhoodDes"=>$row['NameNeighborhoodDes']
                ,"NameStreetDes"=>$row['NameStreetDes'],
                "NameBuildingDes"=>$row['NameBuildingDes'],"FloorNumbersDes"=>$row['FloorNumbersDes'],
                "ApartmentNumberDes"=>$row['ApartmentNumberDes'],
                "ReceiverAddressNum"=>$row['ReceiverAddressNum'],
                "OtherDetails"=>$row['OtherDetails'],
                "OtherDetailsDes"=>$row['OtherDetailsDes'],
                "NameBuilding"=>$row['NameBuilding'],"village"=>$villagevar,"villageDes" =>$villagedesvar));
            }
            echo json_encode(array("LastLocation"=>$LastLocation));

        }
        else
        {
            echo "Blocked"; 
        } 
    }
    else
    {
        echo "TokenError";
    }
}

}
// try catch added by diala 
try {

     $TOGOApp = new ToGo();
    
} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}
 
 ?>
{"ast":null,"code":"import ReactPaginate from'react-paginate';import React from'react';import\"./Pagination.css\";export default function PaginateComp(_ref){var totalNumOfRecs=_ref.totalNumOfRecs,activePage=_ref.activePage,pageSize=_ref.pageSize,setActive=_ref.setActive;return/*#__PURE__*/React.createElement(\"div\",{style:{textAlign:\"center\"}},totalNumOfRecs/pageSize!==0&&/*#__PURE__*/React.createElement(ReactPaginate,{previousLabel:'<',nextLabel:'>',breakLabel:'...',breakClassName:'dots-break',pageCount:Math.ceil(totalNumOfRecs/pageSize),marginPagesDisplayed:2,pageRangeDisplayed:5,onPageChange:function onPageChange(data){setActive(data.selected);},initialPage:activePage,containerClassName:'paginate',activeClassName:'active-page',nextClassName:\"next-li\",pageClassName:\"page-li\",previousClassName:\"prev-li\"}));}/* import React, { useMemo } from \"react\";\r\nimport Pagination from \"react-bootstrap/Pagination\";\r\nfunction CustomPagination({totalNumOfRecs, activePage, pageSize, setActive}){\r\n\r\n    const pagesArr = useMemo(() => {\r\n        const numOfPages = Math.ceil(totalNumOfRecs / pageSize);\r\n        return { \r\n            numOfPages,\r\n            items: Array.from({length: numOfPages}, (_, i) => i + 1)\r\n        };\r\n    }, [totalNumOfRecs, pageSize]);\r\n\r\n    return (\r\n        <div style={{textAlign: \"center\"}}>\r\n            <Pagination style={{display: \"inline-flex\"}}>\r\n                <Pagination.First \r\n                    disabled={activePage === 0}\r\n                    onClick={()=>{\r\n                        setActive(0);\r\n                    }}\r\n                />\r\n                <Pagination.Prev \r\n                    disabled={activePage === 0}\r\n                    onClick={()=>{\r\n                        setActive(activePage - 1 < 0 ? 0 : activePage -1 );\r\n                    }}\r\n                />\r\n                {\r\n                    pagesArr.items.map((_, i) => {\r\n                        return (\r\n                            <Pagination.Item \r\n                                onClick={()=>setActive(i)}\r\n                                active={i === activePage}\r\n                            >\r\n                                {i + 1}\r\n                            </Pagination.Item>\r\n                        )}\r\n                    )\r\n                }\r\n                <Pagination.Next \r\n                    disabled={activePage === pagesArr.numOfPages - 1}\r\n                    onClick={()=>{\r\n                        let numOfPages = pagesArr.numOfPages - 1;\r\n                        setActive(activePage + 1 > numOfPages ? numOfPages : activePage + 1);\r\n                    }}\r\n                />\r\n                <Pagination.Last \r\n                    disabled={activePage === pagesArr.numOfPages - 1}\r\n                    onClick={()=>{\r\n                        setActive(pagesArr.numOfPages - 1);\r\n                    }}\r\n                />\r\n            </Pagination>\r\n        </div>\r\n    );\r\n}\r\n */","map":null,"metadata":{},"sourceType":"module"}
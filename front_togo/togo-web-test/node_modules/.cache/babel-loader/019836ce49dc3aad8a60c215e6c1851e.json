{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\nexport var useColorMode = function useColorMode() {\n  var context = React.useContext(ColorModeContext);\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props) {\n  var value = props.value,\n    children = props.children,\n    _props$options = props.options,\n    useSystemColorMode = _props$options.useSystemColorMode,\n    initialColorMode = _props$options.initialColorMode,\n    _props$colorModeManag = props.colorModeManager,\n    colorModeManager = _props$colorModeManag === void 0 ? localStorageManager : _props$colorModeManag;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var _React$useState = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    colorMode = _React$useState2[0],\n    rawSetColorMode = _React$useState2[1];\n  React.useEffect(function () {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(function () {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(function (value) {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(function () {\n    var removeListener;\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n    return function () {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = React.useMemo(function () {\n    return {\n      colorMode: value != null ? value : colorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode\n    };\n  }, [colorMode, setColorMode, toggleColorMode, value]);\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\nexport var DarkMode = function DarkMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"dark\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\nexport var LightMode = function LightMode(props) {\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n    value: {\n      colorMode: \"light\",\n      toggleColorMode: noop,\n      setColorMode: noop\n    }\n  }, props));\n};\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\nexport function useColorModeValue(light, dark) {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return colorMode === \"dark\" ? dark : light;\n}","map":{"version":3,"names":["isBrowser","noop","__DEV__","React","addListener","getColorScheme","syncBodyClassName","root","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","_props$options","options","useSystemColorMode","initialColorMode","_props$colorModeManag","colorModeManager","_React$useState","useState","type","get","_React$useState2","_slicedToArray","colorMode","rawSetColorMode","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","useMemo","createElement","Provider","DarkMode","_extends","LightMode","useColorModeValue","light","dark","_useColorMode"],"sources":["../../src/color-mode-provider.tsx"],"sourcesContent":["import { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport {\n  addListener,\n  ColorMode,\n  getColorScheme,\n  syncBodyClassName,\n  root,\n} from \"./color-mode.utils\"\nimport { localStorageManager, StorageManager } from \"./storage-manager\"\n\nexport type { ColorMode }\n\nexport interface ColorModeOptions {\n  initialColorMode?: ColorMode\n  useSystemColorMode?: boolean\n}\n\ninterface ColorModeContextType {\n  colorMode: ColorMode\n  toggleColorMode: () => void\n  setColorMode: (value: any) => void\n}\n\nexport const ColorModeContext = React.createContext({} as ColorModeContextType)\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\"\n}\n\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\nexport const useColorMode = () => {\n  const context = React.useContext(ColorModeContext)\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\")\n  }\n  return context\n}\n\nexport interface ColorModeProviderProps {\n  value?: ColorMode\n  children?: React.ReactNode\n  options: ColorModeOptions\n  colorModeManager?: StorageManager\n}\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props: ColorModeProviderProps) {\n  const {\n    value,\n    children,\n    options: { useSystemColorMode, initialColorMode },\n    colorModeManager = localStorageManager,\n  } = props\n\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n  const [colorMode, rawSetColorMode] = React.useState<ColorMode | undefined>(\n    colorModeManager.type === \"cookie\"\n      ? colorModeManager.get(initialColorMode)\n      : initialColorMode,\n  )\n\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      const mode = useSystemColorMode\n        ? getColorScheme(initialColorMode)\n        : root.get() || colorModeManager.get()\n\n      if (mode) {\n        rawSetColorMode(mode)\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode])\n\n  React.useEffect(() => {\n    const isDark = colorMode === \"dark\"\n\n    syncBodyClassName(isDark)\n    root.set(isDark ? \"dark\" : \"light\")\n  }, [colorMode])\n\n  const setColorMode = React.useCallback(\n    (value: ColorMode) => {\n      colorModeManager.set(value)\n      rawSetColorMode(value)\n    },\n    [colorModeManager],\n  )\n\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\")\n  }, [colorMode, setColorMode])\n\n  React.useEffect(() => {\n    let removeListener: any\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode)\n    }\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener()\n      }\n    }\n  }, [setColorMode, useSystemColorMode])\n\n  // presence of `value` indicates a controlled context\n  const context = React.useMemo(\n    () => ({\n      colorMode: (value ?? colorMode) as ColorMode,\n      toggleColorMode: value ? noop : toggleColorMode,\n      setColorMode: value ? noop : setColorMode,\n    }),\n    [colorMode, setColorMode, toggleColorMode, value],\n  )\n\n  return (\n    <ColorModeContext.Provider value={context}>\n      {children}\n    </ColorModeContext.Provider>\n  )\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\"\n}\n\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\nexport const DarkMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"dark\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\"\n}\n\n/**\n * Locks the color mode to `light` without any way to change it.\n */\nexport const LightMode: React.FC = (props) => (\n  <ColorModeContext.Provider\n    value={{ colorMode: \"light\", toggleColorMode: noop, setColorMode: noop }}\n    {...props}\n  />\n)\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\"\n}\n\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\nexport function useColorModeValue<TLight = unknown, TDark = unknown>(\n  light: TLight,\n  dark: TDark,\n) {\n  const { colorMode } = useColorMode()\n  return colorMode === \"dark\" ? dark : light\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
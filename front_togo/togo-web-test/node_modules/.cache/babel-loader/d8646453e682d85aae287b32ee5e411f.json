{"ast":null,"code":"import _defineProperty from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useCallbackRef, useEventListener, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, minSafeInteger, normalizeEventKey } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\nvar sanitize = function sanitize(value) {\n  return value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n};\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    _props$focusInputOnCh = _props.focusInputOnChange,\n    focusInputOnChange = _props$focusInputOnCh === void 0 ? true : _props$focusInputOnCh,\n    _props$clampValueOnBl = _props.clampValueOnBlur,\n    clampValueOnBlur = _props$clampValueOnBl === void 0 ? true : _props$clampValueOnBl,\n    _props$keepWithinRang = _props.keepWithinRange,\n    keepWithinRange = _props$keepWithinRang === void 0 ? true : _props$keepWithinRang,\n    _props$min = _props.min,\n    min = _props$min === void 0 ? minSafeInteger : _props$min,\n    _props$max = _props.max,\n    max = _props$max === void 0 ? maxSafeInteger : _props$max,\n    _props$step = _props.step,\n    stepProp = _props$step === void 0 ? 1 : _props$step,\n    isReadOnly = _props.isReadOnly,\n    isDisabled = _props.isDisabled,\n    isRequired = _props.isRequired,\n    getAriaValueText = _props.getAriaValueText,\n    isInvalid = _props.isInvalid,\n    _props$pattern = _props.pattern,\n    pattern = _props$pattern === void 0 ? \"[0-9]*(.[0-9]+)?\" : _props$pattern,\n    _props$inputMode = _props.inputMode,\n    inputMode = _props$inputMode === void 0 ? \"decimal\" : _props$inputMode,\n    allowMouseWheel = _props.allowMouseWheel,\n    id = _props.id,\n    name = _props.name,\n    ariaDescBy = _props[\"aria-describedby\"],\n    ariaLabel = _props[\"aria-label\"],\n    ariaLabelledBy = _props[\"aria-labelledby\"],\n    onFocus = _props.onFocus,\n    onBlur = _props.onBlur,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"isRequired\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\", \"name\", \"aria-describedby\", \"aria-label\", \"aria-labelledby\", \"onFocus\", \"onBlur\"]);\n  var onFocusProp = useCallbackRef(onFocus);\n  var onBlurProp = useCallbackRef(onBlur);\n  var getAriaValueTextProp = useCallbackRef(getAriaValueText);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n  var counter = useCounter(props);\n  var updateFn = counter.update,\n    incrementFn = counter.increment,\n    decrementFn = counter.decrement;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var _useBoolean = useBoolean(),\n    _useBoolean2 = _slicedToArray(_useBoolean, 2),\n    isFocused = _useBoolean2[0],\n    setFocused = _useBoolean2[1];\n  var inputRef = React.useRef(null);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.value != counter.value;\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value));\n    }\n  }, []);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = React.useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = React.useCallback(function (event) {\n    updateFn(sanitize(event.target.value));\n  }, [updateFn]);\n  var onKeyDown = React.useCallback(function (event) {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: function ArrowUp() {\n        return increment(stepFactor);\n      },\n      ArrowDown: function ArrowDown() {\n        return decrement(stepFactor);\n      },\n      Home: function Home() {\n        return updateFn(min);\n      },\n      End: function End() {\n        return updateFn(max);\n      }\n    };\n    var action = keyMap[eventKey];\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n  var getStepFactor = function getStepFactor(event) {\n    var ratio = 1;\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n  var ariaValueText = React.useMemo(function () {\n    var text = getAriaValueTextProp == null ? void 0 : getAriaValueTextProp(counter.value);\n    if (!isNull(text)) {\n      return text;\n    }\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  }, [counter.value, getAriaValueTextProp]);\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n  var validateAndClamp = React.useCallback(function () {\n    var next = counter.value;\n    if (next === \"\") return;\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n    counter.cast(next);\n  }, [counter, max, min]);\n  var onInputBlur = React.useCallback(function () {\n    setFocused.off();\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = React.useCallback(function () {\n    if (focusInputOnChange) {\n      focus(inputRef.current, {\n        nextTick: true\n      });\n    }\n  }, [focusInputOnChange]);\n  var spinUp = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = React.useCallback(function (event) {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function (event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current, {\n    passive: false\n  });\n  var getIncrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends2;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends2, pointerDown, callAllHandlers(props[pointerDown], spinUp)), _defineProperty(_extends2, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onMouseLeave\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends2, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends2, \"disabled\", disabled), _defineProperty(_extends2, \"aria-disabled\", ariaAttr(disabled)), _extends2));\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = React.useCallback(function (props, ref) {\n    var _extends3;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, (_extends3 = {\n      ref: ref,\n      role: \"button\",\n      tabIndex: -1\n    }, _defineProperty(_extends3, pointerDown, callAllHandlers(props[pointerDown], spinDown)), _defineProperty(_extends3, \"onMouseLeave\", callAllHandlers(props.onMouseLeave, spinner.stop)), _defineProperty(_extends3, \"onMouseUp\", callAllHandlers(props.onMouseUp, spinner.stop)), _defineProperty(_extends3, \"onTouchEnd\", callAllHandlers(props.onTouchEnd, spinner.stop)), _defineProperty(_extends3, \"disabled\", disabled), _defineProperty(_extends3, \"aria-disabled\", ariaAttr(disabled)), _extends3));\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var getInputProps = React.useCallback(function (props, ref) {\n    var _props$readOnly, _props$readOnly2, _props$required, _props$required2;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      name: name,\n      inputMode: inputMode,\n      type: \"text\",\n      pattern: pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id: id,\n      disabled: isDisabled\n    }, props, {\n      readOnly: (_props$readOnly = props.readOnly) != null ? _props$readOnly : isReadOnly,\n      \"aria-readonly\": (_props$readOnly2 = props.readOnly) != null ? _props$readOnly2 : isReadOnly,\n      \"aria-required\": (_props$required = props.required) != null ? _props$required : isRequired,\n      required: (_props$required2 = props.required) != null ? _props$required2 : isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid != null ? isInvalid : counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur)\n    });\n  }, [name, inputMode, pattern, ariaLabelledBy, ariaLabel, ariaDescBy, id, isDisabled, isRequired, isReadOnly, isInvalid, counter.value, counter.valueAsNumber, counter.isOutOfRange, min, max, ariaValueText, onChange, onKeyDown, onFocusProp, setFocused.on, onBlurProp, onInputBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused: isFocused,\n    isDisabled: isDisabled,\n    isReadOnly: isReadOnly,\n    getIncrementButtonProps: getIncrementButtonProps,\n    getDecrementButtonProps: getDecrementButtonProps,\n    getInputProps: getInputProps,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"names":["useCounter","useBoolean","useCallbackRef","useEventListener","useSafeLayoutEffect","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","minSafeInteger","normalizeEventKey","mergeRefs","React","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","sanitize","value","split","filter","join","useNumberInput","props","_props","_props$focusInputOnCh","focusInputOnChange","_props$clampValueOnBl","clampValueOnBlur","_props$keepWithinRang","keepWithinRange","_props$min","min","_props$max","max","_props$step","step","stepProp","isReadOnly","isDisabled","isRequired","getAriaValueText","isInvalid","_props$pattern","pattern","_props$inputMode","inputMode","allowMouseWheel","id","name","ariaDescBy","ariaLabel","ariaLabelledBy","onFocus","onBlur","htmlProps","_objectWithoutPropertiesLoose","onFocusProp","onBlurProp","getAriaValueTextProp","counter","updateFn","update","incrementFn","increment","decrementFn","decrement","_useBoolean","_useBoolean2","_slicedToArray","isFocused","setFocused","inputRef","useRef","current","notInSync","setValue","isInteractive","useCallback","spinner","onChange","event","target","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","ariaValueText","useMemo","text","defaultText","toString","undefined","validateAndClamp","next","valueAsNumber","cast","onInputBlur","off","focusInput","nextTick","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","isInputFocused","activeElement","direction","Math","sign","deltaY","passive","getIncrementButtonProps","ref","_extends2","disabled","isAtMax","_extends","role","tabIndex","_defineProperty","onMouseUp","stop","onTouchEnd","getDecrementButtonProps","_extends3","isAtMin","onMouseLeave","getInputProps","_props$readOnly","_props$readOnly2","_props$required","_props$required2","type","readOnly","required","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","on"],"sources":["../../src/use-number-input.ts"],"sourcesContent":["import { useCounter, UseCounterProps } from \"@chakra-ui/counter\"\nimport {\n  useBoolean,\n  useCallbackRef,\n  useEventListener,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport {\n  ariaAttr,\n  callAllHandlers,\n  focus,\n  isBrowser,\n  isNull,\n  maxSafeInteger,\n  minSafeInteger,\n  StringOrNumber,\n  normalizeEventKey,\n} from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter, EventKeyMap } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport { useSpinner } from \"./use-spinner\"\nimport {\n  isFloatingPointNumericCharacter,\n  isValidNumericKeyboardEvent,\n} from \"./utils\"\n\nexport interface UseNumberInputProps extends UseCounterProps {\n  /**\n   * If `true`, the input will be focused as you increment\n   * or decrement the value with the stepper\n   *\n   * @default true\n   */\n  focusInputOnChange?: boolean\n  /**\n   * This controls the value update when you blur out of the input.\n   * - If `true` and the value is greater than `max`, the value will be reset to `max`\n   * - Else, the value remains the same.\n   *\n   * @default true\n   */\n  clampValueOnBlur?: boolean\n  /**\n   * This is used to format the value so that screen readers\n   * can speak out a more human-friendly value.\n   *\n   * It is used to set the `aria-valuetext` property of the input\n   */\n  getAriaValueText?(value: StringOrNumber): string\n  /**\n   * If `true`, the input will be in readonly mode\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the input will have `aria-invalid` set to `true`\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the input will be disabled\n   */\n  isDisabled?: boolean\n  isRequired?: boolean\n  /**\n   * The `id` to use for the number input field.\n   */\n  id?: string\n  /**\n   * The pattern used to check the <input> element's value against on form submission.\n   *\n   * @default\n   * \"[0-9]*(.[0-9]+)?\"\n   */\n  pattern?: React.InputHTMLAttributes<any>[\"pattern\"]\n  /**\n   * Hints at the type of data that might be entered by the user. It also determines\n   * the type of keyboard shown to the user on mobile devices\n   *\n   * @default\n   * \"decimal\"\n   */\n  inputMode?: React.InputHTMLAttributes<any>[\"inputMode\"]\n  /**\n   * If `true`, the input's value will change based on mouse wheel\n   */\n  allowMouseWheel?: boolean\n  /**\n   * The HTML `name` attribute used for forms\n   */\n  name?: string\n  \"aria-describedby\"?: string\n  \"aria-label\"?: string\n  \"aria-labelledby\"?: string\n  onFocus?: React.FocusEventHandler<HTMLInputElement>\n  onBlur?: React.FocusEventHandler<HTMLInputElement>\n}\n\nconst sanitize = (value: string) =>\n  value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\")\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props: UseNumberInputProps = {}) {\n  const {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    isRequired,\n    getAriaValueText,\n    isInvalid,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel,\n    id,\n    onChange: _,\n    precision,\n    name,\n    \"aria-describedby\": ariaDescBy,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    onFocus,\n    onBlur,\n    ...htmlProps\n  } = props\n\n  const onFocusProp = useCallbackRef(onFocus)\n  const onBlurProp = useCallbackRef(onBlur)\n  const getAriaValueTextProp = useCallbackRef(getAriaValueText)\n\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n  const counter = useCounter(props)\n\n  const {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn,\n  } = counter\n\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n  const [isFocused, setFocused] = useBoolean()\n\n  const inputRef = React.useRef<HTMLInputElement>(null)\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.value != counter.value\n    if (notInSync) {\n      counter.setValue(sanitize(inputRef.current.value))\n    }\n  }, [])\n\n  const isInteractive = !(isReadOnly || isDisabled)\n\n  const increment = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        incrementFn(step)\n      }\n    },\n    [incrementFn, isInteractive, stepProp],\n  )\n\n  const decrement = React.useCallback(\n    (step = stepProp) => {\n      if (isInteractive) {\n        decrementFn(step)\n      }\n    },\n    [decrementFn, isInteractive, stepProp],\n  )\n\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n  const spinner = useSpinner(increment, decrement)\n\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n  const onChange = React.useCallback(\n    (event: React.ChangeEvent<HTMLInputElement>) => {\n      updateFn(sanitize(event.target.value))\n    },\n    [updateFn],\n  )\n\n  const onKeyDown = React.useCallback(\n    (event: React.KeyboardEvent) => {\n      /**\n       * only allow valid numeric keys\n       */\n      if (!isValidNumericKeyboardEvent(event)) {\n        event.preventDefault()\n      }\n\n      /**\n       * Keyboard Accessibility\n       *\n       * We want to increase or decrease the input's value\n       * based on if the user the arrow keys.\n       *\n       * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n       */\n      const stepFactor = getStepFactor(event) * stepProp\n\n      const eventKey = normalizeEventKey(event)\n\n      const keyMap: EventKeyMap = {\n        ArrowUp: () => increment(stepFactor),\n        ArrowDown: () => decrement(stepFactor),\n        Home: () => updateFn(min),\n        End: () => updateFn(max),\n      }\n\n      const action = keyMap[eventKey]\n\n      if (action) {\n        event.preventDefault()\n        action(event)\n      }\n    },\n    [updateFn, decrement, increment, max, min, stepProp],\n  )\n\n  const getStepFactor = <Event extends React.KeyboardEvent | React.WheelEvent>(\n    event: Event,\n  ) => {\n    let ratio = 1\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1\n    }\n    if (event.shiftKey) {\n      ratio = 10\n    }\n    return ratio\n  }\n\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n  const ariaValueText = React.useMemo(() => {\n    const text = getAriaValueTextProp?.(counter.value)\n    if (!isNull(text)) {\n      return text\n    }\n\n    const defaultText = counter.value.toString()\n    // empty string is an invalid ARIA attribute value\n    return !defaultText ? undefined : defaultText\n  }, [counter.value, getAriaValueTextProp])\n\n  /**\n   * Function that clamps the input's value on blur\n   */\n  const validateAndClamp = React.useCallback(() => {\n    let next = counter.value as StringOrNumber\n\n    if (next === \"\") return\n\n    if (counter.valueAsNumber < min) {\n      next = min\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max\n    }\n\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n    counter.cast(next)\n  }, [counter, max, min])\n\n  const onInputBlur = React.useCallback(() => {\n    setFocused.off()\n\n    if (clampValueOnBlur) {\n      validateAndClamp()\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp])\n\n  const focusInput = React.useCallback(() => {\n    if (focusInputOnChange) {\n      focus(inputRef.current, { nextTick: true })\n    }\n  }, [focusInputOnChange])\n\n  const spinUp = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.up()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const spinDown = React.useCallback(\n    (event: any) => {\n      event.preventDefault()\n      spinner.down()\n      focusInput()\n    },\n    [focusInput, spinner],\n  )\n\n  const pointerDown =\n    isBrowser && !!document.documentElement.ontouchstart\n      ? \"onTouchStart\"\n      : \"onMouseDown\"\n\n  useEventListener(\n    \"wheel\",\n    (event) => {\n      const isInputFocused = document.activeElement === inputRef.current\n      if (!allowMouseWheel || !isInputFocused) return\n\n      event.preventDefault()\n\n      const stepFactor = getStepFactor(event as any) * stepProp\n      const direction = Math.sign(event.deltaY)\n\n      if (direction === -1) {\n        increment(stepFactor)\n      } else if (direction === 1) {\n        decrement(stepFactor)\n      }\n    },\n    inputRef.current,\n    { passive: false },\n  )\n\n  const getIncrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMax)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMax,\n      keepWithinRange,\n      spinUp,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getDecrementButtonProps: PropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const disabled = isDisabled || (keepWithinRange && counter.isAtMin)\n      return {\n        ...props,\n        ref,\n        role: \"button\",\n        tabIndex: -1,\n        [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n        onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n        onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n        disabled,\n        \"aria-disabled\": ariaAttr(disabled),\n      }\n    },\n    [\n      pointerDown,\n      counter.isAtMin,\n      keepWithinRange,\n      spinDown,\n      spinner.stop,\n      isDisabled,\n    ],\n  )\n\n  const getInputProps: PropGetter<\n    HTMLInputElement,\n    Pick<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"disabled\" | \"required\" | \"readOnly\"\n    >\n  > = React.useCallback(\n    (props = {}, ref = null) => ({\n      name,\n      inputMode,\n      type: \"text\",\n      pattern,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-label\": ariaLabel,\n      \"aria-describedby\": ariaDescBy,\n      id,\n      disabled: isDisabled,\n      ...props,\n      readOnly: props.readOnly ?? isReadOnly,\n      \"aria-readonly\": props.readOnly ?? isReadOnly,\n      \"aria-required\": props.required ?? isRequired,\n      required: props.required ?? isRequired,\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber)\n        ? undefined\n        : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(isInvalid ?? counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, onInputBlur),\n    }),\n    [\n      name,\n      inputMode,\n      pattern,\n      ariaLabelledBy,\n      ariaLabel,\n      ariaDescBy,\n      id,\n      isDisabled,\n      isRequired,\n      isReadOnly,\n      isInvalid,\n      counter.value,\n      counter.valueAsNumber,\n      counter.isOutOfRange,\n      min,\n      max,\n      ariaValueText,\n      onChange,\n      onKeyDown,\n      onFocusProp,\n      setFocused.on,\n      onBlurProp,\n      onInputBlur,\n    ],\n  )\n\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps,\n  }\n}\n\nexport type UseNumberInputReturn = ReturnType<typeof useNumberInput>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
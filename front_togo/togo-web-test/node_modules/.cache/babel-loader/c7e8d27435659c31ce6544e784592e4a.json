{"ast":null,"code":"import * as React from \"react\";\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext(options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _options = options,\n    _options$strict = _options.strict,\n    strict = _options$strict === void 0 ? true : _options$strict,\n    _options$errorMessage = _options.errorMessage,\n    errorMessage = _options$errorMessage === void 0 ? \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\" : _options$errorMessage,\n    name = _options.name;\n  var Context = /*#__PURE__*/React.createContext(undefined);\n  Context.displayName = name;\n  function useContext() {\n    var context = React.useContext(Context);\n    if (!context && strict) {\n      var error = new Error(errorMessage);\n      error.name = \"ContextError\";\n      Error.captureStackTrace == null ? void 0 : Error.captureStackTrace(error, useContext);\n      throw error;\n    }\n    return context;\n  }\n  return [Context.Provider, useContext, Context];\n}","map":{"version":3,"names":["React","createContext","options","_options","_options$strict","strict","_options$errorMessage","errorMessage","name","Context","undefined","displayName","useContext","context","error","Error","captureStackTrace","Provider"],"sources":["../../src/context.ts"],"sourcesContent":["import * as React from \"react\"\n\nexport interface CreateContextOptions {\n  /**\n   * If `true`, React will throw if context is `null` or `undefined`\n   * In some cases, you might want to support nested context, so you can set it to `false`\n   */\n  strict?: boolean\n  /**\n   * Error message to throw if the context is `undefined`\n   */\n  errorMessage?: string\n  /**\n   * The display name of the context\n   */\n  name?: string\n}\n\ntype CreateContextReturn<T> = [React.Provider<T>, () => T, React.Context<T>]\n\n/**\n * Creates a named context, provider, and hook.\n *\n * @param options create context options\n */\nexport function createContext<ContextType>(options: CreateContextOptions = {}) {\n  const {\n    strict = true,\n    errorMessage = \"useContext: `context` is undefined. Seems you forgot to wrap component within the Provider\",\n    name,\n  } = options\n\n  const Context = React.createContext<ContextType | undefined>(undefined)\n\n  Context.displayName = name\n\n  function useContext() {\n    const context = React.useContext(Context)\n\n    if (!context && strict) {\n      const error = new Error(errorMessage)\n      error.name = \"ContextError\"\n      Error.captureStackTrace?.(error, useContext)\n      throw error\n    }\n\n    return context\n  }\n\n  return [\n    Context.Provider,\n    useContext,\n    Context,\n  ] as CreateContextReturn<ContextType>\n}\n"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAoBA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,aAATA,CAAoCC,OAApC,EAAwE;EAAA,IAApCA,OAAoC;IAApCA,OAAoC,GAAJ,EAAI;EAAA;EAC7E,IAAAC,QAAA,GAIID,OAJJ;IAAAE,eAAA,GAAAD,QAAA,CACEE,MAAM;IAANA,MAAM,GAAAD,eAAA,cAAG,IADL,GAAAA,eAAA;IAAAE,qBAAA,GAAAH,QAAA,CAEJI,YAAY;IAAZA,YAAY,GAAAD,qBAAA,cAAG,4FAFX,GAAAA,qBAAA;IAGJE,IAAA,GAAAL,QAAA,CAAAK,IAAA;EAGF,IAAMC,OAAO,gBAAGT,KAAK,CAACC,aAAN,CAA6CS,SAA7C,CAAhB;EAEAD,OAAO,CAACE,WAAR,GAAsBH,IAAtB;EAEA,SAASI,UAATA,CAAA,EAAsB;IACpB,IAAMC,OAAO,GAAGb,KAAK,CAACY,UAAN,CAAiBH,OAAjB,CAAhB;IAEA,IAAI,CAACI,OAAD,IAAYR,MAAhB,EAAwB;MACtB,IAAMS,KAAK,GAAG,IAAIC,KAAJ,CAAUR,YAAV,CAAd;MACAO,KAAK,CAACN,IAAN,GAAa,cAAb;MACAO,KAAK,CAACC,iBAAN,oBAAAD,KAAK,CAACC,iBAAN,CAA0BF,KAA1B,EAAiCF,UAAjC;MACA,MAAME,KAAN;IACD;IAED,OAAOD,OAAP;EACD;EAED,OAAO,CACLJ,OAAO,CAACQ,QADH,EAELL,UAFK,EAGLH,OAHK,CAAP;AAKD"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\";\n\n/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\n\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\nimport React from 'react';\nimport ImageUploading from 'react-images-uploading';\nexport function App() {\n  var _this = this;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      images = _React$useState2[0],\n      setImages = _React$useState2[1];\n\n  var maxNumber = 69;\n\n  var onChange = function onChange(imageList, addUpdateIndex) {\n    // data for submit\n    console.log(imageList, addUpdateIndex);\n    setImages(imageList);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ImageUploading, {\n    multiple: true,\n    value: images,\n    onChange: onChange,\n    maxNumber: maxNumber,\n    dataURLKey: \"data_url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }, function (_ref) {\n    var imageList = _ref.imageList,\n        onImageUpload = _ref.onImageUpload,\n        onImageRemoveAll = _ref.onImageRemoveAll,\n        onImageUpdate = _ref.onImageUpdate,\n        onImageRemove = _ref.onImageRemove,\n        isDragging = _ref.isDragging,\n        dragProps = _ref.dragProps;\n    return (\n      /*#__PURE__*/\n      // write your building UI\n      React.createElement(\"div\", {\n        className: \"upload__image-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", Object.assign({\n        style: isDragging ? {\n          color: 'red'\n        } : undefined,\n        onClick: onImageUpload\n      }, dragProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 25\n        }\n      }), \"Click or Drop here\"), \"\\xA0\", /*#__PURE__*/React.createElement(\"button\", {\n        onClick: onImageRemoveAll,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 25\n        }\n      }, \"Remove all images\"), imageList.map(function (image, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          className: \"image-item\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 29\n          }\n        }, /*#__PURE__*/React.createElement(\"img\", {\n          src: image['data_url'],\n          alt: \"\",\n          width: \"100\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"image-item__btn-wrapper\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 33\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onImageUpdate(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 37\n          }\n        }, \"Update\"), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onImageRemove(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 37\n          }\n        }, \"Remove\")));\n      }))\n    );\n  }));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","ImageUploading","App","useState","images","setImages","maxNumber","onChange","imageList","addUpdateIndex","console","log","onImageUpload","onImageRemoveAll","onImageUpdate","onImageRemove","isDragging","dragProps","color","undefined","map","image","index"],"mappings":"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","sourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\nimport React from 'react';\r\nimport ImageUploading from 'react-images-uploading';\r\n\r\nexport function App() {\r\n    const [images, setImages] = React.useState([]);\r\n    const maxNumber = 69;\r\n\r\n    const onChange = (imageList, addUpdateIndex) => {\r\n        // data for submit\r\n        console.log(imageList, addUpdateIndex);\r\n        setImages(imageList);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ImageUploading\r\n                multiple\r\n                value={images}\r\n                onChange={onChange}\r\n                maxNumber={maxNumber}\r\n                dataURLKey=\"data_url\"\r\n            >\r\n                {({\r\n                    imageList,\r\n                    onImageUpload,\r\n                    onImageRemoveAll,\r\n                    onImageUpdate,\r\n                    onImageRemove,\r\n                    isDragging,\r\n                    dragProps,\r\n                }) => (\r\n                    // write your building UI\r\n                    <div className=\"upload__image-wrapper\">\r\n                        <button\r\n                            style={isDragging ? { color: 'red' } : undefined}\r\n                            onClick={onImageUpload}\r\n                            {...dragProps}\r\n                        >\r\n                            Click or Drop here\r\n                        </button>\r\n                        &nbsp;\r\n                        <button onClick={onImageRemoveAll}>Remove all images</button>\r\n                        {imageList.map((image, index) => (\r\n                            <div key={index} className=\"image-item\">\r\n                                <img src={image['data_url']} alt=\"\" width=\"100\" />\r\n                                <div className=\"image-item__btn-wrapper\">\r\n                                    <button onClick={() => onImageUpdate(index)}>Update</button>\r\n                                    <button onClick={() => onImageRemove(index)}>Remove</button>\r\n                                </div>\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                )}\r\n            </ImageUploading>\r\n        </div>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\";\nimport { addItem, removeItem, isInputEvent } from \"@chakra-ui/utils\";\nimport { useCallback } from \"react\";\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    defaultValue = _props.defaultValue,\n    valueProp = _props.value,\n    onChange = _props.onChange,\n    isDisabled = _props.isDisabled,\n    isNative = _props.isNative;\n  var onChangeProp = useCallbackRef(onChange);\n  var _useControllableState = useControllableState({\n      value: valueProp,\n      defaultValue: defaultValue || [],\n      onChange: onChangeProp\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    value = _useControllableState2[0],\n    setValue = _useControllableState2[1];\n  var handleChange = useCallback(function (eventOrValue) {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    setValue(nextValue);\n  }, [setValue, value]);\n  var getCheckboxProps = useCallback(function (props) {\n    var _extends2;\n    if (props === void 0) {\n      props = {};\n    }\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, (_extends2 = {}, _defineProperty(_extends2, checkedKey, value.includes(props.value)), _defineProperty(_extends2, \"onChange\", handleChange), _extends2));\n  }, [handleChange, isNative, value]);\n  return {\n    value: value,\n    isDisabled: isDisabled,\n    onChange: handleChange,\n    setValue: setValue,\n    getCheckboxProps: getCheckboxProps\n  };\n}","map":{"version":3,"names":["useCallbackRef","useControllableState","addItem","removeItem","isInputEvent","useCallback","useCheckboxGroup","props","_props","defaultValue","valueProp","value","onChange","isDisabled","isNative","onChangeProp","_useControllableState","_useControllableState2","_slicedToArray","setValue","handleChange","eventOrValue","isChecked","target","checked","includes","selectedValue","nextValue","getCheckboxProps","_extends2","checkedKey","_extends","_defineProperty"],"sources":["../../src/use-checkbox-group.ts"],"sourcesContent":["import { useCallbackRef, useControllableState } from \"@chakra-ui/hooks\"\nimport {\n  addItem,\n  Dict,\n  removeItem,\n  StringOrNumber,\n  isInputEvent,\n} from \"@chakra-ui/utils\"\nimport { ChangeEvent, useCallback } from \"react\"\n\ntype EventOrValue = ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseCheckboxGroupProps {\n  /**\n   * The value of the checkbox group\n   */\n  value?: StringOrNumber[]\n  /**\n   * The initial value of the checkbox group\n   */\n  defaultValue?: StringOrNumber[]\n  /**\n   * The callback fired when any children Checkbox is checked or unchecked\n   */\n  onChange?(value: StringOrNumber[]): void\n  /**\n   * If `true`, all wrapped checkbox inputs will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props: UseCheckboxGroupProps = {}) {\n  const {\n    defaultValue,\n    value: valueProp,\n    onChange,\n    isDisabled,\n    isNative,\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n\n  const [value, setValue] = useControllableState({\n    value: valueProp,\n    defaultValue: defaultValue || [],\n    onChange: onChangeProp,\n  })\n\n  const handleChange = useCallback(\n    (eventOrValue: EventOrValue) => {\n      if (!value) return\n\n      const isChecked = isInputEvent(eventOrValue)\n        ? eventOrValue.target.checked\n        : !value.includes(eventOrValue)\n\n      const selectedValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      const nextValue = isChecked\n        ? addItem(value, selectedValue)\n        : removeItem(value, selectedValue)\n\n      setValue(nextValue)\n    },\n    [setValue, value],\n  )\n\n  const getCheckboxProps = useCallback(\n    (props: Dict = {}) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        [checkedKey]: value.includes(props.value),\n        onChange: handleChange,\n      }\n    },\n    [handleChange, isNative, value],\n  )\n\n  return {\n    value,\n    isDisabled,\n    onChange: handleChange,\n    setValue,\n    getCheckboxProps,\n  }\n}\n\nexport type UseCheckboxGroupReturn = ReturnType<typeof useCheckboxGroup>\n"],"mappings":";;;;;;;;;;;;;;;;AAAA,SAASA,cAAT,EAAyBC,oBAAzB,QAAqD,kBAArD;AACA,SACEC,OADF,EAGEC,UAHF,EAKEC,YALF,QAMO,kBANP;AAOA,SAAsBC,WAAtB,QAAyC,OAAzC;;AA8BA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,gBAATA,CAA0BC,KAA1B,EAA6D;EAAA,IAAnCA,KAAmC;IAAnCA,KAAmC,GAAJ,EAAI;EAAA;EAClE,IAAAC,MAAA,GAMID,KANJ;IACEE,YADI,GAAAD,MAAA,CACJC,YADI;IAEGC,SAFH,GAAAF,MAAA,CAEJG,KAAK;IACLC,QAHI,GAAAJ,MAAA,CAGJI,QAHI;IAIJC,UAJI,GAAAL,MAAA,CAIJK,UAJI;IAKJC,QAAA,GAAAN,MAAA,CAAAM,QAAA;EAGF,IAAMC,YAAY,GAAGf,cAAc,CAACY,QAAD,CAAnC;EAEA,IAAAI,qBAAA,GAA0Bf,oBAAoB,CAAC;MAC7CU,KAAK,EAAED,SADsC;MAE7CD,YAAY,EAAEA,YAAY,IAAI,EAFe;MAG7CG,QAAQ,EAAEG;IAHmC,CAAD,CAA9C;IAAAE,sBAAA,GAAAC,cAAA,CAAAF,qBAAA;IAAOL,KAAD,GAAAM,sBAAA;IAAQE,QAAR,GAAAF,sBAAA;EAMN,IAAMG,YAAY,GAAGf,WAAW,CAC7B,UAAAgB,YAAD,EAAgC;IAC9B,IAAI,CAACV,KAAL,EAAY;IAEZ,IAAMW,SAAS,GAAGlB,YAAY,CAACiB,YAAD,CAAZ,GACdA,YAAY,CAACE,MAAb,CAAoBC,OADN,GAEd,CAACb,KAAK,CAACc,QAAN,CAAeJ,YAAf,CAFL;IAIA,IAAMK,aAAa,GAAGtB,YAAY,CAACiB,YAAD,CAAZ,GAClBA,YAAY,CAACE,MAAb,CAAoBZ,KADF,GAElBU,YAFJ;IAIA,IAAMM,SAAS,GAAGL,SAAS,GACvBpB,OAAO,CAACS,KAAD,EAAQe,aAAR,CADgB,GAEvBvB,UAAU,CAACQ,KAAD,EAAQe,aAAR,CAFd;IAIAP,QAAQ,CAACQ,SAAD,CAAR;EACD,CAjB6B,EAkB9B,CAACR,QAAD,EAAWR,KAAX,CAlB8B,CAAhC;EAqBA,IAAMiB,gBAAgB,GAAGvB,WAAW,CAClC,UAACE,KAAD,EAAsB;IAAA,IAAAsB,SAAA;IAAA,IAArBtB,KAAqB;MAArBA,KAAqB,GAAP,EAAO;IAAA;IACpB,IAAMuB,UAAU,GAAGhB,QAAQ,GAAG,SAAH,GAAe,WAA1C;IACA,OAAAiB,QAAA,KACKxB,KADL,GAAAsB,SAAA,OAAAG,eAAA,CAAAH,SAAA,EAEGC,UAAD,EAAcnB,KAAK,CAACc,QAAN,CAAelB,KAAK,CAACI,KAArB,CAFhB,GAAAqB,eAAA,CAAAH,SAAA,cAGYT,YAAA,GAAAS,SAAA,CAHZ;EAKD,CARiC,EASlC,CAACT,YAAD,EAAeN,QAAf,EAAyBH,KAAzB,CATkC,CAApC;EAYA,OAAO;IACLA,KADK,EACLA,KADK;IAELE,UAFK,EAELA,UAFK;IAGLD,QAAQ,EAAEQ,YAHL;IAILD,QAJK,EAILA,QAJK;IAKLS,gBAAA,EAAAA;EALK,CAAP;AAOD"},"metadata":{},"sourceType":"module"}
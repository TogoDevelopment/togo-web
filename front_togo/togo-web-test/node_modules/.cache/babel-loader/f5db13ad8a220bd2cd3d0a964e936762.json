{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = TimeDropdown;\n\nvar _core = require(\"@emotion/core\");\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar styles = _interopRequireWildcard(require(\"./styles/time-dropdown\"));\n\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\n\nvar _dom = require(\"../helpers/dom\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\n\nvar scrollbarWidth = null;\n\nfunction TimeDropdown(_ref) {\n  var close = _ref.close;\n\n  var _useConfig = (0, _configContext.default)(),\n      hour24Mode = _useConfig.hour24Mode,\n      switchToMinuteOnHourDropdownSelect = _useConfig.switchToMinuteOnHourDropdownSelect;\n\n  var _useTimekeeperState = (0, _stateContext.default)(),\n      updateTime = _useTimekeeperState.updateTime,\n      mode = _useTimekeeperState.mode,\n      time = _useTimekeeperState.time,\n      setMode = _useTimekeeperState.setMode;\n\n  var container = (0, _react.useRef)(null);\n  var selectedOption = (0, _react.useRef)(null);\n  var options = _constants.CLOCK_VALUES[mode].dropdown;\n  var selected = (0, _utils.getNormalizedTimeValue)(mode, time).toString();\n\n  function disableBodyScroll() {\n    document.documentElement.style.paddingRight = scrollbarWidth + 'px';\n    document.documentElement.classList.add('react-timekeeper-noscroll');\n  }\n\n  function enableBodyScroll() {\n    document.documentElement.style.paddingRight = '0';\n    document.documentElement.classList.remove('react-timekeeper-noscroll');\n  }\n\n  var elsewhereClick = (0, _react.useCallback)(function (e) {\n    if (!container.current || !e.target) {\n      return;\n    }\n\n    if (!container.current.contains(e.target)) {\n      close();\n    }\n  }, [close]);\n  (0, _react.useEffect)(function () {\n    // measure scroll bar width for first time\n    if (scrollbarWidth == null) {\n      scrollbarWidth = (0, _dom.getScrollBarWidth)();\n    } // initial scroll in list\n\n\n    if (selectedOption.current && container.current) {\n      container.current.scrollTop = selectedOption.current.offsetTop;\n    } // listener to close if click outside dropdown\n\n\n    document.addEventListener('click', elsewhereClick, false);\n    return function () {\n      document.removeEventListener('click', elsewhereClick, false);\n      enableBodyScroll();\n    };\n  }, [elsewhereClick]); // select a value\n\n  function select(val) {\n    var parsed = parseInt(val, 10);\n\n    if (mode === _constants.MODE.HOURS_12 && parsed === 12) {\n      parsed = 0;\n    }\n\n    updateTime(parsed); // handle any unit autochanges on hour select\n\n    if (switchToMinuteOnHourDropdownSelect && (0, _utils.isHourMode)(mode)) {\n      setMode(_constants.MODE.MINUTES);\n    }\n\n    close();\n  }\n\n  return (0, _core.jsx)(\"div\", {\n    css: styles.wrapper(hour24Mode, mode),\n    ref: container,\n    onMouseEnter: disableBodyScroll,\n    onMouseLeave: enableBodyScroll,\n    className: \"react-timekeeper__time-dropdown\"\n  }, (0, _core.jsx)(\"ul\", {\n    css: styles.options,\n    className: \"react-timekeeper__dropdown-numbers\"\n  }, options.map(function (o) {\n    var isSelected = selected === o;\n    return (0, _core.jsx)(\"li\", {\n      ref: function ref(el) {\n        return isSelected ? selectedOption.current = el : '';\n      },\n      className: \"react-timekeeper__dropdown-number \".concat(isSelected ? 'react-timekeeper__dropdown-number--active' : ''),\n      css: styles.option(isSelected),\n      key: o,\n      onClick: function onClick() {\n        return select(o);\n      }\n    }, o);\n  })));\n}","map":null,"metadata":{},"sourceType":"script"}
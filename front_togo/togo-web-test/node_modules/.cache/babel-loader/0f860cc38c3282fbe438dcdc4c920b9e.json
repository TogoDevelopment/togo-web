{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport './OrdersTabularView.css';\nimport translate from \"../../i18n/translate\";\nimport { Link } from \"react-router-dom\";\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\nimport { Badge, ToggleButton } from \"react-bootstrap\";\n/* edited (new import) */\n\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\";\n/* edited (getOrderDetails imported) */\n\nexport var PackageTypes = {\n  \"1\": \"FOOD\",\n  \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\n  \"3\": \"MEDIUM_PACKAGE\",\n  \"4\": \"LARGE_PACKAGE\"\n};\nexport var DeliveryTypes = {\n  \"1\": \"DELIVERY\",\n  \"2\": \"COD\",\n  \"3\": \"PICKUP\",\n  \"4\": \"PAP\"\n};\nexport var deliverFormatter = function deliverFormatter(data) {\n  if (DeliveryTypes[parseInt(data.DeliveryWays)]) {\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)]);\n  }\n\n  return \"\";\n};\nexport var packageFormatter = function packageFormatter(data) {\n  if (PackageTypes[parseInt(data.PackageType)]) {\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)]);\n  }\n\n  return \"\";\n};\n/* edited (deliverFormatter added) */\n\nexport var deliverFormatterTransporter = function deliverFormatterTransporter(data) {\n  if (DeliveryTypes[parseInt(data.deliveryWay)]) {\n    // edited (old => data.DeliveryWays)\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)]);\n  }\n\n  return \"\";\n};\n/* edited (packageFormatter added) */\n\nexport var packageFormatterTransporter = function packageFormatterTransporter(data) {\n  if (PackageTypes[parseInt(data.TypeLoad)]) {\n    // edited (old => data.PackageType)\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)]);\n  }\n\n  return \"\";\n};\n/* edited (timeFormatter added) */\n\nexport var timeFormatter = function timeFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[1];\n  }\n\n  return \"\";\n};\n/* edited (dateFormatter added) */\n\nexport var dateFormatter = function dateFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[0];\n  }\n\n  return \"\";\n};\n/* edited (bidsCountFormat added) */\n\nexport var bidsCountFormat = function bidsCountFormat(data) {\n  if (data.bidsCount) {\n    if (data.bidsCount !== \"0\") {\n      return data.bidsCount;\n    }\n\n    return \"--\";\n  }\n\n  return \"\";\n};\n/* edited (statusFormat added) */\n\nexport var statusFormat = function statusFormat(data) {\n  if (data.isAcceptDelivery === null) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 16\n      }\n    }, \"Waiting for bid\");\n  } else if (data.pickup_date === null && data.orderfinished === null) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"success\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    }, \"Bid Accepted\");\n  } else if (data.pickup_date !== null && data.orderfinished === null) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"warning\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 16\n      }\n    }, \"Out for Delivery\");\n  } else if (data.orderfinished === \"1\" && data.IsDeleted === \"1\") {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"secondary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 16\n      }\n    }, \"Order Deleted\");\n  } else if (data.orderfinished === \"1\" && data.deliveryWay === \"2\") {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"warning\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 16\n      }\n    }, \"Delivered and Collected\");\n  } else if (data.orderfinished === \"1\" && data.deliveryWay === \"1\") {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }\n    }, \"Delevered\");\n  }\n  /*  else if (data.orderfinished === \"1\" && data.DeliveryId !== data.OriginalDeliveryId) {\r\n     return \"Assigned and Delivered\"\r\n  } */\n\n\n  return \"\";\n};\nexport var OrdersTabularView = function OrdersTabularView(_ref) {\n  var orders = _ref.orders,\n      currentPage = _ref.currentPage,\n      update = _ref.update;\n\n  // console.log(currentPage)\n  // console.log(orders)\n  var _useState = useState(\"-\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      bidPrice = _useState2[0],\n      setBidPrice = _useState2[1];\n  /*const test = getOrderDetails(431).then((orderDetailsRes) => {\r\n          setBidPrice(orderDetailsRes.CostLoad);\r\n  })\r\n      console.log(test);*/\n\n  /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n          setOrderDetails(orderDetailsRes);\r\n            setReceiverAddress({\r\n              otherDetails: orderDetailsRes.OtherDetailsDes,\r\n              phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n              long: orderDetailsRes.LongReciver,\r\n              lat: orderDetailsRes.LatReciver\r\n          });\r\n  });*/\n  // console.log(orders);\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      columns = _useState4[0],\n      setColumns = _useState4[1];\n\n  var _useState5 = useState([1, 2]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      assignedOrders = _useState6[0],\n      setAssignedOrders = _useState6[1];\n\n  var showDetailsButton = useCallback(function (orderId) {\n    return /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/account/Order/\".concat(orderId),\n        state: {\n          currentPage: currentPage\n        }\n      },\n      style: {\n        paddingRight: \"20%\",\n        paddingLeft: \"20%\",\n        border: \"none\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      className: \"btn btn-primary btn-rounded btn-grad\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }\n    }, translate(\"ORDERS.SHOW\"));\n  }, [currentPage]);\n\n  var addToAssign = function addToAssign(isChecked, orderId) {\n    var tempId = parseInt(orderId);\n    var tempArr = [];\n\n    if (isChecked) {\n      tempArr.push(tempId);\n    } else {\n      var idIndex = assignedOrders.findIndex(function (id) {\n        return id === tempId;\n      }); //assignedOrders.splice(idIndex, 1);\n\n      console.log(\"index: \" + idIndex);\n    }\n\n    tempArr = tempArr.concat(assignedOrders);\n    setAssignedOrders(tempArr);\n    console.log(tempArr);\n  };\n\n  useEffect(function () {\n    var newColumns = [];\n    /* edited (differ between transporter and client columns) */\n\n    if (isTransporter()) {\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"id\"\n      }, {\n        label: translate(\"ORDERS.DELIVERY_TYPE\"),\n        key: \"deliveryWay\",\n        format: deliverFormatterTransporter\n      }, {\n        label: translate(\"ORDERS.PACKAGE_TYPE\"),\n        key: \"TypeLoad\",\n        format: packageFormatterTransporter\n      }, {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateLoad\",\n        format: dateFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_TIME\"),\n        key: \"DateLoad\",\n        format: timeFormatter\n      }, {\n        label: translate(\"ORDERS.FROM_CITY\"),\n        key: \"fromAddress\"\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"toAddress\"\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"isAcceptDelivery\",\n        format: statusFormat\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"id\",\n        format: function format(_ref2) {\n          var id = _ref2.id;\n          return showDetailsButton(id);\n        }\n      }];\n\n      if (currentPage === \"all-orders\") {\n        newColumns.splice(7, 0, {\n          label: translate(\"ORDERS.BIDS_COUNT\"),\n          key: \"bidsCount\",\n          format: bidsCountFormat\n        });\n      }\n\n      if (currentPage === \"current-orders\") {\n        newColumns.splice(0, 0, {\n          label: translate(\"ORDERS.ASSIGN\"),\n          key: \"assign\",\n          format: function format(_ref3) {\n            var id = _ref3.id;\n            return /*#__PURE__*/React.createElement(\"input\", {\n              className: \"form-check-input\",\n              style: {\n                cursor: \"pointer\"\n              },\n              type: \"checkbox\",\n              value: id,\n              id: \"flexCheckDefault\",\n              onClick: function onClick(event) {\n                addToAssign(event.target.checked, event.target.value);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 242,\n                columnNumber: 33\n              }\n            });\n          }\n        });\n      }\n    } else {\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"idOrder\"\n      }, {\n        label: translate(\"ORDERS.DELIVERY_TYPE\"),\n        key: \"DeliveryWays\",\n        format: deliverFormatter\n      }, {\n        label: translate(\"ORDERS.PACKAGE_TYPE\"),\n        key: \"PackageType\",\n        format: packageFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateOrder\"\n      }, {\n        label: translate(\"ORDERS.ORDER_TIME\"),\n        key: \"TimeOrder\"\n      }, {\n        label: translate(\"ORDERS.FROM_CITY\"),\n        key: \"FromAddress\"\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"ToAddress\"\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"OrderStatus\"\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"idOrder\",\n        format: function format(_ref4) {\n          var idOrder = _ref4.idOrder;\n          return showDetailsButton(idOrder);\n        }\n      }];\n    }\n    /* edited (comment bidPrice) */\n\n    /*if (isTransporter()) {\r\n        newColumns.splice(3, 0, {\r\n            label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n            key: \"bidPrice\",\r\n            format: ({idOrder}) => <p>{bidPrice}</p>\r\n        });\r\n    }*/\n\n\n    if (!isTransporter() && currentPage === \"all-orders\") {\n      newColumns.push({\n        label: \"\",\n        key: \"\",\n        format: function format(_ref5) {\n          var idOrder = _ref5.idOrder;\n          return /*#__PURE__*/React.createElement(CancelOrder, {\n            className: \"w-100\",\n            orderId: idOrder,\n            onSuccess: update,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 42\n            }\n          });\n        }\n      });\n    }\n    /* edited (add bidscount) */\n\n    /* if (currentPage === \"all-orders\" && !isTransporter()) {\r\n        newColumns.splice(7, 0, {\r\n            label: translate(\"ORDERS.BIDS_COUNT\"),\r\n            key: \"bidsCount\"\r\n        });\r\n    } */\n\n    /* edited (to display my bid as transporter) */\n\n    /* if (currentPage === \"all-orders\" && isTransporter()) {\r\n        newColumns.splice(7, 0, {\r\n            label: \"\",\r\n            key: \"\"\r\n        });\r\n    } */\n\n    /* edited (commented) */\n\n    /* if (currentPage === \"current-orders\") {\r\n        //TODO:: key to be changed\r\n          newColumns.splice(3, 0, {\r\n            label: translate(\"ORDERS.PRICE\"),\r\n            key: \"CostLoad\"\r\n        });\r\n        \r\n        if(isTransporterMaster()){\r\n            newColumns.splice(newColumns.length - 1, 0,{\r\n                label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                key: \"AssignedMemberName\",\r\n            });\r\n        }\r\n    } */\n\n    /* else if (currentPage === \"previous-orders\") {\r\n    newColumns.push({\r\n       label: translate(\"ORDERS.ORDER_STATUS\"),\r\n       key: \"idOrder\",\r\n       format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n    })\r\n    } */\n\n\n    setColumns(newColumns);\n  }, [currentPage, showDetailsButton]);\n  return /*#__PURE__*/React.createElement(DynamicTable, {\n    columns: columns,\n    data: orders,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx"],"names":["React","useCallback","useEffect","useState","translate","Link","CancelOrder","DynamicTable","isTransporter","isTransporterMaster","Badge","ToggleButton","getOrderDetails","PackageTypes","DeliveryTypes","deliverFormatter","data","parseInt","DeliveryWays","packageFormatter","PackageType","deliverFormatterTransporter","deliveryWay","packageFormatterTransporter","TypeLoad","timeFormatter","DateLoad","split","dateFormatter","bidsCountFormat","bidsCount","statusFormat","isAcceptDelivery","pickup_date","orderfinished","IsDeleted","OrdersTabularView","orders","currentPage","update","bidPrice","setBidPrice","columns","setColumns","assignedOrders","setAssignedOrders","showDetailsButton","orderId","pathname","state","paddingRight","paddingLeft","border","width","textAlign","addToAssign","isChecked","tempId","tempArr","push","idIndex","findIndex","id","console","log","concat","newColumns","label","key","format","splice","cursor","event","target","checked","value","idOrder"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport './OrdersTabularView.css';\r\nimport translate from \"../../i18n/translate\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\r\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\r\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\r\n\r\nimport { Badge, ToggleButton } from \"react-bootstrap\"; /* edited (new import) */\r\n\r\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\"; /* edited (getOrderDetails imported) */\r\n\r\nexport const PackageTypes = {\r\n    \"1\": \"FOOD\",\r\n    \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\r\n    \"3\": \"MEDIUM_PACKAGE\",\r\n    \"4\": \"LARGE_PACKAGE\"\r\n};\r\n\r\nexport const DeliveryTypes = {\r\n    \"1\": \"DELIVERY\",\r\n    \"2\": \"COD\",\r\n    \"3\": \"PICKUP\",\r\n    \"4\": \"PAP\"\r\n};\r\n\r\nexport const deliverFormatter = (data) => {\r\n    if (DeliveryTypes[parseInt(data.DeliveryWays)]) {\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const packageFormatter = (data) => {\r\n    if (PackageTypes[parseInt(data.PackageType)]) {\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (deliverFormatter added) */\r\nexport const deliverFormatterTransporter = (data) => {\r\n    if (DeliveryTypes[parseInt(data.deliveryWay)]) { // edited (old => data.DeliveryWays)\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (packageFormatter added) */\r\nexport const packageFormatterTransporter = (data) => {\r\n    if (PackageTypes[parseInt(data.TypeLoad)]) { // edited (old => data.PackageType)\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (timeFormatter added) */\r\nexport const timeFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[1];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (dateFormatter added) */\r\nexport const dateFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[0];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (bidsCountFormat added) */\r\nexport const bidsCountFormat = (data) => {\r\n    if (data.bidsCount) {\r\n        if (data.bidsCount !== \"0\") {\r\n            return data.bidsCount;\r\n        }\r\n\r\n        return \"--\"\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (statusFormat added) */\r\nexport const statusFormat = (data) => {\r\n    if (data.isAcceptDelivery === null) {\r\n        return <Badge bg=\"primary\">Waiting for bid</Badge>\r\n    } else if (data.pickup_date === null && data.orderfinished === null) {\r\n        return <Badge bg=\"success\">Bid Accepted</Badge>\r\n    } else if (data.pickup_date !== null && data.orderfinished === null) {\r\n        return <Badge bg=\"warning\">Out for Delivery</Badge>\r\n    } else if (data.orderfinished === \"1\" && data.IsDeleted === \"1\") {\r\n        return <Badge bg=\"secondary\">Order Deleted</Badge>\r\n    } else if (data.orderfinished === \"1\" && data.deliveryWay === \"2\") {\r\n        return <Badge bg=\"warning\">Delivered and Collected</Badge>\r\n    } else if (data.orderfinished === \"1\" && data.deliveryWay === \"1\") {\r\n        return <Badge bg=\"danger\">Delevered</Badge>\r\n    }/*  else if (data.orderfinished === \"1\" && data.DeliveryId !== data.OriginalDeliveryId) {\r\n        return \"Assigned and Delivered\"\r\n    } */\r\n    return \"\";\r\n}\r\n\r\nexport const OrdersTabularView = ({ orders, currentPage, update }) => {\r\n\r\n    // console.log(currentPage)\r\n\r\n    // console.log(orders)\r\n\r\n    const [bidPrice, setBidPrice] = useState(\"-\");\r\n\r\n\r\n    /*const test = getOrderDetails(431).then((orderDetailsRes) => {\r\n            setBidPrice(orderDetailsRes.CostLoad);\r\n    })\r\n\r\n\r\n    console.log(test);*/\r\n\r\n\r\n    /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n            setOrderDetails(orderDetailsRes);\r\n\r\n            setReceiverAddress({\r\n                otherDetails: orderDetailsRes.OtherDetailsDes,\r\n                phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n                long: orderDetailsRes.LongReciver,\r\n                lat: orderDetailsRes.LatReciver\r\n            });\r\n    });*/\r\n\r\n    // console.log(orders);\r\n\r\n    const [columns, setColumns] = useState([]);\r\n    const [assignedOrders, setAssignedOrders] = useState([1, 2]);\r\n\r\n    const showDetailsButton = useCallback((orderId) =>\r\n        <Link\r\n            to={{\r\n                pathname: `/account/Order/${orderId}`,\r\n                state: { currentPage: currentPage },\r\n            }}\r\n            style={{\r\n                paddingRight: \"20%\",\r\n                paddingLeft: \"20%\",\r\n                border: \"none\",\r\n                width: \"100%\",\r\n                textAlign: \"center\",\r\n            }}\r\n            className=\"btn btn-primary btn-rounded btn-grad\"\r\n        >\r\n            {translate(\"ORDERS.SHOW\")}\r\n        </Link>, [currentPage]);\r\n\r\n    const addToAssign = (isChecked, orderId) => {\r\n\r\n        const tempId = parseInt(orderId);\r\n\r\n        let tempArr = [];\r\n\r\n        if (isChecked) {\r\n            tempArr.push(tempId);\r\n        } else {\r\n            const idIndex = assignedOrders.findIndex(id => id === tempId);\r\n            //assignedOrders.splice(idIndex, 1);\r\n            console.log(\"index: \" + idIndex)\r\n        }\r\n\r\n        tempArr = tempArr.concat(assignedOrders);\r\n        setAssignedOrders(tempArr);\r\n\r\n        console.log(tempArr)\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let newColumns = [];\r\n\r\n        /* edited (differ between transporter and client columns) */\r\n        if (isTransporter()) {\r\n\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"id\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"deliveryWay\",\r\n                    format: deliverFormatterTransporter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"TypeLoad\",\r\n                    format: packageFormatterTransporter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateLoad\",\r\n                    format: dateFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"DateLoad\",\r\n                    format: timeFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"fromAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"toAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"isAcceptDelivery\",\r\n                    format: statusFormat\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"id\",\r\n                    format: ({ id }) => showDetailsButton(id)\r\n                }\r\n            ];\r\n\r\n            if (currentPage === \"all-orders\") {\r\n                newColumns.splice(7, 0, {\r\n                    label: translate(\"ORDERS.BIDS_COUNT\"),\r\n                    key: \"bidsCount\",\r\n                    format: bidsCountFormat\r\n                });\r\n            }\r\n\r\n            if (currentPage === \"current-orders\") {\r\n                newColumns.splice(0, 0, {\r\n                    label: translate(\"ORDERS.ASSIGN\"),\r\n                    key: \"assign\",\r\n                    format: ({ id }) => {\r\n                        return  <input className=\"form-check-input\" style={{ cursor: \"pointer\" }} type=\"checkbox\" value={id} id=\"flexCheckDefault\" onClick={(event) => { addToAssign(event.target.checked, event.target.value) }} />\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"idOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"DeliveryWays\",\r\n                    format: deliverFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"PackageType\",\r\n                    format: packageFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"TimeOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"FromAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"ToAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"OrderStatus\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"idOrder\",\r\n                    format: ({ idOrder }) => showDetailsButton(idOrder)\r\n                }\r\n            ];\r\n        }\r\n\r\n        /* edited (comment bidPrice) */\r\n        /*if (isTransporter()) {\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n                key: \"bidPrice\",\r\n                format: ({idOrder}) => <p>{bidPrice}</p>\r\n            });\r\n        }*/\r\n\r\n        if (!isTransporter() && currentPage === \"all-orders\") {\r\n            newColumns.push({\r\n                label: \"\",\r\n                key: \"\",\r\n                format: ({ idOrder }) => <CancelOrder className=\"w-100\" orderId={idOrder} onSuccess={update} />\r\n            });\r\n        }\r\n\r\n        /* edited (add bidscount) */\r\n        /* if (currentPage === \"all-orders\" && !isTransporter()) {\r\n            newColumns.splice(7, 0, {\r\n                label: translate(\"ORDERS.BIDS_COUNT\"),\r\n                key: \"bidsCount\"\r\n            });\r\n        } */\r\n\r\n        /* edited (to display my bid as transporter) */\r\n        /* if (currentPage === \"all-orders\" && isTransporter()) {\r\n            newColumns.splice(7, 0, {\r\n                label: \"\",\r\n                key: \"\"\r\n            });\r\n        } */\r\n\r\n        /* edited (commented) */\r\n        /* if (currentPage === \"current-orders\") {\r\n            //TODO:: key to be changed\r\n\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDERS.PRICE\"),\r\n                key: \"CostLoad\"\r\n            });\r\n            \r\n            if(isTransporterMaster()){\r\n                newColumns.splice(newColumns.length - 1, 0,{\r\n                    label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                    key: \"AssignedMemberName\",\r\n                });\r\n            }\r\n        } */ /* else if (currentPage === \"previous-orders\") {\r\n            newColumns.push({\r\n                label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                key: \"idOrder\",\r\n                format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n            })\r\n        } */\r\n\r\n        setColumns(newColumns);\r\n    }, [currentPage, showDetailsButton]);\r\n\r\n    return <DynamicTable columns={columns} data={orders} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
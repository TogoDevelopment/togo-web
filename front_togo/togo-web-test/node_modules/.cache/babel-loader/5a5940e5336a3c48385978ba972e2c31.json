{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.deg = deg;\nexports.transform = transform;\nexports.isWithinRadius = isWithinRadius;\nexports.calcAnimationAngle = calcAnimationAngle;\n\nvar _constants = require(\"./constants\");\n\nvar cos = Math.cos,\n    sin = Math.sin;\nvar pi = Math.PI;\nvar ANGLE_PER_INCREMENT = 360 / _constants.VISIBLE_NUMBERS_PER_CIRCLE;\n\nfunction rad(deg) {\n  return deg / (180 / pi);\n}\n\nfunction deg(rad) {\n  return rad * (180 / pi);\n} // translate number position\n\n\nfunction translateX(index, transform) {\n  return sin(rad(index * -ANGLE_PER_INCREMENT - 180)) * (_constants.CLOCK_RADIUS - transform) + _constants.CLOCK_RADIUS - _constants.NUMBER_RADIUS_REGULAR / 2;\n}\n\nfunction translateY(index, transform) {\n  return cos(rad(index * -ANGLE_PER_INCREMENT - 180)) * (_constants.CLOCK_RADIUS - transform) + _constants.CLOCK_RADIUS - _constants.NUMBER_RADIUS_REGULAR / 2;\n} // calculate number position for animation\n\n\nfunction transform(index, t) {\n  var x = translateX(index, t);\n  var y = translateY(index, t);\n  return \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n}\n\nfunction isWithinRadius(x, y, radius) {\n  return Math.sqrt(x * x + y * y) < radius;\n} // normalize any angles to 0-360 deg\n\n\nfunction normalize(angle) {\n  return (angle % 360 + 360) % 360;\n}\n/*\n\tcalculates the shortest angle between the prev and next angle\n\tto animate to - positive spins clockwise, negative is ccw\n\n\t- prev is the previous angle - can literally be almost any value,\n\teg: 480 is valid, -480 is valid\n\t- next is the angle to rotate to - is always between 0-360\n\t- must return an angle relative to the previous, so once again\n\tthis value can be any negative or positive value (like prev)\n\n\tfunction normalizes each angle, creates an upper and lower bound\n\tbased on previous angle and figures out which direction is shorter\n\tfor next - then diff and add/subtract to previous angle\n*/\n\n\nfunction calcAnimationAngle(prev, next) {\n  var p = normalize(prev);\n  var n = normalize(next);\n  var lower = p;\n  var upper = p; // TODO - implement without while loops\n\n  while (n < lower) {\n    lower -= 360;\n  }\n\n  while (n >= upper) {\n    upper += 360;\n  }\n\n  if (upper - n < n - lower) {\n    return prev - (upper - n);\n  } else {\n    return prev + (n - lower);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
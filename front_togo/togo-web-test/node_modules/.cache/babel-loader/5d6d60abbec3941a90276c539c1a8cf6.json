{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockHand;\n\nvar _core = require(\"@emotion/core\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactSpring = require(\"react-spring\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _clockHand = require(\"./styles/clock-hand\");\n\nvar _math = require(\"../helpers/math\");\n\nfunction rotate(r) {\n  return \"rotate(\".concat(r, \" \").concat(_constants.CLOCK_RADIUS, \" \").concat(_constants.CLOCK_RADIUS, \")\");\n}\n\nfunction getAngle(mode, time) {\n  var increments = _constants.CLOCK_VALUES[mode].increments;\n  var value = (0, _utils.getTimeValue)(mode, time);\n  return value * (360 / increments);\n}\n\nfunction ClockHand(_ref) {\n  var mode = _ref.mode,\n      time = _ref.time;\n  var prevState = (0, _react.useRef)({\n    time: time,\n    mode: mode\n  });\n  var dragCount = (0, _react.useRef)(0); // clockhand positioning\n\n  var inner = time.hour > 0 && time.hour <= 12;\n  var handLength = (0, _constants.getClockHandLength)(mode, inner);\n  var circlePosition = (0, _constants.getClockHandCirclePosition)(mode, inner);\n  var circleRadius = (0, _constants.getClockHandCircleRadius)(mode, inner); // @ts-ignore\n\n  var _useSpring = (0, _reactSpring.useSpring)(function () {\n    return {\n      immediate: true,\n      rotation: getAngle(mode, time),\n      length: handLength,\n      position: circlePosition\n    };\n  }),\n      _useSpring2 = (0, _slicedToArray2.default)(_useSpring, 2),\n      anim = _useSpring2[0],\n      setAnim = _useSpring2[1];\n\n  var rotation = anim.rotation,\n      length = anim.length,\n      position = anim.position;\n  (0, _react.useEffect)(function () {\n    var current = rotation.value;\n    var next = getAngle(mode, time);\n\n    if (prevState.current.mode !== mode) {\n      dragCount.current = 0;\n      prevState.current.mode = mode; // mode changed, animate clockhand to next mode angle\n\n      var finalAngle = (0, _math.calcAnimationAngle)(current, next);\n      setAnim({\n        immediate: false,\n        rotation: finalAngle,\n        length: handLength,\n        position: circlePosition\n      });\n    } else if (!(0, _utils.isSameTime)(prevState.current.time, time)) {\n      // time changed, no animation necessary - just update clockhand\n      prevState.current.time = time;\n      dragCount.current++;\n      /*\n      TODO - consider making this a config option?\n      if on hour mode and `switchToMinuteOnHourSelect` is enabled, don't display\n      change in time, just wait for mode to change\n      */\n      // if (isHourMode(mode) && config.switchToMinuteOnHourSelect && dragCount.current < 2) {\n      // \treturn\n      // }\n\n      setAnim({\n        immediate: true,\n        rotation: next,\n        length: handLength,\n        position: circlePosition\n      });\n    }\n  }, [circlePosition, handLength, mode, rotation, setAnim, time]); // mini circle on clockhand between increments on minutes\n\n  var value = (0, _utils.getTimeValue)(mode, time);\n  var showIntermediateValueDisplay;\n\n  if (mode === _constants.MODE.MINUTES && value % 5) {\n    showIntermediateValueDisplay = (0, _core.jsx)(\"circle\", {\n      className: \"react-timekeeper__hand-intermediate-circle\",\n      css: _clockHand.intermediateMinuteCircle,\n      cx: _constants.CLOCK_RADIUS,\n      cy: _constants.NUMBER_OUTER_POSITION,\n      r: 4\n    });\n  }\n\n  return (0, _core.jsx)(\"svg\", {\n    width: _constants.CLOCK_SIZE,\n    height: _constants.CLOCK_SIZE,\n    viewBox: \"0 0 \".concat(_constants.CLOCK_SIZE, \" \").concat(_constants.CLOCK_SIZE),\n    xmlns: \"http://www.w3.org/2000/svg\",\n    className: \"react-timekeeper__clock-hand\"\n  }, (0, _core.jsx)(_reactSpring.animated.g, {\n    transform: rotation.interpolate(function (a) {\n      return rotate(a);\n    })\n  }, (0, _core.jsx)(_reactSpring.animated.line, {\n    className: \"react-timekeeper__clock-hand\",\n    css: _clockHand.line,\n    x1: _constants.CLOCK_RADIUS,\n    y1: _constants.CLOCK_RADIUS,\n    x2: _constants.CLOCK_RADIUS,\n    y2: length,\n    strokeWidth: \"1\"\n  }), (0, _core.jsx)(\"circle\", {\n    className: \"react-timekeeper__hand-circle-center\",\n    css: _clockHand.centerCircle,\n    cx: _constants.CLOCK_RADIUS,\n    cy: _constants.CLOCK_RADIUS,\n    r: 1.5\n  }), (0, _core.jsx)(_reactSpring.animated.circle, {\n    className: \"react-timekeeper__hand-circle-outer\",\n    css: _clockHand.outerCircle,\n    cx: _constants.CLOCK_RADIUS,\n    cy: position,\n    r: circleRadius\n  }), showIntermediateValueDisplay));\n}","map":null,"metadata":{},"sourceType":"script"}
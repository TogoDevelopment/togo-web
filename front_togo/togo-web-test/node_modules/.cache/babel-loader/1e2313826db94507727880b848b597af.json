{"ast":null,"code":"import _classCallCheck from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nvar ModalManager = /*#__PURE__*/function () {\n  function ModalManager() {\n    _classCallCheck(this, ModalManager);\n    _defineProperty(this, \"modals\", void 0);\n    this.modals = [];\n  }\n  _createClass(ModalManager, [{\n    key: \"add\",\n    value: function add(modal) {\n      this.modals.push(modal);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(modal) {\n      this.modals = this.modals.filter(function (_modal) {\n        return _modal !== modal;\n      });\n    }\n  }, {\n    key: \"isTopModal\",\n    value: function isTopModal(modal) {\n      var topmostModal = this.modals[this.modals.length - 1];\n      return topmostModal === modal;\n    }\n  }]);\n  return ModalManager;\n}();\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(function () {\n    if (isOpen) {\n      manager.add(ref);\n    }\n    return function () {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}","map":{"version":3,"names":["useEffect","ModalManager","_classCallCheck","_defineProperty","modals","_createClass","key","value","add","modal","push","remove","filter","_modal","isTopModal","topmostModal","length","manager","useModalManager","ref","isOpen"],"sources":["../../src/modal-manager.ts"],"sourcesContent":["import { useEffect, Ref } from \"react\"\n\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\nclass ModalManager {\n  modals: any[]\n  constructor() {\n    this.modals = []\n  }\n\n  add(modal: any) {\n    this.modals.push(modal)\n  }\n\n  remove(modal: any) {\n    this.modals = this.modals.filter((_modal) => _modal !== modal)\n  }\n\n  isTopModal(modal: any) {\n    const topmostModal = this.modals[this.modals.length - 1]\n    return topmostModal === modal\n  }\n}\n\nexport const manager = new ModalManager()\n\nexport function useModalManager(ref: Ref<any>, isOpen?: boolean) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref)\n    }\n    return () => {\n      manager.remove(ref)\n    }\n  }, [isOpen, ref])\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA,SAASA,SAAT,QAA+B,OAA/B;AAEA;AACA;AACA;AACA;AAHA,IAIMC,YAAN;EAEE,SAAAA,aAAA,EAAc;IAAAC,eAAA,OAAAD,YAAA;IAAAE,eAAA;IACZ,KAAKC,MAAL,GAAc,EAAd;EACD;EAAAC,YAAA,CAAAJ,YAAA;IAAAK,GAAA;IAAAC,KAAA,EAED,SAAAC,IAAIC,KAAD,EAAa;MACd,KAAKL,MAAL,CAAYM,IAAZ,CAAiBD,KAAjB;IACD;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAI,OAAOF,KAAD,EAAa;MACjB,KAAKL,MAAL,GAAc,KAAKA,MAAL,CAAYQ,MAAZ,CAAoB,UAAAC,MAAD;QAAA,OAAYA,MAAM,KAAKJ,KAA1C;MAAA,EAAd;IACD;EAAA;IAAAH,GAAA;IAAAC,KAAA,EAED,SAAAO,WAAWL,KAAD,EAAa;MACrB,IAAMM,YAAY,GAAG,KAAKX,MAAL,CAAY,KAAKA,MAAL,CAAYY,MAAZ,GAAqB,CAAjC,CAArB;MACA,OAAOD,YAAY,KAAKN,KAAxB;IACD;EAAA;EAAA,OAAAR,YAAA;AAAA;AAGH,OAAO,IAAMgB,OAAO,GAAG,IAAIhB,YAAJ,EAAhB;AAEP,OAAO,SAASiB,eAATA,CAAyBC,GAAzB,EAAwCC,MAAxC,EAA0D;EAC/DpB,SAAS,CAAC,YAAM;IACd,IAAIoB,MAAJ,EAAY;MACVH,OAAO,CAACT,GAAR,CAAYW,GAAZ;IACD;IACD,OAAO,YAAM;MACXF,OAAO,CAACN,MAAR,CAAeQ,GAAf;IACD,CAFD;EAGD,CAPQ,EAON,CAACC,MAAD,EAASD,GAAT,CAPM,CAAT;AAQD"},"metadata":{},"sourceType":"module"}
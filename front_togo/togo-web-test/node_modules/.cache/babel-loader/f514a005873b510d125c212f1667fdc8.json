{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra } from \"@chakra-ui/system\";\nimport { isUndefined, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { getProgressProps, rotate, spin } from \"./progress.utils\";\nvar Circle = function Circle(props) {\n  return /*#__PURE__*/React.createElement(chakra.circle, _extends({\n    cx: 50,\n    cy: 50,\n    r: 42,\n    fill: \"transparent\"\n  }, props));\n};\nif (__DEV__) {\n  Circle.displayName = \"Circle\";\n}\nvar Shape = function Shape(props) {\n  var size = props.size,\n    isIndeterminate = props.isIndeterminate,\n    rest = _objectWithoutPropertiesLoose(props, [\"size\", \"isIndeterminate\"]);\n  return /*#__PURE__*/React.createElement(chakra.svg, _extends({\n    viewBox: \"0 0 100 100\",\n    __css: {\n      width: size,\n      height: size,\n      animation: isIndeterminate ? rotate + \" 2s linear infinite\" : undefined\n    }\n  }, rest));\n};\nif (__DEV__) {\n  Shape.displayName = \"Shape\";\n}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nexport var CircularProgress = function CircularProgress(props) {\n  var _progress$percent;\n  var _props$size = props.size,\n    size = _props$size === void 0 ? \"48px\" : _props$size,\n    _props$max = props.max,\n    max = _props$max === void 0 ? 100 : _props$max,\n    _props$min = props.min,\n    min = _props$min === void 0 ? 0 : _props$min,\n    valueText = props.valueText,\n    getValueText = props.getValueText,\n    value = props.value,\n    capIsRound = props.capIsRound,\n    children = props.children,\n    _props$thickness = props.thickness,\n    thickness = _props$thickness === void 0 ? \"10px\" : _props$thickness,\n    _props$color = props.color,\n    color = _props$color === void 0 ? \"#0078d4\" : _props$color,\n    _props$trackColor = props.trackColor,\n    trackColor = _props$trackColor === void 0 ? \"#edebe9\" : _props$trackColor,\n    isIndeterminate = props.isIndeterminate,\n    rest = _objectWithoutPropertiesLoose(props, [\"size\", \"max\", \"min\", \"valueText\", \"getValueText\", \"value\", \"capIsRound\", \"children\", \"thickness\", \"color\", \"trackColor\", \"isIndeterminate\"]);\n  var progress = getProgressProps({\n    min: min,\n    max: max,\n    value: value,\n    valueText: valueText,\n    getValueText: getValueText,\n    isIndeterminate: isIndeterminate\n  });\n  var determinant = isIndeterminate ? undefined : ((_progress$percent = progress.percent) != null ? _progress$percent : 0) * 2.64;\n  var strokeDasharray = isUndefined(determinant) ? undefined : determinant + \" \" + (264 - determinant);\n  var indicatorProps = isIndeterminate ? {\n    css: {\n      animation: spin + \" 1.5s linear infinite\"\n    }\n  } : {\n    strokeDashoffset: 66,\n    strokeDasharray: strokeDasharray,\n    transitionProperty: \"stroke-dasharray, stroke\",\n    transitionDuration: \"0.6s\",\n    transitionTimingFunction: \"ease\"\n  };\n  var rootStyles = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size\n  };\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-progress\"\n  }, progress.bind, rest, {\n    __css: rootStyles\n  }), /*#__PURE__*/React.createElement(Shape, {\n    size: size,\n    isIndeterminate: isIndeterminate\n  }, /*#__PURE__*/React.createElement(Circle, {\n    stroke: trackColor,\n    strokeWidth: thickness,\n    className: \"chakra-progress__track\"\n  }), /*#__PURE__*/React.createElement(Circle, _extends({\n    stroke: color,\n    strokeWidth: thickness,\n    className: \"chakra-progress__indicator\",\n    strokeLinecap: capIsRound ? \"round\" : undefined\n    /**\n     * fix issue in Safari where indictor still shows when value is 0\n     * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n     */,\n\n    opacity: progress.value === 0 && !isIndeterminate ? 0 : undefined\n  }, indicatorProps))), children);\n};\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\";\n}\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\n\nexport var CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\"\n  }\n});\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\";\n}","map":{"version":3,"names":["chakra","isUndefined","__DEV__","React","getProgressProps","rotate","spin","Circle","props","createElement","circle","_extends","cx","cy","r","fill","displayName","Shape","size","isIndeterminate","rest","_objectWithoutPropertiesLoose","svg","viewBox","__css","width","height","animation","undefined","CircularProgress","_progress$percent","_props$size","_props$max","max","_props$min","min","valueText","getValueText","value","capIsRound","children","_props$thickness","thickness","_props$color","color","_props$trackColor","trackColor","progress","determinant","percent","strokeDasharray","indicatorProps","css","strokeDashoffset","transitionProperty","transitionDuration","transitionTimingFunction","rootStyles","display","position","verticalAlign","fontSize","div","className","bind","stroke","strokeWidth","strokeLinecap","opacity","CircularProgressLabel","baseStyle","top","left","textAlign","transform"],"sources":["../../src/circular-progress.tsx"],"sourcesContent":["import { chakra, SystemStyleObject, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { isUndefined, StringOrNumber, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { getProgressProps, rotate, spin } from \"./progress.utils\"\n\ninterface CircleProps extends HTMLChakraProps<\"circle\"> {}\n\nconst Circle: React.FC<CircleProps> = (props) => (\n  <chakra.circle cx={50} cy={50} r={42} fill=\"transparent\" {...props} />\n)\n\nif (__DEV__) {\n  Circle.displayName = \"Circle\"\n}\n\ninterface ShapeProps extends HTMLChakraProps<\"svg\"> {\n  size?: StringOrNumber\n  isIndeterminate?: boolean\n}\n\nconst Shape: React.FC<ShapeProps> = (props) => {\n  const { size, isIndeterminate, ...rest } = props\n  return (\n    <chakra.svg\n      viewBox=\"0 0 100 100\"\n      __css={{\n        width: size,\n        height: size,\n        animation: isIndeterminate ? `${rotate} 2s linear infinite` : undefined,\n      }}\n      {...rest}\n    />\n  )\n}\n\nif (__DEV__) {\n  Shape.displayName = \"Shape\"\n}\n\ninterface CircularProgressOptions {\n  /**\n   * The size of the circular progress in CSS units\n   */\n  size?: StringOrNumber\n  /**\n   * Maximum value defining 100% progress made (must be higher than 'min')\n   */\n  max?: number\n  /**\n   * Minimum value defining 'no progress' (must be lower than 'max')\n   */\n  min?: number\n  /**\n   * This defines the stroke width of the svg circle.\n   */\n  thickness?: StringOrNumber\n  /**\n   * Current progress (must be between min/max)\n   */\n  value?: number\n  /**\n   * If `true`, the cap of the progress indicator will be rounded.\n   */\n  capIsRound?: boolean\n  /**\n   * The content of the circular progress bar. If passed, the content will be inside and centered in the progress bar.\n   */\n  children?: React.ReactNode\n  /**\n   * The color name of the progress track. Use a color key in the theme object\n   */\n  trackColor?: string\n  /**\n   * The color of the progress indicator. Use a color key in the theme object\n   */\n  color?: string\n  /**\n   * The desired valueText to use in place of the value\n   */\n  valueText?: string\n  /**\n   * A function that returns the desired valueText to use in place of the value\n   */\n  getValueText?(value: number, percent: number): string\n  /**\n   * If `true`, the progress will be indeterminate and the `value`\n   * prop will be ignored\n   */\n  isIndeterminate?: boolean\n}\n\nexport interface CircularProgressProps\n  extends Omit<HTMLChakraProps<\"div\">, \"color\">,\n    CircularProgressOptions {}\n\n/**\n * CircularProgress is used to indicate the progress of an activity.\n * It is built using `svg` and `circle` components with support for\n * theming and `indeterminate` state\n *\n * @see Docs https://chakra-ui.com/circularprogress\n * @todo add theming support for circular progress\n */\nexport const CircularProgress: React.FC<CircularProgressProps> = (props) => {\n  const {\n    size = \"48px\",\n    max = 100,\n    min = 0,\n    valueText,\n    getValueText,\n    value,\n    capIsRound,\n    children,\n    thickness = \"10px\",\n    color = \"#0078d4\",\n    trackColor = \"#edebe9\",\n    isIndeterminate,\n    ...rest\n  } = props\n\n  const progress = getProgressProps({\n    min,\n    max,\n    value,\n    valueText,\n    getValueText,\n    isIndeterminate,\n  })\n\n  const determinant = isIndeterminate\n    ? undefined\n    : (progress.percent ?? 0) * 2.64\n\n  const strokeDasharray = isUndefined(determinant)\n    ? undefined\n    : `${determinant} ${264 - determinant}`\n\n  const indicatorProps = isIndeterminate\n    ? {\n        css: { animation: `${spin} 1.5s linear infinite` },\n      }\n    : {\n        strokeDashoffset: 66,\n        strokeDasharray,\n        transitionProperty: \"stroke-dasharray, stroke\",\n        transitionDuration: \"0.6s\",\n        transitionTimingFunction: \"ease\",\n      }\n\n  const rootStyles: SystemStyleObject = {\n    display: \"inline-block\",\n    position: \"relative\",\n    verticalAlign: \"middle\",\n    fontSize: size,\n  }\n\n  return (\n    <chakra.div\n      className=\"chakra-progress\"\n      {...progress.bind}\n      {...rest}\n      __css={rootStyles}\n    >\n      <Shape size={size} isIndeterminate={isIndeterminate}>\n        <Circle\n          stroke={trackColor}\n          strokeWidth={thickness}\n          className=\"chakra-progress__track\"\n        />\n        <Circle\n          stroke={color}\n          strokeWidth={thickness}\n          className=\"chakra-progress__indicator\"\n          strokeLinecap={capIsRound ? \"round\" : undefined}\n          /**\n           * fix issue in Safari where indictor still shows when value is 0\n           * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3754\n           */\n          opacity={progress.value === 0 && !isIndeterminate ? 0 : undefined}\n          {...indicatorProps}\n        />\n      </Shape>\n      {children}\n    </chakra.div>\n  )\n}\n\nif (__DEV__) {\n  CircularProgress.displayName = \"CircularProgress\"\n}\n\n/**\n * CircularProgress component label. In most cases it is a numeric indicator\n * of the circular progress component's value\n */\nexport const CircularProgressLabel = chakra(\"div\", {\n  baseStyle: {\n    fontSize: \"0.24em\",\n    top: \"50%\",\n    left: \"50%\",\n    width: \"100%\",\n    textAlign: \"center\",\n    position: \"absolute\",\n    transform: \"translate(-50%, -50%)\",\n  },\n})\n\nif (__DEV__) {\n  CircularProgressLabel.displayName = \"CircularProgressLabel\"\n}\n\nexport interface CircularProgressLabelProps extends HTMLChakraProps<\"div\"> {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
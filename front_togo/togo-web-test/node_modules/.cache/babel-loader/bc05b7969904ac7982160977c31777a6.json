{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport './OrdersTabularView.css';\nimport translate from \"../../i18n/translate\";\nimport { Link } from \"react-router-dom\";\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\nimport { Badge, ToggleButton } from \"react-bootstrap\";\nexport var PackageTypes = {\n  \"1\": \"FOOD\",\n  \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\n  \"3\": \"MEDIUM_PACKAGE\",\n  \"4\": \"LARGE_PACKAGE\"\n};\nexport var DeliveryTypes = {\n  \"1\": \"DELIVERY\",\n  \"2\": \"COD\",\n  \"3\": \"PICKUP\",\n  \"4\": \"PAP\"\n};\nexport var deliverFormatter = function deliverFormatter(data) {\n  if (DeliveryTypes[parseInt(data.DeliveryWays)]) {\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)]);\n  }\n\n  return \"\";\n};\nexport var packageFormatter = function packageFormatter(data) {\n  if (PackageTypes[parseInt(data.PackageType)]) {\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)]);\n  }\n\n  return \"\";\n};\n/* edited (deliverFormatter added) */\n\nexport var deliverFormatterTransporter = function deliverFormatterTransporter(data) {\n  if (DeliveryTypes[parseInt(data.deliveryWay)]) {\n    // edited (old => data.DeliveryWays)\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)]);\n  }\n\n  return \"\";\n};\n/* edited (packageFormatter added) */\n\nexport var packageFormatterTransporter = function packageFormatterTransporter(data) {\n  if (PackageTypes[parseInt(data.TypeLoad)]) {\n    // edited (old => data.PackageType)\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)]);\n  }\n\n  return \"\";\n};\n/* edited (timeFormatter added) */\n\nexport var timeFormatter = function timeFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[1];\n  }\n\n  return \"\";\n};\n/* edited (dateFormatter added) */\n\nexport var dateFormatter = function dateFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[0];\n  }\n\n  return \"\";\n};\n/* edited (bidsCountFormat added) */\n\nexport var bidsCountFormat = function bidsCountFormat(data) {\n  if (data.bidsCount) {\n    if (data.bidsCount !== \"0\") {\n      return data.bidsCount;\n    }\n\n    return \"--\";\n  }\n\n  return \"\";\n};\n/* edited (sourceAddressFormatter added) */\n\nexport var sourceAddressFormatter = function sourceAddressFormatter(data) {\n  return data.fromAddress + \", \" + data.fromCityName;\n};\n/* edited (desAddressFormatter added) */\n\nexport var desAddressFormatter = function desAddressFormatter(data) {\n  return data.toAddress + \", \" + data.toCityName;\n};\n/* edited (transporterStatusFormattter added) */\n\nexport var statusFormat = function statusFormat(data) {\n  // console.log(data)\n  if (data.IsStuckOrder == 1 && data.IsReturnedOrder == 0) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 16\n      }\n    }, \"Order Stuck\");\n  }\n\n  if (data.IsReturnedOrder == 1) {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }\n    }, \"Order Returned\");\n  }\n\n  if (data.order_status == \"Deleted\") {\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"danger\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 16\n      }\n    }, data.order_status);\n  }\n\n  return /*#__PURE__*/React.createElement(Badge, {\n    bg: \"primary\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 12\n    }\n  }, data.order_status);\n};\nexport var clientOrderStatusFotmatter = function clientOrderStatusFotmatter(data) {\n  if (data.bidsCount) {\n    if (data.bidsCount == 0) {\n      return /*#__PURE__*/React.createElement(Badge, {\n        bg: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 20\n        }\n      }, \"Waiting for bid\");\n    } else if (data.bidsCount == 1) {\n      return /*#__PURE__*/React.createElement(Badge, {\n        bg: \"primary\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 20\n        }\n      }, \"1 Bid\");\n    }\n\n    return /*#__PURE__*/React.createElement(Badge, {\n      bg: \"primary\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 16\n      }\n    }, data.bidsCount + \" Bids\");\n  }\n\n  return statusFormat(data);\n};\nexport var OrdersTabularView = function OrdersTabularView(_ref) {\n  var socket = _ref.socket,\n      orders = _ref.orders,\n      currentPage = _ref.currentPage,\n      update = _ref.update,\n      assignOrders = _ref.assignOrders;\n\n  var _useState = useState(\"-\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      bidPrice = _useState2[0],\n      setBidPrice = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      columns = _useState4[0],\n      setColumns = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      assignedOrders = _useState6[0],\n      setAssignedOrders = _useState6[1];\n\n  var showDetailsButton = useCallback(function (orderId) {\n    return /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/account/Order/\".concat(orderId),\n        state: {\n          currentPage: currentPage\n        }\n      },\n      style: {\n        paddingRight: \"20%\",\n        paddingLeft: \"20%\",\n        border: \"none\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      className: \"btn btn-primary btn-rounded btn-grad\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }\n    }, translate(\"ORDERS.SHOW\"));\n  }, [currentPage]);\n\n  var addToAssign = function addToAssign(isChecked, orderId) {\n    var tempId = parseInt(orderId);\n\n    if (isChecked) {\n      assignedOrders.push(tempId);\n    } else {\n      var idIndex = assignedOrders.findIndex(function (id) {\n        return id === tempId;\n      });\n      assignedOrders.splice(idIndex, 1);\n      assignOrders(assignedOrders);\n    }\n  };\n\n  useEffect(function () {\n    var newColumns = [];\n    /* differ between transporter and client columns */\n\n    if (isTransporter()) {\n      // transporter columns\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"id\"\n      }, {\n        label: translate(\"ORDERS.DELIVERY_TYPE\"),\n        key: \"deliveryWay\",\n        format: deliverFormatterTransporter\n      }, {\n        label: translate(\"ORDERS.PACKAGE_TYPE\"),\n        key: \"TypeLoad\",\n        format: packageFormatterTransporter\n      }, {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateLoad\",\n        format: dateFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_TIME\"),\n        key: \"DateLoad\",\n        format: timeFormatter\n      }, {\n        label: translate(\"ORDERS.FROM_CITY\"),\n        key: \"fromAddress\",\n        format: sourceAddressFormatter\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"toAddress\",\n        format: desAddressFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"order_status\",\n        format: statusFormat\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"id\",\n        format: function format(_ref2) {\n          var id = _ref2.id;\n          return showDetailsButton(id);\n        }\n      }];\n      /* check to assign */\n\n      if (currentPage === \"current-orders\") {\n        newColumns.splice(0, 0, {\n          label: translate(\"ORDERS.ASSIGN\"),\n          key: \"assign\",\n          format: function format(_ref3) {\n            var id = _ref3.id,\n                AssignerId = _ref3.AssignerId,\n                isAssigned = _ref3.isAssigned;\n            return /*#__PURE__*/React.createElement(React.Fragment, null, AssignerId === localStorage.getItem(\"userId\") && isAssigned == 0 || AssignerId !== localStorage.getItem(\"userId\") && isAssigned == 2 ? /*#__PURE__*/React.createElement(\"input\", {\n              className: \"form-check-input\",\n              style: {\n                cursor: \"pointer\"\n              },\n              type: \"checkbox\",\n              value: id,\n              id: \"flexCheckDefault\",\n              onClick: function onClick(event) {\n                addToAssign(event.target.checked, event.target.value);\n              },\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 29\n              }\n            }) : /*#__PURE__*/React.createElement(\"input\", {\n              className: \"form-check-input\",\n              disabled: true,\n              __self: _this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 227,\n                columnNumber: 29\n              }\n            }));\n          }\n        });\n      }\n    } else {\n      // client columns\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"idOrder\"\n      },\n      /* {\r\n          label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n          key: \"DeliveryWays\",\r\n          format: deliverFormatter\r\n      }, */\n\n      /* {\r\n          label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n          key: \"PackageType\",\r\n          format: packageFormatter\r\n      }, */\n      {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateOrder\"\n      }, {\n        label: translate(\"ORDERS.COD\"),\n        key: \"CostLoad\"\n      },\n      /* {\r\n          label: translate(\"ORDERS.ORDER_TIME\"),\r\n          key: \"TimeOrder\"\r\n      }, */\n\n      /* {\r\n          label: translate(\"ORDERS.FROM_CITY\"),\r\n          key: \"FromAddress\"\r\n      }, */\n      {\n        label: translate(\"ORDERS.CLIENT_NAME\"),\n        key: \"clientName\"\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"ToAddress\"\n      }, {\n        label: translate(\"ORDERS.RECEIVER_NAME\"),\n        key: \"receiverName\"\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"order_status\",\n        format: clientOrderStatusFotmatter\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"idOrder\",\n        format: function format(_ref4) {\n          var idOrder = _ref4.idOrder;\n          return showDetailsButton(idOrder);\n        }\n      }];\n    }\n    /* edited (comment bidPrice) */\n\n    /*if (isTransporter()) {\r\n        newColumns.splice(3, 0, {\r\n            label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n            key: \"bidPrice\",\r\n            format: ({idOrder}) => <p>{bidPrice}</p>\r\n        });\r\n    }*/\n\n\n    if (!isTransporter() && currentPage === \"all-orders\") {\n      newColumns.push({\n        label: \"\",\n        key: \"\",\n        format: function format(_ref5) {\n          var idOrder = _ref5.idOrder;\n          return /*#__PURE__*/React.createElement(CancelOrder, {\n            className: \"w-100\",\n            socket: socket,\n            orderId: idOrder,\n            onSuccess: update,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 302,\n              columnNumber: 42\n            }\n          });\n        }\n      });\n    }\n    /* edited (commented) */\n\n    /* if (currentPage === \"current-orders\") {\r\n        //TODO:: key to be changed\r\n          newColumns.splice(3, 0, {\r\n            label: translate(\"ORDERS.PRICE\"),\r\n            key: \"CostLoad\"\r\n        });\r\n        \r\n        if(isTransporterMaster()){\r\n            newColumns.splice(newColumns.length - 1, 0,{\r\n                label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                key: \"AssignedMemberName\",\r\n            });\r\n        }\r\n    } */\n\n    /* else if (currentPage === \"previous-orders\") {\r\n    newColumns.push({\r\n       label: translate(\"ORDERS.ORDER_STATUS\"),\r\n       key: \"idOrder\",\r\n       format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n    })\r\n    } */\n\n\n    setColumns(newColumns);\n  }, [currentPage, showDetailsButton]);\n  return /*#__PURE__*/React.createElement(DynamicTable, {\n    columns: columns,\n    data: orders,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx"],"names":["React","useCallback","useEffect","useState","translate","Link","CancelOrder","DynamicTable","isTransporter","isTransporterMaster","Badge","ToggleButton","PackageTypes","DeliveryTypes","deliverFormatter","data","parseInt","DeliveryWays","packageFormatter","PackageType","deliverFormatterTransporter","deliveryWay","packageFormatterTransporter","TypeLoad","timeFormatter","DateLoad","split","dateFormatter","bidsCountFormat","bidsCount","sourceAddressFormatter","fromAddress","fromCityName","desAddressFormatter","toAddress","toCityName","statusFormat","IsStuckOrder","IsReturnedOrder","order_status","clientOrderStatusFotmatter","OrdersTabularView","socket","orders","currentPage","update","assignOrders","bidPrice","setBidPrice","columns","setColumns","assignedOrders","setAssignedOrders","showDetailsButton","orderId","pathname","state","paddingRight","paddingLeft","border","width","textAlign","addToAssign","isChecked","tempId","push","idIndex","findIndex","id","splice","newColumns","label","key","format","AssignerId","isAssigned","localStorage","getItem","cursor","event","target","checked","value","idOrder"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport './OrdersTabularView.css';\r\nimport translate from \"../../i18n/translate\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\r\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\r\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\r\nimport { Badge, ToggleButton } from \"react-bootstrap\";\r\n\r\nexport const PackageTypes = {\r\n    \"1\": \"FOOD\",\r\n    \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\r\n    \"3\": \"MEDIUM_PACKAGE\",\r\n    \"4\": \"LARGE_PACKAGE\"\r\n};\r\n\r\nexport const DeliveryTypes = {\r\n    \"1\": \"DELIVERY\",\r\n    \"2\": \"COD\",\r\n    \"3\": \"PICKUP\",\r\n    \"4\": \"PAP\"\r\n};\r\n\r\nexport const deliverFormatter = (data) => {\r\n    if (DeliveryTypes[parseInt(data.DeliveryWays)]) {\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const packageFormatter = (data) => {\r\n    if (PackageTypes[parseInt(data.PackageType)]) {\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (deliverFormatter added) */\r\nexport const deliverFormatterTransporter = (data) => {\r\n    if (DeliveryTypes[parseInt(data.deliveryWay)]) { // edited (old => data.DeliveryWays)\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (packageFormatter added) */\r\nexport const packageFormatterTransporter = (data) => {\r\n    if (PackageTypes[parseInt(data.TypeLoad)]) { // edited (old => data.PackageType)\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (timeFormatter added) */\r\nexport const timeFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[1];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (dateFormatter added) */\r\nexport const dateFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[0];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (bidsCountFormat added) */\r\nexport const bidsCountFormat = (data) => {\r\n    if (data.bidsCount) {\r\n        if (data.bidsCount !== \"0\") {\r\n            return data.bidsCount;\r\n        }\r\n\r\n        return \"--\"\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (sourceAddressFormatter added) */\r\nexport const sourceAddressFormatter = (data) => {\r\n\r\n    return data.fromAddress + \", \" + data.fromCityName;\r\n}\r\n\r\n/* edited (desAddressFormatter added) */\r\nexport const desAddressFormatter = (data) => {\r\n\r\n    return data.toAddress + \", \" + data.toCityName;\r\n}\r\n\r\n/* edited (transporterStatusFormattter added) */\r\nexport const statusFormat = (data) => {\r\n    // console.log(data)\r\n    if (data.IsStuckOrder == 1 && data.IsReturnedOrder == 0) {\r\n        return <Badge bg=\"danger\">Order Stuck</Badge>\r\n    }\r\n\r\n    if (data.IsReturnedOrder == 1) {\r\n        return <Badge bg=\"danger\">Order Returned</Badge>\r\n    }\r\n\r\n    if (data.order_status == \"Deleted\") {\r\n        return <Badge bg=\"danger\">{data.order_status}</Badge>\r\n    }\r\n\r\n    return <Badge bg=\"primary\">{data.order_status}</Badge>\r\n}\r\n\r\nexport const clientOrderStatusFotmatter = (data) => {\r\n\r\n    if (data.bidsCount) {\r\n        if (data.bidsCount == 0) {\r\n            return <Badge bg=\"primary\">Waiting for bid</Badge>\r\n        } else if (data.bidsCount == 1) {\r\n            return <Badge bg=\"primary\">{\"1 Bid\"}</Badge>\r\n        }\r\n        return <Badge bg=\"primary\">{data.bidsCount + \" Bids\"}</Badge>\r\n    }\r\n\r\n    return statusFormat(data)\r\n}\r\n\r\nexport const OrdersTabularView = ({ socket, orders, currentPage, update, assignOrders }) => {\r\n\r\n    const [bidPrice, setBidPrice] = useState(\"-\");\r\n\r\n    const [columns, setColumns] = useState([]);\r\n    const [assignedOrders, setAssignedOrders] = useState([]);\r\n\r\n    const showDetailsButton = useCallback((orderId) =>\r\n        <Link\r\n            to={{\r\n                pathname: `/account/Order/${orderId}`,\r\n                state: { currentPage: currentPage },\r\n            }}\r\n            style={{\r\n                paddingRight: \"20%\",\r\n                paddingLeft: \"20%\",\r\n                border: \"none\",\r\n                width: \"100%\",\r\n                textAlign: \"center\",\r\n            }}\r\n            className=\"btn btn-primary btn-rounded btn-grad\"\r\n        >\r\n            {translate(\"ORDERS.SHOW\")}\r\n        </Link>, [currentPage]);\r\n\r\n    const addToAssign = (isChecked, orderId) => {\r\n\r\n        const tempId = parseInt(orderId);\r\n\r\n        if (isChecked) {\r\n            assignedOrders.push(tempId);\r\n        } else {\r\n            const idIndex = assignedOrders.findIndex(id => id === tempId);\r\n            assignedOrders.splice(idIndex, 1);\r\n\r\n            assignOrders(assignedOrders);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        let newColumns = [];\r\n\r\n        /* differ between transporter and client columns */\r\n        if (isTransporter()) { // transporter columns\r\n\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"id\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"deliveryWay\",\r\n                    format: deliverFormatterTransporter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"TypeLoad\",\r\n                    format: packageFormatterTransporter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateLoad\",\r\n                    format: dateFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"DateLoad\",\r\n                    format: timeFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"fromAddress\",\r\n                    format: sourceAddressFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"toAddress\",\r\n                    format: desAddressFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"order_status\",\r\n                    format: statusFormat\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"id\",\r\n                    format: ({ id }) => showDetailsButton(id)\r\n                }\r\n            ];\r\n\r\n            /* check to assign */\r\n            if (currentPage === \"current-orders\") {\r\n                newColumns.splice(0, 0, {\r\n                    label: translate(\"ORDERS.ASSIGN\"),\r\n                    key: \"assign\",\r\n                    format: ({ id, AssignerId, isAssigned }) => {\r\n                        return <>{(AssignerId === localStorage.getItem(\"userId\") && isAssigned == 0) || (AssignerId !== localStorage.getItem(\"userId\") && isAssigned == 2) ?\r\n                            <input className=\"form-check-input\" style={{ cursor: \"pointer\" }} type=\"checkbox\" value={id} id=\"flexCheckDefault\" onClick={(event) => { addToAssign(event.target.checked, event.target.value) }} /> :\r\n                            <input className=\"form-check-input\" disabled />\r\n                        }</>\r\n                    }\r\n                });\r\n            }\r\n        } else { // client columns\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"idOrder\"\r\n                },\r\n                /* {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"DeliveryWays\",\r\n                    format: deliverFormatter\r\n                }, */\r\n                /* {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"PackageType\",\r\n                    format: packageFormatter\r\n                }, */\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.COD\"),\r\n                    key: \"CostLoad\"\r\n                },\r\n                /* {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"TimeOrder\"\r\n                }, */\r\n                /* {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"FromAddress\"\r\n                }, */\r\n                {\r\n                    label: translate(\"ORDERS.CLIENT_NAME\"),\r\n                    key: \"clientName\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"ToAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.RECEIVER_NAME\"),\r\n                    key: \"receiverName\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"order_status\",\r\n                    format: clientOrderStatusFotmatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"idOrder\",\r\n                    format: ({ idOrder }) => showDetailsButton(idOrder)\r\n                }\r\n            ];\r\n        }\r\n\r\n        /* edited (comment bidPrice) */\r\n        /*if (isTransporter()) {\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n                key: \"bidPrice\",\r\n                format: ({idOrder}) => <p>{bidPrice}</p>\r\n            });\r\n        }*/\r\n\r\n        if (!isTransporter() && currentPage === \"all-orders\") {\r\n            newColumns.push({\r\n                label: \"\",\r\n                key: \"\",\r\n                format: ({ idOrder }) => <CancelOrder className=\"w-100\" socket={socket} orderId={idOrder} onSuccess={update} />\r\n            });\r\n        }\r\n\r\n        /* edited (commented) */\r\n        /* if (currentPage === \"current-orders\") {\r\n            //TODO:: key to be changed\r\n\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDERS.PRICE\"),\r\n                key: \"CostLoad\"\r\n            });\r\n            \r\n            if(isTransporterMaster()){\r\n                newColumns.splice(newColumns.length - 1, 0,{\r\n                    label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                    key: \"AssignedMemberName\",\r\n                });\r\n            }\r\n        } */ /* else if (currentPage === \"previous-orders\") {\r\n            newColumns.push({\r\n                label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                key: \"idOrder\",\r\n                format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n            })\r\n        } */\r\n\r\n        setColumns(newColumns);\r\n    }, [currentPage, showDetailsButton]);\r\n\r\n    return <DynamicTable columns={columns} data={orders} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { isCssVar, isObject, isString, mergeWith as merge, runIfFn } from \"@chakra-ui/utils\";\nimport { pseudoSelectors } from \"./pseudos\";\nimport { systemProps as systemPropConfigs } from \"./system\";\nimport { expandResponsive } from \"./utils/expand-responsive\";\nvar isCSSVariableTokenValue = function isCSSVariableTokenValue(key, value) {\n  return key.startsWith(\"--\") && isString(value) && !isCssVar(value);\n};\nvar resolveTokenValue = function resolveTokenValue(theme, value) {\n  var _ref, _getVar2;\n  if (value == null) return value;\n  var getVar = function getVar(val) {\n    var _theme$__cssMap, _theme$__cssMap$val;\n    return (_theme$__cssMap = theme.__cssMap) == null ? void 0 : (_theme$__cssMap$val = _theme$__cssMap[val]) == null ? void 0 : _theme$__cssMap$val.varRef;\n  };\n  var getValue = function getValue(val) {\n    var _getVar;\n    return (_getVar = getVar(val)) != null ? _getVar : val;\n  };\n  var valueSplit = value.split(\",\").map(function (v) {\n    return v.trim();\n  });\n  var _valueSplit = _slicedToArray(valueSplit, 2),\n    tokenValue = _valueSplit[0],\n    fallbackValue = _valueSplit[1];\n  value = (_ref = (_getVar2 = getVar(tokenValue)) != null ? _getVar2 : getValue(fallbackValue)) != null ? _ref : getValue(value);\n  return value;\n};\nexport function getCss(options) {\n  var _options$configs = options.configs,\n    configs = _options$configs === void 0 ? {} : _options$configs,\n    _options$pseudos = options.pseudos,\n    pseudos = _options$pseudos === void 0 ? {} : _options$pseudos,\n    theme = options.theme;\n  var css = function css(stylesOrFn, nested) {\n    if (nested === void 0) {\n      nested = false;\n    }\n    var _styles = runIfFn(stylesOrFn, theme);\n    var styles = expandResponsive(_styles)(theme);\n    var computedStyles = {};\n    for (var key in styles) {\n      var _config$transform, _config, _config2, _config3, _config4;\n      var valueOrFn = styles[key];\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n\n      var value = runIfFn(valueOrFn, theme);\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n\n      if (key in pseudos) {\n        key = pseudos[key];\n      }\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value);\n      }\n      var config = configs[key];\n      if (config === true) {\n        config = {\n          property: key\n        };\n      }\n      if (isObject(value)) {\n        var _computedStyles$key;\n        computedStyles[key] = (_computedStyles$key = computedStyles[key]) != null ? _computedStyles$key : {};\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true));\n        continue;\n      }\n      var rawValue = (_config$transform = (_config = config) == null ? void 0 : _config.transform == null ? void 0 : _config.transform(value, theme, _styles)) != null ? _config$transform : value;\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n\n      rawValue = (_config2 = config) != null && _config2.processResult ? css(rawValue, true) : rawValue;\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n\n      var configProperty = runIfFn((_config3 = config) == null ? void 0 : _config3.property, theme);\n      if (!nested && (_config4 = config) != null && _config4.static) {\n        var staticStyles = runIfFn(config.static, theme);\n        computedStyles = merge({}, computedStyles, staticStyles);\n      }\n      if (configProperty && Array.isArray(configProperty)) {\n        var _iterator = _createForOfIteratorHelper(configProperty),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var property = _step.value;\n            computedStyles[property] = rawValue;\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        continue;\n      }\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue);\n        } else {\n          computedStyles[configProperty] = rawValue;\n        }\n        continue;\n      }\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue);\n        continue;\n      }\n      computedStyles[key] = rawValue;\n    }\n    return computedStyles;\n  };\n  return css;\n}\nexport var css = function css(styles) {\n  return function (theme) {\n    var cssFn = getCss({\n      theme: theme,\n      pseudos: pseudoSelectors,\n      configs: systemPropConfigs\n    });\n    return cssFn(styles);\n  };\n};","map":{"version":3,"names":["isCssVar","isObject","isString","mergeWith","merge","runIfFn","pseudoSelectors","systemProps","systemPropConfigs","expandResponsive","isCSSVariableTokenValue","key","value","startsWith","resolveTokenValue","theme","_ref","_getVar2","getVar","val","_theme$__cssMap","_theme$__cssMap$val","__cssMap","varRef","getValue","_getVar","valueSplit","split","map","v","trim","_valueSplit","_slicedToArray","tokenValue","fallbackValue","getCss","options","_options$configs","configs","_options$pseudos","pseudos","css","stylesOrFn","nested","_styles","styles","computedStyles","_config$transform","_config","_config2","_config3","_config4","valueOrFn","config","property","_computedStyles$key","rawValue","transform","processResult","configProperty","static","staticStyles","Array","isArray","_iterator","_createForOfIteratorHelper","_step","s","n","done","err","e","f","cssFn"],"sources":["../../src/css.ts"],"sourcesContent":["import {\n  Dict,\n  isCssVar,\n  isObject,\n  isString,\n  mergeWith as merge,\n  runIfFn,\n} from \"@chakra-ui/utils\"\nimport * as CSS from \"csstype\"\nimport { pseudoSelectors } from \"./pseudos\"\nimport { systemProps as systemPropConfigs } from \"./system\"\nimport { StyleObjectOrFn } from \"./system.types\"\nimport { expandResponsive } from \"./utils/expand-responsive\"\nimport { Config, PropConfig } from \"./utils/prop-config\"\nimport { CssTheme } from \"./utils/types\"\n\nconst isCSSVariableTokenValue = (key: string, value: any): value is string =>\n  key.startsWith(\"--\") && isString(value) && !isCssVar(value)\n\nconst resolveTokenValue = (theme: Dict, value: string) => {\n  if (value == null) return value\n\n  const getVar = (val: string) => theme.__cssMap?.[val]?.varRef\n  const getValue = (val: string) => getVar(val) ?? val\n\n  const valueSplit = value.split(\",\").map((v) => v.trim())\n  const [tokenValue, fallbackValue] = valueSplit\n  value = getVar(tokenValue) ?? getValue(fallbackValue) ?? getValue(value)\n\n  return value\n}\n\ninterface GetCSSOptions {\n  theme: CssTheme\n  configs?: Config\n  pseudos?: Record<string, CSS.Pseudos | (string & {})>\n}\n\nexport function getCss(options: GetCSSOptions) {\n  const { configs = {}, pseudos = {}, theme } = options\n\n  const css = (stylesOrFn: Dict, nested = false) => {\n    const _styles = runIfFn(stylesOrFn, theme)\n    const styles = expandResponsive(_styles)(theme)\n\n    let computedStyles: Dict = {}\n\n    for (let key in styles) {\n      const valueOrFn = styles[key]\n\n      /**\n       * allows the user to pass functional values\n       * boxShadow: theme => `0 2px 2px ${theme.colors.red}`\n       */\n      let value = runIfFn(valueOrFn, theme)\n\n      /**\n       * converts pseudo shorthands to valid selector\n       * \"_hover\" => \"&:hover\"\n       */\n      if (key in pseudos) {\n        key = pseudos[key]\n      }\n\n      /**\n       * allows the user to use theme tokens in css vars\n       * { --banner-height: \"sizes.md\" } => { --banner-height: \"var(--chakra-sizes-md)\" }\n       *\n       * You can also provide fallback values\n       * { --banner-height: \"sizes.no-exist, 40px\" } => { --banner-height: \"40px\" }\n       */\n      if (isCSSVariableTokenValue(key, value)) {\n        value = resolveTokenValue(theme, value)\n      }\n\n      let config = configs[key]\n\n      if (config === true) {\n        config = { property: key } as PropConfig\n      }\n\n      if (isObject(value)) {\n        computedStyles[key] = computedStyles[key] ?? {}\n        computedStyles[key] = merge({}, computedStyles[key], css(value, true))\n        continue\n      }\n\n      let rawValue = config?.transform?.(value, theme, _styles) ?? value\n\n      /**\n       * Used for `layerStyle`, `textStyle` and `apply`. After getting the\n       * styles in the theme, we need to process them since they might\n       * contain theme tokens.\n       *\n       * `processResult` is the config property we pass to `layerStyle`, `textStyle` and `apply`\n       */\n      rawValue = config?.processResult ? css(rawValue, true) : rawValue\n\n      /**\n       * allows us define css properties for RTL and LTR.\n       *\n       * const marginStart = {\n       *   property: theme => theme.direction === \"rtl\" ? \"marginRight\": \"marginLeft\",\n       * }\n       */\n      const configProperty = runIfFn(config?.property, theme)\n\n      if (!nested && config?.static) {\n        const staticStyles = runIfFn(config.static, theme)\n        computedStyles = merge({}, computedStyles, staticStyles)\n      }\n\n      if (configProperty && Array.isArray(configProperty)) {\n        for (const property of configProperty) {\n          computedStyles[property] = rawValue\n        }\n        continue\n      }\n\n      if (configProperty) {\n        if (configProperty === \"&\" && isObject(rawValue)) {\n          computedStyles = merge({}, computedStyles, rawValue)\n        } else {\n          computedStyles[configProperty as string] = rawValue\n        }\n        continue\n      }\n\n      if (isObject(rawValue)) {\n        computedStyles = merge({}, computedStyles, rawValue)\n        continue\n      }\n\n      computedStyles[key] = rawValue\n    }\n\n    return computedStyles\n  }\n\n  return css\n}\n\nexport const css = (styles: StyleObjectOrFn) => (theme: any) => {\n  const cssFn = getCss({\n    theme,\n    pseudos: pseudoSelectors,\n    configs: systemPropConfigs,\n  })\n  return cssFn(styles)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
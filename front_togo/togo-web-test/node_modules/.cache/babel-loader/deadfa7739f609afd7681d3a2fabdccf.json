{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\";\n\n/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\n\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\nimport React, { useRef, useState } from 'react';\nimport ImageUploading from 'react-images-uploading';\nimport AvatarEditor from 'react-avatar-editor';\nimport { Modal, Button } from 'react-bootstrap';\nexport default function App() {\n  var _this = this;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      images = _React$useState2[0],\n      setImages = _React$useState2[1];\n\n  var maxNumber = 1;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  var editor = useRef(null);\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  var onChange = function onChange(image) {\n    // data for submit\n    // console.log(imageList, addUpdateIndex);\n    setImages(image);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }, \"Launch demo modal\"), /*#__PURE__*/React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 21\n    }\n  }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ImageUploading, {\n    multiple: true,\n    value: images,\n    onChange: onChange,\n    maxNumber: maxNumber,\n    dataURLKey: \"data_url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 21\n    }\n  }, function (_ref) {\n    var imageList = _ref.imageList,\n        onImageUpload = _ref.onImageUpload,\n        onImageUpdate = _ref.onImageUpdate,\n        onImageRemove = _ref.onImageRemove,\n        isDragging = _ref.isDragging,\n        dragProps = _ref.dragProps;\n    return (\n      /*#__PURE__*/\n      // write your building UI\n      React.createElement(\"div\", {\n        className: \"upload__image-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 29\n        }\n      }, images.length == 0 && /*#__PURE__*/React.createElement(Button, Object.assign({\n        className: \"w-100\",\n        style: {\n          height: \"300px\"\n        },\n        variant: isDragging ? \"secondary\" : \"outline-secondary\" // style={isDragging ? { color: 'lightgray' } : undefined}\n        ,\n        onClick: onImageUpload\n      }, dragProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 56\n        }\n      }), \"Click or Drop here \", /*#__PURE__*/React.createElement(\"i\", {\n        className: \"bi bi-card-image ms-2\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 56\n        }\n      })), imageList.map(function (image, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          className: \"image-item\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          className: \"image-item__btn-wrapper w-100 d-flex justify-content-center mb-2\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          variant: \"outline-primary\",\n          className: \"w-25 me-1 rounded-pill\",\n          onClick: function onClick() {\n            return onImageUpdate(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 45\n          }\n        }, \"Update\"), /*#__PURE__*/React.createElement(Button, {\n          variant: \"outline-danger\",\n          className: \"w-25 rounded-pill\",\n          onClick: function onClick() {\n            return onImageRemove(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 45\n          }\n        }, \"Remove\")), /*#__PURE__*/React.createElement(\"div\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(AvatarEditor, {\n          ref: editor,\n          image: image['data_url'],\n          width: 250,\n          height: 250,\n          border: 50,\n          scale: 1.2,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 45\n          }\n        })));\n      }))\n    );\n  })), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-secondary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 21\n    }\n  }, \"Cancel \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-x\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 32\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-success\",\n    onClick: function onClick() {\n      handleClose();\n\n      if (editor) {\n        // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n        // drawn on another canvas, or added to the DOM.\n        var canvas = editor.current.getImage();\n        console.log(canvas);\n        console.log(\"------------------------\"); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n        var canvasScaled = editor.current.getImageScaledToCanvas();\n        console.log(canvasScaled);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 21\n    }\n  }, \"Save \", /*#__PURE__*/React.createElement(\"i\", {\n    className: \"bi bi-check-all\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 30\n    }\n  })))));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","useRef","useState","ImageUploading","AvatarEditor","Modal","Button","App","images","setImages","maxNumber","show","setShow","editor","handleClose","handleShow","onChange","image","imageList","onImageUpload","onImageUpdate","onImageRemove","isDragging","dragProps","length","height","map","index","canvas","current","getImage","console","log","canvasScaled","getImageScaledToCanvas"],"mappings":"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","sourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\nimport React, { useRef, useState } from 'react';\r\nimport ImageUploading from 'react-images-uploading';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default function App() {\r\n    const [images, setImages] = React.useState([]);\r\n    const maxNumber = 1;\r\n    const [show, setShow] = useState(false);\r\n    const editor = useRef(null);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const onChange = (image) => {\r\n        // data for submit\r\n        // console.log(imageList, addUpdateIndex);\r\n        setImages(image);\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={images}\r\n                        onChange={onChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            // onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            // write your building UI\r\n                            <div className=\"upload__image-wrapper\">\r\n                                {images.length == 0 && <Button\r\n                                    className='w-100'\r\n                                    style={{ height: \"300px\" }}\r\n                                    variant={isDragging ? \"secondary\" : \"outline-secondary\"}\r\n                                    // style={isDragging ? { color: 'lightgray' } : undefined}\r\n                                    onClick={onImageUpload}\r\n                                    {...dragProps}\r\n                                >\r\n                                    Click or Drop here <i className=\"bi bi-card-image ms-2\"></i>\r\n                                </Button>}\r\n                                {/* <button onClick={onImageRemoveAll}>Remove all images</button> */}\r\n                                {imageList.map((image, index) => (\r\n                                    <div key={index} className=\"image-item\">\r\n                                        {/* <img src={image['data_url']} alt=\"\" width=\"100\" />\r\n                                <div className=\"image-item__btn-wrapper\">\r\n                                    <button onClick={() => onImageUpdate(index)}>Update</button>\r\n                                    <button onClick={() => onImageRemove(index)}>Remove</button>\r\n                                </div> */}\r\n                                        <div className=\"image-item__btn-wrapper w-100 d-flex justify-content-center mb-2\">\r\n                                            <Button variant=\"outline-primary\" className='w-25 me-1 rounded-pill' onClick={() => onImageUpdate(index)}>Update</Button>\r\n                                            <Button variant=\"outline-danger\" className='w-25 rounded-pill' onClick={() => onImageRemove(index)}>Remove</Button>\r\n                                        </div>\r\n                                        <div>\r\n                                            <AvatarEditor\r\n                                                ref={editor}\r\n                                                image={image['data_url']}\r\n                                                width={250}\r\n                                                height={250}\r\n                                                border={50}\r\n                                                scale={1.2}\r\n                                            />\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </ImageUploading>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"outline-secondary\" onClick={handleClose}>\r\n                        Cancel <i className=\"bi bi-x\"></i>\r\n                    </Button>\r\n                    <Button variant=\"outline-success\" onClick={() => {\r\n                        handleClose();\r\n                        if (editor) {\r\n                            // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                            // drawn on another canvas, or added to the DOM.\r\n                            const canvas = editor.current.getImage()\r\n                            console.log(canvas)\r\n\r\n                            console.log(\"------------------------\")\r\n\r\n                            // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                            const canvasScaled = editor.current.getImageScaledToCanvas()\r\n                            console.log(canvasScaled)\r\n                        }\r\n                    }}>\r\n                        Save <i className=\"bi bi-check-all\"></i>\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}
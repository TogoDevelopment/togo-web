{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/SubmitAndAssignDialog.jsx\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { Button, Dropdown, Form, Modal, Spinner, Table } from \"react-bootstrap\";\nimport translate from \"../i18n/translate\";\nimport { GetAllClientNetworkMembers, CreateAssignedOrder } from \"../APIs/OrdersAPIs\";\nimport MyNetworkDropDown from \"./MyNetworkDropDown\";\nimport { useDispatch } from \"react-redux\";\nimport { toastNotification } from \"../Actions/GeneralActions\";\nexport default function SubmitAndAssignDialog(props) {\n  var _this = this;\n\n  var dispatch = useDispatch();\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      open = _useState2[0],\n      setOpen = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      myNetwork = _useState6[0],\n      setMyNetwork = _useState6[1];\n\n  var _useState7 = useState(''),\n      _useState8 = _slicedToArray(_useState7, 2),\n      networkInputValue = _useState8[0],\n      setNetworkInputValue = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      selectedMember = _useState10[0],\n      setSelectedMember = _useState10[1];\n\n  var _useState11 = useState(false),\n      _useState12 = _slicedToArray(_useState11, 2),\n      beginValidation = _useState12[0],\n      setBeginValidation = _useState12[1];\n\n  var _useState13 = useState(false),\n      _useState14 = _slicedToArray(_useState13, 2),\n      deliveryCostAssignedCheck = _useState14[0],\n      setDeliveryCostAssignedCheckShow = _useState14[1];\n\n  var _useState15 = useState(false),\n      _useState16 = _slicedToArray(_useState15, 2),\n      selectedMemberCheck = _useState16[0],\n      setSelectedMemberCheckShow = _useState16[1];\n\n  var _useState17 = useState(false),\n      _useState18 = _slicedToArray(_useState17, 2),\n      loadingSubmit2 = _useState18[0],\n      setLadingSubmit2 = _useState18[1];\n\n  var assignedDeliveryCostRef = useRef();\n  useEffect(function () {\n    // console.log(props.assignAddressClint.IdCity + \" -> \" + props.assignAddressClint.IdCityDes);\n    var timer = setTimeout(function () {\n      if (open) {\n        setLoading(true);\n        GetAllClientNetworkMembers(props.assignAddressClint.IdCity, props.assignAddressClint.IdCityDes).then(function (res) {\n          setLoading(false);\n          setMyNetwork(res.data.membersData.filter(function (member) {\n            return member.FullName.toLowerCase().replaceAll(\"أ\", 'ا').replaceAll(\"إ\", 'ا').includes(networkInputValue.toLowerCase()) || member.PhoneNumber.includes(networkInputValue);\n          }));\n        });\n      }\n    }, 500);\n    return function () {\n      return clearTimeout(timer);\n    };\n  }, [networkInputValue, open]);\n\n  function showValidation() {\n    if (selectedMember) {\n      setSelectedMemberCheckShow(false);\n    } else {\n      setSelectedMemberCheckShow(true);\n    }\n\n    if (assignedDeliveryCostRef\n    /*  && assignedDeliveryCostRef.current.value > 0 */\n    ) {\n      setDeliveryCostAssignedCheckShow(false);\n    } else {\n      setDeliveryCostAssignedCheckShow(true);\n    }\n  }\n\n  function hideValidation() {\n    setBeginValidation(false);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Modal, {\n    size: \"md\",\n    show: open,\n    onHide: function onHide() {\n      setOpen(false);\n      props.setCloseAssignDialog();\n    },\n    centered: true,\n    animation: true,\n    backdrop: \"static\",\n    style: {\n      backgroundColor: \"rgba(0,0,0,0.5)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }\n  }, translate(\"ORDERS.CHOOSE_TRANS\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    style: {\n      width: \"40%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 33\n    }\n  }, \"Name\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    style: {\n      width: \"40%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 33\n    }\n  }, \"Phone Number\"), /*#__PURE__*/React.createElement(\"th\", {\n    scope: \"col\",\n    style: {\n      width: \"20%\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 33\n    }\n  }, \"Price\"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 25\n    }\n  }, myNetwork === null || myNetwork === void 0 ? void 0 : myNetwork.map(function (member, index) {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 44\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 41\n      }\n    }, member.FullName), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 41\n      }\n    }, member.PhoneNumber), /*#__PURE__*/React.createElement(\"td\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 41\n      }\n    }, member.deliveryPrice + \" NIS\"));\n  })))), /*#__PURE__*/React.createElement(Modal.Footer, {\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: function onClick() {\n      setBeginValidation(true);\n\n      if (selectedMember\n      /*  && assignedDeliveryCostRef && assignedDeliveryCostRef.current.value > 0 */\n      ) {\n        hideValidation();\n        setLadingSubmit2(true);\n        /* console.log(\"assignDeliveryParams\");\r\n        console.log(props.assignDeliveryParams);\r\n        console.log(\"----------------------\");\r\n        console.log(\"assignAddressClint\");\r\n        console.log(props.assignAddressClint);\r\n        console.log(\"----------------------\");\r\n        console.log(\"CustomerId\");\r\n        console.log(selectedMember.CustomerId);\r\n        console.log(\"----------------------\");\r\n        console.log(\"assignedDeliveryCostRef\");\r\n        console.log(assignedDeliveryCostRef.current.value);\r\n        console.log(\"----------------------\"); */\n\n        CreateAssignedOrder(JSON.stringify(props.assignDeliveryParams), JSON.stringify(props.assignAddressClint), selectedMember.CustomerId,\n        /* assignedDeliveryCostRef.current.value */\n        selectedMember.deliveryPrice).then(function (res) {\n          if (res.data == \"NoClientBalance\" || res.data == \"NoTransporterBalance\" || res.data == \"ErrorInAddress\" || res.data == \"NotInserted\" || res.data == \"NotAccepted\" || res.data == \"Blocked\" || res.data == \"TokenError\") {\n            dispatch(toastNotification(\"Error!\", res.data, \"error\"));\n          } else {\n            props.onSuccess();\n            props.setCloseMainDialog();\n            setLadingSubmit2(false);\n            props.setCloseAssignDialog(false);\n            setOpen(false);\n          }\n        });\n      } else {\n        showValidation();\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, loadingSubmit2 && /*#__PURE__*/React.createElement(Spinner, {\n    animation: \"border\",\n    size: \"sm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 44\n    }\n  }), translate(\"ORDERS.SUBMIT\")), /*#__PURE__*/React.createElement(Button, {\n    variant: \"danger\",\n    onClick: function onClick() {\n      props.setCloseAssignDialog();\n      setOpen(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, translate(\"GENERAL.CANCEL\")))));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/SubmitAndAssignDialog.jsx"],"names":["React","useEffect","useState","useRef","Button","Dropdown","Form","Modal","Spinner","Table","translate","GetAllClientNetworkMembers","CreateAssignedOrder","MyNetworkDropDown","useDispatch","toastNotification","SubmitAndAssignDialog","props","dispatch","open","setOpen","loading","setLoading","myNetwork","setMyNetwork","networkInputValue","setNetworkInputValue","selectedMember","setSelectedMember","beginValidation","setBeginValidation","deliveryCostAssignedCheck","setDeliveryCostAssignedCheckShow","selectedMemberCheck","setSelectedMemberCheckShow","loadingSubmit2","setLadingSubmit2","assignedDeliveryCostRef","timer","setTimeout","assignAddressClint","IdCity","IdCityDes","then","res","data","membersData","filter","member","FullName","toLowerCase","replaceAll","includes","PhoneNumber","clearTimeout","showValidation","hideValidation","setCloseAssignDialog","backgroundColor","width","map","index","deliveryPrice","JSON","stringify","assignDeliveryParams","CustomerId","onSuccess","setCloseMainDialog"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Dropdown, Form, Modal, Spinner, Table } from \"react-bootstrap\";\r\nimport translate from \"../i18n/translate\";\r\nimport { GetAllClientNetworkMembers, CreateAssignedOrder } from \"../APIs/OrdersAPIs\";\r\nimport MyNetworkDropDown from \"./MyNetworkDropDown\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toastNotification } from \"../Actions/GeneralActions\";\r\n\r\nexport default function SubmitAndAssignDialog(props) {\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const [open, setOpen] = useState(true);\r\n    const [loading, setLoading] = useState(false);\r\n    const [myNetwork, setMyNetwork] = useState([]);\r\n    const [networkInputValue, setNetworkInputValue] = useState('');\r\n    const [selectedMember, setSelectedMember] = useState(\"\");\r\n    const [beginValidation, setBeginValidation] = useState(false);\r\n    const [deliveryCostAssignedCheck, setDeliveryCostAssignedCheckShow] = useState(false);\r\n    const [selectedMemberCheck, setSelectedMemberCheckShow] = useState(false);\r\n    const [loadingSubmit2, setLadingSubmit2] = useState(false);\r\n\r\n    const assignedDeliveryCostRef = useRef();\r\n\r\n    useEffect(() => {\r\n\r\n        // console.log(props.assignAddressClint.IdCity + \" -> \" + props.assignAddressClint.IdCityDes);\r\n\r\n        const timer = setTimeout(() => {\r\n            if (open) {\r\n                setLoading(true);\r\n\r\n                GetAllClientNetworkMembers(props.assignAddressClint.IdCity, props.assignAddressClint.IdCityDes).then((res) => {\r\n\r\n                    setLoading(false);\r\n\r\n                    setMyNetwork(res.data.membersData.filter(member => member.FullName.toLowerCase().replaceAll(\"أ\", 'ا').replaceAll(\"إ\", 'ا').includes(networkInputValue.toLowerCase()) || member.PhoneNumber.includes(networkInputValue)));\r\n                });\r\n            }\r\n        }, 500)\r\n\r\n        return () => {\r\n            return clearTimeout(timer)\r\n        }\r\n    }, [networkInputValue, open]);\r\n\r\n    function showValidation() {\r\n\r\n        if (selectedMember) {\r\n            setSelectedMemberCheckShow(false)\r\n        } else {\r\n            setSelectedMemberCheckShow(true)\r\n        }\r\n\r\n        if (assignedDeliveryCostRef/*  && assignedDeliveryCostRef.current.value > 0 */) {\r\n            setDeliveryCostAssignedCheckShow(false)\r\n        } else {\r\n            setDeliveryCostAssignedCheckShow(true)\r\n        }\r\n    }\r\n\r\n    function hideValidation() {\r\n        setBeginValidation(false);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Modal size=\"md\" show={open} onHide={() => { setOpen(false); props.setCloseAssignDialog(); }} centered animation={true} backdrop=\"static\" style={{ backgroundColor: \"rgba(0,0,0,0.5)\" }}>\r\n\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{translate(\"ORDERS.CHOOSE_TRANS\")}</Modal.Title>\r\n                </Modal.Header>\r\n\r\n                <Modal.Body className=''>\r\n\r\n                    {/* <MyNetworkDropDown\r\n                        loading={loading}\r\n                        network={myNetwork}\r\n                        onSearch={setNetworkInputValue}\r\n                        onSelect={setSelectedMember}\r\n                        selectedMember={selectedMember}\r\n                    />\r\n                    {beginValidation && selectedMemberCheck && <span style={{ color: \"red\" }}>required!</span>} */}\r\n                    \r\n                    <Table>\r\n                        <thead>\r\n                            <tr>\r\n                                <th scope=\"col\" style={{ width: \"40%\" }}>Name</th>\r\n                                <th scope=\"col\" style={{ width: \"40%\" }}>Phone Number</th>\r\n                                <th scope=\"col\" style={{ width: \"20%\" }}>Price</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                myNetwork?.map((member, index) => {\r\n                                    return <tr key={index}>\r\n                                        <td>{ member.FullName }</td>\r\n                                        <td>{ member.PhoneNumber }</td>\r\n                                        <td>{ member.deliveryPrice + \" NIS\" }</td>\r\n                                    </tr>\r\n                                })\r\n                            }\r\n                        </tbody>\r\n                    </Table>\r\n\r\n                    {/* <Form.Control type=\"number\" className=\"w-25 mt-2\" placeholder=\"Delivery Cost\" ref={assignedDeliveryCostRef} />\r\n                    {beginValidation && deliveryCostAssignedCheck && <span style={{ color: \"red\" }}>required!</span>} */}\r\n\r\n                </Modal.Body>\r\n                <Modal.Footer className=\"d-flex justify-content-center\">\r\n\r\n                    <Button\r\n                        variant=\"primary\"\r\n                        onClick={() => {\r\n                            setBeginValidation(true);\r\n\r\n                            if (selectedMember/*  && assignedDeliveryCostRef && assignedDeliveryCostRef.current.value > 0 */) {\r\n                                hideValidation()\r\n\r\n                                setLadingSubmit2(true)\r\n\r\n                                /* console.log(\"assignDeliveryParams\");\r\n                                console.log(props.assignDeliveryParams);\r\n                                console.log(\"----------------------\");\r\n                                console.log(\"assignAddressClint\");\r\n                                console.log(props.assignAddressClint);\r\n                                console.log(\"----------------------\");\r\n                                console.log(\"CustomerId\");\r\n                                console.log(selectedMember.CustomerId);\r\n                                console.log(\"----------------------\");\r\n                                console.log(\"assignedDeliveryCostRef\");\r\n                                console.log(assignedDeliveryCostRef.current.value);\r\n                                console.log(\"----------------------\"); */\r\n\r\n                                CreateAssignedOrder(JSON.stringify(props.assignDeliveryParams), JSON.stringify(props.assignAddressClint), selectedMember.CustomerId, /* assignedDeliveryCostRef.current.value */selectedMember.deliveryPrice).then((res) => {\r\n\r\n                                    if (\r\n                                        res.data == \"NoClientBalance\" ||\r\n                                        res.data == \"NoTransporterBalance\" ||\r\n                                        res.data == \"ErrorInAddress\" ||\r\n                                        res.data == \"NotInserted\" ||\r\n                                        res.data == \"NotAccepted\" ||\r\n                                        res.data == \"Blocked\" ||\r\n                                        res.data == \"TokenError\"\r\n                                    ) {\r\n                                        dispatch(toastNotification(\"Error!\", res.data, \"error\"));\r\n                                    } else {\r\n                                        props.onSuccess();\r\n                                        props.setCloseMainDialog();\r\n                                        setLadingSubmit2(false);\r\n                                        props.setCloseAssignDialog(false);\r\n                                        setOpen(false);\r\n                                    }\r\n                                });\r\n\r\n                            } else {\r\n                                showValidation();\r\n                            }\r\n\r\n\r\n                        }\r\n                        }\r\n                    >\r\n                        {loadingSubmit2 && <Spinner animation=\"border\" size=\"sm\" />}\r\n                        {translate(\"ORDERS.SUBMIT\")}\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"danger\"\r\n                        onClick={() => {\r\n                            props.setCloseAssignDialog();\r\n                            setOpen(false);\r\n                        }\r\n                        }\r\n                    >\r\n                        {translate(\"GENERAL.CANCEL\")}\r\n                    </Button>\r\n\r\n\r\n                </Modal.Footer>\r\n\r\n\r\n            </Modal>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
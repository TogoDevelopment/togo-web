{"ast":null,"code":"import { contains, detectBrowser, focus, getOwnerDocument, isActiveElement, isRefObject } from \"@chakra-ui/utils\";\nimport { usePointerEvent } from \"./use-pointer-event\";\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props) {\n  var ref = props.ref,\n    elements = props.elements,\n    enabled = props.enabled;\n  var isSafari = detectBrowser(\"Safari\");\n  var doc = function doc() {\n    return getOwnerDocument(ref.current);\n  };\n  usePointerEvent(doc, \"pointerdown\", function (event) {\n    if (!isSafari || !enabled) return;\n    var target = event.target;\n    var els = elements != null ? elements : [ref];\n    var isValidTarget = els.some(function (elementOrRef) {\n      var el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef;\n      return contains(el, target);\n    });\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault();\n      focus(target);\n    }\n  });\n}","map":{"version":3,"names":["contains","detectBrowser","focus","getOwnerDocument","isActiveElement","isRefObject","usePointerEvent","useFocusOnPointerDown","props","ref","elements","enabled","isSafari","doc","current","event","target","els","isValidTarget","some","elementOrRef","el","preventDefault"],"sources":["../../src/use-focus-on-pointerdown.ts"],"sourcesContent":["import {\n  contains,\n  detectBrowser,\n  focus,\n  getOwnerDocument,\n  isActiveElement,\n  isRefObject,\n} from \"@chakra-ui/utils\"\nimport { RefObject } from \"react\"\nimport { usePointerEvent } from \"./use-pointer-event\"\n\nexport interface UseFocusOnMouseDownProps {\n  enabled?: boolean\n  ref: RefObject<HTMLElement>\n  elements?: Array<RefObject<HTMLElement> | HTMLElement | null>\n}\n\n/**\n * Polyfill to get `relatedTarget` working correctly consistently\n * across all browsers.\n *\n * It ensures that elements receives focus on pointer down if\n * it's not the active active element.\n *\n * @internal\n */\nexport function useFocusOnPointerDown(props: UseFocusOnMouseDownProps) {\n  const { ref, elements, enabled } = props\n\n  const isSafari = detectBrowser(\"Safari\")\n  const doc = () => getOwnerDocument(ref.current)\n\n  usePointerEvent(doc, \"pointerdown\", (event) => {\n    if (!isSafari || !enabled) return\n    const target = event.target as HTMLElement\n\n    const els = elements ?? [ref]\n    const isValidTarget = els.some((elementOrRef) => {\n      const el = isRefObject(elementOrRef) ? elementOrRef.current : elementOrRef\n      return contains(el, target)\n    })\n\n    if (!isActiveElement(target) && isValidTarget) {\n      event.preventDefault()\n      focus(target)\n    }\n  })\n}\n"],"mappings":"AAAA,SACEA,QADF,EAEEC,aAFF,EAGEC,KAHF,EAIEC,gBAJF,EAKEC,eALF,EAMEC,WANF,QAOO,kBAPP;AASA,SAASC,eAAT,QAAgC,qBAAhC;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,qBAATA,CAA+BC,KAA/B,EAAgE;EACrE,IAAQC,GAAF,GAA6BD,KAAnC,CAAQC,GAAF;IAAOC,QAAP,GAA6BF,KAAnC,CAAaE,QAAP;IAAiBC,OAAA,GAAYH,KAAnC,CAAuBG,OAAA;EAEvB,IAAMC,QAAQ,GAAGX,aAAa,CAAC,QAAD,CAA9B;EACA,IAAMY,GAAG,GAAG,SAANA,GAAGA,CAAA;IAAA,OAASV,gBAAgB,CAACM,GAAG,CAACK,OAAL,CAAlC;EAAA;EAEAR,eAAe,CAACO,GAAD,EAAM,aAAN,EAAsB,UAAAE,KAAD,EAAW;IAC7C,IAAI,CAACH,QAAD,IAAa,CAACD,OAAlB,EAA2B;IAC3B,IAAMK,MAAM,GAAGD,KAAK,CAACC,MAArB;IAEA,IAAMC,GAAG,GAAGP,QAAH,WAAGA,QAAH,GAAe,CAACD,GAAD,CAAxB;IACA,IAAMS,aAAa,GAAGD,GAAG,CAACE,IAAJ,CAAU,UAAAC,YAAD,EAAkB;MAC/C,IAAMC,EAAE,GAAGhB,WAAW,CAACe,YAAD,CAAX,GAA4BA,YAAY,CAACN,OAAzC,GAAmDM,YAA9D;MACA,OAAOpB,QAAQ,CAACqB,EAAD,EAAKL,MAAL,CAAf;IACD,CAHqB,CAAtB;IAKA,IAAI,CAACZ,eAAe,CAACY,MAAD,CAAhB,IAA4BE,aAAhC,EAA+C;MAC7CH,KAAK,CAACO,cAAN;MACApB,KAAK,CAACc,MAAD,CAAL;IACD;EACF,CAdc,CAAf;AAeD"},"metadata":{},"sourceType":"module"}
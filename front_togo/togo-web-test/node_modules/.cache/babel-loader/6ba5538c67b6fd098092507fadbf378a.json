{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.embedDashboard = embedDashboard;\n\nvar _const = require(\"./const\");\n\nvar _switchboard = require(\"@superset-ui/switchboard\");\n\nvar _guestTokenRefresh = require(\"./guestTokenRefresh\");\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// We can swap this out for the actual switchboard package once it gets published\n\n/**\n * Embeds a Superset dashboard into the page using an iframe.\n */\n\n\nfunction embedDashboard(_x) {\n  return _embedDashboard.apply(this, arguments);\n}\n\nfunction _embedDashboard() {\n  _embedDashboard = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref) {\n    var id, supersetDomain, mountPoint, fetchGuestToken, dashboardUiConfig, _ref$debug, debug, log, calculateConfig, mountIframe, _mountIframe, _yield$Promise$all, _yield$Promise$all2, guestToken, ourPort, refreshGuestToken, _refreshGuestToken, unmount, getScrollSize;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            unmount = function _unmount() {\n              log('unmounting');\n              mountPoint.replaceChildren();\n            };\n\n            _refreshGuestToken = function _refreshGuestToken3() {\n              _refreshGuestToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n                var newGuestToken;\n                return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n                  while (1) {\n                    switch (_context2.prev = _context2.next) {\n                      case 0:\n                        _context2.next = 2;\n                        return fetchGuestToken();\n\n                      case 2:\n                        newGuestToken = _context2.sent;\n                        ourPort.emit('guestToken', {\n                          guestToken: newGuestToken\n                        });\n                        setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(newGuestToken));\n\n                      case 5:\n                      case \"end\":\n                        return _context2.stop();\n                    }\n                  }\n                }, _callee2);\n              }));\n              return _refreshGuestToken.apply(this, arguments);\n            };\n\n            refreshGuestToken = function _refreshGuestToken2() {\n              return _refreshGuestToken.apply(this, arguments);\n            };\n\n            _mountIframe = function _mountIframe3() {\n              _mountIframe = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", new Promise(function (resolve) {\n                          var iframe = document.createElement('iframe');\n                          var dashboardConfig = dashboardUiConfig ? \"?uiConfig=\".concat(calculateConfig()) : \"\"; // setup the iframe's sandbox configuration\n\n                          iframe.sandbox.add(\"allow-same-origin\"); // needed for postMessage to work\n\n                          iframe.sandbox.add(\"allow-scripts\"); // obviously the iframe needs scripts\n\n                          iframe.sandbox.add(\"allow-presentation\"); // for fullscreen charts\n\n                          iframe.sandbox.add(\"allow-downloads\"); // for downloading charts as image\n                          // add these ones if it turns out we need them:\n                          // iframe.sandbox.add(\"allow-top-navigation\");\n                          // iframe.sandbox.add(\"allow-forms\");\n                          // add the event listener before setting src, to be 100% sure that we capture the load event\n\n                          iframe.addEventListener('load', function () {\n                            // MessageChannel allows us to send and receive messages smoothly between our window and the iframe\n                            // See https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API\n                            var commsChannel = new MessageChannel();\n                            var ourPort = commsChannel.port1;\n                            var theirPort = commsChannel.port2; // Send one of the message channel ports to the iframe to initialize embedded comms\n                            // See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n                            // we know the content window isn't null because we are in the load event handler.\n\n                            iframe.contentWindow.postMessage({\n                              type: _const.IFRAME_COMMS_MESSAGE_TYPE,\n                              handshake: \"port transfer\"\n                            }, supersetDomain, [theirPort]);\n                            log('sent message channel to the iframe'); // return our port from the promise\n\n                            resolve(new _switchboard.Switchboard({\n                              port: ourPort,\n                              name: 'superset-embedded-sdk',\n                              debug: debug\n                            }));\n                          });\n                          iframe.src = \"\".concat(supersetDomain, \"/embedded/\").concat(id).concat(dashboardConfig);\n                          mountPoint.replaceChildren(iframe);\n                          log('placed the iframe');\n                        }));\n\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n              return _mountIframe.apply(this, arguments);\n            };\n\n            mountIframe = function _mountIframe2() {\n              return _mountIframe.apply(this, arguments);\n            };\n\n            calculateConfig = function _calculateConfig() {\n              var configNumber = 0;\n\n              if (dashboardUiConfig) {\n                if (dashboardUiConfig.hideTitle) {\n                  configNumber += 1;\n                }\n\n                if (dashboardUiConfig.hideTab) {\n                  configNumber += 2;\n                }\n\n                if (dashboardUiConfig.hideChartControls) {\n                  configNumber += 8;\n                }\n              }\n\n              return configNumber;\n            };\n\n            log = function _log() {\n              if (debug) {\n                var _console;\n\n                for (var _len = arguments.length, info = new Array(_len), _key = 0; _key < _len; _key++) {\n                  info[_key] = arguments[_key];\n                }\n\n                (_console = console).debug.apply(_console, [\"[superset-embedded-sdk][dashboard \".concat(id, \"]\")].concat(info));\n              }\n            };\n\n            id = _ref.id, supersetDomain = _ref.supersetDomain, mountPoint = _ref.mountPoint, fetchGuestToken = _ref.fetchGuestToken, dashboardUiConfig = _ref.dashboardUiConfig, _ref$debug = _ref.debug, debug = _ref$debug === void 0 ? false : _ref$debug;\n            log('embedding');\n            _context3.next = 11;\n            return Promise.all([fetchGuestToken(), mountIframe()]);\n\n          case 11:\n            _yield$Promise$all = _context3.sent;\n            _yield$Promise$all2 = _slicedToArray(_yield$Promise$all, 2);\n            guestToken = _yield$Promise$all2[0];\n            ourPort = _yield$Promise$all2[1];\n            ourPort.emit('guestToken', {\n              guestToken: guestToken\n            });\n            log('sent guest token');\n            setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(guestToken));\n\n            getScrollSize = function getScrollSize() {\n              return ourPort.get('getScrollSize');\n            };\n\n            return _context3.abrupt(\"return\", {\n              getScrollSize: getScrollSize,\n              unmount: unmount\n            });\n\n          case 20:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _embedDashboard.apply(this, arguments);\n}","map":{"version":3,"sources":["/home/system/togo-web-test/node_modules/@superset-ui/embedded-sdk/lib/index.js"],"names":["Object","defineProperty","exports","value","embedDashboard","_const","require","_switchboard","_guestTokenRefresh","_ref","log","calculateConfig","mountIframe","refreshGuestToken","unmount","mountPoint","replaceChildren","fetchGuestToken","newGuestToken","ourPort","emit","guestToken","setTimeout","getGuestTokenRefreshTiming","Promise","resolve","iframe","document","createElement","dashboardConfig","dashboardUiConfig","sandbox","add","addEventListener","commsChannel","MessageChannel","port1","theirPort","port2","contentWindow","postMessage","type","IFRAME_COMMS_MESSAGE_TYPE","handshake","supersetDomain","Switchboard","port","name","debug","src","id","configNumber","hideTitle","hideTab","hideChartControls","_len","arguments","length","info","Array","_key","console","all","getScrollSize","get"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.embedDashboard = embedDashboard;\n\nvar _const = require(\"./const\");\n\nvar _switchboard = require(\"@superset-ui/switchboard\");\n\nvar _guestTokenRefresh = require(\"./guestTokenRefresh\");\n\n/*\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n// We can swap this out for the actual switchboard package once it gets published\n\n/**\n * Embeds a Superset dashboard into the page using an iframe.\n */\nasync function embedDashboard(_ref) {\n  let {\n    id,\n    supersetDomain,\n    mountPoint,\n    fetchGuestToken,\n    dashboardUiConfig,\n    debug = false\n  } = _ref;\n\n  function log() {\n    if (debug) {\n      for (var _len = arguments.length, info = new Array(_len), _key = 0; _key < _len; _key++) {\n        info[_key] = arguments[_key];\n      }\n\n      console.debug(`[superset-embedded-sdk][dashboard ${id}]`, ...info);\n    }\n  }\n\n  log('embedding');\n\n  function calculateConfig() {\n    let configNumber = 0;\n\n    if (dashboardUiConfig) {\n      if (dashboardUiConfig.hideTitle) {\n        configNumber += 1;\n      }\n\n      if (dashboardUiConfig.hideTab) {\n        configNumber += 2;\n      }\n\n      if (dashboardUiConfig.hideChartControls) {\n        configNumber += 8;\n      }\n    }\n\n    return configNumber;\n  }\n\n  async function mountIframe() {\n    return new Promise(resolve => {\n      const iframe = document.createElement('iframe');\n      const dashboardConfig = dashboardUiConfig ? `?uiConfig=${calculateConfig()}` : \"\"; // setup the iframe's sandbox configuration\n\n      iframe.sandbox.add(\"allow-same-origin\"); // needed for postMessage to work\n\n      iframe.sandbox.add(\"allow-scripts\"); // obviously the iframe needs scripts\n\n      iframe.sandbox.add(\"allow-presentation\"); // for fullscreen charts\n\n      iframe.sandbox.add(\"allow-downloads\"); // for downloading charts as image\n      // add these ones if it turns out we need them:\n      // iframe.sandbox.add(\"allow-top-navigation\");\n      // iframe.sandbox.add(\"allow-forms\");\n      // add the event listener before setting src, to be 100% sure that we capture the load event\n\n      iframe.addEventListener('load', () => {\n        // MessageChannel allows us to send and receive messages smoothly between our window and the iframe\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Channel_Messaging_API\n        const commsChannel = new MessageChannel();\n        const ourPort = commsChannel.port1;\n        const theirPort = commsChannel.port2; // Send one of the message channel ports to the iframe to initialize embedded comms\n        // See https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage\n        // we know the content window isn't null because we are in the load event handler.\n\n        iframe.contentWindow.postMessage({\n          type: _const.IFRAME_COMMS_MESSAGE_TYPE,\n          handshake: \"port transfer\"\n        }, supersetDomain, [theirPort]);\n        log('sent message channel to the iframe'); // return our port from the promise\n\n        resolve(new _switchboard.Switchboard({\n          port: ourPort,\n          name: 'superset-embedded-sdk',\n          debug\n        }));\n      });\n      iframe.src = `${supersetDomain}/embedded/${id}${dashboardConfig}`;\n      mountPoint.replaceChildren(iframe);\n      log('placed the iframe');\n    });\n  }\n\n  const [guestToken, ourPort] = await Promise.all([fetchGuestToken(), mountIframe()]);\n  ourPort.emit('guestToken', {\n    guestToken\n  });\n  log('sent guest token');\n\n  async function refreshGuestToken() {\n    const newGuestToken = await fetchGuestToken();\n    ourPort.emit('guestToken', {\n      guestToken: newGuestToken\n    });\n    setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(newGuestToken));\n  }\n\n  setTimeout(refreshGuestToken, (0, _guestTokenRefresh.getGuestTokenRefreshTiming)(guestToken));\n\n  function unmount() {\n    log('unmounting');\n    mountPoint.replaceChildren();\n  }\n\n  const getScrollSize = () => ourPort.get('getScrollSize');\n\n  return {\n    getScrollSize,\n    unmount\n  };\n}"]},"metadata":{},"sourceType":"script"}
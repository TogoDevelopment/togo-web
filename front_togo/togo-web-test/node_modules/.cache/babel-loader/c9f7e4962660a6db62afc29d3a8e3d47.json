{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = useClockEvents;\n\nvar _react = require(\"react\");\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _dom = require(\"../helpers/dom\");\n\nvar _math = require(\"../helpers/math\");\n\nvar atan2 = Math.atan2;\n/*\n\tsolely responsible for transforming click events into\n\tangles (which are later converted into time depending\n\ton current mode and other restrictions)\n*/\n\nfunction useClockEvents(clock, handleChange) {\n  var wrapper = (0, _react.useRef)(null);\n  var calcOffsetCache = (0, _react.useRef)(null);\n  var dragCount = (0, _react.useRef)(0);\n  var cleanup = (0, _react.useCallback)(_removeHandlers, []);\n  var disableMouse = (0, _react.useRef)(false); // mouse events\n\n  function handleMouseDown(e) {\n    if (disableMouse.current) {\n      return;\n    }\n\n    dragCount.current = 0; // add listeners\n\n    document.addEventListener('mousemove', handleMouseDrag, false);\n    document.addEventListener('mouseup', handleStopDrag, false);\n    wrapper.current && wrapper.current.addEventListener('mouseleave', handleStopDrag, false);\n\n    if (clock.current) {\n      calcOffsetCache.current = (0, _dom.calcOffset)(clock.current);\n    } // move hand\n    // @ts-ignore\n\n\n    handleMouseDrag(e);\n  }\n\n  function handleMouseDrag(e) {\n    if (calcOffsetCache.current) {\n      var _calcOffsetCache$curr = calcOffsetCache.current(e.clientX, e.clientY),\n          offsetX = _calcOffsetCache$curr.offsetX,\n          offsetY = _calcOffsetCache$curr.offsetY;\n\n      calculatePoint(offsetX, offsetY, false);\n    }\n\n    dragCount.current++;\n\n    if (dragCount.current === 1 && clock.current) {\n      clock.current.style.cursor = '-webkit-grabbing';\n      clock.current.style.cursor = 'grabbing';\n    }\n\n    e.preventDefault();\n    return false;\n  } // touch events\n\n\n  function handleTouchStart() {\n    // disables mouse events during touch events\n    disableMouse.current = true;\n    dragCount.current = 0; // add listeners\n\n    document.addEventListener('touchmove', touchDragHandler, false);\n    document.addEventListener('touchend', handleStopDrag, false);\n    document.addEventListener('touchcancel', handleStopDrag, false);\n\n    if (clock.current) {\n      calcOffsetCache.current = (0, _dom.calcOffset)(clock.current);\n    }\n  }\n\n  function touchDragHandler(e) {\n    if (calcOffsetCache.current) {\n      var touch = e.targetTouches[0];\n\n      var _calcOffsetCache$curr2 = calcOffsetCache.current(touch.clientX, touch.clientY),\n          offsetX = _calcOffsetCache$curr2.offsetX,\n          offsetY = _calcOffsetCache$curr2.offsetY;\n\n      calculatePoint(offsetX, offsetY, false);\n    }\n\n    dragCount.current++;\n    e.preventDefault();\n    return false;\n  } // stop mouse + touch events\n\n\n  function handleStopDrag(e) {\n    _removeHandlers();\n\n    if (e == null || clock.current == null) {\n      return;\n    }\n\n    if (isMouseEventEnd(e)) {\n      _handleMouseUp(e);\n    } else if (isTouchEventEnd(e)) {\n      _handleTouchEnd(e);\n    }\n\n    function isMouseEventEnd(e) {\n      return e.type === 'mouseup';\n    }\n\n    function isTouchEventEnd(e) {\n      return e.type === 'touchcancel' || e.type === 'touchend';\n    }\n  }\n\n  function _removeHandlers() {\n    document.removeEventListener('mousemove', handleMouseDrag, false);\n    document.removeEventListener('mouseup', handleStopDrag, false);\n    wrapper.current && wrapper.current.removeEventListener('mouseleave', handleStopDrag, false);\n    document.removeEventListener('touchmove', touchDragHandler, false);\n    document.removeEventListener('touchend', handleStopDrag, false);\n    document.removeEventListener('touchcancel', handleStopDrag, false);\n  } // handle mouse + touch changes\n\n\n  function _handleMouseUp(e) {\n    if (!clock.current) {\n      return;\n    }\n\n    clock.current.style.cursor = '';\n\n    var _ref = calcOffsetCache.current(e.clientX, e.clientY),\n        offsetX = _ref.offsetX,\n        offsetY = _ref.offsetY;\n\n    calculatePoint(offsetX, offsetY, true);\n  }\n\n  function _handleTouchEnd(e) {\n    var touch = e.targetTouches[0] || e.changedTouches[0];\n\n    if (touch && calcOffsetCache.current) {\n      var _calcOffsetCache$curr3 = calcOffsetCache.current(touch.clientX, touch.clientY),\n          offsetX = _calcOffsetCache$curr3.offsetX,\n          offsetY = _calcOffsetCache$curr3.offsetY;\n\n      calculatePoint(offsetX, offsetY, true);\n    }\n\n    setTimeout(function () {\n      disableMouse.current = false;\n    }, 10);\n  }\n\n  function calculatePoint(offsetX, offsetY, // determines if change is due to mouseup/touchend in order to\n  // automatically change unit (eg: hour -> minute) if enabled\n  // prevents changing unit if dragging along clock\n  canAutoChangeUnit) {\n    // if user just clicks/taps a number (drag count < 2), then just assume it's a rough tap\n    // and force a rounded/coarse number (ie: 1, 2, 3, 4 is tapped, assume 0 or 5)\n    var wasTapped = dragCount.current < 2;\n    var x = offsetX - _constants.CLOCK_RADIUS;\n    var y = -offsetY + _constants.CLOCK_RADIUS;\n    var a = atan2(y, x);\n    var d = 90 - (0, _math.deg)(a);\n\n    if (d < 0) {\n      d = 360 + d;\n    } // ensure touch doesn't bleed outside of clock radius\n\n\n    if (!(0, _math.isWithinRadius)(x, y, _constants.CLOCK_RADIUS) && wasTapped) {\n      return false;\n    }\n\n    var isInnerClick = (0, _math.isWithinRadius)(x, y, _constants.INNER_NUMBER_RADIUS); // update time on main\n\n    handleChange(d, {\n      canAutoChangeUnit: canAutoChangeUnit,\n      wasTapped: wasTapped,\n      isInnerClick: isInnerClick\n    });\n  } // clean up\n\n\n  (0, _react.useEffect)(function () {\n    return cleanup;\n  }, [cleanup]);\n  return {\n    bind: {\n      onMouseDown: handleMouseDown,\n      onTouchStart: handleTouchStart,\n      ref: wrapper\n    }\n  };\n}","map":null,"metadata":{},"sourceType":"script"}
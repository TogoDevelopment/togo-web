{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useEnvironment } from \"@chakra-ui/react-env\";\nimport { useTheme } from \"@chakra-ui/system\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint) {\n  var _useTheme = useTheme(),\n    breakpoints = _useTheme.breakpoints;\n  var env = useEnvironment();\n  var mediaQueries = React.useMemo(function () {\n    return createMediaQueries(_extends({\n      base: \"0px\"\n    }, breakpoints));\n  }, [breakpoints]);\n  var _React$useState = React.useState(function () {\n      if (!defaultBreakpoint) {\n        return undefined;\n      }\n      var mediaQuery = mediaQueries.find(function (_ref) {\n        var breakpoint = _ref.breakpoint;\n        return breakpoint === defaultBreakpoint;\n      });\n      if (mediaQuery) {\n        var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n        return breakpoint;\n      }\n      return undefined;\n    }),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    currentBreakpoint = _React$useState2[0],\n    setCurrentBreakpoint = _React$useState2[1];\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback(function (query, breakpoint) {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(function () {\n    var listeners = new Set();\n    mediaQueries.forEach(function (_ref2) {\n      var query = _ref2.query,\n        breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n      var mediaQuery = env.window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n      var handleChange = function handleChange() {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery: mediaQuery,\n        handleChange: handleChange\n      });\n      return function () {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return function () {\n      // clean up 2: for safety\n      listeners.forEach(function (_ref3) {\n        var mediaQuery = _ref3.mediaQuery,\n          handleChange = _ref3.handleChange;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update, env.window]);\n  return current;\n}","map":{"version":3,"names":["useEnvironment","useTheme","React","createMediaQueries","useBreakpoint","defaultBreakpoint","_useTheme","breakpoints","env","mediaQueries","useMemo","_extends","base","_React$useState","useState","undefined","mediaQuery","find","_ref","breakpoint","_objectWithoutPropertiesLoose","_React$useState2","_slicedToArray","currentBreakpoint","setCurrentBreakpoint","current","update","useCallback","query","matches","useEffect","listeners","Set","forEach","_ref2","window","matchMedia","handleChange","addListener","add","removeListener","_ref3","clear"],"sources":["../../src/use-breakpoint.ts"],"sourcesContent":["import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useTheme } from \"@chakra-ui/system\"\nimport React from \"react\"\nimport createMediaQueries from \"./create-media-query\"\n\ninterface Listener {\n  mediaQuery: MediaQueryList\n  handleChange: () => void\n}\n\nexport interface Breakpoint {\n  breakpoint: string\n  maxWidth?: string\n  minWidth: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint?: string) {\n  const { breakpoints } = useTheme()\n  const env = useEnvironment()\n\n  const mediaQueries = React.useMemo(\n    () => createMediaQueries({ base: \"0px\", ...breakpoints }),\n    [breakpoints],\n  )\n\n  const [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    if (!defaultBreakpoint) {\n      return undefined\n    }\n\n    const mediaQuery = mediaQueries.find(\n      ({ breakpoint }) => breakpoint === defaultBreakpoint,\n    )\n\n    if (mediaQuery) {\n      const { query, ...breakpoint } = mediaQuery\n      return breakpoint\n    }\n\n    return undefined\n  })\n\n  const current = currentBreakpoint?.breakpoint\n\n  const update = React.useCallback(\n    (query: MediaQueryList, breakpoint: Breakpoint) => {\n      if (query.matches && current !== breakpoint.breakpoint) {\n        setCurrentBreakpoint(breakpoint)\n      }\n    },\n    [current],\n  )\n\n  React.useEffect(() => {\n    const listeners = new Set<Listener>()\n\n    mediaQueries.forEach(({ query, ...breakpoint }) => {\n      const mediaQuery = env.window.matchMedia(query)\n\n      // trigger an initial update to determine media query\n      update(mediaQuery, breakpoint)\n\n      const handleChange = () => {\n        update(mediaQuery, breakpoint)\n      }\n\n      // add media query-listener\n      mediaQuery.addListener(handleChange)\n\n      // push the media query list handleChange\n      // so we can use it to remove Listener\n      listeners.add({ mediaQuery, handleChange })\n\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange)\n      }\n    })\n\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(({ mediaQuery, handleChange }) => {\n        mediaQuery.removeListener(handleChange)\n      })\n      listeners.clear()\n    }\n  }, [mediaQueries, breakpoints, update, env.window])\n\n  return current\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
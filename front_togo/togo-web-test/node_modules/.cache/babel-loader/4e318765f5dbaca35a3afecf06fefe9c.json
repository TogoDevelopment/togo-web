{"ast":null,"code":"import CSSReset from \"@chakra-ui/css-reset\";\nimport { PortalManager } from \"@chakra-ui/portal\";\nimport { ColorModeProvider, GlobalStyle, ThemeProvider } from \"@chakra-ui/system\";\nimport { EnvironmentProvider } from \"@chakra-ui/react-env\";\nimport * as React from \"react\";\nimport { IdProvider } from \"@chakra-ui/hooks\";\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport var ChakraProvider = function ChakraProvider(props) {\n  var children = props.children,\n    colorModeManager = props.colorModeManager,\n    portalZIndex = props.portalZIndex,\n    _props$resetCSS = props.resetCSS,\n    resetCSS = _props$resetCSS === void 0 ? true : _props$resetCSS,\n    _props$theme = props.theme,\n    theme = _props$theme === void 0 ? {} : _props$theme,\n    environment = props.environment,\n    cssVarsRoot = props.cssVarsRoot;\n  var _children = /*#__PURE__*/React.createElement(EnvironmentProvider, {\n    environment: environment\n  }, children);\n  return /*#__PURE__*/React.createElement(IdProvider, null, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme,\n    cssVarsRoot: cssVarsRoot\n  }, /*#__PURE__*/React.createElement(ColorModeProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, resetCSS && /*#__PURE__*/React.createElement(CSSReset, null), /*#__PURE__*/React.createElement(GlobalStyle, null), portalZIndex ? /*#__PURE__*/React.createElement(PortalManager, {\n    zIndex: portalZIndex\n  }, _children) : _children)));\n};","map":{"version":3,"names":["CSSReset","PortalManager","ColorModeProvider","GlobalStyle","ThemeProvider","EnvironmentProvider","React","IdProvider","ChakraProvider","props","children","colorModeManager","portalZIndex","_props$resetCSS","resetCSS","_props$theme","theme","environment","cssVarsRoot","_children","createElement","options","config","zIndex"],"sources":["../../src/chakra-provider.tsx"],"sourcesContent":["import CSSReset from \"@chakra-ui/css-reset\"\nimport { PortalManager } from \"@chakra-ui/portal\"\nimport {\n  ColorModeProvider,\n  ColorModeProviderProps,\n  GlobalStyle,\n  ThemeProvider,\n  ThemeProviderProps,\n} from \"@chakra-ui/system\"\nimport { Dict } from \"@chakra-ui/utils\"\nimport {\n  EnvironmentProvider,\n  EnvironmentProviderProps,\n} from \"@chakra-ui/react-env\"\nimport * as React from \"react\"\nimport { IdProvider } from \"@chakra-ui/hooks\"\n\nexport interface ChakraProviderProps\n  extends Pick<ThemeProviderProps, \"cssVarsRoot\"> {\n  /**\n   * a theme. if omitted, uses the default theme provided by chakra\n   */\n  theme?: Dict\n  /**\n   * Common z-index to use for `Portal`\n   *\n   * @default undefined\n   */\n  portalZIndex?: number\n  /**\n   * If `true`, `CSSReset` component will be mounted to help\n   * you reset browser styles\n   *\n   * @default true\n   */\n  resetCSS?: boolean\n  /**\n   * manager to persist a users color mode preference in\n   *\n   * omit if you don't render server-side\n   * for SSR: choose `cookieStorageManager`\n   *\n   * @default localStorageManager\n   */\n  colorModeManager?: ColorModeProviderProps[\"colorModeManager\"]\n  /**\n   * Your application content\n   */\n  children?: React.ReactNode\n  /**\n   * The environment (`window` and `document`) to be used by\n   * all components and hooks.\n   *\n   * By default, we smartly determine the ownerDocument and defaultView\n   * based on where `ChakraProvider` is rendered.\n   */\n  environment?: EnvironmentProviderProps[\"environment\"]\n}\n\n/**\n * The global provider that must be added to make all Chakra components\n * work correctly\n */\nexport const ChakraProvider: React.FC<ChakraProviderProps> = (props) => {\n  const {\n    children,\n    colorModeManager,\n    portalZIndex,\n    resetCSS = true,\n    theme = {},\n    environment,\n    cssVarsRoot,\n  } = props\n\n  const _children = (\n    <EnvironmentProvider environment={environment}>\n      {children}\n    </EnvironmentProvider>\n  )\n\n  return (\n    <IdProvider>\n      <ThemeProvider theme={theme as Dict} cssVarsRoot={cssVarsRoot}>\n        <ColorModeProvider\n          colorModeManager={colorModeManager}\n          options={theme.config}\n        >\n          {resetCSS && <CSSReset />}\n          <GlobalStyle />\n          {portalZIndex ? (\n            <PortalManager zIndex={portalZIndex}>{_children}</PortalManager>\n          ) : (\n            _children\n          )}\n        </ColorModeProvider>\n      </ThemeProvider>\n    </IdProvider>\n  )\n}\n"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,sBAArB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AACA,SACEC,iBADF,EAGEC,WAHF,EAIEC,aAJF,QAMO,mBANP;AAQA,SACEC,mBADF,QAGO,sBAHP;AAIA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,UAAT,QAA2B,kBAA3B;;AA4CA;AACA;AACA;AACA;AACA,OAAO,IAAMC,cAA6C,GAAI,SAAjDA,cAA6CA,CAAIC,KAAD,EAAW;EACtE,IACEC,QADI,GAQFD,KARJ,CACEC,QADI;IAEJC,gBAFI,GAQFF,KARJ,CAEEE,gBAFI;IAGJC,YAHI,GAQFH,KARJ,CAGEG,YAHI;IAAAC,eAAA,GAQFJ,KARJ,CAIEK,QAAQ;IAARA,QAAQ,GAAAD,eAAA,cAAG,IAJP,GAAAA,eAAA;IAAAE,YAAA,GAQFN,KARJ,CAKEO,KAAK;IAALA,KAAK,GAAAD,YAAA,cAAG,EALJ,GAAAA,YAAA;IAMJE,WANI,GAQFR,KARJ,CAMEQ,WANI;IAOJC,WAAA,GACET,KARJ,CAOES,WAAA;EAGF,IAAMC,SAAS,gBACbb,KAAA,CAAAc,aAAA,CAACf,mBAAD;IAAqBY,WAAW,EAAEA;EAAlC,GACGP,QADH,CADF;EAMA,oBACEJ,KAAA,CAAAc,aAAA,CAACb,UAAD,qBACED,KAAA,CAAAc,aAAA,CAAChB,aAAD;IAAeY,KAAK,EAAEA,KAAtB;IAAqCE,WAAW,EAAEA;EAAlD,gBACEZ,KAAA,CAAAc,aAAA,CAAClB,iBAAD;IACES,gBAAgB,EAAEA,gBADpB;IAEEU,OAAO,EAAEL,KAAK,CAACM;EAFjB,GAIGR,QAAQ,iBAAIR,KAAA,CAAAc,aAAA,CAACpB,QAAD,OAJf,eAKEM,KAAA,CAAAc,aAAA,CAACjB,WAAD,OALF,EAMGS,YAAY,gBACXN,KAAA,CAAAc,aAAA,CAACnB,aAAD;IAAesB,MAAM,EAAEX;EAAvB,GAAsCO,SAAtC,CADW,GAGXA,SATJ,CADF,CADF,CADF;AAkBD,CAnCM"},"metadata":{},"sourceType":"module"}
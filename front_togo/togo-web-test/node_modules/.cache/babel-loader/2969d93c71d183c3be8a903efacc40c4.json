{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\nimport { getToastPlacement } from \"./toast.placement\";\nvar Toast = function Toast(props) {\n  var status = props.status,\n    variant = props.variant,\n    id = props.id,\n    title = props.title,\n    isClosable = props.isClosable,\n    onClose = props.onClose,\n    description = props.description;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\",\n    maxWidth: \"100%\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var _ref = _temp === void 0 ? defaultStandaloneParam : _temp,\n    _ref$theme = _ref.theme,\n    theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme,\n    _ref$colorMode = _ref.colorMode,\n    colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode,\n    _ref$toggleColorMode = _ref.toggleColorMode,\n    toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode,\n    _ref$setColorMode = _ref.setColorMode,\n    setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode,\n    _ref$defaultOptions = _ref.defaultOptions,\n    defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions;\n  var renderWithProviders = function renderWithProviders(props, options) {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n      value: {\n        colorMode: colorMode,\n        setColorMode: setColorMode,\n        toggleColorMode: toggleColorMode\n      }\n    }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n  };\n  var toastImpl = function toastImpl(options) {\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    var Message = function Message(props) {\n      return renderWithProviders(props, opts);\n    };\n    return toast.notify(Message, opts);\n  };\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = function (id, options) {\n    if (!id) return;\n    var opts = _extends({}, defaultOptions, options);\n    opts.position = getToastPlacement(opts.position, theme.direction);\n    toast.update(id, _extends({}, opts, {\n      message: function message(props) {\n        return renderWithProviders(props, opts);\n      }\n    }));\n  };\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var _useChakra = useChakra(),\n    theme = _useChakra.theme,\n    setColorMode = _useChakra.setColorMode,\n    toggleColorMode = _useChakra.toggleColorMode,\n    colorMode = _useChakra.colorMode;\n  return React.useMemo(function () {\n    return createStandaloneToast({\n      theme: theme,\n      colorMode: colorMode,\n      setColorMode: setColorMode,\n      toggleColorMode: toggleColorMode,\n      defaultOptions: options\n    });\n  }, [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"names":["Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","getToastPlacement","Toast","props","status","variant","id","title","isClosable","onClose","description","createElement","alignItems","borderRadius","boxShadow","paddingEnd","textAlign","width","div","flex","maxWidth","display","size","onClick","position","insetEnd","top","defaults","duration","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","_temp","_ref","_ref$theme","_ref$colorMode","_ref$toggleColorMode","_ref$setColorMode","_ref$defaultOptions","renderWithProviders","options","Provider","value","render","_extends","toastImpl","opts","direction","Message","notify","close","closeAll","update","message","isActive","useToast","_useChakra","useMemo"],"sources":["../../src/use-toast.tsx"],"sourcesContent":["import type { AlertStatus } from \"@chakra-ui/alert\"\nimport {\n  Alert,\n  AlertDescription,\n  AlertIcon,\n  AlertTitle,\n} from \"@chakra-ui/alert\"\nimport { CloseButton } from \"@chakra-ui/close-button\"\nimport {\n  chakra,\n  ColorMode,\n  ColorModeContext,\n  ThemeProvider,\n  useChakra,\n} from \"@chakra-ui/system\"\nimport defaultTheme from \"@chakra-ui/theme\"\nimport { isFunction, noop } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { toast } from \"./toast.class\"\nimport {\n  getToastPlacement,\n  ToastPositionWithLogical,\n  WithoutLogicalPosition,\n} from \"./toast.placement\"\nimport type { RenderProps, ToastId, ToastOptions } from \"./toast.types\"\n\nexport interface UseToastOptions {\n  /**\n   * The placement of the toast\n   *\n   * @default \"bottom\"\n   */\n  position?: ToastPositionWithLogical\n  /**\n   * The delay before the toast hides (in milliseconds)\n   * If set to `null`, toast will never dismiss.\n   *\n   * @default 5000 ( = 5000ms )\n   */\n  duration?: ToastOptions[\"duration\"]\n  /**\n   * Render a component toast component.\n   * Any component passed will receive 2 props: `id` and `onClose`.\n   */\n  render?(props: RenderProps): React.ReactNode\n  /**\n   * The title of the toast\n   */\n  title?: React.ReactNode\n  /**\n   * The description of the toast\n   */\n  description?: React.ReactNode\n  /**\n   * If `true`, toast will show a close button\n   */\n  isClosable?: boolean\n  /**\n   * The alert component `variant` to use\n   */\n  variant?: \"subtle\" | \"solid\" | \"left-accent\" | \"top-accent\" | (string & {})\n  /**\n   * The status of the toast.\n   */\n  status?: AlertStatus\n  /**\n   * The `id` of the toast.\n   *\n   * Mostly used when you need to prevent duplicate.\n   * By default, we generate a unique `id` for each toast\n   */\n  id?: ToastId\n  /**\n   * Callback function to run side effects after the toast has closed.\n   */\n  onCloseComplete?: () => void\n}\n\ntype UseToastOptionsNormalized = WithoutLogicalPosition<UseToastOptions>\n\nexport type IToast = UseToastOptions\n\nconst Toast: React.FC<any> = (props) => {\n  const { status, variant, id, title, isClosable, onClose, description } = props\n\n  return (\n    <Alert\n      status={status}\n      variant={variant}\n      id={id}\n      alignItems=\"start\"\n      borderRadius=\"md\"\n      boxShadow=\"lg\"\n      paddingEnd={8}\n      textAlign=\"start\"\n      width=\"auto\"\n    >\n      <AlertIcon />\n      <chakra.div flex=\"1\" maxWidth=\"100%\">\n        {title && <AlertTitle>{title}</AlertTitle>}\n        {description && (\n          <AlertDescription display=\"block\">{description}</AlertDescription>\n        )}\n      </chakra.div>\n      {isClosable && (\n        <CloseButton\n          size=\"sm\"\n          onClick={onClose}\n          position=\"absolute\"\n          insetEnd={1}\n          top={1}\n        />\n      )}\n    </Alert>\n  )\n}\n\nconst defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\",\n} as const\n\nexport type CreateStandAloneToastParam = Partial<\n  ReturnType<typeof useChakra> & {\n    setColorMode: (value: ColorMode) => void\n    defaultOptions: UseToastOptions\n  }\n>\n\nexport const defaultStandaloneParam: Required<CreateStandAloneToastParam> = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults,\n}\n/**\n * Create a toast from outside of React Components\n */\nexport function createStandaloneToast({\n  theme = defaultStandaloneParam.theme,\n  colorMode = defaultStandaloneParam.colorMode,\n  toggleColorMode = defaultStandaloneParam.toggleColorMode,\n  setColorMode = defaultStandaloneParam.setColorMode,\n  defaultOptions = defaultStandaloneParam.defaultOptions,\n}: CreateStandAloneToastParam = defaultStandaloneParam) {\n  const renderWithProviders = (\n    props: React.PropsWithChildren<RenderProps>,\n    options: UseToastOptionsNormalized,\n  ) => (\n    <ThemeProvider theme={theme}>\n      <ColorModeContext.Provider\n        value={{ colorMode, setColorMode, toggleColorMode }}\n      >\n        {isFunction(options.render) ? (\n          options.render(props)\n        ) : (\n          <Toast {...props} {...options} />\n        )}\n      </ColorModeContext.Provider>\n    </ThemeProvider>\n  )\n\n  const toastImpl = (options?: UseToastOptions) => {\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    const Message: React.FC<RenderProps> = (props) =>\n      renderWithProviders(props, opts)\n\n    return toast.notify(Message, opts)\n  }\n\n  toastImpl.close = toast.close\n  toastImpl.closeAll = toast.closeAll\n\n  // toasts can only be updated if they have a valid id\n  toastImpl.update = (id: ToastId, options: Omit<UseToastOptions, \"id\">) => {\n    if (!id) return\n\n    const opts = { ...defaultOptions, ...options } as UseToastOptionsNormalized\n    opts.position = getToastPlacement(opts.position, theme.direction)\n\n    toast.update(id, {\n      ...opts,\n      message: (props) => renderWithProviders(props, opts),\n    })\n  }\n\n  toastImpl.isActive = toast.isActive\n\n  return toastImpl\n}\n\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\nexport function useToast(options?: UseToastOptions) {\n  const { theme, setColorMode, toggleColorMode, colorMode } = useChakra()\n  return React.useMemo(() => {\n    return createStandaloneToast({\n      theme,\n      colorMode,\n      setColorMode,\n      toggleColorMode,\n      defaultOptions: options,\n    })\n  }, [theme, setColorMode, toggleColorMode, colorMode, options])\n}\n\nexport default useToast\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
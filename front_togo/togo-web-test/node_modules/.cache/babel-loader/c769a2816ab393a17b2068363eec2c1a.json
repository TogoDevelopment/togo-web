{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport { useRef, useState } from \"react\";\nimport { DescendantsManager } from \"./descendant\";\nimport { useSafeLayoutEffect, cast } from \"./utils\";\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\n\nfunction useDescendants() {\n  var _useState = useState(function () {\n      return new DescendantsManager();\n    }),\n    _useState2 = _slicedToArray(_useState, 1),\n    descendants = _useState2[0];\n  useSafeLayoutEffect(function () {\n    return function () {\n      return descendants.destroy();\n    };\n  });\n  return descendants;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\nvar _createContext = createContext({\n    name: \"DescendantsProvider\",\n    errorMessage: \"useDescendantsContext must be used within DescendantsProvider\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  DescendantsContextProvider = _createContext2[0],\n  useDescendantsContext = _createContext2[1];\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\n\nfunction useDescendant(options) {\n  var descendants = useDescendantsContext();\n  var _useState3 = useState(-1),\n    _useState4 = _slicedToArray(_useState3, 2),\n    index = _useState4[0],\n    setIndex = _useState4[1];\n  var ref = useRef(null);\n  useSafeLayoutEffect(function () {\n    return function () {\n      if (!ref.current) return;\n      descendants.unregister(ref.current);\n    };\n  }, []);\n  useSafeLayoutEffect(function () {\n    if (!ref.current) return;\n    var dataIndex = Number(ref.current.dataset.index);\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex);\n    }\n  });\n  var refCallback = options ? cast(descendants.register(options)) : cast(descendants.register);\n  return {\n    descendants: descendants,\n    index: index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref)\n  };\n}\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext() {\n  var ContextProvider = cast(DescendantsContextProvider);\n  var _useDescendantsContext = function _useDescendantsContext() {\n    return cast(useDescendantsContext());\n  };\n  var _useDescendant = function _useDescendant(options) {\n    return useDescendant(options);\n  };\n  var _useDescendants = function _useDescendants() {\n    return useDescendants();\n  };\n  return [\n  // context provider\n  ContextProvider,\n  // call this when you need to read from context\n  _useDescendantsContext,\n  // descendants state information, to be called and passed to `ContextProvider`\n  _useDescendants,\n  // descendant index information\n  _useDescendant];\n}","map":{"version":3,"names":["createContext","mergeRefs","useRef","useState","DescendantsManager","useSafeLayoutEffect","cast","useDescendants","_useState","_useState2","_slicedToArray","descendants","destroy","_createContext","name","errorMessage","_createContext2","DescendantsContextProvider","useDescendantsContext","useDescendant","options","_useState3","_useState4","index","setIndex","ref","current","unregister","dataIndex","Number","dataset","isNaN","refCallback","register","enabledIndex","enabledIndexOf","createDescendantContext","ContextProvider","_useDescendantsContext","_useDescendant","_useDescendants"],"sources":["../../src/use-descendant.ts"],"sourcesContent":["import { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport { RefCallback, useRef, useState } from \"react\"\nimport { DescendantsManager, DescendantOptions } from \"./descendant\"\nimport { useSafeLayoutEffect, cast } from \"./utils\"\n\n/**\n * @internal\n * React hook that initializes the DescendantsManager\n */\nfunction useDescendants<T extends HTMLElement = HTMLElement, K = {}>() {\n  const [descendants] = useState(() => new DescendantsManager<T, K>())\n  useSafeLayoutEffect(() => {\n    return () => descendants.destroy()\n  })\n  return descendants\n}\n\nexport interface UseDescendantsReturn\n  extends ReturnType<typeof useDescendants> {}\n\n/* -------------------------------------------------------------------------------------------------\n * Descendants context to be used in component-land.\n  - Mount the `DescendantsContextProvider` at the root of the component\n  - Call `useDescendantsContext` anywhere you need access to the descendants information\n\n  NB:  I recommend using `createDescendantContext` below\n * -----------------------------------------------------------------------------------------------*/\n\nconst [\n  DescendantsContextProvider,\n  useDescendantsContext,\n] = createContext<UseDescendantsReturn>({\n  name: \"DescendantsProvider\",\n  errorMessage: \"useDescendantsContext must be used within DescendantsProvider\",\n})\n\n/**\n * @internal\n * This hook provides information a descendant such as:\n * - Its index compared to other descendants\n * - ref callback to register the descendant\n * - Its enabled index compared to other enabled descendants\n */\nfunction useDescendant<T extends HTMLElement = HTMLElement, K = {}>(\n  options?: DescendantOptions<K>,\n) {\n  const descendants = useDescendantsContext()\n  const [index, setIndex] = useState(-1)\n  const ref = useRef<T>(null)\n\n  useSafeLayoutEffect(() => {\n    return () => {\n      if (!ref.current) return\n      descendants.unregister(ref.current)\n    }\n  }, [])\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return\n    const dataIndex = Number(ref.current.dataset.index)\n    if (index != dataIndex && !Number.isNaN(dataIndex)) {\n      setIndex(dataIndex)\n    }\n  })\n\n  const refCallback = options\n    ? cast<RefCallback<T>>(descendants.register(options))\n    : cast<RefCallback<T>>(descendants.register)\n\n  return {\n    descendants,\n    index,\n    enabledIndex: descendants.enabledIndexOf(ref.current),\n    register: mergeRefs(refCallback, ref),\n  }\n}\n\n/* -------------------------------------------------------------------------------------------------\n * Function that provides strongly typed versions of the context provider and hooks above.\n   To be used in component-land\n * -----------------------------------------------------------------------------------------------*/\n\nexport function createDescendantContext<\n  T extends HTMLElement = HTMLElement,\n  K = {}\n>() {\n  type ContextProviderType = React.Provider<DescendantsManager<T, K>>\n  const ContextProvider = cast<ContextProviderType>(DescendantsContextProvider)\n\n  const _useDescendantsContext = () =>\n    cast<DescendantsManager<T, K>>(useDescendantsContext())\n\n  const _useDescendant = (options?: DescendantOptions<K>) =>\n    useDescendant<T, K>(options)\n\n  const _useDescendants = () => useDescendants<T, K>()\n\n  return [\n    // context provider\n    ContextProvider,\n    // call this when you need to read from context\n    _useDescendantsContext,\n    // descendants state information, to be called and passed to `ContextProvider`\n    _useDescendants,\n    // descendant index information\n    _useDescendant,\n  ] as const\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
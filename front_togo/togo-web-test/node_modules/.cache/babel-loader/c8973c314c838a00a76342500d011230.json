{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _core = require(\"@emotion/core\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _clockEvents = _interopRequireDefault(require(\"../hooks/clock-events\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\n\nfunction ClockWrapper() {\n  var config = (0, _configContext.default)(); // clock events\n\n  var clock = (0, _react.useRef)(null);\n\n  var _useClockEvents = (0, _clockEvents.default)(clock, calculateTimeValue),\n      bind = _useClockEvents.bind;\n\n  var _useTimekeeperState = (0, _stateContext.default)(),\n      mode = _useTimekeeperState.mode,\n      updateTime = _useTimekeeperState.updateTime,\n      setMode = _useTimekeeperState.setMode,\n      getComposedTime = _useTimekeeperState.getComposedTime;\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n\n  function calculateTimeValue(angle, _ref) {\n    var _ref$canAutoChangeUni = _ref.canAutoChangeUnit,\n        canAutoChangeUnit = _ref$canAutoChangeUni === void 0 ? false : _ref$canAutoChangeUni,\n        _ref$wasTapped = _ref.wasTapped,\n        wasTapped = _ref$wasTapped === void 0 ? false : _ref$wasTapped,\n        _ref$isInnerClick = _ref.isInnerClick,\n        isInnerClick = _ref$isInnerClick === void 0 ? false : _ref$isInnerClick;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    var totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    var minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    var val = angle / 360 * totalIncrements;\n    var selected = Math.round(val / minIncrement) * minIncrement;\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n      if (!isInnerClick && selected !== 0) {\n        selected += 12;\n      } else if (isInnerClick && selected === 0) {\n        selected += 12;\n      }\n\n      if (selected === 24) {\n        selected = 0;\n      }\n    } // update time officially on timekeeper\n\n\n    updateTime(selected); // handle any unit autochanges on done click\n\n    if (canAutoChangeUnit) {\n      if (config.switchToMinuteOnHourSelect && (0, _utils.isHourMode)(mode)) {\n        setMode(_constants.MODE.MINUTES);\n      } else if (config.closeOnMinuteSelect && (0, _utils.isMinuteMode)(mode)) {\n        config.onDoneClick && config.onDoneClick(getComposedTime());\n      }\n    }\n  }\n\n  return (0, _core.jsx)(\"div\", (0, _extends2.default)({}, bind, {\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default\n  }), (0, _core.jsx)(_Clock.default, {\n    clockEl: clock\n  }), !config.hour24Mode && (0, _core.jsx)(_Meridiems.default, null));\n}","map":null,"metadata":{},"sourceType":"script"}
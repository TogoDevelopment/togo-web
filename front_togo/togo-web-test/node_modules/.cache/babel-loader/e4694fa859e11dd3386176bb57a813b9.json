{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/system/togo-web-test/src/Container/AccountDetails/BusinessLocation.js\",\n    _this = this;\n\nimport { Grid, Checkbox, Box, Flex, Select, Button, Container, Row, Col } from \"@chakra-ui/react\";\nimport styles from \"./Styles\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getBusinessLocation, updateTransporterBusniessLocation } from \"../../Actions/ProfileActions\";\nimport Loader from \"../../components/Loader/Loader\";\nimport { isTransporter } from \"../../Util\";\nimport { Input, Text } from \"@chakra-ui/react\";\nimport { getBusinessTypes, setClientBusiness } from \"../../APIs/ProfileAPIs\";\nimport { Formik, Form } from \"formik\";\nimport { toastMessage } from \"../../Actions/GeneralActions\";\nimport './BusinessLocation.css';\nimport translate from \"../../i18n/translate\";\nexport default function BusinessLocation() {\n  var dispatch = useDispatch();\n  var businessLocations = useSelector(function (state) {\n    return state.profile.businessLocations;\n  });\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var isTransporterVal = isTransporter();\n  var fetchData = useCallback(function () {\n    setLoading(true);\n    dispatch(getBusinessLocation(function () {\n      setLoading(false);\n    }, function (err) {\n      setLoading(false);\n      dispatch(toastMessage(err));\n    }));\n  }, [dispatch]);\n  useEffect(function () {\n    fetchData();\n  }, [fetchData]);\n  return /*#__PURE__*/React.createElement(Box, Object.assign({}, styles.content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }), loading ? /*#__PURE__*/React.createElement(Loader, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 24\n    }\n  }) : isTransporterVal ? /*#__PURE__*/React.createElement(TransporterBusinessLocation, {\n    businessLocations: businessLocations,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 36\n    }\n  }) : /*#__PURE__*/React.createElement(ClientBusinessLocation, {\n    businessLocations: businessLocations,\n    fetchData: fetchData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 21\n    }\n  }));\n}\n;\n\nvar ClientBusinessLocation = function ClientBusinessLocation(_ref) {\n  var _ref$businessLocation = _ref.businessLocations,\n      BusinessName = _ref$businessLocation.BusinessName,\n      BusinessPlace = _ref$businessLocation.BusinessPlace,\n      BusinessTypeId = _ref$businessLocation.BusinessTypeId,\n      fetchData = _ref.fetchData;\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      bussinessTypes = _useState4[0],\n      setBusinessTypes = _useState4[1];\n\n  var dispatch = useDispatch();\n  useEffect(function () {\n    getBusinessTypes().then(function (_ref2) {\n      var server_response = _ref2.data.server_response;\n      setBusinessTypes(server_response);\n    }).catch(function (err) {\n      console.log(err);\n    });\n  }, []);\n\n  var handleSubmit = function handleSubmit(values) {\n    setClientBusiness(values).then(function () {\n      fetchData();\n      dispatch(toastMessage(\"Business location has been updated\", \"Updated Successfully\", \"success\"));\n    }).catch(function (err) {\n      console.log(err);\n      dispatch(toastMessage(err));\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Flex, {\n    direction: \"column\",\n    w: \"80%\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Formik, {\n    enableReinitialize: true,\n    initialValues: {\n      BusinessName: BusinessName,\n      BusinessPlace: BusinessPlace,\n      BusinessTypeId: BusinessTypeId\n    },\n    onSubmit: handleSubmit,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, function (_ref3) {\n    var values = _ref3.values,\n        handleChange = _ref3.handleChange,\n        handleSubmit = _ref3.handleSubmit,\n        setFieldValue = _ref3.setFieldValue;\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Text, Object.assign({}, styles.title, styles.greyTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 21\n      }\n    }), translate(\"BUSINESS_LOCATION.NAME\"), \":\"), /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Business Name\",\n      name: \"BusinessName\",\n      onChange: handleChange,\n      value: values.BusinessName,\n      ml: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Text, Object.assign({}, styles.title, styles.greyTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 21\n      }\n    }), translate(\"BUSINESS_LOCATION.PLACE\"), \":\"), /*#__PURE__*/React.createElement(Input, {\n      placeholder: \"Business Place\",\n      name: \"BusinessPlace\",\n      onChange: handleChange,\n      value: values.BusinessPlace,\n      ml: 3,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(Text, Object.assign({}, styles.title, styles.greyTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 21\n      }\n    }), translate(\"BUSINESS_LOCATION.TYPE\"), \":\"), /*#__PURE__*/React.createElement(Select, {\n      placeholder: \"Business Type\",\n      ml: 3,\n      name: \"BusinessTypeId\",\n      onChange: function onChange(_ref4) {\n        var value = _ref4.target.value;\n        return setFieldValue('BusinessTypeId', value);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 21\n      }\n    }, bussinessTypes.map(function (_ref5) {\n      var Name = _ref5.Name,\n          id = _ref5.id;\n      return /*#__PURE__*/React.createElement(\"option\", {\n        key: id,\n        selected: BusinessTypeId === id,\n        value: id,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 63\n        }\n      }, Name);\n    })), /*#__PURE__*/React.createElement(Button, Object.assign({\n      type: \"submit\"\n    }, styles.updateButton, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }), translate(\"BUSINESS_LOCATION.UPDATE\")));\n  }));\n};\n\nvar TransporterBusinessLocation = function TransporterBusinessLocation(_ref6) {\n  var businessLocations = _ref6.businessLocations;\n  var dispatch = useDispatch();\n\n  var handleClick = function handleClick(_ref7) {\n    var _ref7$target = _ref7.target,\n        value = _ref7$target.value,\n        checked = _ref7$target.checked;\n    dispatch(updateTransporterBusniessLocation(value, checked ? \"Add\" : \"Remove\"));\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 17\n    }\n  }, businessLocations.map(function (_ref8) {\n    var IdCity = _ref8.IdCity,\n        CityName = _ref8.CityName,\n        CheckAdded = _ref8.CheckAdded;\n    return /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n      colorScheme: \"green\",\n      key: IdCity,\n      defaultIsChecked: CheckAdded === \"Added\",\n      value: IdCity,\n      onChange: handleClick\n    }, styles.subTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 25\n      }\n    }), CityName);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    gridTemplateColumns: \"repeat(2, 1fr)\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 17\n    }\n  }, businessLocations.map(function (_ref9) {\n    var IdCity = _ref9.IdCity,\n        CityName = _ref9.CityName,\n        CheckAdded = _ref9.CheckAdded;\n    return /*#__PURE__*/React.createElement(Checkbox, Object.assign({\n      colorScheme: \"green\",\n      key: IdCity,\n      defaultIsChecked: CheckAdded === \"Added\",\n      value: IdCity,\n      onChange: handleClick\n    }, styles.subTitle, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 25\n      }\n    }), CityName);\n  })))));\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/Container/AccountDetails/BusinessLocation.js"],"names":["Grid","Checkbox","Box","Flex","Select","Button","Container","Row","Col","styles","React","useCallback","useEffect","useState","useSelector","useDispatch","getBusinessLocation","updateTransporterBusniessLocation","Loader","isTransporter","Input","Text","getBusinessTypes","setClientBusiness","Formik","Form","toastMessage","translate","BusinessLocation","dispatch","businessLocations","state","profile","loading","setLoading","isTransporterVal","fetchData","err","content","ClientBusinessLocation","BusinessName","BusinessPlace","BusinessTypeId","bussinessTypes","setBusinessTypes","then","server_response","data","catch","console","log","handleSubmit","values","handleChange","setFieldValue","title","greyTitle","value","target","map","Name","id","updateButton","TransporterBusinessLocation","handleClick","checked","IdCity","CityName","CheckAdded","subTitle"],"mappings":"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","sourcesContent":["import {\r\n    Grid, Checkbox, Box, Flex, Select, Button, Container, Row, Col\r\n} from \"@chakra-ui/react\"\r\nimport styles from \"./Styles\";\r\nimport React, { useCallback, useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getBusinessLocation, updateTransporterBusniessLocation } from \"../../Actions/ProfileActions\";\r\nimport Loader from \"../../components/Loader/Loader\";\r\nimport { isTransporter } from \"../../Util\";\r\nimport { Input, Text } from \"@chakra-ui/react\"\r\nimport { getBusinessTypes, setClientBusiness } from \"../../APIs/ProfileAPIs\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { toastMessage } from \"../../Actions/GeneralActions\";\r\nimport './BusinessLocation.css';\r\nimport translate from \"../../i18n/translate\";\r\n\r\n\r\nexport default function BusinessLocation() {\r\n    const dispatch = useDispatch();\r\n    const businessLocations = useSelector(state => state.profile.businessLocations);\r\n    const [loading, setLoading] = useState(true);\r\n    const isTransporterVal = isTransporter();\r\n\r\n    const fetchData = useCallback(() => {\r\n        setLoading(true);\r\n        dispatch(getBusinessLocation(() => {\r\n            setLoading(false);\r\n        }, (err) => {\r\n            setLoading(false);\r\n            dispatch(toastMessage(err));\r\n        }));\r\n    }, [dispatch]);\r\n\r\n    useEffect(() => {\r\n        fetchData();\r\n    }, [fetchData]);\r\n\r\n    return (\r\n        <Box {...styles.content}>\r\n            {loading ? <Loader /> :\r\n                isTransporterVal ? <TransporterBusinessLocation businessLocations={businessLocations} /> :\r\n                    <ClientBusinessLocation businessLocations={businessLocations} fetchData={fetchData} />\r\n            }\r\n        </Box>\r\n    )\r\n};\r\n\r\n\r\nconst ClientBusinessLocation = ({ businessLocations: { BusinessName, BusinessPlace, BusinessTypeId }, fetchData }) => {\r\n    const [bussinessTypes, setBusinessTypes] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        getBusinessTypes().then(({ data: { server_response } }) => {\r\n            setBusinessTypes(server_response);\r\n        }).catch(err => {\r\n            console.log(err);\r\n        })\r\n    }, []);\r\n\r\n    const handleSubmit = (values) => {\r\n        setClientBusiness(values).then(() => {\r\n            fetchData();\r\n            dispatch(toastMessage(\"Business location has been updated\", \"Updated Successfully\", \"success\"));\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(toastMessage(err));\r\n        });\r\n    };\r\n\r\n    return <Flex direction=\"column\" w=\"80%\">\r\n        <Formik\r\n            enableReinitialize\r\n            initialValues={{ BusinessName, BusinessPlace, BusinessTypeId }}\r\n            onSubmit={handleSubmit}\r\n        >\r\n            {({\r\n                values,\r\n                handleChange,\r\n                handleSubmit,\r\n                setFieldValue\r\n            }) => (\r\n                <Form onSubmit={handleSubmit}>\r\n                    <Text {...styles.title} {...styles.greyTitle}>{translate(\"BUSINESS_LOCATION.NAME\")}:</Text>\r\n                    <Input placeholder=\"Business Name\"\r\n                        name=\"BusinessName\"\r\n                        onChange={handleChange}\r\n                        value={values.BusinessName}\r\n                        ml={3} />\r\n                    <Text {...styles.title} {...styles.greyTitle}>{translate(\"BUSINESS_LOCATION.PLACE\")}:</Text>\r\n                    <Input placeholder=\"Business Place\"\r\n                        name=\"BusinessPlace\"\r\n                        onChange={handleChange}\r\n                        value={values.BusinessPlace}\r\n                        ml={3} />\r\n                    <Text {...styles.title} {...styles.greyTitle}>{translate(\"BUSINESS_LOCATION.TYPE\")}:</Text>\r\n                    <Select placeholder=\"Business Type\" ml={3} name=\"BusinessTypeId\"\r\n                        onChange={({ target: { value } }) => setFieldValue('BusinessTypeId', value)}>\r\n                        {bussinessTypes.map(({ Name, id }) => <option key={id} selected={BusinessTypeId === id}\r\n                            value={id}>{Name}</option>)}\r\n                    </Select>\r\n                    <Button type=\"submit\" {...styles.updateButton}>{translate(\"BUSINESS_LOCATION.UPDATE\")}</Button>\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    </Flex>\r\n};\r\n\r\n\r\nconst TransporterBusinessLocation = ({ businessLocations }) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = ({ target: { value, checked } }) => {\r\n        dispatch(updateTransporterBusniessLocation(value, checked ? \"Add\" : \"Remove\"));\r\n    };\r\n\r\n    return <Container fluid>\r\n        <Row>\r\n            <Col>\r\n                <Grid gridTemplateColumns=\"repeat(2, 1fr)\">\r\n                    {businessLocations.map(({ IdCity, CityName, CheckAdded }) => (\r\n                        <Checkbox\r\n                            colorScheme=\"green\"\r\n                            key={IdCity}\r\n                            defaultIsChecked={CheckAdded === \"Added\"}\r\n                            value={IdCity}\r\n                            onChange={handleClick}\r\n                            {...styles.subTitle}>{CityName}</Checkbox>\r\n                    ))}\r\n                </Grid>\r\n            </Col>\r\n\r\n            <Col>\r\n                <Grid gridTemplateColumns=\"repeat(2, 1fr)\">\r\n                    {businessLocations.map(({ IdCity, CityName, CheckAdded }) => (\r\n                        <Checkbox\r\n                            colorScheme=\"green\"\r\n                            key={IdCity}\r\n                            defaultIsChecked={CheckAdded === \"Added\"}\r\n                            value={IdCity}\r\n                            onChange={handleClick}\r\n                            {...styles.subTitle}>{CityName}</Checkbox>\r\n                    ))}\r\n                </Grid>\r\n            </Col>\r\n        </Row>\r\n    </Container>\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import PropTypes from 'prop-types';\nvar ANONYMOUS = '';\n\nfunction createChainableTypeChecker(validate) {\n  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {\n    componentName = componentName || ANONYMOUS;\n    propFullName = propFullName || propName;\n\n    if (props[propName] == null) {\n      if (isRequired) {\n        if (props[propName] === null) {\n          return new Error('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));\n        }\n\n        return new Error('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));\n      }\n\n      return null;\n    } else {\n      return validate(props, propName, componentName, location, propFullName, secret);\n    }\n  }\n\n  var chainedCheckType = checkType.bind(null, false);\n  chainedCheckType.isRequired = checkType.bind(null, true);\n  return chainedCheckType;\n}\n\nexport function tupleType() {\n  for (var _len = arguments.length, types = new Array(_len), _key = 0; _key < _len; _key++) {\n    types[_key] = arguments[_key];\n  }\n\n  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName, secret) {\n    var value = props[propName];\n\n    if (!location) {\n      location = 'prop';\n    }\n\n    if (!propFullName) {\n      propFullName = propName;\n    }\n\n    if (!Array.isArray(value)) {\n      return new Error(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to `\" + componentName + \"`, expected \" + types.length + \"-element array\");\n    }\n\n    if (value.length === 0) {\n      return null;\n    }\n\n    if (value.length !== types.length) {\n      return new Error(\"Invalid \" + location + \" `\" + propFullName + \"` supplied to `\" + componentName + \"`, expected \" + types.length + \"-element array, got array of length \" + value.length);\n    }\n\n    for (var i = 0; i < value.length; ++i) {\n      var error = types[i](value, i, componentName, 'element', propFullName + \"[\" + i + \"]\", secret);\n\n      if (error) {\n        return error;\n      }\n    }\n\n    return null;\n  });\n}\nexport var refType = PropTypes.oneOfType([PropTypes.func, PropTypes.any]);","map":null,"metadata":{},"sourceType":"module"}
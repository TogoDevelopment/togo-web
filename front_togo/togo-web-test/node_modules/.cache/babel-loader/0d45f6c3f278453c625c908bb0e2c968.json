{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/TestComponent.jsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Form, Row, Col, Container, Button, ListGroup } from 'react-bootstrap';\nimport { tempAddCity, tempGetCities } from '../APIs/LoginAPIs';\nexport default function TestComponent() {\n  var _this = this;\n\n  /* const textRef = useRef();\r\n    const [listAreas, setListAreas] = useState([]);\r\n    const cleanHandler = () => {\r\n      let tempStr = textRef.current.value;\r\n        let tempArr = tempStr.split(\"<option value=\\\"\\\">\")[1].split(\"</option>\");\r\n        let resArr = [];\r\n        for (let i = 1; i < tempArr.length - 1; i++) {\r\n          let tempNumber = tempArr[i].split(\"\\\">\")[0].split(\"\\\"\")[1];\r\n          let tempName = tempArr[i].split(\"\\\">\")[1];\r\n          resArr.push({ number: tempNumber, name: tempName });\r\n            tempAddCity(tempNumber, tempName).then((res) => {\r\n              if (res.data != \"enable editing!\")\r\n                  console.log(res.data);\r\n          })\r\n      }\r\n        setListAreas(resArr);\r\n  } */\n  var _useState = useState(1),\n      _useState2 = _slicedToArray(_useState, 2),\n      language = _useState2[0],\n      setLanguage = _useState2[1];\n\n  var _useState3 = useState(\"outline-primary\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      arVar = _useState4[0],\n      setArVar = _useState4[1];\n\n  var _useState5 = useState(\"primary\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      enVar = _useState6[0],\n      setEnVar = _useState6[1];\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      provinces = _useState8[0],\n      setProvinces = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      governorates = _useState10[0],\n      setGovernorates = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      cities = _useState12[0],\n      setCities = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      areas = _useState14[0],\n      setAreas = _useState14[1];\n\n  useEffect(function () {\n    // provinces, governorates, cities, areas\n    tempGetCities(\"provinces\", -1, language).then(function (res) {\n      // console.log(res.data.server_response);\n      setProvinces(res.data.server_response);\n    });\n  }, [language]);\n\n  var updateSubLevel = function updateSubLevel(type, superId) {\n    tempGetCities(type, superId, language).then(function (res) {\n      // console.log(res.data.server_response)\n      if (type === \"governorates\") {\n        setGovernorates([]);\n        setCities([]);\n        setAreas([]);\n        setGovernorates(res.data.server_response);\n      } else if (type === \"cities\") {\n        setCities([]);\n        setAreas([]);\n        setCities(res.data.server_response);\n      } else {\n        setAreas([]);\n        setAreas(res.data.server_response);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"mb-5 d-flex justify-content-end\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: enVar,\n    onClick: function onClick() {\n      setEnVar(\"primary\");\n      setArVar(\"outline-primary\");\n      setLanguage(1);\n      setGovernorates([]);\n      setCities([]);\n      setAreas([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 21\n    }\n  }, \"EN\"), /*#__PURE__*/React.createElement(Button, {\n    variant: arVar,\n    className: \"ms-1\",\n    onClick: function onClick() {\n      setEnVar(\"outline-primary\");\n      setArVar(\"primary\");\n      setLanguage(2);\n      setGovernorates([]);\n      setCities([]);\n      setAreas([]);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 21\n    }\n  }, \"AR\"))), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, \"Provinces:\"), /*#__PURE__*/React.createElement(Form.Select, {\n    \"aria-label\": \"Default select example\",\n    onChange: function onChange(e) {\n      updateSubLevel(\"governorates\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 25\n    }\n  }, \"Select Provice\"), provinces.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 40\n      }\n    }, item.id + \" - \" + item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 21\n    }\n  }, \"Governorates:\"), /*#__PURE__*/React.createElement(Form.Select, {\n    \"aria-label\": \"Default select example\",\n    onChange: function onChange(e) {\n      updateSubLevel(\"cities\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 25\n    }\n  }, \"Select Governorate\"), governorates.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 40\n      }\n    }, item.id + \" - \" + item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 21\n    }\n  }, \"Cities:\"), /*#__PURE__*/React.createElement(Form.Select, {\n    \"aria-label\": \"Default select example\",\n    onChange: function onChange(e) {\n      updateSubLevel(\"areas\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 25\n    }\n  }, \"Select City\"), cities.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 40\n      }\n    }, item.id + \" - \" + item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, \"Areas:\"), /*#__PURE__*/React.createElement(Form.Select, {\n    \"aria-label\": \"Default select example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 25\n    }\n  }, \"Select Area\"), areas.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 40\n      }\n    }, item.id + \" - \" + item.name);\n  })))));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/TestComponent.jsx"],"names":["React","useEffect","useRef","useState","Form","Row","Col","Container","Button","ListGroup","tempAddCity","tempGetCities","TestComponent","language","setLanguage","arVar","setArVar","enVar","setEnVar","provinces","setProvinces","governorates","setGovernorates","cities","setCities","areas","setAreas","then","res","data","server_response","updateSubLevel","type","superId","e","target","value","color","map","item","index","id","name"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Form, Row, Col, Container, Button, ListGroup } from 'react-bootstrap';\r\nimport { tempAddCity, tempGetCities } from '../APIs/LoginAPIs';\r\n\r\nexport default function TestComponent() {\r\n\r\n    /* const textRef = useRef();\r\n\r\n    const [listAreas, setListAreas] = useState([]);\r\n\r\n    const cleanHandler = () => {\r\n        let tempStr = textRef.current.value;\r\n\r\n        let tempArr = tempStr.split(\"<option value=\\\"\\\">\")[1].split(\"</option>\");\r\n\r\n        let resArr = [];\r\n\r\n        for (let i = 1; i < tempArr.length - 1; i++) {\r\n            let tempNumber = tempArr[i].split(\"\\\">\")[0].split(\"\\\"\")[1];\r\n            let tempName = tempArr[i].split(\"\\\">\")[1];\r\n            resArr.push({ number: tempNumber, name: tempName });\r\n\r\n            tempAddCity(tempNumber, tempName).then((res) => {\r\n                if (res.data != \"enable editing!\")\r\n                    console.log(res.data);\r\n            })\r\n        }\r\n\r\n        setListAreas(resArr);\r\n    } */\r\n\r\n    const [language, setLanguage] = useState(1);\r\n    const [arVar, setArVar] = useState(\"outline-primary\");\r\n    const [enVar, setEnVar] = useState(\"primary\");\r\n\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [governorates, setGovernorates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // provinces, governorates, cities, areas\r\n        tempGetCities(\"provinces\", -1, language).then((res) => {\r\n            // console.log(res.data.server_response);\r\n            setProvinces(res.data.server_response);\r\n        })\r\n    }, [language])\r\n\r\n    const updateSubLevel = (type, superId) => {\r\n        tempGetCities(type, superId, language).then((res) => {\r\n            // console.log(res.data.server_response)\r\n\r\n            if (type === \"governorates\") {\r\n                setGovernorates([]);\r\n                setCities([]);\r\n                setAreas([]);\r\n                setGovernorates(res.data.server_response);\r\n            } else if (type === \"cities\") {\r\n                setCities([]);\r\n                setAreas([]);\r\n                setCities(res.data.server_response);\r\n            } else {\r\n                setAreas([]);\r\n                setAreas(res.data.server_response);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Container fluid className=\"p-5\">\r\n            {/* <Row>\r\n                <Col className=\"d-flex justify-content-center\"><span className=\"h1\">This is a test component!</span></Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Enter options to clear:</Form.Label>\r\n                        <Form.Control style={{ height: \"300px\", overflowY: \"scroll\" }} as=\"textarea\" rows={100} ref={textRef} />\r\n                    </Form.Group>\r\n                </Col>\r\n\r\n                <Col lg={1}>\r\n                    <Button className=\"mt-5\" onClick={cleanHandler}>\r\n                        clean\r\n                    </Button>\r\n                </Col>\r\n\r\n                <Col lg={5}>\r\n                    <ListGroup className=\"mt-4\">\r\n                        {\r\n                            listAreas.map((item, index) => {\r\n                                return <ListGroup.Item key={index}>{item.number + \" - \" + item.name}</ListGroup.Item>\r\n                            })\r\n                        }\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row> */}\r\n\r\n            <Row>\r\n                <Col className=\"mb-5 d-flex justify-content-end\">\r\n                    <Button variant={enVar} onClick={() => {\r\n                        setEnVar(\"primary\");\r\n                        setArVar(\"outline-primary\");\r\n                        setLanguage(1);\r\n                        setGovernorates([]);\r\n                        setCities([]);\r\n                        setAreas([]);\r\n                    }}>\r\n                        EN\r\n                    </Button>\r\n                    <Button variant={arVar} className=\"ms-1\" onClick={() => {\r\n                        setEnVar(\"outline-primary\");\r\n                        setArVar(\"primary\");\r\n                        setLanguage(2);\r\n                        setGovernorates([]);\r\n                        setCities([]);\r\n                        setAreas([]);\r\n                    }}>\r\n                        AR\r\n                    </Button>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Provinces:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"governorates\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select Provice</option>\r\n                        {\r\n                            provinces.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Governorates:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"cities\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select Governorate</option>\r\n                        {\r\n                            governorates.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Cities:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"areas\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select City</option>\r\n                        {\r\n                            cities.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Areas:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\">\r\n                        <option style={{ color: \"lightgray\" }}>Select Area</option>\r\n                        {\r\n                            areas.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
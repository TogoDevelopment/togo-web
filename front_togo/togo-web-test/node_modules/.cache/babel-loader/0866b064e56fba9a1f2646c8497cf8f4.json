{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useBoolean, useCallbackRef, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    defaultIsChecked = _props.defaultIsChecked,\n    _props$defaultChecked = _props.defaultChecked,\n    defaultChecked = _props$defaultChecked === void 0 ? defaultIsChecked : _props$defaultChecked,\n    checkedProp = _props.isChecked,\n    isFocusable = _props.isFocusable,\n    isDisabled = _props.isDisabled,\n    isReadOnly = _props.isReadOnly,\n    isRequired = _props.isRequired,\n    onChange = _props.onChange,\n    isIndeterminate = _props.isIndeterminate,\n    isInvalid = _props.isInvalid,\n    name = _props.name,\n    value = _props.value,\n    id = _props.id,\n    onBlur = _props.onBlur,\n    onFocus = _props.onFocus,\n    ariaLabel = _props[\"aria-label\"],\n    ariaLabelledBy = _props[\"aria-labelledby\"],\n    ariaInvalid = _props[\"aria-invalid\"],\n    ariaDescribedBy = _props[\"aria-describedby\"],\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"defaultChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\", \"onBlur\", \"onFocus\", \"aria-label\", \"aria-labelledby\", \"aria-invalid\", \"aria-describedby\"]);\n  var onChangeProp = useCallbackRef(onChange);\n  var onBlurProp = useCallbackRef(onBlur);\n  var onFocusProp = useCallbackRef(onFocus);\n  var _useBoolean = useBoolean(),\n    _useBoolean2 = _slicedToArray(_useBoolean, 2),\n    isFocused = _useBoolean2[0],\n    setFocused = _useBoolean2[1];\n  var _useBoolean3 = useBoolean(),\n    _useBoolean4 = _slicedToArray(_useBoolean3, 2),\n    isHovered = _useBoolean4[0],\n    setHovered = _useBoolean4[1];\n  var _useBoolean5 = useBoolean(),\n    _useBoolean6 = _slicedToArray(_useBoolean5, 2),\n    isActive = _useBoolean6[0],\n    setActive = _useBoolean6[1];\n  var inputRef = useRef(null);\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    rootIsLabelElement = _useState2[0],\n    setRootIsLabelElement = _useState2[1];\n  var _useState3 = useState(!!defaultChecked),\n    _useState4 = _slicedToArray(_useState3, 2),\n    checkedState = _useState4[0],\n    setCheckedState = _useState4[1];\n  var _useControllableProp = useControllableProp(checkedProp, checkedState),\n    _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n    isControlled = _useControllableProp2[0],\n    isChecked = _useControllableProp2[1];\n  warn({\n    condition: !!defaultIsChecked,\n    message: 'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' + 'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.'\n  });\n  var handleChange = useCallback(function (event) {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n    onChangeProp == null ? void 0 : onChangeProp(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChangeProp]);\n  useSafeLayoutEffect(function () {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(function (event) {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(function () {\n    if (!inputRef.current) return;\n    var notInSync = inputRef.current.checked !== isChecked;\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked);\n    }\n  }, [inputRef.current]);\n  var getCheckboxProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    var onPressDown = function onPressDown(event) {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  }, [isActive, isChecked, isDisabled, isFocused, isHovered, isIndeterminate, isInvalid, isReadOnly, setActive, setHovered.off, setHovered.on]);\n  var getRootProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, htmlProps, props, {\n      ref: mergeRefs(forwardedRef, function (node) {\n        if (!node) return;\n        setRootIsLabelElement(node.tagName === \"LABEL\");\n      }),\n      onClick: callAllHandlers(props.onClick, function () {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          var _inputRef$current;\n          (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.click();\n          focus(inputRef.current, {\n            nextTick: true\n          });\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement]);\n  var getInputProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: mergeRefs(inputRef, forwardedRef),\n      type: \"checkbox\",\n      name: name,\n      value: value,\n      id: id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-label\": ariaLabel,\n      \"aria-labelledby\": ariaLabelledBy,\n      \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n      \"aria-describedby\": ariaDescribedBy,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  }, [name, value, id, handleChange, setFocused.off, setFocused.on, onBlurProp, onFocusProp, onKeyDown, onKeyUp, isRequired, isChecked, trulyDisabled, isReadOnly, ariaLabel, ariaLabelledBy, ariaInvalid, isInvalid, ariaDescribedBy, isDisabled]);\n  var getLabelProps = useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  }, [isChecked, isDisabled, isInvalid]);\n  return {\n    state: {\n      isInvalid: isInvalid,\n      isFocused: isFocused,\n      isChecked: isChecked,\n      isActive: isActive,\n      isHovered: isHovered,\n      isIndeterminate: isIndeterminate,\n      isDisabled: isDisabled,\n      isReadOnly: isReadOnly,\n      isRequired: isRequired\n    },\n    getRootProps: getRootProps,\n    getCheckboxProps: getCheckboxProps,\n    getInputProps: getInputProps,\n    getLabelProps: getLabelProps,\n    htmlProps: htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"names":["useBoolean","useCallbackRef","useControllableProp","useSafeLayoutEffect","mergeRefs","callAllHandlers","dataAttr","focus","warn","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","_props","defaultIsChecked","_props$defaultChecked","defaultChecked","checkedProp","isChecked","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","onBlur","onFocus","ariaLabel","ariaLabelledBy","ariaInvalid","ariaDescribedBy","htmlProps","_objectWithoutPropertiesLoose","onChangeProp","onBlurProp","onFocusProp","_useBoolean","_useBoolean2","_slicedToArray","isFocused","setFocused","_useBoolean3","_useBoolean4","isHovered","setHovered","_useBoolean5","_useBoolean6","isActive","setActive","inputRef","_useState","_useState2","rootIsLabelElement","setRootIsLabelElement","_useState3","_useState4","checkedState","setCheckedState","_useControllableProp","_useControllableProp2","isControlled","condition","message","handleChange","event","preventDefault","target","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","key","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","_extends","ref","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getRootProps","node","tagName","onClick","_inputRef$current","click","nextTick","getInputProps","type","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"sources":["../../src/use-checkbox.ts"],"sourcesContent":["import {\n  useBoolean,\n  useCallbackRef,\n  useControllableProp,\n  useSafeLayoutEffect,\n} from \"@chakra-ui/hooks\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { callAllHandlers, dataAttr, focus, warn } from \"@chakra-ui/utils\"\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\"\nimport React, {\n  ChangeEvent,\n  KeyboardEvent,\n  useCallback,\n  useRef,\n  useState,\n} from \"react\"\n\nexport interface UseCheckboxProps {\n  /**\n   * If `true`, the checkbox will be checked.\n   * You'll need to pass `onChange` to update its value (since it is now controlled)\n   */\n  isChecked?: boolean\n  /**\n   * If `true`, the checkbox will be indeterminate.\n   * This only affects the icon shown inside checkbox\n   * and does not modify the isChecked property.\n   */\n  isIndeterminate?: boolean\n  /**\n   * If `true`, the checkbox will be disabled\n   */\n  isDisabled?: boolean\n  /**\n   * If `true` and `isDisabled` is passed, the checkbox will\n   * remain tabbable but not interactive\n   */\n  isFocusable?: boolean\n  /**\n   * If `true`, the checkbox will be readonly\n   */\n  isReadOnly?: boolean\n  /**\n   * If `true`, the checkbox is marked as invalid.\n   * Changes style of unchecked state.\n   */\n  isInvalid?: boolean\n  /**\n   * If `true`, the checkbox input is marked as required,\n   * and `required` attribute will be added\n   */\n  isRequired?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   * @deprecated Please use the `defaultChecked` prop, which mirrors default\n   * React checkbox behavior.\n   */\n  defaultIsChecked?: boolean\n  /**\n   * If `true`, the checkbox will be initially checked.\n   */\n  defaultChecked?: boolean\n  /**\n   * The callback invoked when the checked state of the `Checkbox` changes.\n   */\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is blurred (loses focus)\n   */\n  onBlur?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The callback invoked when the checkbox is focused\n   */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void\n  /**\n   * The name of the input field in a checkbox\n   * (Useful for form submission).\n   */\n  name?: string\n  /**\n   * The value to be used in the checkbox input.\n   * This is the value that will be returned on form submission.\n   */\n  value?: string | number\n  /**\n   * id assigned to input\n   */\n  id?: string\n  /**\n   * Defines the string that labels the checkbox element.\n   */\n  \"aria-label\"?: string\n  /**\n   * Refers to the `id` of the element that labels the checkbox element.\n   */\n  \"aria-labelledby\"?: string\n  \"aria-invalid\"?: true | undefined\n  \"aria-describedby\"?: string\n}\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/checkbox#hooks\n */\nexport function useCheckbox(props: UseCheckboxProps = {}) {\n  const {\n    defaultIsChecked,\n    defaultChecked = defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id,\n    onBlur,\n    onFocus,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    \"aria-invalid\": ariaInvalid,\n    \"aria-describedby\": ariaDescribedBy,\n    ...htmlProps\n  } = props\n\n  const onChangeProp = useCallbackRef(onChange)\n  const onBlurProp = useCallbackRef(onBlur)\n  const onFocusProp = useCallbackRef(onFocus)\n\n  const [isFocused, setFocused] = useBoolean()\n  const [isHovered, setHovered] = useBoolean()\n  const [isActive, setActive] = useBoolean()\n\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [rootIsLabelElement, setRootIsLabelElement] = useState(true)\n\n  const [checkedState, setCheckedState] = useState(!!defaultChecked)\n\n  const [isControlled, isChecked] = useControllableProp(\n    checkedProp,\n    checkedState,\n  )\n\n  warn({\n    condition: !!defaultIsChecked,\n    message:\n      'The \"defaultIsChecked\" prop has been deprecated and will be removed in a future version. ' +\n      'Please use the \"defaultChecked\" prop instead, which mirrors default React checkbox behavior.',\n  })\n\n  const handleChange = useCallback(\n    (event: ChangeEvent<HTMLInputElement>) => {\n      if (isReadOnly || isDisabled) {\n        event.preventDefault()\n        return\n      }\n\n      if (!isControlled) {\n        if (isChecked) {\n          setCheckedState(event.target.checked)\n        } else {\n          setCheckedState(isIndeterminate ? true : event.target.checked)\n        }\n      }\n\n      onChangeProp?.(event)\n    },\n    [\n      isReadOnly,\n      isDisabled,\n      isChecked,\n      isControlled,\n      isIndeterminate,\n      onChangeProp,\n    ],\n  )\n\n  useSafeLayoutEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.indeterminate = Boolean(isIndeterminate)\n    }\n  }, [isIndeterminate])\n\n  const trulyDisabled = isDisabled && !isFocusable\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.on()\n      }\n    },\n    [setActive],\n  )\n\n  const onKeyUp = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \" \") {\n        setActive.off()\n      }\n    },\n    [setActive],\n  )\n\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n  useSafeLayoutEffect(() => {\n    if (!inputRef.current) return\n    const notInSync = inputRef.current.checked !== isChecked\n    if (notInSync) {\n      setCheckedState(inputRef.current.checked)\n    }\n  }, [inputRef.current])\n\n  const getCheckboxProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      const onPressDown = (event: React.MouseEvent) => {\n        // On mousedown, the input blurs and returns focus to the `body`,\n        // we need to prevent this. Native checkboxes keeps focus on `input`\n        event.preventDefault()\n        setActive.on()\n      }\n\n      return {\n        ...props,\n        ref: forwardedRef,\n        \"data-active\": dataAttr(isActive),\n        \"data-hover\": dataAttr(isHovered),\n        \"data-checked\": dataAttr(isChecked),\n        \"data-focus\": dataAttr(isFocused),\n        \"data-indeterminate\": dataAttr(isIndeterminate),\n        \"data-disabled\": dataAttr(isDisabled),\n        \"data-invalid\": dataAttr(isInvalid),\n        \"data-readonly\": dataAttr(isReadOnly),\n        \"aria-hidden\": true,\n        onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n        onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n        onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n        onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off),\n      }\n    },\n    [\n      isActive,\n      isChecked,\n      isDisabled,\n      isFocused,\n      isHovered,\n      isIndeterminate,\n      isInvalid,\n      isReadOnly,\n      setActive,\n      setHovered.off,\n      setHovered.on,\n    ],\n  )\n\n  const getRootProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...htmlProps,\n      ...props,\n      ref: mergeRefs(forwardedRef, (node: HTMLElement) => {\n        if (!node) return\n        setRootIsLabelElement(node.tagName === \"LABEL\")\n      }),\n      onClick: callAllHandlers(props.onClick, () => {\n        /**\n         * Accessibility:\n         *\n         * Ideally, `getRootProps` should be spread unto a `label` element.\n         *\n         * If the element was changed using the `as` prop or changing\n         * the dom node `getRootProps` is spread unto (to a `div` or `span`), we'll trigger\n         * click on the input when the element is clicked.\n         * @see Issue https://github.com/chakra-ui/chakra-ui/issues/3480\n         */\n        if (!rootIsLabelElement) {\n          inputRef.current?.click()\n          focus(inputRef.current, { nextTick: true })\n        }\n      }),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [htmlProps, isDisabled, isChecked, isInvalid, rootIsLabelElement],\n  )\n\n  const getInputProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => {\n      return {\n        ...props,\n        ref: mergeRefs(inputRef, forwardedRef),\n        type: \"checkbox\",\n        name,\n        value,\n        id,\n        onChange: callAllHandlers(props.onChange, handleChange),\n        onBlur: callAllHandlers(props.onBlur, onBlurProp, setFocused.off),\n        onFocus: callAllHandlers(props.onFocus, onFocusProp, setFocused.on),\n        onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n        onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n        required: isRequired,\n        checked: isChecked,\n        disabled: trulyDisabled,\n        readOnly: isReadOnly,\n        \"aria-label\": ariaLabel,\n        \"aria-labelledby\": ariaLabelledBy,\n        \"aria-invalid\": ariaInvalid ? Boolean(ariaInvalid) : isInvalid,\n        \"aria-describedby\": ariaDescribedBy,\n        \"aria-disabled\": isDisabled,\n        style: visuallyHiddenStyle,\n      }\n    },\n    [\n      name,\n      value,\n      id,\n      handleChange,\n      setFocused.off,\n      setFocused.on,\n      onBlurProp,\n      onFocusProp,\n      onKeyDown,\n      onKeyUp,\n      isRequired,\n      isChecked,\n      trulyDisabled,\n      isReadOnly,\n      ariaLabel,\n      ariaLabelledBy,\n      ariaInvalid,\n      isInvalid,\n      ariaDescribedBy,\n      isDisabled,\n    ],\n  )\n\n  const getLabelProps: PropGetter = useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid),\n    }),\n    [isChecked, isDisabled, isInvalid],\n  )\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired,\n    },\n    getRootProps,\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps,\n  }\n}\n\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\nfunction stopEvent(event: React.SyntheticEvent) {\n  event.preventDefault()\n  event.stopPropagation()\n}\n\nexport type UseCheckboxReturn = ReturnType<typeof useCheckbox>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
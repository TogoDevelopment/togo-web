{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, forwardRef, omitThemingProps, useMultiStyleConfig } from \"@chakra-ui/system\";\nimport { callAll, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useCheckboxGroupContext } from \"./checkbox-group\";\nimport { CheckboxIcon } from \"./checkbox-icon\";\nimport { useCheckbox } from \"./use-checkbox\";\nvar CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0\n  }\n});\nvar Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\"\n    }\n  }\n});\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport var Checkbox = /*#__PURE__*/forwardRef(function (props, ref) {\n  var group = useCheckboxGroupContext();\n  var mergedProps = _extends({}, group, props);\n  var styles = useMultiStyleConfig(\"Checkbox\", mergedProps);\n  var ownProps = omitThemingProps(props);\n  var _ownProps$spacing = ownProps.spacing,\n    spacing = _ownProps$spacing === void 0 ? \"0.5rem\" : _ownProps$spacing,\n    className = ownProps.className,\n    children = ownProps.children,\n    iconColor = ownProps.iconColor,\n    iconSize = ownProps.iconSize,\n    _ownProps$icon = ownProps.icon,\n    icon = _ownProps$icon === void 0 ? /*#__PURE__*/React.createElement(CheckboxIcon, null) : _ownProps$icon,\n    isCheckedProp = ownProps.isChecked,\n    _ownProps$isDisabled = ownProps.isDisabled,\n    isDisabled = _ownProps$isDisabled === void 0 ? group == null ? void 0 : group.isDisabled : _ownProps$isDisabled,\n    onChangeProp = ownProps.onChange,\n    rest = _objectWithoutPropertiesLoose(ownProps, [\"spacing\", \"className\", \"children\", \"iconColor\", \"iconSize\", \"icon\", \"isChecked\", \"isDisabled\", \"onChange\"]);\n  var isChecked = isCheckedProp;\n  if (group != null && group.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value);\n  }\n  var onChange = onChangeProp;\n  if (group != null && group.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp);\n  }\n  var _useCheckbox = useCheckbox(_extends({}, rest, {\n      isDisabled: isDisabled,\n      isChecked: isChecked,\n      onChange: onChange\n    })),\n    state = _useCheckbox.state,\n    getInputProps = _useCheckbox.getInputProps,\n    getCheckboxProps = _useCheckbox.getCheckboxProps,\n    getLabelProps = _useCheckbox.getLabelProps,\n    getRootProps = _useCheckbox.getRootProps;\n  var iconStyles = React.useMemo(function () {\n    return _extends({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform: state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor\n    }, styles.icon);\n  }, [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon]);\n  var clonedIcon = /*#__PURE__*/React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked\n  });\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    __css: styles.container,\n    className: cx(\"chakra-checkbox\", className)\n  }, getRootProps()), /*#__PURE__*/React.createElement(\"input\", _extends({\n    className: \"chakra-checkbox__input\"\n  }, getInputProps({}, ref))), /*#__PURE__*/React.createElement(CheckboxControl, _extends({\n    __css: styles.control,\n    className: \"chakra-checkbox__control\"\n  }, getCheckboxProps()), clonedIcon), children && /*#__PURE__*/React.createElement(chakra.span, _extends({\n    className: \"chakra-checkbox__label\"\n  }, getLabelProps(), {\n    __css: _extends({\n      marginStart: spacing\n    }, styles.label)\n  }), children));\n});\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\";\n}","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useMultiStyleConfig","callAll","cx","__DEV__","React","useCheckboxGroupContext","CheckboxIcon","useCheckbox","CheckboxControl","baseStyle","display","alignItems","justifyContent","verticalAlign","userSelect","flexShrink","Label","cursor","position","_disabled","Checkbox","props","ref","group","mergedProps","_extends","styles","ownProps","_ownProps$spacing","spacing","className","children","iconColor","iconSize","_ownProps$icon","icon","createElement","isCheckedProp","isChecked","_ownProps$isDisabled","isDisabled","onChangeProp","onChange","rest","_objectWithoutPropertiesLoose","value","includes","_useCheckbox","state","getInputProps","getCheckboxProps","getLabelProps","getRootProps","iconStyles","useMemo","opacity","isIndeterminate","transform","fontSize","color","clonedIcon","cloneElement","__css","container","control","span","marginStart","label","displayName"],"sources":["../../src/checkbox.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  PropsOf,\n  SystemProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAll, cx, Omit, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useCheckboxGroupContext } from \"./checkbox-group\"\nimport { CheckboxIcon } from \"./checkbox-icon\"\nimport { useCheckbox, UseCheckboxProps } from \"./use-checkbox\"\n\nconst CheckboxControl = chakra(\"span\", {\n  baseStyle: {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    verticalAlign: \"top\",\n    userSelect: \"none\",\n    flexShrink: 0,\n  },\n})\n\nconst Label = chakra(\"label\", {\n  baseStyle: {\n    cursor: \"pointer\",\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    verticalAlign: \"top\",\n    position: \"relative\",\n    _disabled: {\n      cursor: \"not-allowed\",\n    },\n  },\n})\n\ntype CheckboxControlProps = Omit<HTMLChakraProps<\"div\">, keyof UseCheckboxProps>\n\ntype BaseInputProps = Pick<\n  PropsOf<\"input\">,\n  \"onBlur\" | \"checked\" | \"defaultChecked\"\n>\n\nexport interface CheckboxProps\n  extends CheckboxControlProps,\n    BaseInputProps,\n    ThemingProps<\"Checkbox\">,\n    UseCheckboxProps {\n  /**\n   * The spacing between the checkbox and its label text\n   * @default 0.5rem\n   * @type SystemProps[\"marginLeft\"]\n   */\n  spacing?: SystemProps[\"marginLeft\"]\n  /**\n   * The color of the checkbox icon when checked or indeterminate\n   */\n  iconColor?: string\n  /**\n   * The size of the checkbox icon when checked or indeterminate\n   */\n  iconSize?: string | number\n  /**\n   * The checked icon to use\n   *\n   * @type React.ReactElement\n   * @default CheckboxIcon\n   */\n  icon?: React.ReactElement\n}\n\n/**\n * Checkbox\n *\n * React component used in forms when a user needs to select\n * multiple values from several options.\n *\n * @see Docs https://chakra-ui.com/checkbox\n */\nexport const Checkbox = forwardRef<CheckboxProps, \"input\">((props, ref) => {\n  const group = useCheckboxGroupContext()\n\n  const mergedProps = { ...group, ...props } as CheckboxProps\n  const styles = useMultiStyleConfig(\"Checkbox\", mergedProps)\n\n  const ownProps = omitThemingProps(props)\n\n  const {\n    spacing = \"0.5rem\",\n    className,\n    children,\n    iconColor,\n    iconSize,\n    icon = <CheckboxIcon />,\n    isChecked: isCheckedProp,\n    isDisabled = group?.isDisabled,\n    onChange: onChangeProp,\n    ...rest\n  } = ownProps\n\n  let isChecked = isCheckedProp\n  if (group?.value && ownProps.value) {\n    isChecked = group.value.includes(ownProps.value)\n  }\n\n  let onChange = onChangeProp\n  if (group?.onChange && ownProps.value) {\n    onChange = callAll(group.onChange, onChangeProp)\n  }\n\n  const {\n    state,\n    getInputProps,\n    getCheckboxProps,\n    getLabelProps,\n    getRootProps,\n  } = useCheckbox({\n    ...rest,\n    isDisabled,\n    isChecked,\n    onChange,\n  })\n\n  const iconStyles: SystemStyleObject = React.useMemo(\n    () => ({\n      opacity: state.isChecked || state.isIndeterminate ? 1 : 0,\n      transform:\n        state.isChecked || state.isIndeterminate ? \"scale(1)\" : \"scale(0.95)\",\n      fontSize: iconSize,\n      color: iconColor,\n      ...styles.icon,\n    }),\n    [iconColor, iconSize, state.isChecked, state.isIndeterminate, styles.icon],\n  )\n\n  const clonedIcon = React.cloneElement(icon, {\n    __css: iconStyles,\n    isIndeterminate: state.isIndeterminate,\n    isChecked: state.isChecked,\n  })\n\n  return (\n    <Label\n      __css={styles.container}\n      className={cx(\"chakra-checkbox\", className)}\n      {...getRootProps()}\n    >\n      <input className=\"chakra-checkbox__input\" {...getInputProps({}, ref)} />\n      <CheckboxControl\n        __css={styles.control}\n        className=\"chakra-checkbox__control\"\n        {...getCheckboxProps()}\n      >\n        {clonedIcon}\n      </CheckboxControl>\n      {children && (\n        <chakra.span\n          className=\"chakra-checkbox__label\"\n          {...getLabelProps()}\n          __css={{\n            marginStart: spacing,\n            ...styles.label,\n          }}\n        >\n          {children}\n        </chakra.span>\n      )}\n    </Label>\n  )\n})\n\nif (__DEV__) {\n  Checkbox.displayName = \"Checkbox\"\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { useControllableProp, useId } from \"@chakra-ui/hooks\";\nimport { isInputEvent } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    onChangeProp = _props.onChange,\n    valueProp = _props.value,\n    defaultValue = _props.defaultValue,\n    nameProp = _props.name,\n    isDisabled = _props.isDisabled,\n    isFocusable = _props.isFocusable,\n    isNative = _props.isNative,\n    htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"value\", \"defaultValue\", \"name\", \"isDisabled\", \"isFocusable\", \"isNative\"]);\n  var _React$useState = React.useState(defaultValue || \"\"),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    valueState = _React$useState2[0],\n    setValue = _React$useState2[1];\n  var _useControllableProp = useControllableProp(valueProp, valueState),\n    _useControllableProp2 = _slicedToArray(_useControllableProp, 2),\n    isControlled = _useControllableProp2[0],\n    value = _useControllableProp2[1];\n  var ref = React.useRef(null);\n  var focus = React.useCallback(function () {\n    var rootNode = ref.current;\n    if (!rootNode) return;\n    var query = \"input:not(:disabled):checked\";\n    var firstEnabledAndCheckedInput = rootNode.querySelector(query);\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus();\n      return;\n    }\n    query = \"input:not(:disabled)\";\n    var firstEnabledInput = rootNode.querySelector(query);\n    firstEnabledInput == null ? void 0 : firstEnabledInput.focus();\n  }, []);\n  /**\n   * All radio options must use the same name\n   */\n\n  var fallbackName = useId(undefined, \"radio\");\n  var name = nameProp || fallbackName;\n  var onChange = React.useCallback(function (eventOrValue) {\n    var nextValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    if (!isControlled) {\n      setValue(nextValue);\n    }\n    onChangeProp == null ? void 0 : onChangeProp(String(nextValue));\n  }, [onChangeProp, isControlled]);\n  var getRootProps = React.useCallback(function (props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n    return _extends({}, props, {\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\"\n    });\n  }, []);\n  var getRadioProps = React.useCallback(function (props, ref) {\n    var _extends2;\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    var checkedKey = isNative ? \"checked\" : \"isChecked\";\n    return _extends({}, props, (_extends2 = {\n      ref: ref,\n      name: name\n    }, _defineProperty(_extends2, checkedKey, value != null ? props.value === value : undefined), _defineProperty(_extends2, \"onChange\", onChange), _defineProperty(_extends2, \"data-radiogroup\", true), _extends2));\n  }, [isNative, name, onChange, value]);\n  return {\n    getRootProps: getRootProps,\n    getRadioProps: getRadioProps,\n    name: name,\n    ref: ref,\n    focus: focus,\n    setValue: setValue,\n    value: value,\n    onChange: onChange,\n    isDisabled: isDisabled,\n    isFocusable: isFocusable,\n    htmlProps: htmlProps\n  };\n}","map":{"version":3,"names":["useControllableProp","useId","isInputEvent","React","mergeRefs","useRadioGroup","props","_props","onChangeProp","onChange","valueProp","value","defaultValue","nameProp","name","isDisabled","isFocusable","isNative","htmlProps","_objectWithoutPropertiesLoose","_React$useState","useState","_React$useState2","_slicedToArray","valueState","setValue","_useControllableProp","_useControllableProp2","isControlled","ref","useRef","focus","useCallback","rootNode","current","query","firstEnabledAndCheckedInput","querySelector","firstEnabledInput","fallbackName","undefined","eventOrValue","nextValue","target","String","getRootProps","forwardedRef","_extends","role","getRadioProps","_extends2","checkedKey","_defineProperty"],"sources":["../../src/use-radio-group.ts"],"sourcesContent":["import { useControllableProp, useId } from \"@chakra-ui/hooks\"\nimport { StringOrNumber, isInputEvent } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\n\ntype EventOrValue = React.ChangeEvent<HTMLInputElement> | StringOrNumber\n\nexport interface UseRadioGroupProps {\n  /**\n   * The value of the radio to be `checked`\n   * (in controlled mode)\n   */\n  value?: StringOrNumber\n  /**\n   * The value of the radio to be `checked`\n   * initially (in uncontrolled mode)\n   */\n  defaultValue?: StringOrNumber\n  /**\n   * Function called once a radio is checked\n   * @param nextValue the value of the checked radio\n   */\n  onChange?(nextValue: string): void\n  /**\n   * If `true`, all wrapped radio inputs will be disabled\n   */\n  isDisabled?: boolean\n\n  /**\n   * If `true` and `isDisabled` is true, all wrapped radio inputs will remain\n   * focusable but not interactive.\n   */\n  isFocusable?: boolean\n  /**\n   * The `name` attribute forwarded to each `radio` element\n   */\n  name?: string\n  /**\n   * If `true`, input elements will receive\n   * `checked` attribute instead of `isChecked`.\n   *\n   * This assumes, you're using native radio inputs\n   */\n  isNative?: boolean\n}\n\ntype RadioPropGetter = PropGetter<\n  HTMLInputElement,\n  { onChange?: (e: EventOrValue) => void; value?: StringOrNumber } & Omit<\n    React.InputHTMLAttributes<HTMLInputElement>,\n    \"onChange\" | \"size\" | \"value\"\n  >\n>\n\n/**\n * React hook to manage a group of radio inputs\n */\nexport function useRadioGroup(props: UseRadioGroupProps = {}) {\n  const {\n    onChange: onChangeProp,\n    value: valueProp,\n    defaultValue,\n    name: nameProp,\n    isDisabled,\n    isFocusable,\n    isNative,\n    ...htmlProps\n  } = props\n\n  const [valueState, setValue] = React.useState<StringOrNumber>(\n    defaultValue || \"\",\n  )\n  const [isControlled, value] = useControllableProp(valueProp, valueState)\n\n  const ref = React.useRef<any>(null)\n\n  const focus = React.useCallback(() => {\n    const rootNode = ref.current\n    if (!rootNode) return\n\n    let query = `input:not(:disabled):checked`\n\n    const firstEnabledAndCheckedInput = rootNode.querySelector(\n      query,\n    ) as HTMLElement\n\n    if (firstEnabledAndCheckedInput) {\n      firstEnabledAndCheckedInput.focus()\n      return\n    }\n\n    query = `input:not(:disabled)`\n\n    const firstEnabledInput = rootNode.querySelector(query) as HTMLElement\n    firstEnabledInput?.focus()\n  }, [])\n\n  /**\n   * All radio options must use the same name\n   */\n  const fallbackName = useId(undefined, `radio`)\n  const name = nameProp || fallbackName\n\n  const onChange = React.useCallback(\n    (eventOrValue: EventOrValue) => {\n      const nextValue = isInputEvent(eventOrValue)\n        ? eventOrValue.target.value\n        : eventOrValue\n\n      if (!isControlled) {\n        setValue(nextValue)\n      }\n\n      onChangeProp?.(String(nextValue))\n    },\n    [onChangeProp, isControlled],\n  )\n\n  const getRootProps: PropGetter = React.useCallback(\n    (props = {}, forwardedRef = null) => ({\n      ...props,\n      ref: mergeRefs(forwardedRef, ref),\n      role: \"radiogroup\",\n    }),\n    [],\n  )\n\n  const getRadioProps: RadioPropGetter = React.useCallback(\n    (props = {}, ref = null) => {\n      const checkedKey = isNative ? \"checked\" : \"isChecked\"\n      return {\n        ...props,\n        ref,\n        name,\n        [checkedKey]: value != null ? props.value === value : undefined,\n        onChange,\n        \"data-radiogroup\": true,\n      }\n    },\n    [isNative, name, onChange, value],\n  )\n\n  return {\n    getRootProps,\n    getRadioProps,\n    name,\n    ref,\n    focus,\n    setValue,\n    value,\n    onChange,\n    isDisabled,\n    isFocusable,\n    htmlProps,\n  }\n}\n\nexport type UseRadioGroupReturn = ReturnType<typeof useRadioGroup>\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
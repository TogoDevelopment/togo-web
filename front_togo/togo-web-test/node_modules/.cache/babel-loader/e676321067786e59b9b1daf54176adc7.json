{"ast":null,"code":"var _jsxFileName = \"/home/system/togo-web-test/src/components/TestComponent.jsx\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { Form, Row, Col, Container, Button, ListGroup } from 'react-bootstrap';\nimport { tempAddCity, tempGetCities, tempGetAlbarqPrices } from '../APIs/LoginAPIs';\nexport default function TestComponent() {\n  /* const textRef = useRef();\r\n    const [listAreas, setListAreas] = useState([]);\r\n    const cleanHandler = () => {\r\n      let tempStr = textRef.current.value;\r\n        let tempArr = tempStr.split(\"<option value=\\\"\\\">\")[1].split(\"</option>\");\r\n        let resArr = [];\r\n        for (let i = 1; i < tempArr.length - 1; i++) {\r\n          let tempNumber = tempArr[i].split(\"\\\">\")[0].split(\"\\\"\")[1];\r\n          let tempName = tempArr[i].split(\"\\\">\")[1];\r\n          resArr.push({ number: tempNumber, name: tempName });\r\n            tempAddCity(tempNumber, tempName).then((res) => {\r\n              if (res.data != \"enable editing!\")\r\n                  console.log(res.data);\r\n          })\r\n      }\r\n        setListAreas(resArr);\r\n  } */\n  // $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n\n  /* const [provinces, setProvinces] = useState([]);\r\n  const [governorates, setGovernorates] = useState([]);\r\n  const [cities, setCities] = useState([]);\r\n  const [areas, setAreas] = useState([]);\r\n    useEffect(() => {\r\n      // provinces, governorates, cities, areas\r\n      tempGetCities(\"provinces\", -1, 1).then((res) => {\r\n          // console.log(res.data.server_response);\r\n          setProvinces(res.data.server_response);\r\n      })\r\n  }, [])\r\n    const updateSubLevel = (type, superId) => {\r\n      tempGetCities(type, superId, 1).then((res) => {\r\n          // console.log(res.data.server_response)\r\n            if (type === \"governorates\") {\r\n              setGovernorates([]);\r\n              setCities([]);\r\n              setAreas([]);\r\n              setGovernorates(res.data.server_response);\r\n          } else if (type === \"cities\") {\r\n              setCities([]);\r\n              setAreas([]);\r\n              setCities(res.data.server_response);\r\n          } else {\r\n              setAreas([]);\r\n              setAreas(res.data.server_response);\r\n          }\r\n      })\r\n  }*/\n  // $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\n  useEffect(function () {\n    tempGetAlbarqPrices().then(function (res) {\n      return console.log(res.data);\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"p-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 17\n    }\n  }, \"test\")));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/TestComponent.jsx"],"names":["React","useEffect","useRef","useState","Form","Row","Col","Container","Button","ListGroup","tempAddCity","tempGetCities","tempGetAlbarqPrices","TestComponent","then","res","console","log","data"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,SAAzB,EAAoCC,MAApC,EAA4CC,SAA5C,QAA6D,iBAA7D;AACA,SAASC,WAAT,EAAsBC,aAAtB,EAAqCC,mBAArC,QAAgE,mBAAhE;AAEA,eAAe,SAASC,aAAT,GAAyB;AAEpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASI;;AAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKI;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,mBAAmB,GAAGE,IAAtB,CAA2B,UAAAC,GAAG;AAAA,aAAIC,OAAO,CAACC,GAAR,CAAYF,GAAG,CAACG,IAAhB,CAAJ;AAAA,KAA9B;AACH,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,oBAAC,SAAD;AAAW,IAAA,KAAK,MAAhB;AAAiB,IAAA,SAAS,EAAC,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAuFI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CAvFJ,CADJ;AA+FH","sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\r\nimport { Form, Row, Col, Container, Button, ListGroup } from 'react-bootstrap';\r\nimport { tempAddCity, tempGetCities, tempGetAlbarqPrices } from '../APIs/LoginAPIs';\r\n\r\nexport default function TestComponent() {\r\n\r\n    /* const textRef = useRef();\r\n\r\n    const [listAreas, setListAreas] = useState([]);\r\n\r\n    const cleanHandler = () => {\r\n        let tempStr = textRef.current.value;\r\n\r\n        let tempArr = tempStr.split(\"<option value=\\\"\\\">\")[1].split(\"</option>\");\r\n\r\n        let resArr = [];\r\n\r\n        for (let i = 1; i < tempArr.length - 1; i++) {\r\n            let tempNumber = tempArr[i].split(\"\\\">\")[0].split(\"\\\"\")[1];\r\n            let tempName = tempArr[i].split(\"\\\">\")[1];\r\n            resArr.push({ number: tempNumber, name: tempName });\r\n\r\n            tempAddCity(tempNumber, tempName).then((res) => {\r\n                if (res.data != \"enable editing!\")\r\n                    console.log(res.data);\r\n            })\r\n        }\r\n\r\n        setListAreas(resArr);\r\n    } */\r\n\r\n    // $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n\r\n    /* const [provinces, setProvinces] = useState([]);\r\n    const [governorates, setGovernorates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // provinces, governorates, cities, areas\r\n        tempGetCities(\"provinces\", -1, 1).then((res) => {\r\n            // console.log(res.data.server_response);\r\n            setProvinces(res.data.server_response);\r\n        })\r\n    }, [])\r\n\r\n    const updateSubLevel = (type, superId) => {\r\n        tempGetCities(type, superId, 1).then((res) => {\r\n            // console.log(res.data.server_response)\r\n\r\n            if (type === \"governorates\") {\r\n                setGovernorates([]);\r\n                setCities([]);\r\n                setAreas([]);\r\n                setGovernorates(res.data.server_response);\r\n            } else if (type === \"cities\") {\r\n                setCities([]);\r\n                setAreas([]);\r\n                setCities(res.data.server_response);\r\n            } else {\r\n                setAreas([]);\r\n                setAreas(res.data.server_response);\r\n            }\r\n        })\r\n    }*/\r\n\r\n    // $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$\r\n\r\n    useEffect(() => {\r\n        tempGetAlbarqPrices().then(res => console.log(res.data))\r\n    }, [])\r\n\r\n    return (\r\n        <Container fluid className=\"p-5\">\r\n            {/* <Row>\r\n                <Col className=\"d-flex justify-content-center\"><span className=\"h1\">This is a test component!</span></Col>\r\n            </Row>\r\n\r\n            <Row>\r\n                <Col lg={6}>\r\n                    <Form.Group controlId=\"exampleForm.ControlTextarea1\">\r\n                        <Form.Label>Enter options to clear:</Form.Label>\r\n                        <Form.Control style={{ height: \"300px\", overflowY: \"scroll\" }} as=\"textarea\" rows={100} ref={textRef} />\r\n                    </Form.Group>\r\n                </Col>\r\n\r\n                <Col lg={1}>\r\n                    <Button className=\"mt-5\" onClick={cleanHandler}>\r\n                        clean\r\n                    </Button>\r\n                </Col>\r\n\r\n                <Col lg={5}>\r\n                    <ListGroup className=\"mt-4\">\r\n                        {\r\n                            listAreas.map((item, index) => {\r\n                                return <ListGroup.Item key={index}>{item.number + \" - \" + item.name}</ListGroup.Item>\r\n                            })\r\n                        }\r\n                    </ListGroup>\r\n                </Col>\r\n            </Row> */}\r\n\r\n            {/* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ */}\r\n\r\n            {/* <Row>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Provinces:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"governorates\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select Provice</option>\r\n                        {\r\n                            provinces.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Governorates:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"cities\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select Governorate</option>\r\n                        {\r\n                            governorates.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Cities:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\" onChange={(e) => {\r\n                        updateSubLevel(\"areas\", e.target.value)\r\n                    }}>\r\n                        <option style={{ color: \"lightgray\" }}>Select City</option>\r\n                        {\r\n                            cities.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n                <Col lg={3} className=\"mb-4\">\r\n                    <Form.Label>Areas:</Form.Label>\r\n                    <Form.Select aria-label=\"Default select example\">\r\n                        <option style={{ color: \"lightgray\" }}>Select Area</option>\r\n                        {\r\n                            areas.map((item, index) => {\r\n                                return <option key={index} value={item.id}>{item.id + \" - \" + item.name}</option>\r\n                            })\r\n                        }\r\n                    </Form.Select>\r\n                </Col>\r\n            </Row> */}\r\n\r\n            {/* $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ */}\r\n\r\n            <Row>\r\n                <Col>\r\n                    test\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
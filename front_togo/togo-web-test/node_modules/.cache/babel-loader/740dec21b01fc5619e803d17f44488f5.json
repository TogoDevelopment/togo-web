{"ast":null,"code":"import React, { useState, useEffect, useRef, useMemo, useCallback, useImperativeHandle } from 'react';\nimport bindElementResize from 'element-resize-event';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport helper from '../DOMHelper';\nimport positionUtils from './positionUtils';\nimport { getDOMNode } from '../utils';\nimport { useUpdateEffect } from '../utils';\nvar defaultProps = {\n  containerPadding: 0,\n  placement: 'right'\n};\n\nvar usePosition = function usePosition(props, ref) {\n  var placement = props.placement,\n      preventOverflow = props.preventOverflow,\n      containerPadding = props.containerPadding,\n      container = props.container,\n      triggerTarget = props.triggerTarget;\n  var containerRef = useRef();\n  var lastTargetRef = useRef();\n  var defaultPosition = {\n    positionLeft: 0,\n    positionTop: 0,\n    arrowOffsetLeft: null,\n    arrowOffsetTop: null\n  };\n\n  var _useState = useState(defaultPosition),\n      position = _useState[0],\n      setPosition = _useState[1];\n\n  var utils = useMemo(function () {\n    return positionUtils({\n      placement: placement,\n      preventOverflow: preventOverflow,\n      padding: containerPadding\n    });\n  }, [placement, preventOverflow, containerPadding]);\n  var updatePosition = useCallback(\n  /**\n   * @param placementChanged  Whether the placement has changed\n   * @param forceUpdateDOM Whether to update the DOM directly\n   * @returns void\n   */\n  function (placementChanged, forceUpdateDOM) {\n    if (placementChanged === void 0) {\n      placementChanged = true;\n    }\n\n    if (!(triggerTarget !== null && triggerTarget !== void 0 && triggerTarget.current)) {\n      return;\n    }\n\n    var targetElement = getDOMNode(triggerTarget);\n\n    if (!helper.isElement(targetElement)) {\n      throw new Error('`target` should return an HTMLElement');\n    } //  If the target and placement do not change, the position is not updated.\n\n\n    if (targetElement === lastTargetRef.current && !placementChanged) {\n      return;\n    }\n\n    var overlay = getDOMNode(ref.current);\n    var containerElement = helper.getContainer(typeof container === 'function' ? container() : container, helper.ownerDocument(ref.current).body);\n    var posi = utils.calcOverlayPosition(overlay, targetElement, containerElement);\n\n    if (forceUpdateDOM && overlay) {\n      var _overlay$className, _overlay$className$ma;\n\n      var preClassName = overlay === null || overlay === void 0 ? void 0 : (_overlay$className = overlay.className) === null || _overlay$className === void 0 ? void 0 : (_overlay$className$ma = _overlay$className.match(/(placement-\\S+)/)) === null || _overlay$className$ma === void 0 ? void 0 : _overlay$className$ma[0];\n      helper.removeClass(overlay, preClassName);\n      helper.addClass(overlay, posi.positionClassName);\n      helper.addStyle(overlay, {\n        left: posi.positionLeft + \"px\",\n        top: posi.positionTop + \"px\"\n      });\n    } else {\n      setPosition(posi);\n    }\n\n    containerRef.current = containerElement;\n    lastTargetRef.current = targetElement;\n  }, [container, ref, triggerTarget, utils]);\n  useEffect(function () {\n    updatePosition(false);\n    var overlay = getDOMNode(ref.current);\n    var containerScrollListener;\n\n    if (containerRef.current && preventOverflow) {\n      var _containerRef$current; // Update the overlay position when the container scroll bar is scrolling\n\n\n      containerScrollListener = helper.on(((_containerRef$current = containerRef.current) === null || _containerRef$current === void 0 ? void 0 : _containerRef$current.tagName) === 'BODY' ? window : containerRef.current, 'scroll', function () {\n        return updatePosition(true, true);\n      });\n    } // Update the position when the window size changes\n\n\n    var resizeListener = helper.on(window, 'resize', function () {\n      return updatePosition(true, true);\n    });\n\n    if (overlay) {\n      // Update the position when the size of the overlay changes\n      bindElementResize(overlay, function () {\n        return updatePosition(true, true);\n      });\n    }\n\n    return function () {\n      var _containerScrollListe;\n\n      lastTargetRef.current = null;\n      (_containerScrollListe = containerScrollListener) === null || _containerScrollListe === void 0 ? void 0 : _containerScrollListe.off();\n      resizeListener === null || resizeListener === void 0 ? void 0 : resizeListener.off();\n    };\n  }, [preventOverflow, ref, updatePosition]);\n  useUpdateEffect(function () {\n    return updatePosition();\n  }, [updatePosition, placement]);\n  return [position, updatePosition];\n};\n\nvar Position = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      className = props.className;\n  var childRef = React.useRef();\n\n  var _usePosition = usePosition(props, childRef),\n      position = _usePosition[0],\n      updatePosition = _usePosition[1];\n\n  var positionClassName = position.positionClassName,\n      arrowOffsetLeft = position.arrowOffsetLeft,\n      arrowOffsetTop = position.arrowOffsetTop,\n      positionLeft = position.positionLeft,\n      positionTop = position.positionTop;\n  useImperativeHandle(ref, function () {\n    return {\n      get child() {\n        return childRef.current;\n      },\n\n      updatePosition: updatePosition\n    };\n  });\n\n  if (typeof children === 'function') {\n    var childProps = {\n      className: classNames(className, positionClassName),\n      arrowOffsetLeft: arrowOffsetLeft,\n      arrowOffsetTop: arrowOffsetTop,\n      left: positionLeft,\n      top: positionTop\n    };\n    return children(childProps, childRef);\n  }\n\n  return children;\n});\nPosition.displayName = 'Position';\nPosition.defaultProps = defaultProps;\nPosition.propTypes = {\n  className: PropTypes.string,\n  children: PropTypes.func,\n  container: PropTypes.oneOfType([PropTypes.func, PropTypes.any]),\n  containerPadding: PropTypes.number,\n  placement: PropTypes.any,\n  preventOverflow: PropTypes.bool,\n  triggerTarget: PropTypes.any\n};\nexport default Position;","map":null,"metadata":{},"sourceType":"module"}
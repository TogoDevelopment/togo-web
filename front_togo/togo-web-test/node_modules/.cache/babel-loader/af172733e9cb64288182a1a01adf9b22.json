{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\";\n\n/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\nimport React, { useState, useRef } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\n\nvar TestImage = function TestImage() {\n  var editor = useRef(null);\n\n  var _useState = useState('http://example.com/initialimage.jpg'),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: function onDrop(dropped) {\n      return setImage(dropped[0]);\n    },\n    noClick: true,\n    noKeyboard: true,\n    style: {\n      width: '250px',\n      height: '250px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps;\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AvatarEditor, {\n      ref: editor,\n      width: 250,\n      height: 250,\n      image: image,\n      rotate: 50,\n      scale: 10,\n      borderRadius: 50,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: function onClick() {\n        if (editor) {\n          // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n          // drawn on another canvas, or added to the DOM.\n          var canvas = editor.current.getImage();\n          console.log(editor.current);\n          console.log(\"-----------------------\"); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n          var canvasScaled = editor.current.getImageScaledToCanvas();\n          console.log(canvasScaled);\n        }\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }\n    }, \"Save\"));\n  });\n};\n\nexport default TestImage;","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","useState","useRef","AvatarEditor","Dropzone","TestImage","editor","image","setImage","dropped","width","height","getRootProps","getInputProps","canvas","current","getImage","console","log","canvasScaled","getImageScaledToCanvas"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAMC,MAAM,GAAGJ,MAAM,CAAC,IAAD,CAArB;;AACA,kBAA0BD,QAAQ,CAAC,qCAAD,CAAlC;AAAA;AAAA,MAAOM,KAAP;AAAA,MAAcC,QAAd;;AAEA,sBACI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAE,gBAACC,OAAD;AAAA,aAAaD,QAAQ,CAACC,OAAO,CAAC,CAAD,CAAR,CAArB;AAAA,KADZ;AAEI,IAAA,OAAO,MAFX;AAGI,IAAA,UAAU,MAHd;AAII,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMK;AAAA,QAAGC,YAAH,QAAGA,YAAH;AAAA,QAAiBC,aAAjB,QAAiBA,aAAjB;AAAA,wBACG,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACI,oBAAC,YAAD;AAAc,MAAA,GAAG,EAAEN,MAAnB;AAA2B,MAAA,KAAK,EAAE,GAAlC;AAAuC,MAAA,MAAM,EAAE,GAA/C;AAAoD,MAAA,KAAK,EAAEC,KAA3D;AAAkE,MAAA,MAAM,EAAE,EAA1E;AAA8E,MAAA,KAAK,EAAE,EAArF;AAAyF,MAAA,YAAY,EAAE,EAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAII;AAAQ,MAAA,OAAO,EAAE,mBAAM;AACnB,YAAID,MAAJ,EAAY;AACR;AACA;AACA,cAAMQ,MAAM,GAAGR,MAAM,CAACS,OAAP,CAAeC,QAAf,EAAf;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAYZ,MAAM,CAACS,OAAnB;AAEAE,UAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EANQ,CAQR;;AACA,cAAMC,YAAY,GAAGb,MAAM,CAACS,OAAP,CAAeK,sBAAf,EAArB;AACAH,UAAAA,OAAO,CAACC,GAAR,CAAYC,YAAZ;AACH;AACJ,OAbD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,CADH;AAAA,GANL,CADJ;AA8BH,CAlCD;;AAoCA,eAAed,SAAf","sourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\nimport React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <Dropzone\r\n            onDrop={(dropped) => setImage(dropped[0])}\r\n            noClick\r\n            noKeyboard\r\n            style={{ width: '250px', height: '250px' }}\r\n        >\r\n            {({ getRootProps, getInputProps }) => (\r\n                <div {...getRootProps()}>\r\n                    <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                    {/* <input {...getInputProps()} /> */}\r\n\r\n                    <button onClick={() => {\r\n                        if (editor) {\r\n                            // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                            // drawn on another canvas, or added to the DOM.\r\n                            const canvas = editor.current.getImage();\r\n                            console.log(editor.current);\r\n\r\n                            console.log(\"-----------------------\");\r\n\r\n                            // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                            const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                            console.log(canvasScaled);\r\n                        }\r\n                    }}>Save</button>\r\n                </div>\r\n            )}\r\n        </Dropzone>\r\n    )\r\n}\r\n\r\nexport default TestImage;"]},"metadata":{},"sourceType":"module"}
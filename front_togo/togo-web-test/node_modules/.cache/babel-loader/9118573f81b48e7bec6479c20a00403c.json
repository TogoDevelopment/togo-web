{"ast":null,"code":"import _toConsumableArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { createDescendantContext } from \"@chakra-ui/descendant\";\nimport { useControllableState, useId } from \"@chakra-ui/hooks\";\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\";\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nvar _createDescendantCont = createDescendantContext(),\n  _createDescendantCont2 = _slicedToArray(_createDescendantCont, 4),\n  PinInputDescendantsProvider = _createDescendantCont2[0],\n  usePinInputDescendantsContext = _createDescendantCont2[1],\n  usePinInputDescendants = _createDescendantCont2[2],\n  usePinInputDescendant = _createDescendantCont2[3];\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\nexport { PinInputDescendantsProvider, usePinInputDescendantsContext, usePinInputDescendants, usePinInputDescendant };\nvar _createContext = createContext({\n    name: \"PinInputContext\",\n    errorMessage: \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  PinInputProvider = _createContext2[0],\n  usePinInputContext = _createContext2[1];\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\nexport { PinInputProvider, usePinInputContext };\nvar toArray = function toArray(value) {\n  return value == null ? void 0 : value.split(\"\");\n};\nfunction validate(value, type) {\n  var NUMERIC_REGEX = /^[0-9]+$/;\n  var ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i;\n  var regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX;\n  return regex.test(value);\n}\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\n\nexport function usePinInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n  var _props = props,\n    autoFocus = _props.autoFocus,\n    value = _props.value,\n    defaultValue = _props.defaultValue,\n    _onChange = _props.onChange,\n    onComplete = _props.onComplete,\n    _props$placeholder = _props.placeholder,\n    placeholder = _props$placeholder === void 0 ? \"â—‹\" : _props$placeholder,\n    _props$manageFocus = _props.manageFocus,\n    manageFocus = _props$manageFocus === void 0 ? true : _props$manageFocus,\n    _props$otp = _props.otp,\n    otp = _props$otp === void 0 ? false : _props$otp,\n    idProp = _props.id,\n    isDisabled = _props.isDisabled,\n    isInvalid = _props.isInvalid,\n    _props$type = _props.type,\n    type = _props$type === void 0 ? \"number\" : _props$type,\n    mask = _props.mask;\n  var uuid = useId();\n  var id = idProp != null ? idProp : \"pin-input-\" + uuid;\n  var descendants = usePinInputDescendants();\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    moveFocus = _React$useState2[0],\n    setMoveFocus = _React$useState2[1];\n  var _React$useState3 = React.useState(-1),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    focusedIndex = _React$useState4[0],\n    setFocusedIndex = _React$useState4[1];\n  var _useControllableState = useControllableState({\n      defaultValue: toArray(defaultValue) || [],\n      value: toArray(value),\n      onChange: function onChange(values) {\n        return _onChange == null ? void 0 : _onChange(values.join(\"\"));\n      }\n    }),\n    _useControllableState2 = _slicedToArray(_useControllableState, 2),\n    values = _useControllableState2[0],\n    setValues = _useControllableState2[1];\n  React.useEffect(function () {\n    if (autoFocus) {\n      var first = descendants.first();\n      if (first) focus(first.node, {\n        nextTick: true\n      });\n    } // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants]);\n  var focusNext = React.useCallback(function (index) {\n    if (!moveFocus || !manageFocus) return;\n    var next = descendants.next(index, false);\n    if (next) focus(next.node, {\n      nextTick: true\n    });\n  }, [descendants, moveFocus, manageFocus]);\n  var setValue = React.useCallback(function (value, index) {\n    var nextValues = _toConsumableArray(values);\n    nextValues[index] = value;\n    setValues(nextValues);\n    var isComplete = value !== \"\" && nextValues.length === descendants.count() && nextValues.every(function (inputValue) {\n      return inputValue != null && inputValue !== \"\";\n    });\n    if (isComplete) {\n      onComplete == null ? void 0 : onComplete(nextValues.join(\"\"));\n    } else {\n      focusNext(index);\n    }\n  }, [values, setValues, focusNext, onComplete, descendants]);\n  var clear = React.useCallback(function () {\n    var values = Array(descendants.count()).fill(\"\");\n    setValues(values);\n    var first = descendants.first();\n    if (first) focus(first.node);\n  }, [descendants, setValues]);\n  var getNextValue = React.useCallback(function (value, eventValue) {\n    var nextValue = eventValue;\n    if ((value == null ? void 0 : value.length) > 0) {\n      if (value[0] === eventValue.charAt(0)) {\n        nextValue = eventValue.charAt(1);\n      } else if (value[0] === eventValue.charAt(1)) {\n        nextValue = eventValue.charAt(0);\n      }\n    }\n    return nextValue;\n  }, []);\n  var getInputProps = React.useCallback(function (props) {\n    var index = props.index,\n      rest = _objectWithoutPropertiesLoose(props, [\"index\"]);\n\n    /**\n     * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n     */\n\n    var onChange = function onChange(event) {\n      var eventValue = event.target.value;\n      var currentValue = values[index];\n      var nextValue = getNextValue(currentValue, eventValue); // if the value was removed using backspace\n\n      if (nextValue === \"\") {\n        setValue(\"\", index);\n        return;\n      } // in the case of an autocomplete or copy and paste\n\n      if (eventValue.length > 2) {\n        // see if we can use the string to fill out our values\n        if (validate(eventValue, type)) {\n          // Ensure the value matches the number of inputs\n          var _nextValue = eventValue.split(\"\").filter(function (_, index) {\n            return index < descendants.count();\n          });\n          setValues(_nextValue); // if pasting fills the entire input fields, trigger `onComplete`\n\n          if (_nextValue.length === descendants.count()) {\n            onComplete == null ? void 0 : onComplete(_nextValue.join(\"\"));\n          }\n        }\n      } else {\n        // only set if the new value is a number\n        if (validate(nextValue, type)) {\n          setValue(nextValue, index);\n        }\n        setMoveFocus(true);\n      }\n    };\n    var onKeyDown = function onKeyDown(event) {\n      if (event.key === \"Backspace\" && manageFocus) {\n        if (event.target.value === \"\") {\n          var prevInput = descendants.prev(index, false);\n          if (prevInput) {\n            setValue(\"\", index - 1);\n            focus(prevInput.node);\n            setMoveFocus(true);\n          }\n        } else {\n          setMoveFocus(false);\n        }\n      }\n    };\n    var onFocus = function onFocus() {\n      setFocusedIndex(index);\n    };\n    var onBlur = function onBlur() {\n      setFocusedIndex(-1);\n    };\n    var hasFocus = focusedIndex === index;\n    var inputType = type === \"number\" ? \"tel\" : \"text\";\n    return _extends({\n      \"aria-label\": \"Please enter your pin code\",\n      inputMode: type === \"number\" ? \"numeric\" : \"text\",\n      type: mask ? \"password\" : inputType\n    }, rest, {\n      id: id + \"-\" + index,\n      disabled: isDisabled,\n      \"aria-invalid\": ariaAttr(isInvalid),\n      onChange: callAllHandlers(rest.onChange, onChange),\n      onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(rest.onFocus, onFocus),\n      onBlur: callAllHandlers(rest.onBlur, onBlur),\n      value: values[index] || \"\",\n      autoComplete: otp ? \"one-time-code\" : \"off\",\n      placeholder: hasFocus ? \"\" : placeholder\n    });\n  }, [descendants, focusedIndex, getNextValue, id, isDisabled, mask, isInvalid, manageFocus, onComplete, otp, placeholder, setValue, setValues, type, values]);\n  return {\n    // prop getter\n    getInputProps: getInputProps,\n    // state\n    id: id,\n    descendants: descendants,\n    values: values,\n    // actions\n    setValue: setValue,\n    setValues: setValues,\n    clear: clear\n  };\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(props, ref) {\n  if (props === void 0) {\n    props = {};\n  }\n  if (ref === void 0) {\n    ref = null;\n  }\n  var _usePinInputContext = usePinInputContext(),\n    getInputProps = _usePinInputContext.getInputProps;\n  var _usePinInputDescendan = usePinInputDescendant(),\n    index = _usePinInputDescendan.index,\n    register = _usePinInputDescendan.register;\n  return getInputProps(_extends({}, props, {\n    ref: mergeRefs(register, ref),\n    index: index\n  }));\n}","map":{"version":3,"names":["createDescendantContext","useControllableState","useId","ariaAttr","callAllHandlers","focus","createContext","mergeRefs","React","_createDescendantCont","_createDescendantCont2","_slicedToArray","PinInputDescendantsProvider","usePinInputDescendantsContext","usePinInputDescendants","usePinInputDescendant","_createContext","name","errorMessage","_createContext2","PinInputProvider","usePinInputContext","toArray","value","split","validate","type","NUMERIC_REGEX","ALPHA_NUMERIC_REGEX","regex","test","usePinInput","props","_props","autoFocus","defaultValue","_onChange","onChange","onComplete","_props$placeholder","placeholder","_props$manageFocus","manageFocus","_props$otp","otp","idProp","id","isDisabled","isInvalid","_props$type","mask","uuid","descendants","_React$useState","useState","_React$useState2","moveFocus","setMoveFocus","_React$useState3","_React$useState4","focusedIndex","setFocusedIndex","_useControllableState","values","join","_useControllableState2","setValues","useEffect","first","node","nextTick","focusNext","useCallback","index","next","setValue","nextValues","_toConsumableArray","isComplete","length","count","every","inputValue","clear","Array","fill","getNextValue","eventValue","nextValue","charAt","getInputProps","rest","_objectWithoutPropertiesLoose","event","target","currentValue","_nextValue","filter","_","onKeyDown","key","prevInput","prev","onFocus","onBlur","hasFocus","inputType","_extends","inputMode","disabled","autoComplete","usePinInputField","ref","_usePinInputContext","_usePinInputDescendan","register"],"sources":["../../src/use-pin-input.ts"],"sourcesContent":["import { createDescendantContext } from \"@chakra-ui/descendant\"\nimport { useControllableState, useId } from \"@chakra-ui/hooks\"\nimport { ariaAttr, callAllHandlers, focus } from \"@chakra-ui/utils\"\nimport { createContext, mergeRefs } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\n\n/* -------------------------------------------------------------------------------------------------\n * Create context to track descendants and their indices\n * -----------------------------------------------------------------------------------------------*/\n\nexport const [\n  PinInputDescendantsProvider,\n  usePinInputDescendantsContext,\n  usePinInputDescendants,\n  usePinInputDescendant,\n] = createDescendantContext<HTMLInputElement>()\n\n/* -------------------------------------------------------------------------------------------------\n * Create context that stores pin-input logic\n * -----------------------------------------------------------------------------------------------*/\n\nexport type PinInputContext = Omit<UsePinInputReturn, \"descendants\"> & {\n  /**\n   * Sets the pin input component to the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * Sets the pin input component to the invalid state\n   */\n  isInvalid?: boolean\n}\n\nexport const [\n  PinInputProvider,\n  usePinInputContext,\n] = createContext<PinInputContext>({\n  name: \"PinInputContext\",\n  errorMessage:\n    \"usePinInputContext: `context` is undefined. Seems you forgot to all pin input fields within `<PinInput />`\",\n})\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput hook\n * -----------------------------------------------------------------------------------------------*/\n\nexport interface UsePinInputProps {\n  /**\n   * If `true`, the pin input receives focus on mount\n   */\n  autoFocus?: boolean\n  /**\n   * The value of the the pin input. This is the value\n   * that will be returned when the pin input is filled\n   */\n  value?: string\n  /**\n   * The default value of the pin input\n   */\n  defaultValue?: string\n  /**\n   * Function called on input change\n   */\n  onChange?: (value: string) => void\n  /**\n   * Function called when all inputs have valid values\n   */\n  onComplete?: (value: string) => void\n  /**\n   * The placeholder for the pin input\n   */\n  placeholder?: string\n  /**\n   * If `true`, focus will move automatically to the next input once filled\n   * @default true\n   */\n  manageFocus?: boolean\n  /**\n   * If `true`, the pin input component signals to its fields that they should\n   * use `autocomplete=\"one-time-code\"`.\n   */\n  otp?: boolean\n  /**\n   * The top-level id string that will be applied to the input fields.\n   * The index of the input will be appended to this top-level id.\n   *\n   * @example\n   * if id=\"foo\", the first input will have `foo-0`\n   */\n  id?: string\n  /**\n   * If `true`, the pin input component is put in the disabled state\n   */\n  isDisabled?: boolean\n  /**\n   * If `true`, the pin input component is put in the invalid state\n   */\n  isInvalid?: boolean\n  /**\n   * The type of values the pin-input should allow\n   */\n  type?: \"alphanumeric\" | \"number\"\n  /**\n   * If `true`, the input's value will be masked just like `type=password`\n   */\n  mask?: boolean\n}\n\nconst toArray = (value?: string) => value?.split(\"\")\n\nfunction validate(value: string, type: UsePinInputProps[\"type\"]) {\n  const NUMERIC_REGEX = /^[0-9]+$/\n  const ALPHA_NUMERIC_REGEX = /^[a-zA-Z0-9]+$/i\n  const regex = type === \"alphanumeric\" ? ALPHA_NUMERIC_REGEX : NUMERIC_REGEX\n  return regex.test(value)\n}\n\n/* -------------------------------------------------------------------------------------------------\n * usePinInput - handles the general pin input logic\n * -----------------------------------------------------------------------------------------------*/\n\n/**\n * @internal\n */\nexport function usePinInput(props: UsePinInputProps = {}) {\n  const {\n    autoFocus,\n    value,\n    defaultValue,\n    onChange,\n    onComplete,\n    placeholder = \"â—‹\",\n    manageFocus = true,\n    otp = false,\n    id: idProp,\n    isDisabled,\n    isInvalid,\n    type = \"number\",\n    mask,\n  } = props\n\n  const uuid = useId()\n  const id = idProp ?? `pin-input-${uuid}`\n\n  const descendants = usePinInputDescendants()\n\n  const [moveFocus, setMoveFocus] = React.useState(true)\n  const [focusedIndex, setFocusedIndex] = React.useState(-1)\n\n  const [values, setValues] = useControllableState<string[]>({\n    defaultValue: toArray(defaultValue) || [],\n    value: toArray(value),\n    onChange: (values) => onChange?.(values.join(\"\")),\n  })\n\n  React.useEffect(() => {\n    if (autoFocus) {\n      const first = descendants.first()\n      if (first) focus(first.node, { nextTick: true })\n    }\n    // We don't want to listen for updates to `autoFocus` since it only runs initially\n    // eslint-disable-next-line\n  }, [descendants])\n\n  const focusNext = React.useCallback(\n    (index: number) => {\n      if (!moveFocus || !manageFocus) return\n      const next = descendants.next(index, false)\n      if (next) focus(next.node, { nextTick: true })\n    },\n    [descendants, moveFocus, manageFocus],\n  )\n\n  const setValue = React.useCallback(\n    (value: string, index: number) => {\n      const nextValues = [...values]\n      nextValues[index] = value\n      setValues(nextValues)\n\n      const isComplete =\n        value !== \"\" &&\n        nextValues.length === descendants.count() &&\n        nextValues.every(\n          (inputValue) => inputValue != null && inputValue !== \"\",\n        )\n\n      if (isComplete) {\n        onComplete?.(nextValues.join(\"\"))\n      } else {\n        focusNext(index)\n      }\n    },\n    [values, setValues, focusNext, onComplete, descendants],\n  )\n\n  const clear = React.useCallback(() => {\n    const values: string[] = Array(descendants.count()).fill(\"\")\n    setValues(values)\n    const first = descendants.first()\n    if (first) focus(first.node)\n  }, [descendants, setValues])\n\n  const getNextValue = React.useCallback(\n    (value: string, eventValue: string) => {\n      let nextValue = eventValue\n      if (value?.length > 0) {\n        if (value[0] === eventValue.charAt(0)) {\n          nextValue = eventValue.charAt(1)\n        } else if (value[0] === eventValue.charAt(1)) {\n          nextValue = eventValue.charAt(0)\n        }\n      }\n      return nextValue\n    },\n    [],\n  )\n\n  const getInputProps = React.useCallback(\n    (props: InputProps & { index: number }): InputProps => {\n      const { index, ...rest } = props\n\n      /**\n       * Improved from: https://github.com/uber/baseweb/blob/master/src/pin-code/pin-code.js\n       */\n      const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const eventValue = event.target.value\n        const currentValue = values[index]\n        const nextValue = getNextValue(currentValue, eventValue)\n\n        // if the value was removed using backspace\n        if (nextValue === \"\") {\n          setValue(\"\", index)\n          return\n        }\n\n        // in the case of an autocomplete or copy and paste\n        if (eventValue.length > 2) {\n          // see if we can use the string to fill out our values\n          if (validate(eventValue, type)) {\n            // Ensure the value matches the number of inputs\n            const nextValue = eventValue\n              .split(\"\")\n              .filter((_, index) => index < descendants.count())\n\n            setValues(nextValue)\n\n            // if pasting fills the entire input fields, trigger `onComplete`\n            if (nextValue.length === descendants.count()) {\n              onComplete?.(nextValue.join(\"\"))\n            }\n          }\n        } else {\n          // only set if the new value is a number\n          if (validate(nextValue, type)) {\n            setValue(nextValue, index)\n          }\n\n          setMoveFocus(true)\n        }\n      }\n\n      const onKeyDown = (event: React.KeyboardEvent) => {\n        if (event.key === \"Backspace\" && manageFocus) {\n          if ((event.target as HTMLInputElement).value === \"\") {\n            const prevInput = descendants.prev(index, false)\n            if (prevInput) {\n              setValue(\"\", index - 1)\n              focus(prevInput.node)\n              setMoveFocus(true)\n            }\n          } else {\n            setMoveFocus(false)\n          }\n        }\n      }\n\n      const onFocus = () => {\n        setFocusedIndex(index)\n      }\n\n      const onBlur = () => {\n        setFocusedIndex(-1)\n      }\n\n      const hasFocus = focusedIndex === index\n      const inputType = type === \"number\" ? \"tel\" : \"text\"\n\n      return {\n        \"aria-label\": \"Please enter your pin code\",\n        inputMode: type === \"number\" ? \"numeric\" : \"text\",\n        type: mask ? \"password\" : inputType,\n        ...rest,\n        id: `${id}-${index}`,\n        disabled: isDisabled,\n        \"aria-invalid\": ariaAttr(isInvalid),\n        onChange: callAllHandlers(rest.onChange, onChange),\n        onKeyDown: callAllHandlers(rest.onKeyDown, onKeyDown),\n        onFocus: callAllHandlers(rest.onFocus, onFocus),\n        onBlur: callAllHandlers(rest.onBlur, onBlur),\n        value: values[index] || \"\",\n        autoComplete: otp ? \"one-time-code\" : \"off\",\n        placeholder: hasFocus ? \"\" : placeholder,\n      }\n    },\n    [\n      descendants,\n      focusedIndex,\n      getNextValue,\n      id,\n      isDisabled,\n      mask,\n      isInvalid,\n      manageFocus,\n      onComplete,\n      otp,\n      placeholder,\n      setValue,\n      setValues,\n      type,\n      values,\n    ],\n  )\n\n  return {\n    // prop getter\n    getInputProps,\n    // state\n    id,\n    descendants,\n    values,\n    // actions\n    setValue,\n    setValues,\n    clear,\n  }\n}\n\nexport type UsePinInputReturn = ReturnType<typeof usePinInput>\n\nexport interface UsePinInputFieldProps extends InputProps {\n  ref?: React.Ref<HTMLInputElement>\n}\n\n/**\n * @internal\n */\nexport function usePinInputField(\n  props: UsePinInputFieldProps = {},\n  ref: React.Ref<any> = null,\n) {\n  const { getInputProps } = usePinInputContext()\n  const { index, register } = usePinInputDescendant()\n\n  return getInputProps({\n    ...props,\n    ref: mergeRefs(register, ref),\n    index,\n  })\n}\n\ninterface InputProps\n  extends Omit<\n    React.ComponentPropsWithRef<\"input\">,\n    \"color\" | \"height\" | \"width\"\n  > {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
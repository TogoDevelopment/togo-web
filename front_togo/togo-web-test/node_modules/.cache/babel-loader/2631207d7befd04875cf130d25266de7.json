{"ast":null,"code":"import { isObject, runIfFn } from \"@chakra-ui/utils\";\n/**\n * Expands an array or object syntax responsive style.\n *\n * @example\n * expandResponsive({ mx: [1, 2] })\n * // or\n * expandResponsive({ mx: { base: 1, sm: 2 } })\n *\n * // => { mx: 1, \"@media(min-width:<sm>)\": { mx: 2 } }\n */\n\nexport var expandResponsive = function expandResponsive(styles) {\n  return function (theme) {\n    /**\n     * Before any style can be processed, the user needs to call `toCSSVar`\n     * which analyzes the theme's breakpoint and appends a `__breakpoints` property\n     * to the theme with more details of the breakpoints.\n     *\n     * To learn more, go here: packages/utils/src/responsive.ts #analyzeBreakpoints\n     */\n    if (!theme.__breakpoints) return styles;\n    var _theme$__breakpoints = theme.__breakpoints,\n      isResponsive = _theme$__breakpoints.isResponsive,\n      toArrayValue = _theme$__breakpoints.toArrayValue,\n      medias = _theme$__breakpoints.media;\n    var computedStyles = {};\n    for (var key in styles) {\n      var value = runIfFn(styles[key], theme);\n      if (value == null) continue; // converts the object responsive syntax to array syntax\n\n      value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value;\n      if (!Array.isArray(value)) {\n        computedStyles[key] = value;\n        continue;\n      }\n      var queries = value.slice(0, medias.length).length;\n      for (var index = 0; index < queries; index += 1) {\n        var media = medias == null ? void 0 : medias[index];\n        if (!media) {\n          computedStyles[key] = value[index];\n          continue;\n        }\n        computedStyles[media] = computedStyles[media] || {};\n        if (value[index] == null) {\n          continue;\n        }\n        computedStyles[media][key] = value[index];\n      }\n    }\n    return computedStyles;\n  };\n};","map":{"version":3,"names":["isObject","runIfFn","expandResponsive","styles","theme","__breakpoints","_theme$__breakpoints","isResponsive","toArrayValue","medias","media","computedStyles","key","value","Array","isArray","queries","slice","length","index"],"sources":["../../../src/utils/expand-responsive.ts"],"sourcesContent":["import { Dict, isObject, runIfFn } from \"@chakra-ui/utils\"\n\n/**\n * Expands an array or object syntax responsive style.\n *\n * @example\n * expandResponsive({ mx: [1, 2] })\n * // or\n * expandResponsive({ mx: { base: 1, sm: 2 } })\n *\n * // => { mx: 1, \"@media(min-width:<sm>)\": { mx: 2 } }\n */\nexport const expandResponsive = (styles: Dict) => (theme: Dict) => {\n  /**\n   * Before any style can be processed, the user needs to call `toCSSVar`\n   * which analyzes the theme's breakpoint and appends a `__breakpoints` property\n   * to the theme with more details of the breakpoints.\n   *\n   * To learn more, go here: packages/utils/src/responsive.ts #analyzeBreakpoints\n   */\n  if (!theme.__breakpoints) return styles\n  const { isResponsive, toArrayValue, media: medias } = theme.__breakpoints\n\n  const computedStyles: Dict = {}\n\n  for (const key in styles) {\n    let value = runIfFn(styles[key], theme)\n\n    if (value == null) continue\n\n    // converts the object responsive syntax to array syntax\n    value = isObject(value) && isResponsive(value) ? toArrayValue(value) : value\n\n    if (!Array.isArray(value)) {\n      computedStyles[key] = value\n      continue\n    }\n\n    const queries = value.slice(0, medias.length).length\n\n    for (let index = 0; index < queries; index += 1) {\n      const media = medias?.[index]\n\n      if (!media) {\n        computedStyles[key] = value[index]\n        continue\n      }\n\n      computedStyles[media] = computedStyles[media] || {}\n\n      if (value[index] == null) {\n        continue\n      }\n\n      computedStyles[media][key] = value[index]\n    }\n  }\n\n  return computedStyles\n}\n"],"mappings":"AAAA,SAAeA,QAAf,EAAyBC,OAAzB,QAAwC,kBAAxC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,gBAAgB,GAAI,SAApBA,gBAAgBA,CAAIC,MAAD;EAAA,OAAmB,UAAAC,KAAD,EAAiB;IACjE;AACF;AACA;AACA;AACA;AACA;AACA;IACE,IAAI,CAACA,KAAK,CAACC,aAAX,EAA0B,OAAOF,MAAP;IAC1B,IAAAG,oBAAA,GAAsDF,KAAK,CAACC,aAA5D;MAAQE,YAAF,GAAAD,oBAAA,CAAEC,YAAF;MAAgBC,YAAhB,GAAAF,oBAAA,CAAgBE,YAAhB;MAAqCC,MAAA,GAAAH,oBAAA,CAAPI,KAAK;IAEzC,IAAMC,cAAoB,GAAG,EAA7B;IAEA,KAAK,IAAMC,GAAX,IAAkBT,MAAlB,EAA0B;MACxB,IAAIU,KAAK,GAAGZ,OAAO,CAACE,MAAM,CAACS,GAAD,CAAP,EAAcR,KAAd,CAAnB;MAEA,IAAIS,KAAK,IAAI,IAAb,EAAmB,SAHK,CAKxB;;MACAA,KAAK,GAAGb,QAAQ,CAACa,KAAD,CAAR,IAAmBN,YAAY,CAACM,KAAD,CAA/B,GAAyCL,YAAY,CAACK,KAAD,CAArD,GAA+DA,KAAvE;MAEA,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;QACzBF,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAtB;QACA;MACD;MAED,IAAMG,OAAO,GAAGH,KAAK,CAACI,KAAN,CAAY,CAAZ,EAAeR,MAAM,CAACS,MAAtB,EAA8BA,MAA9C;MAEA,KAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGH,OAA5B,EAAqCG,KAAK,IAAI,CAA9C,EAAiD;QAC/C,IAAMT,KAAK,GAAGD,MAAH,oBAAGA,MAAM,CAAGU,KAAH,CAApB;QAEA,IAAI,CAACT,KAAL,EAAY;UACVC,cAAc,CAACC,GAAD,CAAd,GAAsBC,KAAK,CAACM,KAAD,CAA3B;UACA;QACD;QAEDR,cAAc,CAACD,KAAD,CAAd,GAAwBC,cAAc,CAACD,KAAD,CAAd,IAAyB,EAAjD;QAEA,IAAIG,KAAK,CAACM,KAAD,CAAL,IAAgB,IAApB,EAA0B;UACxB;QACD;QAEDR,cAAc,CAACD,KAAD,CAAd,CAAsBE,GAAtB,IAA6BC,KAAK,CAACM,KAAD,CAAlC;MACD;IACF;IAED,OAAOR,cAAP;EACD,CA/CM;AAAA"},"metadata":{},"sourceType":"module"}
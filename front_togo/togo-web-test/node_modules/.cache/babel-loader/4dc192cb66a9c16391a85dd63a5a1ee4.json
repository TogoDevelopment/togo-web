{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\nvar _core = require(\"@emotion/core\");\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\nvar _react = _interopRequireWildcard(require(\"react\"));\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\nvar _clockEvents = _interopRequireDefault(require(\"../hooks/clock-events\"));\nvar _constants = require(\"../helpers/constants\");\nvar _utils = require(\"../helpers/utils\");\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\nfunction ClockWrapper() {\n  var config = (0, _configContext.default)(); // clock events\n\n  var clock = (0, _react.useRef)(null);\n  var _useClockEvents = (0, _clockEvents.default)(clock, calculateTimeValue),\n    bind = _useClockEvents.bind;\n  var _useTimekeeperState = (0, _stateContext.default)(),\n    mode = _useTimekeeperState.mode,\n    updateTime = _useTimekeeperState.updateTime,\n    setMode = _useTimekeeperState.setMode,\n    getComposedTime = _useTimekeeperState.getComposedTime;\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n  function calculateTimeValue(angle, _ref) {\n    var _ref$canAutoChangeUni = _ref.canAutoChangeUnit,\n      canAutoChangeUnit = _ref$canAutoChangeUni === void 0 ? false : _ref$canAutoChangeUni,\n      _ref$wasTapped = _ref.wasTapped,\n      wasTapped = _ref$wasTapped === void 0 ? false : _ref$wasTapped,\n      _ref$isInnerClick = _ref.isInnerClick,\n      isInnerClick = _ref$isInnerClick === void 0 ? false : _ref$isInnerClick;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    var totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    var minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n    var val = angle / 360 * totalIncrements;\n    var selected = Math.round(val / minIncrement) * minIncrement;\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n      if (!isInnerClick && selected !== 0) {\n        selected += 12;\n      } else if (isInnerClick && selected === 0) {\n        selected += 12;\n      }\n      if (selected === 24) {\n        selected = 0;\n      }\n    } // update time officially on timekeeper\n\n    updateTime(selected); // handle any unit autochanges on done click\n\n    if (canAutoChangeUnit) {\n      if (config.switchToMinuteOnHourSelect && (0, _utils.isHourMode)(mode)) {\n        setMode(_constants.MODE.MINUTES);\n      } else if (config.closeOnMinuteSelect && (0, _utils.isMinuteMode)(mode)) {\n        config.onDoneClick && config.onDoneClick(getComposedTime());\n      }\n    }\n  }\n  return (0, _core.jsx)(\"div\", (0, _extends2.default)({}, bind, {\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default\n  }), (0, _core.jsx)(_Clock.default, {\n    clockEl: clock\n  }), !config.hour24Mode && (0, _core.jsx)(_Meridiems.default, null));\n}","map":{"version":3,"names":["_interopRequireWildcard","require","_interopRequireDefault","Object","defineProperty","exports","value","default","ClockWrapper","_core","_extends2","_react","_configContext","_Clock","_Meridiems","_clockWrapper","_clockEvents","_constants","_utils","_stateContext","config","clock","useRef","_useClockEvents","calculateTimeValue","bind","_useTimekeeperState","mode","updateTime","setMode","getComposedTime","angle","_ref","_ref$canAutoChangeUni","canAutoChangeUnit","_ref$wasTapped","wasTapped","_ref$isInnerClick","isInnerClick","totalIncrements","CLOCK_VALUES","increments","minIncrement","isMinuteMode","forceCoarseMinutes","coarseMinutes","val","selected","Math","round","MODE","HOURS_24","hour24Mode","switchToMinuteOnHourSelect","isHourMode","MINUTES","closeOnMinuteSelect","onDoneClick","jsx","className","css","clockEl"],"sources":["/home/system/togo-web-test/node_modules/react-timekeeper/lib/components/ClockWrapper.js"],"sourcesContent":["\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _core = require(\"@emotion/core\");\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _configContext = _interopRequireDefault(require(\"../hooks/config-context\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _clockEvents = _interopRequireDefault(require(\"../hooks/clock-events\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _stateContext = _interopRequireDefault(require(\"../hooks/state-context\"));\n\nfunction ClockWrapper() {\n  const config = (0, _configContext.default)(); // clock events\n\n  const clock = (0, _react.useRef)(null);\n\n  const _useClockEvents = (0, _clockEvents.default)(clock, calculateTimeValue),\n        bind = _useClockEvents.bind;\n\n  const _useTimekeeperState = (0, _stateContext.default)(),\n        mode = _useTimekeeperState.mode,\n        updateTime = _useTimekeeperState.updateTime,\n        setMode = _useTimekeeperState.setMode,\n        getComposedTime = _useTimekeeperState.getComposedTime;\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n\n  function calculateTimeValue(angle, {\n    canAutoChangeUnit = false,\n    wasTapped = false,\n    isInnerClick = false\n  }) {\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    let minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    const val = angle / 360 * totalIncrements;\n    let selected = Math.round(val / minIncrement) * minIncrement;\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n      if (!isInnerClick && selected !== 0) {\n        selected += 12;\n      } else if (isInnerClick && selected === 0) {\n        selected += 12;\n      }\n\n      if (selected === 24) {\n        selected = 0;\n      }\n    } // update time officially on timekeeper\n\n\n    updateTime(selected); // handle any unit autochanges on done click\n\n    if (canAutoChangeUnit) {\n      if (config.switchToMinuteOnHourSelect && (0, _utils.isHourMode)(mode)) {\n        setMode(_constants.MODE.MINUTES);\n      } else if (config.closeOnMinuteSelect && (0, _utils.isMinuteMode)(mode)) {\n        config.onDoneClick && config.onDoneClick(getComposedTime());\n      }\n    }\n  }\n\n  return (0, _core.jsx)(\"div\", (0, _extends2.default)({}, bind, {\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default\n  }), (0, _core.jsx)(_Clock.default, {\n    clockEl: clock\n  }), !config.hour24Mode && (0, _core.jsx)(_Meridiems.default, null));\n}"],"mappings":"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"},"metadata":{},"sourceType":"script"}
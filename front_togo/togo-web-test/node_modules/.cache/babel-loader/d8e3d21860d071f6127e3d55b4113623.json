{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport './OrdersTabularView.css';\nimport translate from \"../../i18n/translate\";\nimport { Link } from \"react-router-dom\";\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\";\n/* edited (getOrderDetails imported) */\n\nexport var PackageTypes = {\n  \"1\": \"FOOD\",\n  \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\n  \"3\": \"MEDIUM_PACKAGE\",\n  \"4\": \"LARGE_PACKAGE\"\n};\nexport var DeliveryTypes = {\n  \"1\": \"DELIVERY\",\n  \"2\": \"COD\",\n  \"3\": \"PICKUP\",\n  \"4\": \"PAP\"\n};\nexport var deliverFormatter = function deliverFormatter(data) {\n  if (DeliveryTypes[parseInt(data.DeliveryWays)]) {\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)]);\n  }\n\n  return \"\";\n};\nexport var packageFormatter = function packageFormatter(data) {\n  if (PackageTypes[parseInt(data.PackageType)]) {\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)]);\n  }\n\n  return \"\";\n};\nexport var OrdersTabularView = function OrdersTabularView(_ref) {\n  var orders = _ref.orders,\n      currentPage = _ref.currentPage,\n      update = _ref.update;\n\n  var _useState = useState(\"-\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      bidPrice = _useState2[0],\n      setBidPrice = _useState2[1];\n\n  function getBidPrice(orderId) {\n    getOrderDetails(orderId).then(function (orderDetailsRes) {\n      setBidPrice(orderDetailsRes.CostLoad);\n    });\n  }\n  /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n          setOrderDetails(orderDetailsRes);\r\n            setReceiverAddress({\r\n              otherDetails: orderDetailsRes.OtherDetailsDes,\r\n              phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n              long: orderDetailsRes.LongReciver,\r\n              lat: orderDetailsRes.LatReciver\r\n          });\r\n  });*/\n  // console.log(orders);\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      columns = _useState4[0],\n      setColumns = _useState4[1];\n\n  var showDetailsButton = useCallback(function (orderId) {\n    return /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/account/Order/\".concat(orderId),\n        state: {\n          currentPage: currentPage\n        }\n      },\n      style: {\n        paddingRight: \"20%\",\n        paddingLeft: \"20%\",\n        border: \"none\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      className: \"btn btn-primary btn-rounded btn-grad\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }\n    }, translate(\"ORDERS.SHOW\"));\n  }, [currentPage]);\n  useEffect(function () {\n    var newColumns = [{\n      label: translate(\"ORDERS.ORDER_NUM\"),\n      key: \"idOrder\"\n    }, {\n      label: translate(\"ORDERS.DELIVERY_TYPE\"),\n      key: \"DeliveryWays\",\n      format: deliverFormatter\n    }, {\n      label: translate(\"ORDERS.PACKAGE_TYPE\"),\n      key: \"PackageType\",\n      format: packageFormatter\n    }, {\n      label: translate(\"ORDERS.ORDER_STATUS\"),\n      key: \"OrderStatus\"\n    }, {\n      label: translate(\"ORDERS.ORDER_DATE\"),\n      key: \"DateOrder\"\n    }, {\n      label: translate(\"ORDERS.ORDER_TIME\"),\n      key: \"TimeOrder\"\n    }, {\n      label: translate(\"ORDERS.FROM_CITY\"),\n      key: \"FromAddress\"\n    }, {\n      label: translate(\"ORDERS.TO_CITY\"),\n      key: \"ToAddress\"\n    }, {\n      label: translate(\"ORDERS.FULL_DETAILS\"),\n      key: \"idOrder\",\n      format: function format(_ref2) {\n        var idOrder = _ref2.idOrder;\n        return showDetailsButton(idOrder);\n      }\n    }];\n\n    if (isTransporter()) {\n      newColumns.splice(3, 0, {\n        label: translate(\"ORDER_DETAILS.BID_PRICE\"),\n        key: \"bidPrice\",\n        format: function format(_ref3) {\n          var idOrder = _ref3.idOrder;\n          return /*#__PURE__*/React.createElement(\"p\", {\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 40\n            }\n          }, bidPrice);\n        }\n      });\n    }\n\n    if (!isTransporter() && currentPage === \"all-orders\") {\n      newColumns.push({\n        label: \"\",\n        key: \"\",\n        format: function format(_ref4) {\n          var idOrder = _ref4.idOrder;\n          return /*#__PURE__*/React.createElement(CancelOrder, {\n            className: \"w-100\",\n            orderId: idOrder,\n            onSuccess: update,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 40\n            }\n          });\n        }\n      });\n    }\n\n    if (currentPage === \"current-orders\") {\n      //TODO:: key to be changed\n      newColumns.splice(3, 0, {\n        label: translate(\"ORDERS.PRICE\"),\n        key: \"CostLoad\"\n      });\n\n      if (isTransporterMaster()) {\n        newColumns.splice(newColumns.length - 1, 0, {\n          label: translate(\"ORDER_DETAILS.ASSIGNED\"),\n          key: \"AssignedMemberName\"\n        });\n      }\n    }\n    /* else if (currentPage === \"previous-orders\") {\r\n      newColumns.push({\r\n          label: translate(\"ORDERS.ORDER_STATUS\"),\r\n          key: \"idOrder\",\r\n          format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n      })\r\n    } */\n\n\n    setColumns(newColumns);\n  }, [currentPage, showDetailsButton]);\n  return /*#__PURE__*/React.createElement(DynamicTable, {\n    columns: columns,\n    data: orders,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx"],"names":["React","useCallback","useEffect","useState","translate","Link","CancelOrder","DynamicTable","isTransporter","isTransporterMaster","getOrderDetails","PackageTypes","DeliveryTypes","deliverFormatter","data","parseInt","DeliveryWays","packageFormatter","PackageType","OrdersTabularView","orders","currentPage","update","bidPrice","setBidPrice","getBidPrice","orderId","then","orderDetailsRes","CostLoad","columns","setColumns","showDetailsButton","pathname","state","paddingRight","paddingLeft","border","width","textAlign","newColumns","label","key","format","idOrder","splice","push","length"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from \"react\";\r\nimport './OrdersTabularView.css';\r\nimport translate from \"../../i18n/translate\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {CancelOrder} from \"../OrdersManager/CancelOrder\";\r\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\r\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\r\n\r\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\"; /* edited (getOrderDetails imported) */\r\n\r\nexport const PackageTypes = {\r\n    \"1\": \"FOOD\",\r\n    \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\r\n    \"3\": \"MEDIUM_PACKAGE\",\r\n    \"4\": \"LARGE_PACKAGE\"\r\n};\r\n\r\nexport const DeliveryTypes = {\r\n    \"1\": \"DELIVERY\",\r\n    \"2\": \"COD\",\r\n    \"3\": \"PICKUP\",\r\n    \"4\": \"PAP\"\r\n};\r\n\r\nexport const deliverFormatter = (data) => {\r\n    if(DeliveryTypes[parseInt(data.DeliveryWays)]){\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.DeliveryWays)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const packageFormatter = (data) => {\r\n    if(PackageTypes[parseInt(data.PackageType)]){\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.PackageType)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const OrdersTabularView = ({orders, currentPage, update}) => {\r\n\r\n    const [bidPrice, setBidPrice] = useState(\"-\");\r\n\r\n    function getBidPrice(orderId) {\r\n        getOrderDetails(orderId).then((orderDetailsRes) => {\r\n            setBidPrice(orderDetailsRes.CostLoad);\r\n        })\r\n    }\r\n\r\n    /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n            setOrderDetails(orderDetailsRes);\r\n\r\n            setReceiverAddress({\r\n                otherDetails: orderDetailsRes.OtherDetailsDes,\r\n                phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n                long: orderDetailsRes.LongReciver,\r\n                lat: orderDetailsRes.LatReciver\r\n            });\r\n    });*/\r\n\r\n    // console.log(orders);\r\n\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const showDetailsButton = useCallback((orderId) =>\r\n        <Link\r\n            to={{\r\n                pathname: `/account/Order/${orderId}`,\r\n                state: {currentPage: currentPage},\r\n            }}\r\n            style={{\r\n                paddingRight: \"20%\",\r\n                paddingLeft: \"20%\",\r\n                border: \"none\",\r\n                width: \"100%\",\r\n                textAlign: \"center\",\r\n            }}\r\n            className=\"btn btn-primary btn-rounded btn-grad\"\r\n        >\r\n            {translate(\"ORDERS.SHOW\")}\r\n        </Link>, [currentPage]);\r\n\r\n    useEffect(() => {\r\n        const newColumns = [\r\n            {\r\n                label: translate(\"ORDERS.ORDER_NUM\"),\r\n                key: \"idOrder\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                key: \"DeliveryWays\",\r\n                format: deliverFormatter\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                key: \"PackageType\",\r\n                format: packageFormatter\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                key: \"OrderStatus\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.ORDER_DATE\"),\r\n                key: \"DateOrder\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.ORDER_TIME\"),\r\n                key: \"TimeOrder\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.FROM_CITY\"),\r\n                key: \"FromAddress\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.TO_CITY\"),\r\n                key: \"ToAddress\"\r\n            },\r\n            {\r\n                label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                key: \"idOrder\",\r\n                format: ({idOrder}) => showDetailsButton(idOrder)\r\n            }\r\n        ];\r\n\r\n        if (isTransporter()) {\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n                key: \"bidPrice\",\r\n                format: ({idOrder}) => <p>{bidPrice}</p>\r\n            });\r\n        }\r\n        \r\n        if(!isTransporter() && currentPage === \"all-orders\"){ \r\n            newColumns.push({\r\n                label: \"\",\r\n                key: \"\",\r\n                format: ({idOrder}) => <CancelOrder className=\"w-100\" orderId={idOrder} onSuccess={update} />\r\n            });\r\n        }\r\n\r\n        if (currentPage === \"current-orders\") {\r\n            //TODO:: key to be changed\r\n\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDERS.PRICE\"),\r\n                key: \"CostLoad\"\r\n            });\r\n            \r\n            if(isTransporterMaster()){\r\n                newColumns.splice(newColumns.length - 1, 0,{\r\n                    label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                    key: \"AssignedMemberName\",\r\n                });\r\n            }\r\n        } /* else if (currentPage === \"previous-orders\") {\r\n            newColumns.push({\r\n                label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                key: \"idOrder\",\r\n                format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n            })\r\n        } */\r\n\r\n        setColumns(newColumns);\r\n    }, [currentPage, showDetailsButton]);\r\n\r\n    return <DynamicTable columns={columns} data={orders}/>;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css, toCSSVar } from \"@chakra-ui/styled-system\";\nimport { memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { createContext } from \"@chakra-ui/react-utils\";\nimport { Global, ThemeContext, ThemeProvider as EmotionThemeProvider } from \"@emotion/react\";\nimport * as React from \"react\";\nexport var ThemeProvider = function ThemeProvider(props) {\n  var _props$cssVarsRoot = props.cssVarsRoot,\n    cssVarsRoot = _props$cssVarsRoot === void 0 ? \":host, :root\" : _props$cssVarsRoot,\n    theme = props.theme,\n    children = props.children;\n  var computedTheme = React.useMemo(function () {\n    return toCSSVar(theme);\n  }, [theme]);\n  return /*#__PURE__*/React.createElement(EmotionThemeProvider, {\n    theme: computedTheme\n  }, /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      return _defineProperty({}, cssVarsRoot, theme.__cssVars);\n    }\n  }), children);\n};\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\");\n  }\n  return theme;\n}\nvar _createContext = createContext({\n    name: \"StylesContext\",\n    errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n  }),\n  _createContext2 = _slicedToArray(_createContext, 2),\n  StylesProvider = _createContext2[0],\n  useStyles = _createContext2[1];\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = function GlobalStyle() {\n  var _useColorMode = useColorMode(),\n    colorMode = _useColorMode.colorMode;\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: function styles(theme) {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme: theme,\n        colorMode: colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"names":["useColorMode","css","toCSSVar","memoizedGet","get","runIfFn","createContext","Global","ThemeContext","ThemeProvider","EmotionThemeProvider","React","props","_props$cssVarsRoot","cssVarsRoot","theme","children","computedTheme","useMemo","createElement","styles","_defineProperty","__cssVars","useTheme","useContext","Error","_createContext","name","errorMessage","_createContext2","_slicedToArray","StylesProvider","useStyles","GlobalStyle","_useColorMode","colorMode","styleObjectOrFn","globalStyles","undefined"],"sources":["../../src/providers.tsx"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\"\nimport {\n  css,\n  SystemStyleObject,\n  toCSSVar,\n  WithCSSVar,\n} from \"@chakra-ui/styled-system\"\nimport { Dict, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\"\nimport { createContext } from \"@chakra-ui/react-utils\"\nimport {\n  Global,\n  Interpolation,\n  ThemeContext,\n  ThemeProvider as EmotionThemeProvider,\n  ThemeProviderProps as EmotionThemeProviderProps,\n} from \"@emotion/react\"\nimport * as React from \"react\"\n\nexport interface ThemeProviderProps extends EmotionThemeProviderProps {\n  /**\n   * The element to attach the CSS custom properties to.\n   * @default \":host, :root\"\n   */\n  cssVarsRoot?: string\n}\n\nexport const ThemeProvider = (props: ThemeProviderProps) => {\n  const { cssVarsRoot = \":host, :root\", theme, children } = props\n  const computedTheme = React.useMemo(() => toCSSVar(theme), [theme])\n  return (\n    <EmotionThemeProvider theme={computedTheme}>\n      <Global styles={(theme: any) => ({ [cssVarsRoot]: theme.__cssVars })} />\n      {children}\n    </EmotionThemeProvider>\n  )\n}\n\nexport function useTheme<T extends object = Dict>() {\n  const theme = React.useContext(\n    (ThemeContext as unknown) as React.Context<T | undefined>,\n  )\n  if (!theme) {\n    throw Error(\n      \"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />` or `<ThemeProvider />`\",\n    )\n  }\n\n  return theme as WithCSSVar<T>\n}\n\nconst [StylesProvider, useStyles] = createContext<Dict<SystemStyleObject>>({\n  name: \"StylesContext\",\n  errorMessage:\n    \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \",\n})\nexport { StylesProvider, useStyles }\n\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\nexport const GlobalStyle = () => {\n  const { colorMode } = useColorMode()\n  return (\n    <Global\n      styles={(theme: any) => {\n        const styleObjectOrFn = get(theme, \"styles.global\")\n        const globalStyles = runIfFn(styleObjectOrFn, { theme, colorMode })\n        if (!globalStyles) return undefined\n        const styles = css(globalStyles)(theme)\n        return styles as Interpolation<{}>\n      }}\n    />\n  )\n}\n"],"mappings":";;AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SACEC,GADF,EAGEC,QAHF,QAKO,0BALP;AAMA,SAAeC,WAAW,IAAIC,GAA9B,EAAmCC,OAAnC,QAAkD,kBAAlD;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,SACEC,MADF,EAGEC,YAHF,EAIEC,aAAa,IAAIC,oBAJnB,QAMO,gBANP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAUA,OAAO,IAAMF,aAAa,GAAI,SAAjBA,aAAaA,CAAIG,KAAD,EAA+B;EAC1D,IAAAC,kBAAA,GAA0DD,KAA1D,CAAQE,WAAW;IAAXA,WAAW,GAAAD,kBAAA,cAAG,cAAhB,GAAAA,kBAAA;IAAgCE,KAAhC,GAAoDH,KAA1D,CAAsCG,KAAhC;IAAuCC,QAAA,GAAaJ,KAA1D,CAA6CI,QAAA;EAC7C,IAAMC,aAAa,GAAGN,KAAK,CAACO,OAAN,CAAc;IAAA,OAAMhB,QAAQ,CAACa,KAAD,CAA5B;EAAA,GAAqC,CAACA,KAAD,CAArC,CAAtB;EACA,oBACEJ,KAAA,CAAAQ,aAAA,CAACT,oBAAD;IAAsBK,KAAK,EAAEE;EAA7B,gBACEN,KAAA,CAAAQ,aAAA,CAACZ,MAAD;IAAQa,MAAM,EAAG,SAAAA,OAAAL,KAAD;MAAA,OAAAM,eAAA,KAAoBP,WAAD,EAAeC,KAAK,CAACO,SAAA;IAAA;EAAxD,EADF,EAEGN,QAFH,CADF;AAMD,CATM;AAWP,OAAO,SAASO,QAATA,CAAA,EAA6C;EAClD,IAAMR,KAAK,GAAGJ,KAAK,CAACa,UAAN,CACXhB,YADW,CAAd;EAGA,IAAI,CAACO,KAAL,EAAY;IACV,MAAMU,KAAK,CACT,kHADS,CAAX;EAGD;EAED,OAAOV,KAAP;AACD;AAED,IAAAW,cAAA,GAAoCpB,aAAa,CAA0B;IACzEqB,IAAI,EAAE,eADmE;IAEzEC,YAAY,EACV;EAHuE,CAA1B,CAAjD;EAAAC,eAAA,GAAAC,cAAA,CAAAJ,cAAA;EAAOK,cAAD,GAAAF,eAAA;EAAiBG,SAAjB,GAAAH,eAAA;AAKN,SAASE,cAAT,EAAyBC,SAAzB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;EAC/B,IAAAC,aAAA,GAAsBlC,YAAY,EAAlC;IAAQmC,SAAA,GAAAD,aAAA,CAAAC,SAAA;EACR,oBACExB,KAAA,CAAAQ,aAAA,CAACZ,MAAD;IACEa,MAAM,EAAG,SAAAA,OAAAL,KAAD,EAAgB;MACtB,IAAMqB,eAAe,GAAGhC,GAAG,CAACW,KAAD,EAAQ,eAAR,CAA3B;MACA,IAAMsB,YAAY,GAAGhC,OAAO,CAAC+B,eAAD,EAAkB;QAAErB,KAAF,EAAEA,KAAF;QAASoB,SAAA,EAAAA;MAAT,CAAlB,CAA5B;MACA,IAAI,CAACE,YAAL,EAAmB,OAAOC,SAAP;MACnB,IAAMlB,MAAM,GAAGnB,GAAG,CAACoC,YAAD,CAAH,CAAkBtB,KAAlB,CAAf;MACA,OAAOK,MAAP;IACD;EAPH,EADF;AAWD,CAbM"},"metadata":{},"sourceType":"module"}
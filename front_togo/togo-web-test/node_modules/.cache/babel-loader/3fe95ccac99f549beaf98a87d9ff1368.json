{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\",\n    _this2 = this;\n\n/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\n\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\n\n/* ###################################################################################################################### */\nimport React, { useRef, useState } from 'react';\nimport ImageUploading from 'react-images-uploading';\nimport AvatarEditor from 'react-avatar-editor';\nimport { Modal, Button } from 'react-bootstrap';\nexport default function App() {\n  var _this = this;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      image = _React$useState2[0],\n      setImage = _React$useState2[1];\n\n  var maxNumber = 1;\n\n  var onChange = function onChange(image) {\n    // data for submit\n    // console.log(imageList, addUpdateIndex);\n    setImage(image);\n  };\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1];\n\n  var handleClose = function handleClose() {\n    return setShow(false);\n  };\n\n  var handleShow = function handleShow() {\n    return setShow(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleShow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, \"Launch demo modal\"), /*#__PURE__*/React.createElement(Modal, {\n    show: show,\n    onHide: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, \"Modal heading\")), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ImageUploading, {\n    multiple: true,\n    value: image,\n    onChange: onChange,\n    maxNumber: maxNumber,\n    dataURLKey: \"data_url\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 21\n    }\n  }, function (_ref) {\n    var imageList = _ref.imageList,\n        onImageUpload = _ref.onImageUpload,\n        onImageUpdate = _ref.onImageUpdate,\n        onImageRemove = _ref.onImageRemove,\n        isDragging = _ref.isDragging,\n        dragProps = _ref.dragProps;\n    return (\n      /*#__PURE__*/\n      // write your building UI\n      React.createElement(\"div\", {\n        className: \"upload__image-wrapper\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(Button, Object.assign({\n        variant: \"outline-secondary\",\n        style: isDragging ? {\n          color: 'lightgray'\n        } : undefined,\n        onClick: onImageUpload\n      }, dragProps, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 33\n        }\n      }), \"Click or Drop here \", /*#__PURE__*/React.createElement(\"i\", {\n        class: \"bi bi-card-image\",\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 56\n        }\n      })), \"\\xA0\", imageList.map(function (image, index) {\n        return /*#__PURE__*/React.createElement(\"div\", {\n          key: index,\n          className: \"image-item\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 37\n          }\n        }, /*#__PURE__*/React.createElement(MyEditor, {\n          image: image['data_url'],\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 41\n          }\n        }), /*#__PURE__*/React.createElement(\"div\", {\n          className: \"image-item__btn-wrapper\",\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 41\n          }\n        }, /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onImageUpdate(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 45\n          }\n        }, \"Update\"), /*#__PURE__*/React.createElement(\"button\", {\n          onClick: function onClick() {\n            return onImageRemove(index);\n          },\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156,\n            columnNumber: 45\n          }\n        }, \"Remove\")));\n      }))\n    );\n  })), /*#__PURE__*/React.createElement(Modal.Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"secondary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 21\n    }\n  }, \"Close\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 21\n    }\n  }, \"Save Changes\"))));\n}\n\nvar MyEditor = function MyEditor(_ref2) {\n  var image = _ref2.image;\n  var editor = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AvatarEditor, {\n    ref: editor,\n    image: image,\n    width: 250,\n    height: 250,\n    border: 50,\n    scale: 1.2,\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      if (_this2.editor) {\n        // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n        // drawn on another canvas, or added to the DOM.\n        var canvas = editor.current.getImage(); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n        var canvasScaled = editor.current.getImageScaledToCanvas();\n      }\n    },\n    __self: _this2,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 13\n    }\n  }, \"Save\"));\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","useRef","useState","ImageUploading","AvatarEditor","Modal","Button","App","image","setImage","maxNumber","onChange","show","setShow","handleClose","handleShow","imageList","onImageUpload","onImageUpdate","onImageRemove","isDragging","dragProps","color","undefined","map","index","MyEditor","editor","canvas","current","getImage","canvasScaled","getImageScaledToCanvas"],"mappings":"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","sourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\n/* import React, { useState, useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\nimport Dropzone from 'react-dropzone'\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <>\r\n            <input type=\"file\" />\r\n            <Dropzone\r\n                onDrop={(dropped) => setImage(dropped[0])}\r\n                noClick\r\n                noKeyboard\r\n                style={{ width: '250px', height: '250px' }}\r\n            >\r\n                {({ getRootProps, getInputProps }) => (\r\n                    <div {...getRootProps()}>\r\n                        <AvatarEditor ref={editor} width={250} height={250} image={image} rotate={50} scale={10} borderRadius={50} />\r\n                        \r\n\r\n                        <button onClick={() => {\r\n                            if (editor) {\r\n                                // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                                // drawn on another canvas, or added to the DOM.\r\n                                const canvas = editor.current.getImage();\r\n                                console.log(editor.current.state.image.resource.currentSrc);\r\n\r\n                                console.log(\"-----------------------\");\r\n\r\n                                // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                                const canvasScaled = editor.current.getImageScaledToCanvas();\r\n                                console.log(canvasScaled);\r\n                            }\r\n                        }}>Save</button>\r\n                    </div>\r\n                )}\r\n            </Dropzone>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\n/* ###################################################################################################################### */\r\n\r\nimport React, { useRef, useState } from 'react';\r\nimport ImageUploading from 'react-images-uploading';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport { Modal, Button } from 'react-bootstrap';\r\n\r\nexport default function App() {\r\n    const [image, setImage] = React.useState(null);\r\n    const maxNumber = 1;\r\n\r\n    const onChange = (image) => {\r\n        // data for submit\r\n        // console.log(imageList, addUpdateIndex);\r\n        setImage(image);\r\n    };\r\n\r\n    const [show, setShow] = useState(false);\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return (\r\n        <>\r\n            <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n            </Button>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Modal heading</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <ImageUploading\r\n                        multiple\r\n                        value={image}\r\n                        onChange={onChange}\r\n                        maxNumber={maxNumber}\r\n                        dataURLKey=\"data_url\"\r\n                    >\r\n                        {({\r\n                            imageList,\r\n                            onImageUpload,\r\n                            // onImageRemoveAll,\r\n                            onImageUpdate,\r\n                            onImageRemove,\r\n                            isDragging,\r\n                            dragProps,\r\n                        }) => (\r\n                            // write your building UI\r\n                            <div className=\"upload__image-wrapper\">\r\n                                <Button\r\n                                    variant=\"outline-secondary\"\r\n                                    style={isDragging ? { color: 'lightgray' } : undefined}\r\n                                    onClick={onImageUpload}\r\n                                    {...dragProps}\r\n                                >\r\n                                    Click or Drop here <i class=\"bi bi-card-image\"></i>\r\n                                </Button>\r\n                                &nbsp;\r\n                                {/* <button onClick={onImageRemoveAll}>Remove all images</button> */}\r\n                                {imageList.map((image, index) => (\r\n                                    <div key={index} className=\"image-item\">\r\n                                        {/* <img src={image['data_url']} alt=\"\" width=\"100\" />\r\n                                <div className=\"image-item__btn-wrapper\">\r\n                                    <button onClick={() => onImageUpdate(index)}>Update</button>\r\n                                    <button onClick={() => onImageRemove(index)}>Remove</button>\r\n                                </div> */}\r\n                                        <MyEditor image={image['data_url']} />\r\n                                        <div className=\"image-item__btn-wrapper\">\r\n                                            <button onClick={() => onImageUpdate(index)}>Update</button>\r\n                                            <button onClick={() => onImageRemove(index)}>Remove</button>\r\n                                        </div>\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        )}\r\n                    </ImageUploading>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={handleClose}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nconst MyEditor = ({ image }) => {\r\n    const editor = useRef(null);\r\n\r\n    return (\r\n        <div>\r\n            <AvatarEditor\r\n                ref={editor}\r\n                image={image}\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                scale={1.2}\r\n            />\r\n            <button onClick={() => {\r\n                if (this.editor) {\r\n                    // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                    // drawn on another canvas, or added to the DOM.\r\n                    const canvas = editor.current.getImage()\r\n\r\n                    // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                    const canvasScaled = editor.current.getImageScaledToCanvas()\r\n                }\r\n            }}>Save</button>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
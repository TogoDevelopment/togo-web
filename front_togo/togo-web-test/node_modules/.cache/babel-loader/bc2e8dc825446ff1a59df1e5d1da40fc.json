{"ast":null,"code":"import _defineProperty from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { chakra, forwardRef } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport { getValidChildren } from \"@chakra-ui/react-utils\";\nimport * as React from \"react\";\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\";\nexport var StackDivider = function StackDivider(props) {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__divider\"\n  }, props, {\n    __css: _extends({}, props[\"__css\"], {\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\"\n    })\n  }));\n};\nexport var StackItem = function StackItem(props) {\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-stack__item\"\n  }, props, {\n    __css: _extends({\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0\n    }, props[\"__css\"])\n  }));\n};\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport var Stack = /*#__PURE__*/forwardRef(function (props, ref) {\n  var isInline = props.isInline,\n    directionProp = props.direction,\n    align = props.align,\n    justify = props.justify,\n    _props$spacing = props.spacing,\n    spacing = _props$spacing === void 0 ? \"0.5rem\" : _props$spacing,\n    wrap = props.wrap,\n    children = props.children,\n    divider = props.divider,\n    className = props.className,\n    shouldWrapChildren = props.shouldWrapChildren,\n    rest = _objectWithoutPropertiesLoose(props, [\"isInline\", \"direction\", \"align\", \"justify\", \"spacing\", \"wrap\", \"children\", \"divider\", \"className\", \"shouldWrapChildren\"]);\n  var direction = isInline ? \"row\" : directionProp != null ? directionProp : \"column\";\n  var styles = React.useMemo(function () {\n    return getStackStyles({\n      direction: direction,\n      spacing: spacing\n    });\n  }, [direction, spacing]);\n  var dividerStyle = React.useMemo(function () {\n    return getDividerStyles({\n      spacing: spacing,\n      direction: direction\n    });\n  }, [spacing, direction]);\n  var hasDivider = !!divider;\n  var shouldUseChildren = !shouldWrapChildren && !hasDivider;\n  var validChildren = getValidChildren(children);\n  var clones = shouldUseChildren ? validChildren : validChildren.map(function (child, index) {\n    // Prefer provided child key, fallback to index\n    var key = typeof child.key !== \"undefined\" ? child.key : index;\n    var isLast = index + 1 === validChildren.length;\n    var wrappedChild = /*#__PURE__*/React.createElement(StackItem, {\n      key: key\n    }, child);\n    var _child = shouldWrapChildren ? wrappedChild : child;\n    if (!hasDivider) return _child;\n    var clonedDivider = /*#__PURE__*/React.cloneElement(divider, {\n      __css: dividerStyle\n    });\n    var _divider = isLast ? null : clonedDivider;\n    return /*#__PURE__*/React.createElement(React.Fragment, {\n      key: key\n    }, _child, _divider);\n  });\n  var _className = cx(\"chakra-stack\", className);\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    display: \"flex\",\n    alignItems: align,\n    justifyContent: justify,\n    flexDirection: styles.flexDirection,\n    flexWrap: wrap,\n    className: _className,\n    __css: hasDivider ? {} : _defineProperty({}, selector, styles[selector])\n  }, rest), clones);\n});\nif (__DEV__) {\n  Stack.displayName = \"Stack\";\n}\n/**\n * A view that arranges its children in a horizontal line.\n */\n\nexport var HStack = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"row\",\n    ref: ref\n  }));\n});\nif (__DEV__) {\n  HStack.displayName = \"HStack\";\n}\n/**\n * A view that arranges its children in a vertical line.\n */\n\nexport var VStack = /*#__PURE__*/forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(Stack, _extends({\n    align: \"center\"\n  }, props, {\n    direction: \"column\",\n    ref: ref\n  }));\n});\nif (__DEV__) {\n  VStack.displayName = \"VStack\";\n}","map":{"version":3,"names":["chakra","forwardRef","cx","__DEV__","getValidChildren","React","getDividerStyles","getStackStyles","selector","StackDivider","props","createElement","div","_extends","className","__css","borderWidth","alignSelf","borderColor","width","height","StackItem","display","flex","minWidth","Stack","ref","isInline","directionProp","direction","align","justify","_props$spacing","spacing","wrap","children","divider","shouldWrapChildren","rest","_objectWithoutPropertiesLoose","styles","useMemo","dividerStyle","hasDivider","shouldUseChildren","validChildren","clones","map","child","index","key","isLast","length","wrappedChild","_child","clonedDivider","cloneElement","_divider","Fragment","_className","alignItems","justifyContent","flexDirection","flexWrap","_defineProperty","displayName","HStack","VStack"],"sources":["../../src/stack.tsx"],"sourcesContent":["import {\n  chakra,\n  ChakraComponent,\n  forwardRef,\n  HTMLChakraProps,\n  SystemProps,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport { getValidChildren } from \"@chakra-ui/react-utils\"\nimport * as React from \"react\"\nimport type { StackDirection } from \"./stack.utils\"\nimport { getDividerStyles, getStackStyles, selector } from \"./stack.utils\"\n\nexport type { StackDirection }\n\ninterface StackOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n  /**\n   * The space between each stack item\n   * @type SystemProps[\"margin\"]\n   */\n  spacing?: SystemProps[\"margin\"]\n  /**\n   * The direction to stack the items.\n   */\n  direction?: StackDirection\n  /**\n   * If `true`, each stack item will show a divider\n   * @type React.ReactElement\n   */\n  divider?: React.ReactElement\n  /**\n   * If `true`, the children will be wrapped in a `Box` with\n   * `display: inline-block`, and the `Box` will take the spacing props\n   */\n  shouldWrapChildren?: boolean\n  /**\n   * If `true` the items will be stacked horizontally.\n   */\n  isInline?: boolean\n}\n\nexport interface StackDividerProps extends HTMLChakraProps<\"div\"> {}\n\nexport const StackDivider: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__divider\"\n    {...props}\n    __css={{\n      ...props[\"__css\"],\n      borderWidth: 0,\n      alignSelf: \"stretch\",\n      borderColor: \"inherit\",\n      width: \"auto\",\n      height: \"auto\",\n    }}\n  />\n)\n\nexport const StackItem: ChakraComponent<\"div\"> = (props) => (\n  <chakra.div\n    className=\"chakra-stack__item\"\n    {...props}\n    __css={{\n      display: \"inline-block\",\n      flex: \"0 0 auto\",\n      minWidth: 0,\n      ...props[\"__css\"],\n    }}\n  />\n)\n\nexport interface StackProps extends HTMLChakraProps<\"div\">, StackOptions {}\n\n/**\n * Stacks help you easily create flexible and automatically distributed layouts\n *\n * You can stack elements in the horizontal or vertical direction,\n * and apply a space or/and divider between each element.\n *\n * It uses `display: flex` internally and renders a `div`.\n *\n * @see Docs https://chakra-ui.com/stack\n *\n */\nexport const Stack = forwardRef<StackProps, \"div\">((props, ref) => {\n  const {\n    isInline,\n    direction: directionProp,\n    align,\n    justify,\n    spacing = \"0.5rem\",\n    wrap,\n    children,\n    divider,\n    className,\n    shouldWrapChildren,\n    ...rest\n  } = props\n\n  const direction = isInline ? \"row\" : directionProp ?? \"column\"\n\n  const styles = React.useMemo(() => getStackStyles({ direction, spacing }), [\n    direction,\n    spacing,\n  ])\n\n  const dividerStyle = React.useMemo(\n    () => getDividerStyles({ spacing, direction }),\n    [spacing, direction],\n  )\n\n  const hasDivider = !!divider\n  const shouldUseChildren = !shouldWrapChildren && !hasDivider\n\n  const validChildren = getValidChildren(children)\n\n  const clones = shouldUseChildren\n    ? validChildren\n    : validChildren.map((child, index) => {\n        // Prefer provided child key, fallback to index\n        const key = typeof child.key !== \"undefined\" ? child.key : index\n        const isLast = index + 1 === validChildren.length\n        const wrappedChild = <StackItem key={key}>{child}</StackItem>\n        const _child = shouldWrapChildren ? wrappedChild : child\n\n        if (!hasDivider) return _child\n\n        const clonedDivider = React.cloneElement(\n          divider as React.ReactElement<any>,\n          { __css: dividerStyle },\n        )\n\n        const _divider = isLast ? null : clonedDivider\n\n        return (\n          <React.Fragment key={key}>\n            {_child}\n            {_divider}\n          </React.Fragment>\n        )\n      })\n\n  const _className = cx(\"chakra-stack\", className)\n\n  return (\n    <chakra.div\n      ref={ref}\n      display=\"flex\"\n      alignItems={align}\n      justifyContent={justify}\n      flexDirection={styles.flexDirection}\n      flexWrap={wrap}\n      className={_className}\n      __css={hasDivider ? {} : { [selector]: styles[selector] }}\n      {...rest}\n    >\n      {clones}\n    </chakra.div>\n  )\n})\n\nif (__DEV__) {\n  Stack.displayName = \"Stack\"\n}\n\n/**\n * A view that arranges its children in a horizontal line.\n */\nexport const HStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"row\" ref={ref} />\n))\n\nif (__DEV__) {\n  HStack.displayName = \"HStack\"\n}\n\n/**\n * A view that arranges its children in a vertical line.\n */\nexport const VStack = forwardRef<StackProps, \"div\">((props, ref) => (\n  <Stack align=\"center\" {...props} direction=\"column\" ref={ref} />\n))\n\nif (__DEV__) {\n  VStack.displayName = \"VStack\"\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
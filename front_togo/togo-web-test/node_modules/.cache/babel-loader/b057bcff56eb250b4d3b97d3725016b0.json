{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isArray from \"lodash/isArray\";\nimport _omit from \"lodash/omit\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _intersection from \"lodash/intersection\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { getNodeCheckState } from '../CheckTreePicker/utils';\nimport { TREE_NODE_DROP_POSITION, shallowEqual } from '../utils';\nimport { shouldDisplay } from '../Picker';\nimport reactToString from './reactToString';\n// gap of tree node\nvar TREE_NODE_GAP = 4;\n/**\n * according node parentNode expand state decide node whether to show\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByParentExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n  return false;\n}\n/**\n * flatten tree structure to array\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n  var flattenData = [];\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n  var parents = [];\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      traverse(node[parentKey]);\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n  traverse(node);\n  return parents;\n}\n/**\n * get all parentKeys of given node\n * @param nodes\n * @param node\n * @param valueKey\n */\n\nexport function getNodeParentKeys(nodes, node, valueKey) {\n  var parentKeys = [];\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node.parent) {\n      var _node$parent;\n      traverse(nodes[node.parent.refKey]);\n      parentKeys.push(node === null || node === void 0 ? void 0 : (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent[valueKey]);\n    }\n  };\n  traverse(node);\n  return parentKeys;\n}\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * shallow equal array\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\nexport function getDefaultExpandItemValues(data, props) {\n  var valueKey = props.valueKey,\n    defaultExpandAll = props.defaultExpandAll,\n    childrenKey = props.childrenKey,\n    _props$defaultExpandI = props.defaultExpandItemValues,\n    defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI;\n  if (defaultExpandAll) {\n    return flattenTree(data, childrenKey).filter(function (item) {\n      return Array.isArray(item[childrenKey]) && item[childrenKey].length > 0;\n    }).map(function (item) {\n      return item[valueKey];\n    });\n  }\n  return defaultExpandItemValues;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n    defaultExpandItemValues = props.defaultExpandItemValues;\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n  return [];\n}\n/**\n * get dragNode and it's children node keys\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n    top = _treeNodeElement$getB.top,\n    bottom = _treeNodeElement$getB.bottom;\n  var gap = TREE_NODE_GAP; // bottom of node\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // top of node\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n    childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var _item = items[_index];\n      if (shallowEqual(_item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // when children is empty, delete children prop for hidden anchor\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n        break;\n      }\n      if (Array.isArray(_item[childrenKey])) {\n        traverse(_item[childrenKey], _item);\n      }\n    }\n  };\n  traverse(data);\n}\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n    childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n      dropNode = params.dropNode,\n      dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var _item2 = items[_index2];\n        if (shallowEqual(_item2[valueKey], dropNode[valueKey])) {\n          // drag to node inside\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            _item2[childrenKey] = _isNil(_item2[childrenKey]) ? [] : _item2[childrenKey];\n            _item2[childrenKey].push(dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // drag to top of node\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // drag to bottom of node\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n        if (Array.isArray(_item2[childrenKey]) && _item2[childrenKey].length > 0) {\n          updateTree(_item2[childrenKey]);\n        }\n      }\n    };\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    for (var i = 0; i < nodes.length; i += 1) {\n      var _item3 = nodes[i];\n      if (_isArray(_item3.children)) {\n        var _node = findNode(_item3.children);\n        if (_node) {\n          return _node;\n        }\n      }\n      if (check(_item3)) {\n        return _item3;\n      }\n    }\n    return undefined;\n  };\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n    var nextNodes = [];\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n        if (nextChildren.length) {\n          var _item4 = _clone(nodes[i]);\n          _item4.children = nextChildren;\n          nextNodes.push(_item4);\n          continue;\n        }\n      }\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n    return nextNodes;\n  };\n  return findNodes(data);\n}\n/**\n * get all focusable items\n * exclude not visible and disabled node\n * @param filteredData - filtered tree data\n * @param props - TreeProps\n * @param isSearching - component is in Searching\n * @returns\n */\n\nexport var getFocusableItems = function getFocusableItems(filteredData, props, isSearching) {\n  var disabledItemValues = props.disabledItemValues,\n    valueKey = props.valueKey,\n    childrenKey = props.childrenKey,\n    expandItemValues = props.expandItemValues;\n  var items = [];\n  var loop = function loop(nodes) {\n    nodes.forEach(function (node) {\n      var disabled = disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      });\n      if (!disabled && node.visible) {\n        items.push(node);\n      } // always expand when searching\n\n      var expand = isSearching ? true : expandItemValues.includes(node[valueKey]);\n      if (node[childrenKey] && expand) {\n        loop(node[childrenKey]);\n      }\n    });\n  };\n  loop(filteredData);\n  return items;\n};\n/**\n * return all focusable Item and active Element index\n * @param focusItemValue\n * @param focusableItems items\n */\n\nexport var getActiveIndex = function getActiveIndex(focusItemValue, focusItems, valueKey) {\n  var activeIndex = -1;\n  focusItems.forEach(function (item, index) {\n    if (shallowEqual(item[valueKey], focusItemValue)) {\n      activeIndex = index;\n    }\n  });\n  return activeIndex;\n};\n/**\n * get current active element and node data\n * @param flattenNodes - flattenData\n */\n\nexport var getActiveItem = function getActiveItem(focusItemValue, flattenNodes, valueKey) {\n  var nodeData = null;\n  var activeNode = Object.values(flattenNodes).find(function (node) {\n    return shallowEqual(node[valueKey], focusItemValue);\n  });\n  if (activeNode) {\n    nodeData = activeNode;\n  }\n  return nodeData;\n};\nexport var getElementByDataKey = function getElementByDataKey(dataKey, treeNodesRefs, selector) {\n  var ele = treeNodesRefs[dataKey];\n  if (ele instanceof Element) {\n    return ele.querySelector(selector);\n  }\n  return null;\n};\n/**\n * focus to specify tree node\n * @param refKey - target node refKey\n * @param treeNodeRefs - all tree node refs object\n * @param selector - node css selector\n */\n\nexport var focusTreeNode = function focusTreeNode(refKey, treeNodeRefs, selector) {\n  var _node$focus;\n  var node = getElementByDataKey(refKey, treeNodeRefs, selector);\n  node === null || node === void 0 ? void 0 : (_node$focus = node.focus) === null || _node$focus === void 0 ? void 0 : _node$focus.call(node);\n};\n\n/**\n * focus next item with keyboard\n * @param param\n */\nexport var focusNextItem = function focusNextItem(_ref3) {\n  var focusItemValue = _ref3.focusItemValue,\n    focusableItems = _ref3.focusableItems,\n    treeNodesRefs = _ref3.treeNodesRefs,\n    selector = _ref3.selector,\n    valueKey = _ref3.valueKey,\n    callback = _ref3.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var nextIndex = activeIndex === focusableItems.length - 1 ? 0 : activeIndex + 1;\n  var nextFocusItemValue = focusableItems[nextIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(nextFocusItemValue);\n  focusTreeNode(focusableItems[nextIndex].refKey, treeNodesRefs, selector);\n};\n/**\n * focus prev item with keyboard\n * @param param\n */\n\nexport var focusPreviousItem = function focusPreviousItem(_ref4) {\n  var focusItemValue = _ref4.focusItemValue,\n    focusableItems = _ref4.focusableItems,\n    treeNodesRefs = _ref4.treeNodesRefs,\n    selector = _ref4.selector,\n    valueKey = _ref4.valueKey,\n    callback = _ref4.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n  if (focusableItems.length === 0) {\n    return;\n  }\n  var prevIndex = activeIndex === 0 ? focusableItems.length - 1 : activeIndex - 1;\n  prevIndex = prevIndex >= 0 ? prevIndex : 0;\n  var prevFocusItemValue = focusableItems[prevIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(prevFocusItemValue);\n  focusTreeNode(focusableItems[prevIndex].refKey, treeNodesRefs, selector);\n};\n\n/**\n * Left arrow keyboard event handler\n * When focus is on an open node, closes the node.\n * When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n * When focus is on a root node that is also either an end node or a closed node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\nexport function leftArrowHandler(_ref5) {\n  var focusItem = _ref5.focusItem,\n    expand = _ref5.expand,\n    onExpand = _ref5.onExpand,\n    onFocusItem = _ref5.onFocusItem;\n  if (_isEmpty(focusItem)) {\n    return;\n  }\n  if (expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else if (focusItem !== null && focusItem !== void 0 && focusItem.parent) {\n    onFocusItem();\n  }\n}\n/**\n * Right arrow keyboard event handler\n * When focus is on a closed node, opens the node; focus does not move.\n * When focus is on a open node, moves focus to the first child node.\n * When focus is on an end node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\n\nexport function rightArrowHandler(_ref6) {\n  var focusItem = _ref6.focusItem,\n    expand = _ref6.expand,\n    childrenKey = _ref6.childrenKey,\n    onExpand = _ref6.onExpand,\n    onFocusItem = _ref6.onFocusItem;\n  if (_isEmpty(focusItem) || !Array.isArray(focusItem[childrenKey])) {\n    return;\n  }\n  if (!expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else {\n    onFocusItem();\n  }\n}\n/**\n * get scrollIndex in virtualized list\n * @param nodes - data\n * @param value - activeItem value\n * @param valueKey\n */\n\nexport var getScrollToIndex = function getScrollToIndex(nodes, value, valueKey) {\n  return nodes.filter(function (n) {\n    return n.visible;\n  }).findIndex(function (item) {\n    return item[valueKey] === value;\n  });\n};\n/**\n * when searching, expand state always return true\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return isSearching(searchKeyword) ? true : expand;\n}\nexport function getTreeActiveNode(nodes, value, valueKey) {\n  var activeNode = null;\n  if (!_isUndefined(value)) {\n    Object.keys(nodes).forEach(function (refKey) {\n      if (shallowEqual(nodes[refKey][valueKey], value)) {\n        activeNode = nodes[refKey];\n      }\n    });\n  }\n  return activeNode;\n}\n/**\n * toggle tree node\n * @param param0\n */\n\nexport function toggleExpand(_ref7) {\n  var node = _ref7.node,\n    isExpand = _ref7.isExpand,\n    expandItemValues = _ref7.expandItemValues,\n    valueKey = _ref7.valueKey;\n  var newExpandItemValues = new Set(expandItemValues);\n  if (isExpand) {\n    newExpandItemValues.add(node[valueKey]);\n  } else {\n    newExpandItemValues.delete(node[valueKey]);\n  }\n  return Array.from(newExpandItemValues);\n}\nexport function getTreeNodeTitle(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes = reactToString(label);\n    return _nodes.join('');\n  }\n}\n/**\n * get all children from flattenNodes object by given parent node\n * @param nodes\n * @param parent\n */\n\nexport function getChildrenByFlattenNodes(nodes, parent) {\n  if (_isNil(nodes[parent.refKey])) {\n    return [];\n  }\n  return Object.values(nodes).filter(function (item) {\n    var _item$parent;\n    return (item === null || item === void 0 ? void 0 : (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.refKey) === parent.refKey && !nodes[item.refKey].uncheckable;\n  });\n}\nexport function useTreeDrag() {\n  // current dragging node\n  var dragNode = useRef(null);\n  var _useState = useState(null),\n    dragOverNodeKey = _useState[0],\n    setDragOverNodeKey = _useState[1]; // drag node and it's children nodes key\n\n  var _useState2 = useState([]),\n    dragNodeKeys = _useState2[0],\n    setDragNodeKeys = _useState2[1];\n  var _useState3 = useState(null),\n    dropNodePosition = _useState3[0],\n    setDropNodePosition = _useState3[1];\n  var setDragNode = function setDragNode(node) {\n    dragNode.current = node;\n  };\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dragNodeKeys: dragNodeKeys,\n    dropNodePosition: dropNodePosition,\n    setDragNode: setDragNode,\n    setDragOverNodeKey: setDragOverNodeKey,\n    setDragNodeKeys: setDragNodeKeys,\n    setDropNodePosition: setDropNodePosition\n  };\n}\n\n/**\n * hooks for flatten tree structure\n * @param param0\n */\nexport function useFlattenTreeData(_ref8) {\n  var data = _ref8.data,\n    labelKey = _ref8.labelKey,\n    valueKey = _ref8.valueKey,\n    childrenKey = _ref8.childrenKey,\n    _ref8$uncheckableItem = _ref8.uncheckableItemValues,\n    uncheckableItemValues = _ref8$uncheckableItem === void 0 ? [] : _ref8$uncheckableItem,\n    callback = _ref8.callback;\n  var _useState4 = useState(Object.create(null)),\n    dispatch = _useState4[1];\n  var forceUpdate = useCallback(function () {\n    dispatch(Object.create(null));\n  }, [dispatch]);\n  var _useRef = useRef({}),\n    _useRef$current = _useRef.current,\n    flattenNodes = _useRef$current === void 0 ? {} : _useRef$current;\n  var flattenTreeData = useCallback(function (treeData, ref, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n    treeData.map(function (node, index) {\n      var _extends2;\n      var refKey = ref + \"-\" + index;\n      node.refKey = refKey;\n      flattenNodes[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.refKey = refKey, _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n      if (parent) {\n        flattenNodes[refKey].parent = _omit(parent, 'parent', 'children');\n      }\n      flattenTreeData(node[childrenKey], refKey, node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenNodes);\n  }, [childrenKey, valueKey, labelKey, callback, uncheckableItemValues, flattenNodes]);\n  var serializeListOnlyParent = useCallback(function (nodes, key) {\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      var currentNode = nodes[refKey];\n      if (currentNode.parent) {\n        var _currentNode$parent;\n        var parentNode = nodes[(_currentNode$parent = currentNode.parent) === null || _currentNode$parent === void 0 ? void 0 : _currentNode$parent.refKey];\n        if (currentNode[key]) {\n          if (!(parentNode !== null && parentNode !== void 0 && parentNode.checkAll)) {\n            list.push(nodes[refKey][valueKey]);\n          } else if (parentNode !== null && parentNode !== void 0 && parentNode.uncheckable) {\n            list.push(nodes[refKey][valueKey]);\n          }\n        }\n      } else {\n        if (currentNode[key]) {\n          list.push(nodes[refKey][valueKey]);\n        }\n      }\n    });\n    return list;\n  }, [valueKey]);\n  /**\n   * using in CheckTreePicker, to unSerializeList check property\n   */\n\n  var unSerializeList = useCallback(function (_ref9) {\n    var nodes = _ref9.nodes,\n      key = _ref9.key,\n      _ref9$value = _ref9.value,\n      value = _ref9$value === void 0 ? [] : _ref9$value,\n      cascade = _ref9.cascade,\n      uncheckableItemValues = _ref9.uncheckableItemValues;\n    // Reset values to false\n    Object.keys(nodes).forEach(function (refKey) {\n      var node = nodes[refKey];\n      if (cascade && node.parent) {\n        node[key] = nodes[node.parent.refKey][key];\n      } else {\n        node[key] = false;\n      }\n      value.forEach(function (value) {\n        if (shallowEqual(nodes[refKey][valueKey], value) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(value, uncheckableValue);\n        })) {\n          nodes[refKey][key] = true;\n        }\n      });\n    });\n  }, [valueKey]);\n  var formatVirtualizedTreeData = function formatVirtualizedTreeData(nodes, data, expandItemValues, options) {\n    var cascade = options.cascade,\n      searchKeyword = options.searchKeyword;\n    return flattenTree(data, childrenKey, function (node) {\n      var formatted = {};\n      var curNode = nodes === null || nodes === void 0 ? void 0 : nodes[node.refKey];\n      var parentKeys = getNodeParentKeys(nodes, curNode, valueKey);\n      /**\n       * When using virtualized,\n       * if the parent node is collapsed, the child nodes should be hidden\n       * avoid component height calculation errors\n       */\n\n      var visible = curNode !== null && curNode !== void 0 && curNode.parent ? shouldShowNodeByParentExpanded(expandItemValues, parentKeys) : true;\n      /**\n       * when searching, every node default expand\n       * the node's visible should follow the original state\n       */\n\n      if (isSearching(searchKeyword)) {\n        visible = node.visible;\n      }\n      if (curNode) {\n        var checkState = !_isUndefined(cascade) ? getNodeCheckState({\n          node: curNode,\n          cascade: cascade,\n          nodes: nodes,\n          childrenKey: childrenKey\n        }) : undefined;\n        formatted = _extends({}, node, {\n          check: curNode.check,\n          uncheckable: curNode.uncheckable,\n          hasChildren: !!node[childrenKey],\n          layer: curNode.layer,\n          parent: curNode.parent,\n          checkState: checkState,\n          visible: visible\n        });\n      }\n      return formatted;\n    });\n  };\n  useEffect(function () {\n    flattenTreeData(data, '0');\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    forceUpdate: forceUpdate,\n    flattenNodes: flattenNodes,\n    flattenTreeData: flattenTreeData,\n    serializeListOnlyParent: serializeListOnlyParent,\n    unSerializeList: unSerializeList,\n    formatVirtualizedTreeData: formatVirtualizedTreeData\n  };\n}\n/**\n * A hook that saving every tree node ref\n */\n\nexport function useTreeNodeRefs() {\n  var treeNodeRefs = useRef({});\n  var saveTreeNodeRef = function saveTreeNodeRef(refKey, ref) {\n    if (refKey) {\n      treeNodeRefs.current[refKey] = ref;\n    }\n  };\n  return {\n    treeNodesRefs: treeNodeRefs.current,\n    saveTreeNodeRef: saveTreeNodeRef\n  };\n}\n\n/**\n * A hook that handles tree search filter options\n * @param props\n */\nexport function useTreeSearch(props) {\n  var labelKey = props.labelKey,\n    childrenKey = props.childrenKey,\n    searchKeyword = props.searchKeyword,\n    data = props.data,\n    searchBy = props.searchBy,\n    callback = props.callback;\n  var filterVisibleData = useCallback(function (data, searchKeyword) {\n    var setVisible = function setVisible(nodes) {\n      return nodes.forEach(function (item) {\n        item.visible = searchBy ? searchBy(searchKeyword, item[labelKey], item) : shouldDisplay(item[labelKey], searchKeyword);\n        if (_isArray(item[childrenKey])) {\n          filterVisibleData(item[childrenKey], searchKeyword);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n    setVisible(data);\n    return data;\n  }, [childrenKey, labelKey, searchBy]); // Use search keywords to filter options.\n\n  var _useState5 = useState(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : ''),\n    searchKeywordState = _useState5[0],\n    setSearchKeyword = _useState5[1];\n  var _useState6 = useState(filterVisibleData(data, searchKeywordState)),\n    filteredData = _useState6[0],\n    setFilteredData = _useState6[1];\n  var handleSetFilteredData = useCallback(function (data, searchKeyword) {\n    setFilteredData(filterVisibleData(data, searchKeyword));\n  }, [filterVisibleData]);\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterVisibleData(data, searchKeyword);\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n  return {\n    searchKeywordState: searchKeywordState,\n    filteredData: filteredData,\n    setFilteredData: handleSetFilteredData,\n    setSearchKeyword: setSearchKeyword,\n    handleSearch: handleSearch\n  };\n}\nexport function useGetTreeNodeChildren(treeData, valueKey, childrenKey) {\n  var _useState7 = useState([]),\n    loadingNodeValues = _useState7[0],\n    setLoadingNodeValues = _useState7[1];\n  var _useState8 = useState(treeData),\n    data = _useState8[0],\n    setData = _useState8[1];\n  var concatChildren = useCallback(function (treeNode, children) {\n    var value = treeNode[valueKey];\n    treeNode = findNodeOfTree(data, function (item) {\n      return value === item[valueKey];\n    });\n    treeNode[childrenKey] = children;\n    var newData = data.concat([]);\n    setData(newData);\n    return newData;\n  }, [data, valueKey, childrenKey]);\n  var loadChildren = useCallback(function (node, getChildren) {\n    setLoadingNodeValues(function (prev) {\n      return prev.concat(node[valueKey]);\n    });\n    var children = getChildren(node);\n    if (children instanceof Promise) {\n      children.then(function (res) {\n        var newData = concatChildren(node, res);\n        setData(newData);\n        setLoadingNodeValues(function (prev) {\n          return prev.filter(function (item) {\n            return !shallowEqual(item, node[valueKey]);\n          });\n        });\n      });\n    } else {\n      setData(concatChildren(node, children));\n      setLoadingNodeValues(function (prev) {\n        return prev.filter(function (item) {\n          return !shallowEqual(item, node[valueKey]);\n        });\n      });\n    }\n  }, [concatChildren, valueKey]);\n  return {\n    data: data,\n    setData: setData,\n    loadingNodeValues: loadingNodeValues,\n    loadChildren: loadChildren\n  };\n}\n\n/**\n * Focus to active tree node.\n * @param param0\n */\nexport function focusToActiveTreeNode(_ref10) {\n  var _activeItem$focus;\n  var list = _ref10.list,\n    valueKey = _ref10.valueKey,\n    activeNode = _ref10.activeNode,\n    virtualized = _ref10.virtualized,\n    container = _ref10.container,\n    selector = _ref10.selector,\n    formattedNodes = _ref10.formattedNodes;\n  if (!container) return;\n  if (virtualized && activeNode) {\n    var scrollIndex = getScrollToIndex(formattedNodes, activeNode === null || activeNode === void 0 ? void 0 : activeNode[valueKey], valueKey);\n    list.scrollToRow(scrollIndex);\n    return;\n  }\n  var activeItem = container.querySelector(selector);\n  if (!activeItem) {\n    return;\n  }\n  activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$focus = activeItem.focus) === null || _activeItem$focus === void 0 ? void 0 : _activeItem$focus.call(activeItem);\n}\nexport function isSearching(searchKeyword) {\n  return !_isEmpty(searchKeyword);\n}","map":{"version":3,"names":["_extends","_isEmpty","_clone","_isNil","_isArray","_omit","_isUndefined","_intersection","React","useRef","useState","useEffect","useCallback","shallowEqualArray","getNodeCheckState","TREE_NODE_DROP_POSITION","shallowEqual","shouldDisplay","reactToString","TREE_NODE_GAP","shouldShowNodeByParentExpanded","expandItemValues","parentKeys","intersectionKeys","length","flattenTree","tree","childrenKey","executor","flattenData","traverse","data","parent","forEach","item","index","node","push","getNodeParents","parentKey","valueKey","parents","getNodeParentKeys","nodes","_node$parent","refKey","hasVisibleChildren","Array","isArray","some","child","visible","compareArray","a","b","getDefaultExpandItemValues","props","defaultExpandAll","_props$defaultExpandI","defaultExpandItemValues","filter","map","getExpandItemValues","getDragNodeKeys","dragNode","dragNodeKeys","concat","calDropNodePosition","event","treeNodeElement","clientY","_treeNodeElement$getB","getBoundingClientRect","top","bottom","gap","DRAG_OVER_BOTTOM","DRAG_OVER_TOP","DRAG_OVER","removeDragNode","params","_ref","items","_index","_item","splice","children","createUpdateTreeDataFunction","_ref2","dropNode","dropNodePosition","updateTree","_index2","_item2","findNodeOfTree","check","findNode","i","_item3","_node","undefined","filterNodesOfTree","findNodes","nextNodes","nextChildren","_item4","getFocusableItems","filteredData","isSearching","disabledItemValues","loop","disabled","disabledItem","expand","includes","getActiveIndex","focusItemValue","focusItems","activeIndex","getActiveItem","flattenNodes","nodeData","activeNode","Object","values","find","getElementByDataKey","dataKey","treeNodesRefs","selector","ele","Element","querySelector","focusTreeNode","treeNodeRefs","_node$focus","focus","call","focusNextItem","_ref3","focusableItems","callback","nextIndex","nextFocusItemValue","focusPreviousItem","_ref4","prevIndex","prevFocusItemValue","leftArrowHandler","_ref5","focusItem","onExpand","onFocusItem","rightArrowHandler","_ref6","getScrollToIndex","value","n","findIndex","getExpandWhenSearching","searchKeyword","getTreeActiveNode","keys","toggleExpand","_ref7","isExpand","newExpandItemValues","Set","add","delete","from","getTreeNodeTitle","label","isValidElement","_nodes","join","getChildrenByFlattenNodes","_item$parent","uncheckable","useTreeDrag","_useState","dragOverNodeKey","setDragOverNodeKey","_useState2","setDragNodeKeys","_useState3","setDropNodePosition","setDragNode","current","useFlattenTreeData","_ref8","labelKey","_ref8$uncheckableItem","uncheckableItemValues","_useState4","create","dispatch","forceUpdate","_useRef","_useRef$current","flattenTreeData","treeData","ref","layer","_extends2","serializeListOnlyParent","key","list","currentNode","_currentNode$parent","parentNode","checkAll","unSerializeList","_ref9","_ref9$value","cascade","uncheckableValue","formatVirtualizedTreeData","options","formatted","curNode","checkState","hasChildren","useTreeNodeRefs","saveTreeNodeRef","useTreeSearch","searchBy","filterVisibleData","setVisible","_useState5","searchKeywordState","setSearchKeyword","_useState6","setFilteredData","handleSetFilteredData","handleSearch","useGetTreeNodeChildren","_useState7","loadingNodeValues","setLoadingNodeValues","_useState8","setData","concatChildren","treeNode","newData","loadChildren","getChildren","prev","Promise","then","res","focusToActiveTreeNode","_ref10","_activeItem$focus","virtualized","container","formattedNodes","scrollIndex","scrollToRow","activeItem"],"sources":["/home/system/togo-web-test/node_modules/rsuite/esm/utils/treeUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _clone from \"lodash/clone\";\nimport _isNil from \"lodash/isNil\";\nimport _isArray from \"lodash/isArray\";\nimport _omit from \"lodash/omit\";\nimport _isUndefined from \"lodash/isUndefined\";\nimport _intersection from \"lodash/intersection\";\nimport React, { useRef, useState, useEffect, useCallback } from 'react';\nimport shallowEqualArray from '../utils/shallowEqualArray';\nimport { getNodeCheckState } from '../CheckTreePicker/utils';\nimport { TREE_NODE_DROP_POSITION, shallowEqual } from '../utils';\nimport { shouldDisplay } from '../Picker';\nimport reactToString from './reactToString';\n// gap of tree node\nvar TREE_NODE_GAP = 4;\n/**\n * according node parentNode expand state decide node whether to show\n * @param {*} expandItemValues\n * @param {*} parentKeys\n */\n\nexport function shouldShowNodeByParentExpanded(expandItemValues, parentKeys) {\n  if (expandItemValues === void 0) {\n    expandItemValues = [];\n  }\n\n  if (parentKeys === void 0) {\n    parentKeys = [];\n  }\n\n  var intersectionKeys = _intersection(expandItemValues, parentKeys);\n\n  if (intersectionKeys.length === parentKeys.length) {\n    return true;\n  }\n\n  return false;\n}\n/**\n * flatten tree structure to array\n * @param {*} tree\n * @param {*} childrenKey\n * @param {*} executor\n */\n\nexport function flattenTree(tree, childrenKey, executor) {\n  if (childrenKey === void 0) {\n    childrenKey = 'children';\n  }\n\n  var flattenData = [];\n\n  var traverse = function traverse(data, parent) {\n    if (!_isArray(data)) {\n      return;\n    }\n\n    data.forEach(function (item, index) {\n      var node = typeof executor === 'function' ? executor(item, index) : item;\n      node.parent = parent;\n      flattenData.push(_extends({}, node));\n\n      if (item[childrenKey]) {\n        traverse(item[childrenKey], item);\n      }\n    });\n  };\n\n  traverse(tree, null);\n  return flattenData;\n}\n/**\n * get all ancestor nodes of given node\n * @param {*} node\n */\n\nexport function getNodeParents(node, parentKey, valueKey) {\n  if (parentKey === void 0) {\n    parentKey = 'parent';\n  }\n\n  var parents = [];\n\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node[parentKey]) {\n      traverse(node[parentKey]);\n\n      if (valueKey) {\n        parents.push(node[parentKey][valueKey]);\n      } else {\n        parents.push(node[parentKey]);\n      }\n    }\n  };\n\n  traverse(node);\n  return parents;\n}\n/**\n * get all parentKeys of given node\n * @param nodes\n * @param node\n * @param valueKey\n */\n\nexport function getNodeParentKeys(nodes, node, valueKey) {\n  var parentKeys = [];\n\n  var traverse = function traverse(node) {\n    if (node !== null && node !== void 0 && node.parent) {\n      var _node$parent;\n\n      traverse(nodes[node.parent.refKey]);\n      parentKeys.push(node === null || node === void 0 ? void 0 : (_node$parent = node.parent) === null || _node$parent === void 0 ? void 0 : _node$parent[valueKey]);\n    }\n  };\n\n  traverse(node);\n  return parentKeys;\n}\nexport function hasVisibleChildren(node, childrenKey) {\n  if (!Array.isArray(node[childrenKey])) {\n    return false;\n  }\n\n  return node[childrenKey].some(function (child) {\n    return child.visible;\n  });\n}\n/**\n * shallow equal array\n * @param a\n * @param b\n */\n\nexport function compareArray(a, b) {\n  return _isArray(a) && _isArray(b) && !shallowEqualArray(a, b);\n}\nexport function getDefaultExpandItemValues(data, props) {\n  var valueKey = props.valueKey,\n      defaultExpandAll = props.defaultExpandAll,\n      childrenKey = props.childrenKey,\n      _props$defaultExpandI = props.defaultExpandItemValues,\n      defaultExpandItemValues = _props$defaultExpandI === void 0 ? [] : _props$defaultExpandI;\n\n  if (defaultExpandAll) {\n    return flattenTree(data, childrenKey).filter(function (item) {\n      return Array.isArray(item[childrenKey]) && item[childrenKey].length > 0;\n    }).map(function (item) {\n      return item[valueKey];\n    });\n  }\n\n  return defaultExpandItemValues;\n}\n/**\n * 获取 expandItemValues 的 value\n * @param props\n */\n\nexport function getExpandItemValues(props) {\n  var expandItemValues = props.expandItemValues,\n      defaultExpandItemValues = props.defaultExpandItemValues;\n\n  if (!_isUndefined(expandItemValues) && Array.isArray(expandItemValues)) {\n    return expandItemValues;\n  }\n\n  if (!_isUndefined(defaultExpandItemValues) && Array.isArray(defaultExpandItemValues)) {\n    return defaultExpandItemValues;\n  }\n\n  return [];\n}\n/**\n * get dragNode and it's children node keys\n * @param node\n * @param childrenKey\n * @param valueKey\n */\n\nexport function getDragNodeKeys(dragNode, childrenKey, valueKey) {\n  var dragNodeKeys = [dragNode[valueKey]];\n\n  var traverse = function traverse(data) {\n    if ((data === null || data === void 0 ? void 0 : data.length) > 0) {\n      data.forEach(function (node) {\n        dragNodeKeys = dragNodeKeys.concat([node[valueKey]]);\n\n        if (node[childrenKey]) {\n          traverse(node[childrenKey]);\n        }\n      });\n    }\n  };\n\n  traverse(dragNode[childrenKey]);\n  return dragNodeKeys;\n}\nexport function calDropNodePosition(event, treeNodeElement) {\n  var clientY = event.clientY;\n\n  var _treeNodeElement$getB = treeNodeElement.getBoundingClientRect(),\n      top = _treeNodeElement$getB.top,\n      bottom = _treeNodeElement$getB.bottom;\n\n  var gap = TREE_NODE_GAP; // bottom of node\n\n  if (clientY >= bottom - gap && clientY <= bottom) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM;\n  } // top of node\n\n\n  if (clientY <= top + gap && clientY >= top) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER_TOP;\n  }\n\n  if (clientY >= top + gap && clientY <= bottom - gap) {\n    return TREE_NODE_DROP_POSITION.DRAG_OVER;\n  }\n\n  return -1;\n}\nexport function removeDragNode(data, params, _ref) {\n  var valueKey = _ref.valueKey,\n      childrenKey = _ref.childrenKey;\n  var dragNode = params.dragNode;\n\n  var traverse = function traverse(items, parent) {\n    for (var _index = 0; _index < items.length; _index += 1) {\n      var _item = items[_index];\n\n      if (shallowEqual(_item[valueKey], dragNode[valueKey])) {\n        items.splice(_index, 1); // when children is empty, delete children prop for hidden anchor\n\n        if (items.length === 0 && parent) {\n          delete parent.children;\n        }\n\n        break;\n      }\n\n      if (Array.isArray(_item[childrenKey])) {\n        traverse(_item[childrenKey], _item);\n      }\n    }\n  };\n\n  traverse(data);\n}\nexport function createUpdateTreeDataFunction(params, _ref2) {\n  var valueKey = _ref2.valueKey,\n      childrenKey = _ref2.childrenKey;\n  return function (tree) {\n    var data = [].concat(tree);\n    var dragNode = params.dragNode,\n        dropNode = params.dropNode,\n        dropNodePosition = params.dropNodePosition;\n    removeDragNode(data, params, {\n      valueKey: valueKey,\n      childrenKey: childrenKey\n    });\n\n    var updateTree = function updateTree(items) {\n      for (var _index2 = 0; _index2 < items.length; _index2 += 1) {\n        var _item2 = items[_index2];\n\n        if (shallowEqual(_item2[valueKey], dropNode[valueKey])) {\n          // drag to node inside\n          if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER) {\n            _item2[childrenKey] = _isNil(_item2[childrenKey]) ? [] : _item2[childrenKey];\n\n            _item2[childrenKey].push(dragNode);\n\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_TOP) {\n            // drag to top of node\n            items.splice(_index2, 0, dragNode);\n            break;\n          } else if (dropNodePosition === TREE_NODE_DROP_POSITION.DRAG_OVER_BOTTOM) {\n            // drag to bottom of node\n            items.splice(_index2 + 1, 0, dragNode);\n            break;\n          }\n        }\n\n        if (Array.isArray(_item2[childrenKey]) && _item2[childrenKey].length > 0) {\n          updateTree(_item2[childrenKey]);\n        }\n      }\n    };\n\n    updateTree(data);\n    return [].concat(data);\n  };\n}\nexport function findNodeOfTree(data, check) {\n  var findNode = function findNode(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      var _item3 = nodes[i];\n\n      if (_isArray(_item3.children)) {\n        var _node = findNode(_item3.children);\n\n        if (_node) {\n          return _node;\n        }\n      }\n\n      if (check(_item3)) {\n        return _item3;\n      }\n    }\n\n    return undefined;\n  };\n\n  return findNode(data);\n}\nexport function filterNodesOfTree(data, check) {\n  var findNodes = function findNodes(nodes) {\n    if (nodes === void 0) {\n      nodes = [];\n    }\n\n    var nextNodes = [];\n\n    for (var i = 0; i < nodes.length; i += 1) {\n      if (_isArray(nodes[i].children)) {\n        var nextChildren = findNodes(nodes[i].children);\n\n        if (nextChildren.length) {\n          var _item4 = _clone(nodes[i]);\n\n          _item4.children = nextChildren;\n          nextNodes.push(_item4);\n          continue;\n        }\n      }\n\n      if (check(nodes[i])) {\n        nextNodes.push(nodes[i]);\n      }\n    }\n\n    return nextNodes;\n  };\n\n  return findNodes(data);\n}\n/**\n * get all focusable items\n * exclude not visible and disabled node\n * @param filteredData - filtered tree data\n * @param props - TreeProps\n * @param isSearching - component is in Searching\n * @returns\n */\n\nexport var getFocusableItems = function getFocusableItems(filteredData, props, isSearching) {\n  var disabledItemValues = props.disabledItemValues,\n      valueKey = props.valueKey,\n      childrenKey = props.childrenKey,\n      expandItemValues = props.expandItemValues;\n  var items = [];\n\n  var loop = function loop(nodes) {\n    nodes.forEach(function (node) {\n      var disabled = disabledItemValues.some(function (disabledItem) {\n        return shallowEqual(disabledItem, node[valueKey]);\n      });\n\n      if (!disabled && node.visible) {\n        items.push(node);\n      } // always expand when searching\n\n\n      var expand = isSearching ? true : expandItemValues.includes(node[valueKey]);\n\n      if (node[childrenKey] && expand) {\n        loop(node[childrenKey]);\n      }\n    });\n  };\n\n  loop(filteredData);\n  return items;\n};\n/**\n * return all focusable Item and active Element index\n * @param focusItemValue\n * @param focusableItems items\n */\n\nexport var getActiveIndex = function getActiveIndex(focusItemValue, focusItems, valueKey) {\n  var activeIndex = -1;\n  focusItems.forEach(function (item, index) {\n    if (shallowEqual(item[valueKey], focusItemValue)) {\n      activeIndex = index;\n    }\n  });\n  return activeIndex;\n};\n/**\n * get current active element and node data\n * @param flattenNodes - flattenData\n */\n\nexport var getActiveItem = function getActiveItem(focusItemValue, flattenNodes, valueKey) {\n  var nodeData = null;\n  var activeNode = Object.values(flattenNodes).find(function (node) {\n    return shallowEqual(node[valueKey], focusItemValue);\n  });\n\n  if (activeNode) {\n    nodeData = activeNode;\n  }\n\n  return nodeData;\n};\nexport var getElementByDataKey = function getElementByDataKey(dataKey, treeNodesRefs, selector) {\n  var ele = treeNodesRefs[dataKey];\n\n  if (ele instanceof Element) {\n    return ele.querySelector(selector);\n  }\n\n  return null;\n};\n/**\n * focus to specify tree node\n * @param refKey - target node refKey\n * @param treeNodeRefs - all tree node refs object\n * @param selector - node css selector\n */\n\nexport var focusTreeNode = function focusTreeNode(refKey, treeNodeRefs, selector) {\n  var _node$focus;\n\n  var node = getElementByDataKey(refKey, treeNodeRefs, selector);\n  node === null || node === void 0 ? void 0 : (_node$focus = node.focus) === null || _node$focus === void 0 ? void 0 : _node$focus.call(node);\n};\n\n/**\n * focus next item with keyboard\n * @param param\n */\nexport var focusNextItem = function focusNextItem(_ref3) {\n  var focusItemValue = _ref3.focusItemValue,\n      focusableItems = _ref3.focusableItems,\n      treeNodesRefs = _ref3.treeNodesRefs,\n      selector = _ref3.selector,\n      valueKey = _ref3.valueKey,\n      callback = _ref3.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n\n  if (focusableItems.length === 0) {\n    return;\n  }\n\n  var nextIndex = activeIndex === focusableItems.length - 1 ? 0 : activeIndex + 1;\n  var nextFocusItemValue = focusableItems[nextIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(nextFocusItemValue);\n  focusTreeNode(focusableItems[nextIndex].refKey, treeNodesRefs, selector);\n};\n/**\n * focus prev item with keyboard\n * @param param\n */\n\nexport var focusPreviousItem = function focusPreviousItem(_ref4) {\n  var focusItemValue = _ref4.focusItemValue,\n      focusableItems = _ref4.focusableItems,\n      treeNodesRefs = _ref4.treeNodesRefs,\n      selector = _ref4.selector,\n      valueKey = _ref4.valueKey,\n      callback = _ref4.callback;\n  var activeIndex = getActiveIndex(focusItemValue, focusableItems, valueKey);\n\n  if (focusableItems.length === 0) {\n    return;\n  }\n\n  var prevIndex = activeIndex === 0 ? focusableItems.length - 1 : activeIndex - 1;\n  prevIndex = prevIndex >= 0 ? prevIndex : 0;\n  var prevFocusItemValue = focusableItems[prevIndex][valueKey];\n  callback === null || callback === void 0 ? void 0 : callback(prevFocusItemValue);\n  focusTreeNode(focusableItems[prevIndex].refKey, treeNodesRefs, selector);\n};\n\n/**\n * Left arrow keyboard event handler\n * When focus is on an open node, closes the node.\n * When focus is on a child node that is also either an end node or a closed node, moves focus to its parent node.\n * When focus is on a root node that is also either an end node or a closed node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\nexport function leftArrowHandler(_ref5) {\n  var focusItem = _ref5.focusItem,\n      expand = _ref5.expand,\n      onExpand = _ref5.onExpand,\n      onFocusItem = _ref5.onFocusItem;\n\n  if (_isEmpty(focusItem)) {\n    return;\n  }\n\n  if (expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else if (focusItem !== null && focusItem !== void 0 && focusItem.parent) {\n    onFocusItem();\n  }\n}\n/**\n * Right arrow keyboard event handler\n * When focus is on a closed node, opens the node; focus does not move.\n * When focus is on a open node, moves focus to the first child node.\n * When focus is on an end node, does nothing.\n * @see https://www.w3.org/TR/wai-aria-practices/#TreeView\n */\n\nexport function rightArrowHandler(_ref6) {\n  var focusItem = _ref6.focusItem,\n      expand = _ref6.expand,\n      childrenKey = _ref6.childrenKey,\n      onExpand = _ref6.onExpand,\n      onFocusItem = _ref6.onFocusItem;\n\n  if (_isEmpty(focusItem) || !Array.isArray(focusItem[childrenKey])) {\n    return;\n  }\n\n  if (!expand) {\n    onExpand(_extends({}, focusItem, {\n      expand: expand\n    }));\n  } else {\n    onFocusItem();\n  }\n}\n/**\n * get scrollIndex in virtualized list\n * @param nodes - data\n * @param value - activeItem value\n * @param valueKey\n */\n\nexport var getScrollToIndex = function getScrollToIndex(nodes, value, valueKey) {\n  return nodes.filter(function (n) {\n    return n.visible;\n  }).findIndex(function (item) {\n    return item[valueKey] === value;\n  });\n};\n/**\n * when searching, expand state always return true\n * @param searchKeyword\n * @param expand\n */\n\nexport function getExpandWhenSearching(searchKeyword, expand) {\n  return isSearching(searchKeyword) ? true : expand;\n}\nexport function getTreeActiveNode(nodes, value, valueKey) {\n  var activeNode = null;\n\n  if (!_isUndefined(value)) {\n    Object.keys(nodes).forEach(function (refKey) {\n      if (shallowEqual(nodes[refKey][valueKey], value)) {\n        activeNode = nodes[refKey];\n      }\n    });\n  }\n\n  return activeNode;\n}\n/**\n * toggle tree node\n * @param param0\n */\n\nexport function toggleExpand(_ref7) {\n  var node = _ref7.node,\n      isExpand = _ref7.isExpand,\n      expandItemValues = _ref7.expandItemValues,\n      valueKey = _ref7.valueKey;\n  var newExpandItemValues = new Set(expandItemValues);\n\n  if (isExpand) {\n    newExpandItemValues.add(node[valueKey]);\n  } else {\n    newExpandItemValues.delete(node[valueKey]);\n  }\n\n  return Array.from(newExpandItemValues);\n}\nexport function getTreeNodeTitle(label) {\n  if (typeof label === 'string') {\n    return label;\n  } else if ( /*#__PURE__*/React.isValidElement(label)) {\n    var _nodes = reactToString(label);\n\n    return _nodes.join('');\n  }\n}\n/**\n * get all children from flattenNodes object by given parent node\n * @param nodes\n * @param parent\n */\n\nexport function getChildrenByFlattenNodes(nodes, parent) {\n  if (_isNil(nodes[parent.refKey])) {\n    return [];\n  }\n\n  return Object.values(nodes).filter(function (item) {\n    var _item$parent;\n\n    return (item === null || item === void 0 ? void 0 : (_item$parent = item.parent) === null || _item$parent === void 0 ? void 0 : _item$parent.refKey) === parent.refKey && !nodes[item.refKey].uncheckable;\n  });\n}\nexport function useTreeDrag() {\n  // current dragging node\n  var dragNode = useRef(null);\n\n  var _useState = useState(null),\n      dragOverNodeKey = _useState[0],\n      setDragOverNodeKey = _useState[1]; // drag node and it's children nodes key\n\n\n  var _useState2 = useState([]),\n      dragNodeKeys = _useState2[0],\n      setDragNodeKeys = _useState2[1];\n\n  var _useState3 = useState(null),\n      dropNodePosition = _useState3[0],\n      setDropNodePosition = _useState3[1];\n\n  var setDragNode = function setDragNode(node) {\n    dragNode.current = node;\n  };\n\n  return {\n    dragNode: dragNode === null || dragNode === void 0 ? void 0 : dragNode.current,\n    dragOverNodeKey: dragOverNodeKey,\n    dragNodeKeys: dragNodeKeys,\n    dropNodePosition: dropNodePosition,\n    setDragNode: setDragNode,\n    setDragOverNodeKey: setDragOverNodeKey,\n    setDragNodeKeys: setDragNodeKeys,\n    setDropNodePosition: setDropNodePosition\n  };\n}\n\n/**\n * hooks for flatten tree structure\n * @param param0\n */\nexport function useFlattenTreeData(_ref8) {\n  var data = _ref8.data,\n      labelKey = _ref8.labelKey,\n      valueKey = _ref8.valueKey,\n      childrenKey = _ref8.childrenKey,\n      _ref8$uncheckableItem = _ref8.uncheckableItemValues,\n      uncheckableItemValues = _ref8$uncheckableItem === void 0 ? [] : _ref8$uncheckableItem,\n      callback = _ref8.callback;\n\n  var _useState4 = useState(Object.create(null)),\n      dispatch = _useState4[1];\n\n  var forceUpdate = useCallback(function () {\n    dispatch(Object.create(null));\n  }, [dispatch]);\n\n  var _useRef = useRef({}),\n      _useRef$current = _useRef.current,\n      flattenNodes = _useRef$current === void 0 ? {} : _useRef$current;\n\n  var flattenTreeData = useCallback(function (treeData, ref, parent, layer) {\n    if (layer === void 0) {\n      layer = 1;\n    }\n\n    if (!Array.isArray(treeData) || treeData.length === 0) {\n      return [];\n    }\n\n    treeData.map(function (node, index) {\n      var _extends2;\n\n      var refKey = ref + \"-\" + index;\n      node.refKey = refKey;\n      flattenNodes[refKey] = _extends((_extends2 = {\n        layer: layer\n      }, _extends2[labelKey] = node[labelKey], _extends2[valueKey] = node[valueKey], _extends2.refKey = refKey, _extends2.uncheckable = uncheckableItemValues.some(function (value) {\n        return shallowEqual(node[valueKey], value);\n      }), _extends2), node);\n\n      if (parent) {\n        flattenNodes[refKey].parent = _omit(parent, 'parent', 'children');\n      }\n\n      flattenTreeData(node[childrenKey], refKey, node, layer + 1);\n    });\n    callback === null || callback === void 0 ? void 0 : callback(flattenNodes);\n  }, [childrenKey, valueKey, labelKey, callback, uncheckableItemValues, flattenNodes]);\n  var serializeListOnlyParent = useCallback(function (nodes, key) {\n    var list = [];\n    Object.keys(nodes).forEach(function (refKey) {\n      var currentNode = nodes[refKey];\n\n      if (currentNode.parent) {\n        var _currentNode$parent;\n\n        var parentNode = nodes[(_currentNode$parent = currentNode.parent) === null || _currentNode$parent === void 0 ? void 0 : _currentNode$parent.refKey];\n\n        if (currentNode[key]) {\n          if (!(parentNode !== null && parentNode !== void 0 && parentNode.checkAll)) {\n            list.push(nodes[refKey][valueKey]);\n          } else if (parentNode !== null && parentNode !== void 0 && parentNode.uncheckable) {\n            list.push(nodes[refKey][valueKey]);\n          }\n        }\n      } else {\n        if (currentNode[key]) {\n          list.push(nodes[refKey][valueKey]);\n        }\n      }\n    });\n    return list;\n  }, [valueKey]);\n  /**\n   * using in CheckTreePicker, to unSerializeList check property\n   */\n\n  var unSerializeList = useCallback(function (_ref9) {\n    var nodes = _ref9.nodes,\n        key = _ref9.key,\n        _ref9$value = _ref9.value,\n        value = _ref9$value === void 0 ? [] : _ref9$value,\n        cascade = _ref9.cascade,\n        uncheckableItemValues = _ref9.uncheckableItemValues;\n    // Reset values to false\n    Object.keys(nodes).forEach(function (refKey) {\n      var node = nodes[refKey];\n\n      if (cascade && node.parent) {\n        node[key] = nodes[node.parent.refKey][key];\n      } else {\n        node[key] = false;\n      }\n\n      value.forEach(function (value) {\n        if (shallowEqual(nodes[refKey][valueKey], value) && !uncheckableItemValues.some(function (uncheckableValue) {\n          return shallowEqual(value, uncheckableValue);\n        })) {\n          nodes[refKey][key] = true;\n        }\n      });\n    });\n  }, [valueKey]);\n\n  var formatVirtualizedTreeData = function formatVirtualizedTreeData(nodes, data, expandItemValues, options) {\n    var cascade = options.cascade,\n        searchKeyword = options.searchKeyword;\n    return flattenTree(data, childrenKey, function (node) {\n      var formatted = {};\n      var curNode = nodes === null || nodes === void 0 ? void 0 : nodes[node.refKey];\n      var parentKeys = getNodeParentKeys(nodes, curNode, valueKey);\n      /**\n       * When using virtualized,\n       * if the parent node is collapsed, the child nodes should be hidden\n       * avoid component height calculation errors\n       */\n\n      var visible = curNode !== null && curNode !== void 0 && curNode.parent ? shouldShowNodeByParentExpanded(expandItemValues, parentKeys) : true;\n      /**\n       * when searching, every node default expand\n       * the node's visible should follow the original state\n       */\n\n      if (isSearching(searchKeyword)) {\n        visible = node.visible;\n      }\n\n      if (curNode) {\n        var checkState = !_isUndefined(cascade) ? getNodeCheckState({\n          node: curNode,\n          cascade: cascade,\n          nodes: nodes,\n          childrenKey: childrenKey\n        }) : undefined;\n        formatted = _extends({}, node, {\n          check: curNode.check,\n          uncheckable: curNode.uncheckable,\n          hasChildren: !!node[childrenKey],\n          layer: curNode.layer,\n          parent: curNode.parent,\n          checkState: checkState,\n          visible: visible\n        });\n      }\n\n      return formatted;\n    });\n  };\n\n  useEffect(function () {\n    flattenTreeData(data, '0');\n  }, [data]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return {\n    forceUpdate: forceUpdate,\n    flattenNodes: flattenNodes,\n    flattenTreeData: flattenTreeData,\n    serializeListOnlyParent: serializeListOnlyParent,\n    unSerializeList: unSerializeList,\n    formatVirtualizedTreeData: formatVirtualizedTreeData\n  };\n}\n/**\n * A hook that saving every tree node ref\n */\n\nexport function useTreeNodeRefs() {\n  var treeNodeRefs = useRef({});\n\n  var saveTreeNodeRef = function saveTreeNodeRef(refKey, ref) {\n    if (refKey) {\n      treeNodeRefs.current[refKey] = ref;\n    }\n  };\n\n  return {\n    treeNodesRefs: treeNodeRefs.current,\n    saveTreeNodeRef: saveTreeNodeRef\n  };\n}\n\n/**\n * A hook that handles tree search filter options\n * @param props\n */\nexport function useTreeSearch(props) {\n  var labelKey = props.labelKey,\n      childrenKey = props.childrenKey,\n      searchKeyword = props.searchKeyword,\n      data = props.data,\n      searchBy = props.searchBy,\n      callback = props.callback;\n  var filterVisibleData = useCallback(function (data, searchKeyword) {\n    var setVisible = function setVisible(nodes) {\n      return nodes.forEach(function (item) {\n        item.visible = searchBy ? searchBy(searchKeyword, item[labelKey], item) : shouldDisplay(item[labelKey], searchKeyword);\n\n        if (_isArray(item[childrenKey])) {\n          filterVisibleData(item[childrenKey], searchKeyword);\n          item[childrenKey].forEach(function (child) {\n            if (child.visible) {\n              item.visible = child.visible;\n            }\n          });\n        }\n      });\n    };\n\n    setVisible(data);\n    return data;\n  }, [childrenKey, labelKey, searchBy]); // Use search keywords to filter options.\n\n  var _useState5 = useState(searchKeyword !== null && searchKeyword !== void 0 ? searchKeyword : ''),\n      searchKeywordState = _useState5[0],\n      setSearchKeyword = _useState5[1];\n\n  var _useState6 = useState(filterVisibleData(data, searchKeywordState)),\n      filteredData = _useState6[0],\n      setFilteredData = _useState6[1];\n\n  var handleSetFilteredData = useCallback(function (data, searchKeyword) {\n    setFilteredData(filterVisibleData(data, searchKeyword));\n  }, [filterVisibleData]);\n\n  var handleSearch = function handleSearch(searchKeyword, event) {\n    var filteredData = filterVisibleData(data, searchKeyword);\n    setFilteredData(filteredData);\n    setSearchKeyword(searchKeyword);\n    callback === null || callback === void 0 ? void 0 : callback(searchKeyword, filteredData, event);\n  };\n\n  return {\n    searchKeywordState: searchKeywordState,\n    filteredData: filteredData,\n    setFilteredData: handleSetFilteredData,\n    setSearchKeyword: setSearchKeyword,\n    handleSearch: handleSearch\n  };\n}\nexport function useGetTreeNodeChildren(treeData, valueKey, childrenKey) {\n  var _useState7 = useState([]),\n      loadingNodeValues = _useState7[0],\n      setLoadingNodeValues = _useState7[1];\n\n  var _useState8 = useState(treeData),\n      data = _useState8[0],\n      setData = _useState8[1];\n\n  var concatChildren = useCallback(function (treeNode, children) {\n    var value = treeNode[valueKey];\n    treeNode = findNodeOfTree(data, function (item) {\n      return value === item[valueKey];\n    });\n    treeNode[childrenKey] = children;\n    var newData = data.concat([]);\n    setData(newData);\n    return newData;\n  }, [data, valueKey, childrenKey]);\n  var loadChildren = useCallback(function (node, getChildren) {\n    setLoadingNodeValues(function (prev) {\n      return prev.concat(node[valueKey]);\n    });\n    var children = getChildren(node);\n\n    if (children instanceof Promise) {\n      children.then(function (res) {\n        var newData = concatChildren(node, res);\n        setData(newData);\n        setLoadingNodeValues(function (prev) {\n          return prev.filter(function (item) {\n            return !shallowEqual(item, node[valueKey]);\n          });\n        });\n      });\n    } else {\n      setData(concatChildren(node, children));\n      setLoadingNodeValues(function (prev) {\n        return prev.filter(function (item) {\n          return !shallowEqual(item, node[valueKey]);\n        });\n      });\n    }\n  }, [concatChildren, valueKey]);\n  return {\n    data: data,\n    setData: setData,\n    loadingNodeValues: loadingNodeValues,\n    loadChildren: loadChildren\n  };\n}\n\n/**\n * Focus to active tree node.\n * @param param0\n */\nexport function focusToActiveTreeNode(_ref10) {\n  var _activeItem$focus;\n\n  var list = _ref10.list,\n      valueKey = _ref10.valueKey,\n      activeNode = _ref10.activeNode,\n      virtualized = _ref10.virtualized,\n      container = _ref10.container,\n      selector = _ref10.selector,\n      formattedNodes = _ref10.formattedNodes;\n  if (!container) return;\n\n  if (virtualized && activeNode) {\n    var scrollIndex = getScrollToIndex(formattedNodes, activeNode === null || activeNode === void 0 ? void 0 : activeNode[valueKey], valueKey);\n    list.scrollToRow(scrollIndex);\n    return;\n  }\n\n  var activeItem = container.querySelector(selector);\n\n  if (!activeItem) {\n    return;\n  }\n\n  activeItem === null || activeItem === void 0 ? void 0 : (_activeItem$focus = activeItem.focus) === null || _activeItem$focus === void 0 ? void 0 : _activeItem$focus.call(activeItem);\n}\nexport function isSearching(searchKeyword) {\n  return !_isEmpty(searchKeyword);\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}
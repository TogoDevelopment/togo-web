{"ast":null,"code":"import _toConsumableArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport defaultTheme, { isChakraTheme } from \"@chakra-ui/theme\";\nimport { isFunction, mergeWith, pipe } from \"@chakra-ui/utils\";\n\n/**\n * NOTE: This got too complex to manage and it's not worth the extra complexity.\n * We'll re-evaluate this API in the future releases.\n *\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\nexport function extendTheme() {\n  for (var _len = arguments.length, extensions = new Array(_len), _key = 0; _key < _len; _key++) {\n    extensions[_key] = arguments[_key];\n  }\n  var overrides = [].concat(extensions);\n  var baseTheme = extensions[extensions.length - 1];\n  if (isChakraTheme(baseTheme) &&\n  // this ensures backward compatibility\n  // previously only `extendTheme(override, baseTheme?)` was allowed\n  overrides.length > 1) {\n    overrides = overrides.slice(0, overrides.length - 1);\n  } else {\n    baseTheme = defaultTheme;\n  }\n  return pipe.apply(void 0, _toConsumableArray(overrides.map(function (extension) {\n    return function (prevTheme) {\n      return isFunction(extension) ? extension(prevTheme) : mergeThemeOverride(prevTheme, extension);\n    };\n  })))(baseTheme);\n}\nexport function mergeThemeOverride() {\n  for (var _len2 = arguments.length, overrides = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    overrides[_key2] = arguments[_key2];\n  }\n  return mergeWith.apply(void 0, [{}].concat(overrides, [mergeThemeCustomizer]));\n}\nfunction mergeThemeCustomizer(source, override, key, object) {\n  if ((isFunction(source) || isFunction(override)) && Object.prototype.hasOwnProperty.call(object, key)) {\n    return function () {\n      var sourceValue = isFunction(source) ? source.apply(void 0, arguments) : source;\n      var overrideValue = isFunction(override) ? override.apply(void 0, arguments) : override;\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer);\n    };\n  } // fallback to default behaviour\n\n  return undefined;\n}","map":{"version":3,"names":["defaultTheme","isChakraTheme","isFunction","mergeWith","pipe","extendTheme","_len","arguments","length","extensions","Array","_key","overrides","concat","baseTheme","slice","apply","_toConsumableArray","map","extension","prevTheme","mergeThemeOverride","_len2","_key2","mergeThemeCustomizer","source","override","key","object","Object","prototype","hasOwnProperty","call","sourceValue","overrideValue","undefined"],"sources":["../../src/extend-theme.ts"],"sourcesContent":["import defaultTheme, {\n  ChakraTheme,\n  isChakraTheme,\n  Theme,\n} from \"@chakra-ui/theme\"\nimport {\n  AnyFunction,\n  Dict,\n  isFunction,\n  mergeWith,\n  pipe,\n} from \"@chakra-ui/utils\"\n\ntype CloneKey<Target, Key> = Key extends keyof Target ? Target[Key] : unknown\n\nexport type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends object ? DeepPartial<T[P]> : T[P]\n}\n\n/**\n * Represents a loose but specific type for the theme override.\n * It provides autocomplete hints for extending the theme, but leaves room\n * for adding properties.\n */\ntype DeepThemeExtension<BaseTheme, ThemeType> = {\n  [Key in keyof BaseTheme]?: BaseTheme[Key] extends (...args: any[]) => any\n    ? DeepThemeExtension<\n        DeepPartial<ReturnType<BaseTheme[Key]>>,\n        CloneKey<ThemeType, Key>\n      >\n    : BaseTheme[Key] extends Array<any>\n    ? CloneKey<ThemeType, Key>\n    : BaseTheme[Key] extends object\n    ? DeepThemeExtension<DeepPartial<BaseTheme[Key]>, CloneKey<ThemeType, Key>>\n    : CloneKey<ThemeType, Key>\n}\n\nexport declare type ThemeOverride<\n  BaseTheme = Theme\n> = DeepPartial<ChakraTheme> & DeepThemeExtension<BaseTheme, ChakraTheme> & Dict\n\nexport type ThemeExtension<Override extends ThemeOverride = ThemeOverride> = (\n  themeOverride: Override,\n) => Override\n\nexport type BaseThemeWithExtensions<\n  BaseTheme extends ChakraTheme,\n  Extensions extends readonly [...any]\n> = BaseTheme &\n  (Extensions extends [infer L, ...infer R]\n    ? L extends AnyFunction\n      ? ReturnType<L> & BaseThemeWithExtensions<BaseTheme, R>\n      : L & BaseThemeWithExtensions<BaseTheme, R>\n    : Extensions)\n\n/**\n * NOTE: This got too complex to manage and it's not worth the extra complexity.\n * We'll re-evaluate this API in the future releases.\n *\n * Function to override or customize the Chakra UI theme conveniently.\n * First extension overrides the baseTheme and following extensions override the preceding extensions.\n *\n * @example:\n * import { theme as baseTheme, extendTheme, withDefaultColorScheme } from '@chakra-ui/react'\n *\n * const customTheme = extendTheme(\n *   {\n *     colors: {\n *       brand: {\n *         500: \"#b4d455\",\n *       },\n *     },\n *   },\n *   withDefaultColorScheme({ colorScheme: \"red\" }),\n *   baseTheme // optional\n * )\n */\n\nexport function extendTheme(\n  ...extensions: Array<Dict | ((theme: Dict) => Dict)>\n): Dict {\n  let overrides = [...extensions]\n  let baseTheme = extensions[extensions.length - 1]\n\n  if (\n    isChakraTheme(baseTheme) &&\n    // this ensures backward compatibility\n    // previously only `extendTheme(override, baseTheme?)` was allowed\n    overrides.length > 1\n  ) {\n    overrides = overrides.slice(0, overrides.length - 1)\n  } else {\n    baseTheme = defaultTheme\n  }\n\n  return pipe(\n    ...overrides.map((extension) => (prevTheme: any) =>\n      isFunction(extension)\n        ? (extension as any)(prevTheme)\n        : mergeThemeOverride(prevTheme, extension),\n    ),\n  )(baseTheme)\n}\n\nexport function mergeThemeOverride(...overrides: any[]): any {\n  return mergeWith({}, ...overrides, mergeThemeCustomizer)\n}\n\nfunction mergeThemeCustomizer(\n  source: unknown,\n  override: unknown,\n  key: string,\n  object: any,\n) {\n  if (\n    (isFunction(source) || isFunction(override)) &&\n    Object.prototype.hasOwnProperty.call(object, key)\n  ) {\n    return (...args: unknown[]) => {\n      const sourceValue = isFunction(source) ? source(...args) : source\n\n      const overrideValue = isFunction(override) ? override(...args) : override\n\n      return mergeWith({}, sourceValue, overrideValue, mergeThemeCustomizer)\n    }\n  }\n\n  // fallback to default behaviour\n  return undefined\n}\n"],"mappings":";AAAA,OAAOA,YAAP,IAEEC,aAFF,QAIO,kBAJP;AAKA,SAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,QAMO,kBANP;;AAkDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAO,SAASC,WAATA,CAAA,EAEC;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EADHC,UACG,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IADHF,UACG,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACN,IAAIC,SAAS,MAAAC,MAAA,CAAOJ,UAAJ,CAAhB;EACA,IAAIK,SAAS,GAAGL,UAAU,CAACA,UAAU,CAACD,MAAX,GAAoB,CAArB,CAA1B;EAEA,IACEP,aAAa,CAACa,SAAD,CAAb;EACA;EACA;EACAF,SAAS,CAACJ,MAAV,GAAmB,CAJrB,EAKE;IACAI,SAAS,GAAGA,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmBH,SAAS,CAACJ,MAAV,GAAmB,CAAtC,CAAZ;EACD,CAPD,MAOO;IACLM,SAAS,GAAGd,YAAZ;EACD;EAED,OAAOI,IAAI,CAAAY,KAAA,SAAAC,kBAAA,CACNL,SAAS,CAACM,GAAV,CAAe,UAAAC,SAAD;IAAA,OAAgB,UAAAC,SAAD;MAAA,OAC9BlB,UAAU,CAACiB,SAAD,CAAV,GACKA,SAAD,CAAmBC,SAAnB,CADJ,GAEIC,kBAAkB,CAACD,SAAD,EAAYD,SAAZ,CAHrB;IAAA;EAAA,EADM,EAAJ,CAMLL,SANK,CAAP;AAOD;AAED,OAAO,SAASO,kBAATA,CAAA,EAAsD;EAAA,SAAAC,KAAA,GAAAf,SAAA,CAAAC,MAAA,EAAvBI,SAAuB,OAAAF,KAAA,CAAAY,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAvBX,SAAuB,CAAAW,KAAA,IAAAhB,SAAA,CAAAgB,KAAA;EAAA;EAC3D,OAAOpB,SAAS,CAAAa,KAAA,UAAC,EAAD,EAAAH,MAAA,CAAQD,SAAR,GAAmBY,oBAAnB,GAAhB;AACD;AAED,SAASA,oBAATA,CACEC,MADF,EAEEC,QAFF,EAGEC,GAHF,EAIEC,MAJF,EAKE;EACA,IACE,CAAC1B,UAAU,CAACuB,MAAD,CAAV,IAAsBvB,UAAU,CAACwB,QAAD,CAAjC,KACAG,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCJ,MAArC,EAA6CD,GAA7C,CAFF,EAGE;IACA,OAAO,YAAwB;MAC7B,IAAMM,WAAW,GAAG/B,UAAU,CAACuB,MAAD,CAAV,GAAqBA,MAAM,CAAAT,KAAA,SAACT,SAAD,CAA3B,GAAuCkB,MAA3D;MAEA,IAAMS,aAAa,GAAGhC,UAAU,CAACwB,QAAD,CAAV,GAAuBA,QAAQ,CAAAV,KAAA,SAACT,SAAD,CAA/B,GAA2CmB,QAAjE;MAEA,OAAOvB,SAAS,CAAC,EAAD,EAAK8B,WAAL,EAAkBC,aAAlB,EAAiCV,oBAAjC,CAAhB;IACD,CAND;EAOD,CAZD,CAcA;;EACA,OAAOW,SAAP;AACD"},"metadata":{},"sourceType":"module"}
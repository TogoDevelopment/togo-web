{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nvar RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\nexport var Socket = /*#__PURE__*/function (_Emitter) {\n  _inherits(Socket, _Emitter);\n  var _super = _createSuper(Socket);\n  /**\n   * `Socket` constructor.\n   *\n   * @public\n   */\n  function Socket(io, nsp, opts) {\n    var _this;\n    _classCallCheck(this, Socket);\n    _this = _super.call(this);\n    _this.connected = false;\n    _this.receiveBuffer = [];\n    _this.sendBuffer = [];\n    _this.ids = 0;\n    _this.acks = {};\n    _this.flags = {};\n    _this.io = io;\n    _this.nsp = nsp;\n    if (opts && opts.auth) {\n      _this.auth = opts.auth;\n    }\n    if (_this.io._autoConnect) _this.open();\n    return _this;\n  }\n  /**\n   * Whether the socket is currently disconnected\n   */\n  _createClass(Socket, [{\n    key: \"disconnected\",\n    get: function get() {\n      return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n  }, {\n    key: \"subEvents\",\n    value: function subEvents() {\n      if (this.subs) return;\n      var io = this.io;\n      this.subs = [on(io, \"open\", this.onopen.bind(this)), on(io, \"packet\", this.onpacket.bind(this)), on(io, \"error\", this.onerror.bind(this)), on(io, \"close\", this.onclose.bind(this))];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n  }, {\n    key: \"active\",\n    get: function get() {\n      return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      if (this.connected) return this;\n      this.subEvents();\n      if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n      if (\"open\" === this.io._readyState) this.onopen();\n      return this;\n    }\n    /**\n     * Alias for connect()\n     */\n  }, {\n    key: \"open\",\n    value: function open() {\n      return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"send\",\n    value: function send() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      args.unshift(\"message\");\n      this.emit.apply(this, args);\n      return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"emit\",\n    value: function emit(ev) {\n      if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n        throw new Error('\"' + ev + '\" is a reserved event name');\n      }\n      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n        args[_key2 - 1] = arguments[_key2];\n      }\n      args.unshift(ev);\n      var packet = {\n        type: PacketType.EVENT,\n        data: args\n      };\n      packet.options = {};\n      packet.options.compress = this.flags.compress !== false;\n      // event ack callback\n      if (\"function\" === typeof args[args.length - 1]) {\n        var id = this.ids++;\n        var ack = args.pop();\n        this._registerAckCallback(id, ack);\n        packet.id = id;\n      }\n      var isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n      var discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n      if (discardPacket) {} else if (this.connected) {\n        this.notifyOutgoingListeners(packet);\n        this.packet(packet);\n      } else {\n        this.sendBuffer.push(packet);\n      }\n      this.flags = {};\n      return this;\n    }\n    /**\n     * @private\n     */\n  }, {\n    key: \"_registerAckCallback\",\n    value: function _registerAckCallback(id, ack) {\n      var _this2 = this;\n      var timeout = this.flags.timeout;\n      if (timeout === undefined) {\n        this.acks[id] = ack;\n        return;\n      }\n      // @ts-ignore\n      var timer = this.io.setTimeoutFn(function () {\n        delete _this2.acks[id];\n        for (var i = 0; i < _this2.sendBuffer.length; i++) {\n          if (_this2.sendBuffer[i].id === id) {\n            _this2.sendBuffer.splice(i, 1);\n          }\n        }\n        ack.call(_this2, new Error(\"operation has timed out\"));\n      }, timeout);\n      this.acks[id] = function () {\n        // @ts-ignore\n        _this2.io.clearTimeoutFn(timer);\n        for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n          args[_key3] = arguments[_key3];\n        }\n        ack.apply(_this2, [null].concat(args));\n      };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"packet\",\n    value: function packet(_packet) {\n      _packet.nsp = this.nsp;\n      this.io._packet(_packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      var _this3 = this;\n      if (typeof this.auth == \"function\") {\n        this.auth(function (data) {\n          _this3.packet({\n            type: PacketType.CONNECT,\n            data: data\n          });\n        });\n      } else {\n        this.packet({\n          type: PacketType.CONNECT,\n          data: this.auth\n        });\n      }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      if (!this.connected) {\n        this.emitReserved(\"connect_error\", err);\n      }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason, description) {\n      this.connected = false;\n      delete this.id;\n      this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onpacket\",\n    value: function onpacket(packet) {\n      var sameNamespace = packet.nsp === this.nsp;\n      if (!sameNamespace) return;\n      switch (packet.type) {\n        case PacketType.CONNECT:\n          if (packet.data && packet.data.sid) {\n            var id = packet.data.sid;\n            this.onconnect(id);\n          } else {\n            this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n          }\n          break;\n        case PacketType.EVENT:\n        case PacketType.BINARY_EVENT:\n          this.onevent(packet);\n          break;\n        case PacketType.ACK:\n        case PacketType.BINARY_ACK:\n          this.onack(packet);\n          break;\n        case PacketType.DISCONNECT:\n          this.ondisconnect();\n          break;\n        case PacketType.CONNECT_ERROR:\n          this.destroy();\n          var err = new Error(packet.data.message);\n          // @ts-ignore\n          err.data = packet.data.data;\n          this.emitReserved(\"connect_error\", err);\n          break;\n      }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onevent\",\n    value: function onevent(packet) {\n      var args = packet.data || [];\n      if (null != packet.id) {\n        args.push(this.ack(packet.id));\n      }\n      if (this.connected) {\n        this.emitEvent(args);\n      } else {\n        this.receiveBuffer.push(Object.freeze(args));\n      }\n    }\n  }, {\n    key: \"emitEvent\",\n    value: function emitEvent(args) {\n      if (this._anyListeners && this._anyListeners.length) {\n        var listeners = this._anyListeners.slice();\n        var _iterator = _createForOfIteratorHelper(listeners),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var listener = _step.value;\n            listener.apply(this, args);\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      }\n      _get(_getPrototypeOf(Socket.prototype), \"emit\", this).apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n  }, {\n    key: \"ack\",\n    value: function ack(id) {\n      var self = this;\n      var sent = false;\n      return function () {\n        // prevent double callbacks\n        if (sent) return;\n        sent = true;\n        for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n          args[_key4] = arguments[_key4];\n        }\n        self.packet({\n          type: PacketType.ACK,\n          id: id,\n          data: args\n        });\n      };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n  }, {\n    key: \"onack\",\n    value: function onack(packet) {\n      var ack = this.acks[packet.id];\n      if (\"function\" === typeof ack) {\n        ack.apply(this, packet.data);\n        delete this.acks[packet.id];\n      } else {}\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n  }, {\n    key: \"onconnect\",\n    value: function onconnect(id) {\n      this.id = id;\n      this.connected = true;\n      this.emitBuffered();\n      this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n  }, {\n    key: \"emitBuffered\",\n    value: function emitBuffered() {\n      var _this4 = this;\n      this.receiveBuffer.forEach(function (args) {\n        return _this4.emitEvent(args);\n      });\n      this.receiveBuffer = [];\n      this.sendBuffer.forEach(function (packet) {\n        _this4.notifyOutgoingListeners(packet);\n        _this4.packet(packet);\n      });\n      this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n  }, {\n    key: \"ondisconnect\",\n    value: function ondisconnect() {\n      this.destroy();\n      this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.subs) {\n        // clean subscriptions to avoid reconnections\n        this.subs.forEach(function (subDestroy) {\n          return subDestroy();\n        });\n        this.subs = undefined;\n      }\n      this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      if (this.connected) {\n        this.packet({\n          type: PacketType.DISCONNECT\n        });\n      }\n      // remove socket from pool\n      this.destroy();\n      if (this.connected) {\n        // fire events\n        this.onclose(\"io client disconnect\");\n      }\n      return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"close\",\n    value: function close() {\n      return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n  }, {\n    key: \"compress\",\n    value: function compress(_compress) {\n      this.flags.compress = _compress;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"volatile\",\n    get: function get() {\n      this.flags.volatile = true;\n      return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n  }, {\n    key: \"timeout\",\n    value: function timeout(_timeout) {\n      this.flags.timeout = _timeout;\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"onAny\",\n    value: function onAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"prependAny\",\n    value: function prependAny(listener) {\n      this._anyListeners = this._anyListeners || [];\n      this._anyListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n  }, {\n    key: \"offAny\",\n    value: function offAny(listener) {\n      if (!this._anyListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAny\",\n    value: function listenersAny() {\n      return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"onAnyOutgoing\",\n    value: function onAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.push(listener);\n      return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"prependAnyOutgoing\",\n    value: function prependAnyOutgoing(listener) {\n      this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n      this._anyOutgoingListeners.unshift(listener);\n      return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n  }, {\n    key: \"offAnyOutgoing\",\n    value: function offAnyOutgoing(listener) {\n      if (!this._anyOutgoingListeners) {\n        return this;\n      }\n      if (listener) {\n        var listeners = this._anyOutgoingListeners;\n        for (var i = 0; i < listeners.length; i++) {\n          if (listener === listeners[i]) {\n            listeners.splice(i, 1);\n            return this;\n          }\n        }\n      } else {\n        this._anyOutgoingListeners = [];\n      }\n      return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n  }, {\n    key: \"listenersAnyOutgoing\",\n    value: function listenersAnyOutgoing() {\n      return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n  }, {\n    key: \"notifyOutgoingListeners\",\n    value: function notifyOutgoingListeners(packet) {\n      if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n        var listeners = this._anyOutgoingListeners.slice();\n        var _iterator2 = _createForOfIteratorHelper(listeners),\n          _step2;\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var listener = _step2.value;\n            listener.apply(this, packet.data);\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n      }\n    }\n  }]);\n  return Socket;\n}(Emitter);","map":{"version":3,"names":["PacketType","on","Emitter","RESERVED_EVENTS","Object","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Socket","_Emitter","_inherits","_super","_createSuper","io","nsp","opts","_this","_classCallCheck","call","connected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","_createClass","key","get","value","subEvents","subs","onopen","bind","onpacket","onerror","onclose","_readyState","send","_len","arguments","length","args","Array","_key","unshift","emit","apply","ev","hasOwnProperty","Error","_len2","_key2","packet","type","EVENT","data","options","compress","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","notifyOutgoingListeners","push","_this2","timeout","undefined","timer","setTimeoutFn","i","splice","clearTimeoutFn","_len3","_key3","concat","_packet","_this3","CONNECT","err","emitReserved","reason","description","sameNamespace","sid","onconnect","BINARY_EVENT","onevent","ACK","BINARY_ACK","onack","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","_iterator","_createForOfIteratorHelper","_step","s","n","done","listener","e","f","_get","_getPrototypeOf","prototype","self","sent","_len4","_key4","emitBuffered","_this4","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","_iterator2","_step2"],"sources":["/home/system/togo-web-test/node_modules/socket.io-client/build/esm/socket.js"],"sourcesContent":["import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(event);\n     * });\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     *\n     * <pre><code>\n     *\n     * const handler = (event, ...args) => {\n     *   console.log(event);\n     * }\n     *\n     * socket.onAnyOutgoing(handler);\n     *\n     * // then later\n     * socket.offAnyOutgoing(handler);\n     *\n     * </pre></code>\n     *\n     * @public\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
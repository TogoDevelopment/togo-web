{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\";\n\nimport React, { useRef, useState } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\nimport Dropzone from 'react-dropzone';\n\nvar TestImage = function TestImage() {\n  var editor = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Drop, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(AvatarEditor, {\n    ref: editor,\n    image: \"https://freepikpsd.com/file/2019/10/avatar-icon-png-5-Images-PNG-Transparent.png\",\n    width: 250,\n    height: 250,\n    border: 50,\n    scale: 1.2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      if (_this.editor) {\n        // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n        // drawn on another canvas, or added to the DOM.\n        var canvas = editor.current.getImage(); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n        var canvasScaled = editor.current.getImageScaledToCanvas();\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 13\n    }\n  }, \"Save\"));\n};\n\nvar Drop = function Drop() {\n  var _useState = useState('http://example.com/initialimage.jpg'),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  return /*#__PURE__*/React.createElement(Dropzone, {\n    onDrop: function onDrop(dropped) {\n      return setImage(dropped[0]);\n    },\n    noClick: true,\n    noKeyboard: true,\n    style: {\n      width: '250px',\n      height: '250px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  }, function (_ref) {\n    var getRootProps = _ref.getRootProps,\n        getInputProps = _ref.getInputProps;\n    return /*#__PURE__*/React.createElement(\"div\", Object.assign({}, getRootProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(AvatarEditor, {\n      width: 250,\n      height: 250,\n      image: _this.state.image,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, getInputProps(), {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    })));\n  });\n};\n\nexport default TestImage;","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","useRef","useState","AvatarEditor","Dropzone","TestImage","editor","canvas","current","getImage","canvasScaled","getImageScaledToCanvas","Drop","image","setImage","dropped","width","height","getRootProps","getInputProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,QAAxB,QAAwC,OAAxC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,QAAP,MAAqB,gBAArB;;AAEA,IAAMC,SAAS,GAAG,SAAZA,SAAY,GAAM;AACpB,MAAMC,MAAM,GAAGL,MAAM,CAAC,IAAD,CAArB;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAEK,MADT;AAEI,IAAA,KAAK,EAAC,kFAFV;AAGI,IAAA,KAAK,EAAE,GAHX;AAII,IAAA,MAAM,EAAE,GAJZ;AAKI,IAAA,MAAM,EAAE,EALZ;AAMI,IAAA,KAAK,EAAE,GANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAUI;AAAQ,IAAA,OAAO,EAAE,mBAAM;AACnB,UAAI,KAAI,CAACA,MAAT,EAAiB;AACb;AACA;AACA,YAAMC,MAAM,GAAGD,MAAM,CAACE,OAAP,CAAeC,QAAf,EAAf,CAHa,CAKb;;AACA,YAAMC,YAAY,GAAGJ,MAAM,CAACE,OAAP,CAAeG,sBAAf,EAArB;AACH;AACJ,KATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAVJ,CADJ;AAuBH,CA1BD;;AA4BA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACf,kBAA0BV,QAAQ,CAAC,qCAAD,CAAlC;AAAA;AAAA,MAAOW,KAAP;AAAA,MAAcC,QAAd;;AAEA,sBACI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAE,gBAACC,OAAD;AAAA,aAAaD,QAAQ,CAACC,OAAO,CAAC,CAAD,CAAR,CAArB;AAAA,KADZ;AAEI,IAAA,OAAO,MAFX;AAGI,IAAA,UAAU,MAHd;AAII,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,MAAM,EAAE;AAA1B,KAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMK;AAAA,QAAGC,YAAH,QAAGA,YAAH;AAAA,QAAiBC,aAAjB,QAAiBA,aAAjB;AAAA,wBACG,6CAASD,YAAY,EAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACI,oBAAC,YAAD;AAAc,MAAA,KAAK,EAAE,GAArB;AAA0B,MAAA,MAAM,EAAE,GAAlC;AAAuC,MAAA,KAAK,EAAE,KAAI,CAACE,KAAL,CAAWP,KAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,eAEI,+CAAWM,aAAa,EAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAFJ,CADH;AAAA,GANL,CADJ;AAeH,CAlBD;;AAoBA,eAAed,SAAf","sourcesContent":["import React, { useRef, useState } from 'react';\r\nimport AvatarEditor from 'react-avatar-editor';\r\nimport Dropzone from 'react-dropzone';\r\n\r\nconst TestImage = () => {\r\n    const editor = useRef(null);\r\n\r\n    return (\r\n        <div>\r\n            <Drop />\r\n            <AvatarEditor\r\n                ref={editor}\r\n                image=\"https://freepikpsd.com/file/2019/10/avatar-icon-png-5-Images-PNG-Transparent.png\"\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                scale={1.2}\r\n            />\r\n            <button onClick={() => {\r\n                if (this.editor) {\r\n                    // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                    // drawn on another canvas, or added to the DOM.\r\n                    const canvas = editor.current.getImage()\r\n\r\n                    // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                    const canvasScaled = editor.current.getImageScaledToCanvas()\r\n                }\r\n            }}>Save</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Drop = () => {\r\n    const [image, setImage] = useState('http://example.com/initialimage.jpg')\r\n\r\n    return (\r\n        <Dropzone\r\n            onDrop={(dropped) => setImage(dropped[0])}\r\n            noClick\r\n            noKeyboard\r\n            style={{ width: '250px', height: '250px' }}\r\n        >\r\n            {({ getRootProps, getInputProps }) => (\r\n                <div {...getRootProps()}>\r\n                    <AvatarEditor width={250} height={250} image={this.state.image} />\r\n                    <input {...getInputProps()} />\r\n                </div>\r\n            )}\r\n        </Dropzone>\r\n    )\r\n}\r\n\r\nexport default TestImage;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { pipe } from \"@chakra-ui/utils\";\nimport { mergeThemeOverride } from \"../extend-theme\";\nimport { withDefaultColorScheme } from \"./with-default-color-scheme\";\nimport { withDefaultSize } from \"./with-default-size\";\nimport { withDefaultVariant } from \"./with-default-variant\";\nexport function withDefaultProps(_ref) {\n  var _ref$defaultProps = _ref.defaultProps,\n    colorScheme = _ref$defaultProps.colorScheme,\n    variant = _ref$defaultProps.variant,\n    size = _ref$defaultProps.size,\n    components = _ref.components;\n  var identity = function identity(t) {\n    return t;\n  };\n  var fns = [colorScheme ? withDefaultColorScheme({\n    colorScheme: colorScheme,\n    components: components\n  }) : identity, size ? withDefaultSize({\n    size: size,\n    components: components\n  }) : identity, variant ? withDefaultVariant({\n    variant: variant,\n    components: components\n  }) : identity];\n  return function (theme) {\n    return mergeThemeOverride(pipe.apply(void 0, fns)(theme));\n  };\n}","map":{"version":3,"names":["pipe","mergeThemeOverride","withDefaultColorScheme","withDefaultSize","withDefaultVariant","withDefaultProps","_ref","_ref$defaultProps","defaultProps","colorScheme","variant","size","components","identity","t","fns","theme","apply"],"sources":["../../../src/theme-extensions/with-default-props.ts"],"sourcesContent":["import { ComponentDefaultProps } from \"@chakra-ui/theme\"\nimport { Dict, pipe } from \"@chakra-ui/utils\"\nimport { mergeThemeOverride } from \"../extend-theme\"\nimport { withDefaultColorScheme } from \"./with-default-color-scheme\"\nimport { withDefaultSize } from \"./with-default-size\"\nimport { withDefaultVariant } from \"./with-default-variant\"\n\nexport function withDefaultProps({\n  defaultProps: { colorScheme, variant, size },\n  components,\n}: {\n  defaultProps: ComponentDefaultProps\n  components?: string[] | Dict\n}) {\n  const identity = <T>(t: T) => t\n  const fns = [\n    colorScheme\n      ? withDefaultColorScheme({ colorScheme, components })\n      : identity,\n    size ? withDefaultSize({ size, components }) : identity,\n    variant ? withDefaultVariant({ variant, components }) : identity,\n  ]\n\n  return (theme: Dict) => mergeThemeOverride(pipe(...fns)(theme))\n}\n"],"mappings":"AACA,SAAeA,IAAf,QAA2B,kBAA3B;AACA,SAASC,kBAAT,QAAmC,iBAAnC;AACA,SAASC,sBAAT,QAAuC,6BAAvC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,kBAAT,QAAmC,wBAAnC;AAEA,OAAO,SAASC,gBAATA,CAAAC,IAAA,EAMJ;EAAA,IAAAC,iBAAA,GAAAD,IAAA,CALDE,YAAY;IAAIC,WAAF,GAAAF,iBAAA,CAAEE,WAAF;IAAeC,OAAf,GAAAH,iBAAA,CAAeG,OAAf;IAAwBC,IAAA,GAAAJ,iBAAA,CAAAI,IAAA;IACtCC,UAAA,GAICN,IAAA,CAJDM,UAAA;EAKA,IAAMC,QAAQ,GAAO,SAAfA,QAAQA,CAAOC,CAAJ;IAAA,OAAaA,CAA9B;EAAA;EACA,IAAMC,GAAG,GAAG,CACVN,WAAW,GACPP,sBAAsB,CAAC;IAAEO,WAAF,EAAEA,WAAF;IAAeG,UAAA,EAAAA;EAAf,CAAD,CADf,GAEPC,QAHM,EAIVF,IAAI,GAAGR,eAAe,CAAC;IAAEQ,IAAF,EAAEA,IAAF;IAAQC,UAAA,EAAAA;EAAR,CAAD,CAAlB,GAA2CC,QAJrC,EAKVH,OAAO,GAAGN,kBAAkB,CAAC;IAAEM,OAAF,EAAEA,OAAF;IAAWE,UAAA,EAAAA;EAAX,CAAD,CAArB,GAAiDC,QAL9C,CAAZ;EAQA,OAAQ,UAAAG,KAAD;IAAA,OAAiBf,kBAAkB,CAACD,IAAI,CAAAiB,KAAA,SAAIF,GAAJ,CAAJ,CAAaC,KAAb,CAAD,CAA1C;EAAA;AACD"},"metadata":{},"sourceType":"module"}
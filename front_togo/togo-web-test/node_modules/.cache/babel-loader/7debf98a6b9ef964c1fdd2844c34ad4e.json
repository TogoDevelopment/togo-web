{"ast":null,"code":"import { isObject } from \"@chakra-ui/utils\";\nfunction toRef(operand) {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference;\n  }\n  return String(operand);\n}\nvar toExpr = function toExpr(operator) {\n  for (var _len = arguments.length, operands = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    operands[_key - 1] = arguments[_key];\n  }\n  return operands.map(toRef).join(\" \" + operator + \" \").replace(/calc/g, \"\");\n};\nvar _add = function add() {\n  for (var _len2 = arguments.length, operands = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    operands[_key2] = arguments[_key2];\n  }\n  return \"calc(\" + toExpr.apply(void 0, [\"+\"].concat(operands)) + \")\";\n};\nvar _subtract = function subtract() {\n  for (var _len3 = arguments.length, operands = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n    operands[_key3] = arguments[_key3];\n  }\n  return \"calc(\" + toExpr.apply(void 0, [\"-\"].concat(operands)) + \")\";\n};\nvar _multiply = function multiply() {\n  for (var _len4 = arguments.length, operands = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n    operands[_key4] = arguments[_key4];\n  }\n  return \"calc(\" + toExpr.apply(void 0, [\"*\"].concat(operands)) + \")\";\n};\nvar _divide = function divide() {\n  for (var _len5 = arguments.length, operands = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n    operands[_key5] = arguments[_key5];\n  }\n  return \"calc(\" + toExpr.apply(void 0, [\"/\"].concat(operands)) + \")\";\n};\nvar _negate = function _negate(x) {\n  var value = toRef(x);\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : \"-\" + value;\n  }\n  return _multiply(value, -1);\n};\nexport var calc = Object.assign(function (x) {\n  return {\n    add: function add() {\n      for (var _len6 = arguments.length, operands = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n        operands[_key6] = arguments[_key6];\n      }\n      return calc(_add.apply(void 0, [x].concat(operands)));\n    },\n    subtract: function subtract() {\n      for (var _len7 = arguments.length, operands = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n        operands[_key7] = arguments[_key7];\n      }\n      return calc(_subtract.apply(void 0, [x].concat(operands)));\n    },\n    multiply: function multiply() {\n      for (var _len8 = arguments.length, operands = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n        operands[_key8] = arguments[_key8];\n      }\n      return calc(_multiply.apply(void 0, [x].concat(operands)));\n    },\n    divide: function divide() {\n      for (var _len9 = arguments.length, operands = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n        operands[_key9] = arguments[_key9];\n      }\n      return calc(_divide.apply(void 0, [x].concat(operands)));\n    },\n    negate: function negate() {\n      return calc(_negate(x));\n    },\n    toString: function toString() {\n      return x.toString();\n    }\n  };\n}, {\n  add: _add,\n  subtract: _subtract,\n  multiply: _multiply,\n  divide: _divide,\n  negate: _negate\n});","map":{"version":3,"names":["isObject","toRef","operand","reference","String","toExpr","operator","_len","arguments","length","operands","Array","_key","map","join","replace","_add","add","_len2","_key2","apply","concat","_subtract","subtract","_len3","_key3","_multiply","multiply","_len4","_key4","_divide","divide","_len5","_key5","_negate","negate","x","value","Number","isNaN","parseFloat","startsWith","slice","calc","Object","assign","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","toString"],"sources":["../../src/css-calc.ts"],"sourcesContent":["import { isObject } from \"@chakra-ui/utils\"\nimport { CSSVar } from \"./css-var\"\n\nexport type Operand = string | number | CSSVar\ntype Operands = Operand[]\n\ntype Operator = \"+\" | \"-\" | \"*\" | \"/\"\n\nfunction toRef(operand: Operand): string {\n  if (isObject(operand) && operand.reference) {\n    return operand.reference\n  }\n  return String(operand)\n}\n\nconst toExpr = (operator: Operator, ...operands: Operands) =>\n  operands.map(toRef).join(` ${operator} `).replace(/calc/g, \"\")\n\nconst add = (...operands: Operands) => `calc(${toExpr(\"+\", ...operands)})`\n\nconst subtract = (...operands: Operands) => `calc(${toExpr(\"-\", ...operands)})`\n\nconst multiply = (...operands: Operands) => `calc(${toExpr(\"*\", ...operands)})`\n\nconst divide = (...operands: Operands) => `calc(${toExpr(\"/\", ...operands)})`\n\nconst negate = (x: Operand) => {\n  const value = toRef(x)\n\n  if (value != null && !Number.isNaN(parseFloat(value))) {\n    return String(value).startsWith(\"-\") ? String(value).slice(1) : `-${value}`\n  }\n\n  return multiply(value, -1)\n}\n\nexport interface CalcChain {\n  add: (...operands: Operands) => CalcChain\n  subtract: (...operands: Operands) => CalcChain\n  multiply: (...operands: Operands) => CalcChain\n  divide: (...operands: Operands) => CalcChain\n  negate: () => CalcChain\n  toString: () => string\n}\n\nexport const calc = Object.assign(\n  (x: Operand): CalcChain => ({\n    add: (...operands) => calc(add(x, ...operands)),\n    subtract: (...operands) => calc(subtract(x, ...operands)),\n    multiply: (...operands) => calc(multiply(x, ...operands)),\n    divide: (...operands) => calc(divide(x, ...operands)),\n    negate: () => calc(negate(x)),\n    toString: () => x.toString(),\n  }),\n  {\n    add,\n    subtract,\n    multiply,\n    divide,\n    negate,\n  },\n)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
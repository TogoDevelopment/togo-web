{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/esm/taggedTemplateLiteralLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\n\nvar _templateObject, _templateObject2;\n\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport MaskedInput from 'react-text-mask';\nimport ToggleButton from './ToggleButton';\nimport CloseButton from '../CloseButton';\nimport { useClassNames, KEY_VALUES, mergeRefs } from '../utils';\nimport Plaintext from '../Plaintext';\nimport useToggleCaret from '../utils/useToggleCaret';\nvar defaultProps = {\n  as: ToggleButton,\n  classPrefix: 'picker-toggle',\n  inputMask: []\n};\nvar PickerToggle = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var activeProp = props.active,\n      Component = props.as,\n      classPrefix = props.classPrefix,\n      children = props.children,\n      _props$caret = props.caret,\n      caret = _props$caret === void 0 ? true : _props$caret,\n      className = props.className,\n      disabled = props.disabled,\n      readOnly = props.readOnly,\n      plaintext = props.plaintext,\n      hasValue = props.hasValue,\n      cleanableProp = props.cleanable,\n      _props$tabIndex = props.tabIndex,\n      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,\n      id = props.id,\n      value = props.value,\n      input = props.input,\n      inputPlaceholder = props.inputPlaceholder,\n      inputValueProp = props.inputValue,\n      inputMask = props.inputMask,\n      onInputChange = props.onInputChange,\n      onInputPressEnter = props.onInputPressEnter,\n      onInputBlur = props.onInputBlur,\n      onInputFocus = props.onInputFocus,\n      onClean = props.onClean,\n      onFocus = props.onFocus,\n      onBlur = props.onBlur,\n      placement = props.placement,\n      caretComponent = props.caretComponent,\n      rest = _objectWithoutPropertiesLoose(props, [\"active\", \"as\", \"classPrefix\", \"children\", \"caret\", \"className\", \"disabled\", \"readOnly\", \"plaintext\", \"hasValue\", \"cleanable\", \"tabIndex\", \"id\", \"value\", \"input\", \"inputPlaceholder\", \"inputValue\", \"inputMask\", \"onInputChange\", \"onInputPressEnter\", \"onInputBlur\", \"onInputFocus\", \"onClean\", \"onFocus\", \"onBlur\", \"placement\", \"caretComponent\"]);\n\n  var inputRef = useRef();\n\n  var _useState = useState(false),\n      activeState = _useState[0],\n      setActive = _useState[1];\n\n  var _useClassNames = useClassNames(classPrefix),\n      withClassPrefix = _useClassNames.withClassPrefix,\n      merge = _useClassNames.merge,\n      prefix = _useClassNames.prefix;\n\n  var getInputValue = useCallback(function () {\n    return typeof inputValueProp === 'undefined' ? Array.isArray(value) ? value.join(',') : value : inputValueProp;\n  }, [inputValueProp, value]);\n\n  var _useState2 = useState(getInputValue),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  useEffect(function () {\n    var value = getInputValue();\n    setInputValue(value);\n  }, [getInputValue]);\n  var classes = merge(className, withClassPrefix({\n    active: activeProp || activeState\n  }));\n  var handleFocus = useCallback(function (event) {\n    setActive(true);\n    onFocus === null || onFocus === void 0 ? void 0 : onFocus(event);\n\n    if (input) {\n      inputRef.current.focus();\n    }\n  }, [input, onFocus]);\n  var handleBlur = useCallback(function (event) {\n    if (document.activeElement !== inputRef.current) {\n      var _inputRef$current;\n\n      setActive(false);\n      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.blur();\n    }\n\n    onBlur === null || onBlur === void 0 ? void 0 : onBlur(event);\n  }, [onBlur]);\n\n  var handleInputBlur = function handleInputBlur(event) {\n    setInputValue(getInputValue());\n    onInputBlur === null || onInputBlur === void 0 ? void 0 : onInputBlur(event);\n  };\n\n  var handleClean = useCallback(function (event) {\n    event.stopPropagation();\n    onClean === null || onClean === void 0 ? void 0 : onClean(event);\n    setActive(false);\n  }, [onClean]);\n  var handleInputChange = useCallback(function (event) {\n    var _event$target;\n\n    var value = (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.value;\n    setInputValue(value);\n    onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(value, event);\n  }, [onInputChange]);\n  var handleInputKeyDown = useCallback(function (event) {\n    if (input && event.key === KEY_VALUES.ENTER) {\n      onInputPressEnter === null || onInputPressEnter === void 0 ? void 0 : onInputPressEnter(event);\n    }\n  }, [onInputPressEnter, input]);\n  var ToggleCaret = useToggleCaret(placement);\n  var Caret = caretComponent !== null && caretComponent !== void 0 ? caretComponent : ToggleCaret;\n\n  if (plaintext) {\n    return /*#__PURE__*/React.createElement(Plaintext, {\n      ref: ref,\n      localeKey: \"notSelected\"\n    }, hasValue ? children : null);\n  }\n\n  var cleanable = cleanableProp && hasValue && !readOnly; // When the component is read-only or disabled, the input is not interactive.\n\n  var inputFocused = readOnly || disabled ? false : input && activeState;\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    role: \"combobox\",\n    \"aria-haspopup\": \"listbox\",\n    \"aria-expanded\": activeProp,\n    \"aria-disabled\": disabled,\n    \"aria-owns\": id ? id + \"-listbox\" : undefined\n  }, rest, {\n    ref: ref,\n    disabled: disabled,\n    tabIndex: disabled ? undefined : tabIndex,\n    className: classes,\n    onFocus: !disabled ? handleFocus : null // The debounce is set to 200 to solve the flicker caused by the switch between input and div.\n    ,\n    onBlur: !disabled ? debounce(handleBlur, 200) : null\n  }), /*#__PURE__*/React.createElement(MaskedInput, {\n    mask: inputMask,\n    value: Array.isArray(inputValue) ? inputValue.toString() : inputValue,\n    onBlur: handleInputBlur,\n    onFocus: onInputFocus,\n    onChange: handleInputChange,\n    onKeyDown: handleInputKeyDown,\n    id: id,\n    \"aria-hidden\": !inputFocused,\n    readOnly: !inputFocused,\n    disabled: disabled,\n    \"aria-controls\": id ? id + \"-listbox\" : undefined,\n    tabIndex: -1,\n    className: prefix('textbox', {\n      'read-only': !inputFocused\n    }),\n    placeholder: inputPlaceholder,\n    render: function render(ref, props) {\n      return /*#__PURE__*/React.createElement(\"input\", _extends({\n        ref: mergeRefs(inputRef, ref)\n      }, props));\n    }\n  }), children ? /*#__PURE__*/React.createElement(\"span\", {\n    className: prefix(hasValue ? 'value' : 'placeholder'),\n    \"aria-placeholder\": typeof children === 'string' ? children : null\n  }, children) : null, cleanable && /*#__PURE__*/React.createElement(CloseButton, {\n    className: prefix(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"clean\"]))),\n    tabIndex: -1,\n    onClick: handleClean\n  }), caret && /*#__PURE__*/React.createElement(Caret, {\n    className: prefix(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"caret\"])))\n  }));\n});\nPickerToggle.displayName = 'PickerToggle';\nPickerToggle.defaultProps = defaultProps;\nPickerToggle.propTypes = {\n  classPrefix: PropTypes.string,\n  hasValue: PropTypes.bool,\n  cleanable: PropTypes.bool,\n  className: PropTypes.string,\n  children: PropTypes.node,\n  caret: PropTypes.bool,\n  as: PropTypes.elementType,\n  onClean: PropTypes.func,\n  active: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  disabled: PropTypes.bool,\n  plaintext: PropTypes.bool\n};\nexport default PickerToggle;","map":null,"metadata":{},"sourceType":"module"}
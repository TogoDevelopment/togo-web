{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport { useIds } from \"@chakra-ui/hooks\";\nimport { callAllHandlers } from \"@chakra-ui/utils\";\nimport { mergeRefs } from \"@chakra-ui/react-utils\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { manager, useModalManager } from \"./modal-manager\";\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props) {\n  var isOpen = props.isOpen,\n    onClose = props.onClose,\n    id = props.id,\n    _props$closeOnOverlay = props.closeOnOverlayClick,\n    closeOnOverlayClick = _props$closeOnOverlay === void 0 ? true : _props$closeOnOverlay,\n    _props$closeOnEsc = props.closeOnEsc,\n    closeOnEsc = _props$closeOnEsc === void 0 ? true : _props$closeOnEsc,\n    _props$useInert = props.useInert,\n    useInert = _props$useInert === void 0 ? true : _props$useInert,\n    onOverlayClickProp = props.onOverlayClick,\n    onEsc = props.onEsc;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n  var _useIds = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\"),\n    _useIds2 = _slicedToArray(_useIds, 3),\n    dialogId = _useIds2[0],\n    headerId = _useIds2[1],\n    bodyId = _useIds2[2];\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n\n  useAriaHidden(dialogRef, isOpen && useInert);\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n\n  useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(function (event) {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(function (event) {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    headerMounted = _useState2[0],\n    setHeaderMounted = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    bodyMounted = _useState4[0],\n    setBodyMounted = _useState4[1];\n  var getDialogProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({\n      role: \"dialog\"\n    }, props, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, function (event) {\n        return event.stopPropagation();\n      })\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(function (event) {\n    event.stopPropagation();\n    /**\n     * Make sure the event starts and ends on the same DOM element.\n     *\n     * This is used to prevent the modal from closing when you\n     * start dragging from the content, and release drag outside the content.\n     *\n     * We prevent this because it is technically not a considered \"click outside\"\n     */\n\n    if (mouseDownTarget.current !== event.target) return;\n    /**\n     * When you click on the overlay, we want to remove only the topmost modal\n     */\n\n    if (!manager.isTopModal(dialogRef)) return;\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n    if (ref === void 0) {\n      ref = null;\n    }\n    return _extends({}, props, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen: isOpen,\n    onClose: onClose,\n    headerId: headerId,\n    bodyId: bodyId,\n    setBodyMounted: setBodyMounted,\n    setHeaderMounted: setHeaderMounted,\n    dialogRef: dialogRef,\n    overlayRef: overlayRef,\n    getDialogProps: getDialogProps,\n    getDialogContainerProps: getDialogContainerProps\n  };\n}\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(ref, shouldHide) {\n  useEffect(function () {\n    if (!ref.current) return undefined;\n    var undo = null;\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current);\n    }\n    return function () {\n      if (shouldHide) {\n        undo == null ? void 0 : undo();\n      }\n    };\n  }, [shouldHide, ref]);\n}","map":{"version":3,"names":["useIds","callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useRef","useState","manager","useModalManager","useModal","props","isOpen","onClose","id","_props$closeOnOverlay","closeOnOverlayClick","_props$closeOnEsc","closeOnEsc","_props$useInert","useInert","onOverlayClickProp","onOverlayClick","onEsc","dialogRef","overlayRef","_useIds","_useIds2","_slicedToArray","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","target","onKeyDown","key","stopPropagation","_useState","_useState2","headerMounted","setHeaderMounted","_useState3","_useState4","bodyMounted","setBodyMounted","getDialogProps","ref","_extends","role","tabIndex","undefined","onClick","isTopModal","getDialogContainerProps","shouldHide","undo"],"sources":["../../src/use-modal.ts"],"sourcesContent":["import { useIds } from \"@chakra-ui/hooks\"\nimport { callAllHandlers } from \"@chakra-ui/utils\"\nimport { mergeRefs, PropGetter } from \"@chakra-ui/react-utils\"\nimport { hideOthers, Undo } from \"aria-hidden\"\nimport {\n  KeyboardEvent,\n  MouseEvent,\n  RefObject,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\"\nimport { manager, useModalManager } from \"./modal-manager\"\n\nexport interface UseModalProps {\n  /**\n   * If `true`, the modal will be open.\n   */\n  isOpen: boolean\n  /**\n   * The `id` of the modal\n   */\n  id?: string\n  /**\n   * Callback invoked to close the modal.\n   */\n  onClose(): void\n  /**\n   * If `true`, the modal will close when the overlay is clicked\n   * @default true\n   */\n  closeOnOverlayClick?: boolean\n  /**\n   * If `true`, the modal will close when the `Esc` key is pressed\n   * @default true\n   */\n  closeOnEsc?: boolean\n  /**\n   * Callback fired when the overlay is clicked.\n   */\n  onOverlayClick?(): void\n  /**\n   * Callback fired when the escape key is pressed and focus is within modal\n   */\n  onEsc?(): void\n  /**\n   * A11y: If `true`, the siblings of the `modal` will have `aria-hidden`\n   * set to `true` so that screen readers can only see the `modal`.\n   *\n   * This is commonly known as making the other elements **inert**\n   *\n   *  @default true\n   */\n  useInert?: boolean\n}\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props: UseModalProps) {\n  const {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc,\n  } = props\n\n  const dialogRef = useRef<HTMLElement>(null)\n  const overlayRef = useRef<HTMLElement>(null)\n\n  const [dialogId, headerId, bodyId] = useIds(\n    id,\n    `chakra-modal`,\n    `chakra-modal--header`,\n    `chakra-modal--body`,\n  )\n\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n  useAriaHidden(dialogRef, isOpen && useInert)\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n  useModalManager(dialogRef, isOpen)\n\n  const mouseDownTarget = useRef<EventTarget | null>(null)\n\n  const onMouseDown = useCallback((event: MouseEvent) => {\n    mouseDownTarget.current = event.target\n  }, [])\n\n  const onKeyDown = useCallback(\n    (event: KeyboardEvent) => {\n      if (event.key === \"Escape\") {\n        event.stopPropagation()\n\n        if (closeOnEsc) {\n          onClose?.()\n        }\n\n        onEsc?.()\n      }\n    },\n    [closeOnEsc, onClose, onEsc],\n  )\n\n  const [headerMounted, setHeaderMounted] = useState(false)\n  const [bodyMounted, setBodyMounted] = useState(false)\n\n  const getDialogProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      role: \"dialog\",\n      ...props,\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, (event: MouseEvent) =>\n        event.stopPropagation(),\n      ),\n    }),\n    [bodyId, bodyMounted, dialogId, headerId, headerMounted],\n  )\n\n  const onOverlayClick = useCallback(\n    (event: MouseEvent) => {\n      event.stopPropagation()\n      /**\n       * Make sure the event starts and ends on the same DOM element.\n       *\n       * This is used to prevent the modal from closing when you\n       * start dragging from the content, and release drag outside the content.\n       *\n       * We prevent this because it is technically not a considered \"click outside\"\n       */\n      if (mouseDownTarget.current !== event.target) return\n\n      /**\n       * When you click on the overlay, we want to remove only the topmost modal\n       */\n      if (!manager.isTopModal(dialogRef)) return\n\n      if (closeOnOverlayClick) {\n        onClose?.()\n      }\n\n      onOverlayClickProp?.()\n    },\n    [onClose, closeOnOverlayClick, onOverlayClickProp],\n  )\n\n  const getDialogContainerProps: PropGetter = useCallback(\n    (props = {}, ref = null) => ({\n      ...props,\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown),\n    }),\n    [onKeyDown, onMouseDown, onOverlayClick],\n  )\n\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps,\n  }\n}\n\nexport type UseModalReturn = ReturnType<typeof useModal>\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(\n  ref: RefObject<HTMLElement>,\n  shouldHide: boolean,\n) {\n  useEffect(() => {\n    if (!ref.current) return undefined\n\n    let undo: Undo | null = null\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current)\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo?.()\n      }\n    }\n  }, [shouldHide, ref])\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx\";\n\n/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\nimport React, { useRef } from 'react';\nimport AvatarEditor from 'react-avatar-editor';\n\nvar MyEditor = function MyEditor() {\n  var editor = useRef(null);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AvatarEditor, {\n    ref: editor,\n    image: \"https://freepikpsd.com/file/2019/10/avatar-icon-png-5-Images-PNG-Transparent.png\",\n    width: 250,\n    height: 250,\n    border: 50,\n    scale: 1.2,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: function onClick() {\n      if (_this.editor) {\n        // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\n        // drawn on another canvas, or added to the DOM.\n        var canvas = editor.current.getImage(); // If you want the image resized to the canvas size (also a HTMLCanvasElement)\n\n        var canvasScaled = editor.current.getImageScaledToCanvas();\n      }\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }\n  }, \"Save\"));\n};\n\nexport default MyEditor;","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/AdminPanel/CustomerInfo/TestImage/TestImage.jsx"],"names":["React","useRef","AvatarEditor","MyEditor","editor","canvas","current","getImage","canvasScaled","getImageScaledToCanvas"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,qBAAzB;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,MAAMC,MAAM,GAAGH,MAAM,CAAC,IAAD,CAArB;AAEA,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,GAAG,EAAEG,MADT;AAEI,IAAA,KAAK,EAAC,kFAFV;AAGI,IAAA,KAAK,EAAE,GAHX;AAII,IAAA,MAAM,EAAE,GAJZ;AAKI,IAAA,MAAM,EAAE,EALZ;AAMI,IAAA,KAAK,EAAE,GANX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eASI;AAAQ,IAAA,OAAO,EAAE,mBAAM;AACnB,UAAI,KAAI,CAACA,MAAT,EAAiB;AACb;AACA;AACA,YAAMC,MAAM,GAAGD,MAAM,CAACE,OAAP,CAAeC,QAAf,EAAf,CAHa,CAKb;;AACA,YAAMC,YAAY,GAAGJ,MAAM,CAACE,OAAP,CAAeG,sBAAf,EAArB;AACH;AACJ,KATD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATJ,CADJ;AAuBH,CA1BD;;AA4BA,eAAeN,QAAf","sourcesContent":["/* import React, { useEffect, useRef, useState } from 'react';\r\nimport Avatar from 'react-avatar-edit';\r\n\r\nconst TestImage = () => {\r\n    const [src, serSrc] = useState(null);\r\n    const [preview, serPreview] = useState(null);\r\n    \r\n    const onClose = () => {\r\n        serPreview(null);\r\n    }\r\n\r\n    const onCrop = view => {\r\n        serPreview(view);\r\n    }\r\n\r\n    useEffect(() => {\r\n        // console.log(preview)\r\n    }, [preview])\r\n\r\n    return (\r\n        <div>\r\n            <Avatar \r\n                width={400}\r\n                height={300}\r\n                onCrop={onCrop}\r\n                onClose={onClose}\r\n                src={src}\r\n                cropRadius={0}\r\n            />\r\n\r\n            {preview && <img src={preview} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TestImage; */\r\n\r\nimport React, { useRef } from 'react'\r\nimport AvatarEditor from 'react-avatar-editor'\r\n\r\nconst MyEditor = () => {\r\n    const editor = useRef(null);\r\n\r\n    return (\r\n        <div>\r\n            <AvatarEditor\r\n                ref={editor}\r\n                image=\"https://freepikpsd.com/file/2019/10/avatar-icon-png-5-Images-PNG-Transparent.png\"\r\n                width={250}\r\n                height={250}\r\n                border={50}\r\n                scale={1.2}\r\n            />\r\n            <button onClick={() => {\r\n                if (this.editor) {\r\n                    // This returns a HTMLCanvasElement, it can be made into a data URL or a blob,\r\n                    // drawn on another canvas, or added to the DOM.\r\n                    const canvas = editor.current.getImage()\r\n\r\n                    // If you want the image resized to the canvas size (also a HTMLCanvasElement)\r\n                    const canvasScaled = editor.current.getImageScaledToCanvas()\r\n                }\r\n            }}>Save</button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default MyEditor"]},"metadata":{},"sourceType":"module"}
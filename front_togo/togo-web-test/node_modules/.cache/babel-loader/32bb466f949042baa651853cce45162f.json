{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/system/togo-web-test/src/components/CreateAddress.jsx\";\nimport translate from \"../i18n/translate\";\nimport React, { useEffect, useState } from \"react\";\nimport { Button, Col, Container, Form, Modal, Row, FloatingLabel, Spinner } from \"react-bootstrap\";\nimport { CreateAddressReq, GetCityRegion, GetCitiesArea } from \"../APIs/OrdersAPIs\";\nimport { useDispatch } from \"react-redux\";\nimport { toastNotification } from \"../Actions/GeneralActions\";\nexport default function CreateAddress(_ref) {\n  var _this = this;\n\n  var onSuccess = _ref.onSuccess,\n      children = _ref.children;\n  var dispatch = useDispatch();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      show = _useState2[0],\n      setShow = _useState2[1]; // const [cities, setCities] = useState([]);\n\n  /* useEffect(() => {\r\n      //if(show === true) {\r\n      GetCityRegion().then((res) => {\r\n          // edited (insert an empty elemnt to the beginning of the array to unselect the first element and make the city required)\r\n          let tempArr = res.data.server_response;\r\n          tempArr?.unshift({ IdCity: '0', Name: 'Choose City', LatRegion: '0', LongRegion: '0' });\r\n          setCities(tempArr);\r\n      });\r\n      //}\r\n  }, []); */\n\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      validated = _useState6[0],\n      setValidated = _useState6[1];\n  /* edited (handleClose handler added) */\n\n\n  var handleClose = function handleClose() {\n    setShow(false);\n  }; // ---------------------------------- City :\n\n\n  var _useState7 = useState([]),\n      _useState8 = _slicedToArray(_useState7, 2),\n      provinces = _useState8[0],\n      setProvinces = _useState8[1];\n\n  var _useState9 = useState([]),\n      _useState10 = _slicedToArray(_useState9, 2),\n      governorates = _useState10[0],\n      setGovernorates = _useState10[1];\n\n  var _useState11 = useState([]),\n      _useState12 = _slicedToArray(_useState11, 2),\n      cities = _useState12[0],\n      setCities = _useState12[1];\n\n  var _useState13 = useState([]),\n      _useState14 = _slicedToArray(_useState13, 2),\n      areas = _useState14[0],\n      setAreas = _useState14[1];\n  /* useEffect(() => {\r\n      // provinces, governorates, cities, areas\r\n      GetCitiesArea(\"provinces\", -1).then((res) => {\r\n          // console.log(res.data.server_response);\r\n          setProvinces(res.data.server_response);\r\n      })\r\n  }, []) */\n\n\n  var getProvences = function getProvences() {\n    GetCitiesArea(\"provinces\", -1).then(function (res) {\n      // console.log(res.data.server_response);\n      setProvinces(res.data.server_response);\n    });\n  };\n\n  var updateSubLevel = function updateSubLevel(type, superId) {\n    GetCitiesArea(type, superId, 1).then(function (res) {\n      // console.log(res.data.server_response)\n      if (type === \"governorates\") {\n        setGovernorates([]);\n        setCities([]);\n        setAreas([]);\n        setGovernorates(res.data.server_response);\n      } else if (type === \"cities\") {\n        setCities([]);\n        setAreas([]);\n        setCities(res.data.server_response);\n      } else {\n        setAreas([]);\n        setAreas(res.data.server_response);\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    onClick: function onClick() {\n      setShow(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }\n  }, children), /*#__PURE__*/React.createElement(Modal, {\n    show: show,\n    onHide: function onHide() {\n      setShow(false);\n    },\n    centered: true,\n    animation: true,\n    backdrop: \"static\",\n    size: \"lg\",\n    style: {\n      backgroundColor: \"rgba(0,0,0,0.5)\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Header, {\n    closeButton: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Modal.Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 21\n    }\n  }, translate(\"ORDERS.ADD_ADDRESS\"))), /*#__PURE__*/React.createElement(Modal.Body, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    id: \"addressForm\",\n    validated: validated,\n    noValidate: true\n    /* ref={formRef} */\n    ,\n    onSubmit: function onSubmit(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var formData = new FormData(event.target),\n          formDataObj = Object.fromEntries(formData.entries()); // console.log(formDataObj);\n\n      var form = event.currentTarget;\n\n      if (form.checkValidity() === true) {\n        setLoading(true);\n        CreateAddressReq(formDataObj).then(function (res) {\n          console.log(res.data);\n\n          if (res.data == \"Something went wrong\" || res.data == \"Blocked\" || res.data == \"TokenError\") {\n            dispatch(toastNotification(\"Error!\", res.data, \"error\"));\n          } else {\n            setLoading(false);\n            setShow(false);\n            dispatch(toastNotification(\"Created!\", \"Address Created\", \"success\")); // onSuccess();\n          }\n        });\n      }\n\n      setValidated(true); // console.log(formDataObj);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(FloatingLabel, {\n    className: \"mb-3\",\n    controlId: \"formBasicEmail\",\n    label: translate(\"ORDERS.ADDRESS_NAME\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"...\",\n    name: \"placename\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 29\n    }\n  }, \"Please add place name\")), /*#__PURE__*/React.createElement(FloatingLabel, {\n    className: \"mb-3\",\n    controlId: \"userTel\",\n    label: translate(\"ORDERS.ADDRESS_PHONE\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"tel\",\n    placeholder: \"...\",\n    name: \"phone\",\n    pattern: \"^05[0-9]{8}?$\",\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(Form.Control.Feedback, {\n    type: \"invalid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 29\n    }\n  }, \"Please enter a valid phone number example 0568000000\")), /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 37\n    }\n  }, translate(\"TEMP.PROVINCES\"), \":\"), /*#__PURE__*/React.createElement(Form.Select, {\n    name: \"province\",\n    required: true,\n    \"aria-label\": \"Default select example\",\n    onClick: function onClick() {\n      getProvences();\n    },\n    onChange: function onChange(e) {\n      updateSubLevel(\"governorates\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 41\n    }\n  }, \"Select Provice\"), provinces.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 56\n      }\n    },\n    /* item.id + \" - \" +  */\n    item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 37\n    }\n  }, translate(\"TEMP.GOVERNORATES\"), \":\"), /*#__PURE__*/React.createElement(Form.Select, {\n    name: \"governorate\",\n    required: true,\n    \"aria-label\": \"Default select example\",\n    onChange: function onChange(e) {\n      updateSubLevel(\"cities\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 41\n    }\n  }, \"Select Governorate\"), governorates.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 56\n      }\n    },\n    /* item.id + \" - \" +  */\n    item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 37\n    }\n  }, translate(\"TEMP.CITIES\"), \":\"), /*#__PURE__*/React.createElement(Form.Select, {\n    name: \"city\",\n    required: true,\n    \"aria-label\": \"Default select example\",\n    onChange: function onChange(e) {\n      updateSubLevel(\"areas\", e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 41\n    }\n  }, \"Select City\"), cities.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 56\n      }\n    },\n    /* item.id + \" - \" +  */\n    item.name);\n  }))), /*#__PURE__*/React.createElement(Col, {\n    lg: 3,\n    className: \"mb-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Form.Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 37\n    }\n  }, translate(\"TEMP.AREAS\"), \":\"), /*#__PURE__*/React.createElement(Form.Select, {\n    name: \"area\"\n    /* required */\n    ,\n    \"aria-label\": \"Default select example\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    style: {\n      color: \"lightgray\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 41\n    }\n  }, \"Select Area\"), areas.map(function (item, index) {\n    return /*#__PURE__*/React.createElement(\"option\", {\n      key: index,\n      value: item.id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 56\n      }\n    },\n    /* item.id + \" - \" +  */\n    item.name);\n  }))))), /*#__PURE__*/React.createElement(FloatingLabel, {\n    className: \"mb-3\",\n    controlId: \"userAddress\",\n    label: translate(\"ORDERS.ADDRESS\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"...\",\n    name: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(FloatingLabel, {\n    className: \"mb-3\",\n    controlId: \"addressInfo\",\n    label: translate(\"ORDERS.ADDRESS_INFO\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Form.Control, {\n    type: \"text\",\n    placeholder: \"...\",\n    name: \"addressinfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Form.Check, {\n    type: \"switch\",\n    id: \"custom-switch\",\n    label: translate(\"ORDERS.ADDRESS_SHARED\"),\n    name: \"isShared\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    variant: \"outline-primary\",\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  }, loading && /*#__PURE__*/React.createElement(Spinner, {\n    size: \"sm\",\n    className: \"me-1\",\n    animation: \"border\",\n    variant: \"light\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 41\n    }\n  }), translate(\"GENERAL.PROCEED\")), \"  \", /*#__PURE__*/React.createElement(Button, {\n    variant: \"danger\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 25\n    }\n  }, translate(\"GENERAL.CANCEL\"))))));\n}","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/CreateAddress.jsx"],"names":["translate","React","useEffect","useState","Button","Col","Container","Form","Modal","Row","FloatingLabel","Spinner","CreateAddressReq","GetCityRegion","GetCitiesArea","useDispatch","toastNotification","CreateAddress","onSuccess","children","dispatch","show","setShow","loading","setLoading","validated","setValidated","handleClose","provinces","setProvinces","governorates","setGovernorates","cities","setCities","areas","setAreas","getProvences","then","res","data","server_response","updateSubLevel","type","superId","backgroundColor","event","preventDefault","stopPropagation","formData","FormData","target","formDataObj","Object","fromEntries","entries","form","currentTarget","checkValidity","console","log","e","value","color","map","item","index","id","name"],"mappings":"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","sourcesContent":["import translate from \"../i18n/translate\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Button, Col, Container, Form, Modal, Row, FloatingLabel, Spinner } from \"react-bootstrap\";\r\nimport { CreateAddressReq, GetCityRegion, GetCitiesArea } from \"../APIs/OrdersAPIs\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { toastNotification } from \"../Actions/GeneralActions\";\r\n\r\nexport default function CreateAddress({ onSuccess, children }) {\r\n\r\n    let dispatch = useDispatch();\r\n\r\n    const [show, setShow] = useState(false);\r\n    // const [cities, setCities] = useState([]);\r\n\r\n    /* useEffect(() => {\r\n        //if(show === true) {\r\n        GetCityRegion().then((res) => {\r\n            // edited (insert an empty elemnt to the beginning of the array to unselect the first element and make the city required)\r\n            let tempArr = res.data.server_response;\r\n            tempArr?.unshift({ IdCity: '0', Name: 'Choose City', LatRegion: '0', LongRegion: '0' });\r\n            setCities(tempArr);\r\n        });\r\n        //}\r\n    }, []); */\r\n\r\n    const [loading, setLoading] = useState(false);\r\n    const [validated, setValidated] = useState(false);\r\n\r\n\r\n    /* edited (handleClose handler added) */\r\n    const handleClose = () => {\r\n        setShow(false);\r\n    }\r\n\r\n    // ---------------------------------- City :\r\n\r\n    const [provinces, setProvinces] = useState([]);\r\n    const [governorates, setGovernorates] = useState([]);\r\n    const [cities, setCities] = useState([]);\r\n    const [areas, setAreas] = useState([]);\r\n\r\n    /* useEffect(() => {\r\n        // provinces, governorates, cities, areas\r\n        GetCitiesArea(\"provinces\", -1).then((res) => {\r\n            // console.log(res.data.server_response);\r\n            setProvinces(res.data.server_response);\r\n        })\r\n    }, []) */\r\n\r\n    const getProvences = () => {\r\n        GetCitiesArea(\"provinces\", -1).then((res) => {\r\n            // console.log(res.data.server_response);\r\n            setProvinces(res.data.server_response);\r\n        })\r\n    }\r\n\r\n    const updateSubLevel = (type, superId) => {\r\n        GetCitiesArea(type, superId, 1).then((res) => {\r\n            // console.log(res.data.server_response)\r\n\r\n            if (type === \"governorates\") {\r\n                setGovernorates([]);\r\n                setCities([]);\r\n                setAreas([]);\r\n                setGovernorates(res.data.server_response);\r\n            } else if (type === \"cities\") {\r\n                setCities([]);\r\n                setAreas([]);\r\n                setCities(res.data.server_response);\r\n            } else {\r\n                setAreas([]);\r\n                setAreas(res.data.server_response);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <span onClick={() => {\r\n                setShow(true);\r\n            }}>\r\n\r\n                {children}\r\n            </span>\r\n\r\n            {/*  edited (fullscreen removed and style added) */}\r\n            <Modal\r\n                show={show}\r\n                onHide={() => { setShow(false) }}\r\n                centered\r\n                animation={true}\r\n                backdrop=\"static\"\r\n                size=\"lg\"\r\n\r\n                style={{ backgroundColor: \"rgba(0,0,0,0.5)\",  }}\r\n            >\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>{translate(\"ORDERS.ADD_ADDRESS\")}</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <Form id=\"addressForm\" validated={validated} noValidate /* ref={formRef} */ onSubmit={(event) => {\r\n                        event.preventDefault();\r\n                        event.stopPropagation();\r\n                        const formData = new FormData(event.target), formDataObj = Object.fromEntries(formData.entries());\r\n\r\n                        // console.log(formDataObj);\r\n                        \r\n                        const form = event.currentTarget;\r\n                        if (form.checkValidity() === true) {\r\n                            setLoading(true);\r\n                            CreateAddressReq(formDataObj).then((res) => {\r\n                                console.log(res.data)\r\n                                if (\r\n                                    res.data == \"Something went wrong\" ||\r\n                                    res.data == \"Blocked\" ||\r\n                                    res.data == \"TokenError\"\r\n                                ) {\r\n                                    dispatch(toastNotification(\"Error!\", res.data, \"error\"));\r\n                                } else {\r\n                                    setLoading(false);\r\n                                    setShow(false);\r\n                                    dispatch(toastNotification(\"Created!\", \"Address Created\", \"success\"));\r\n                                    // onSuccess();\r\n                                }\r\n                            });\r\n                        }\r\n                        setValidated(true);\r\n                        // console.log(formDataObj);\r\n\r\n                    }}>\r\n\r\n                        <FloatingLabel className=\"mb-3\" controlId=\"formBasicEmail\" label={translate(\"ORDERS.ADDRESS_NAME\")}>\r\n                            <Form.Control type=\"text\" placeholder=\"...\" name=\"placename\" required />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Please add place name\r\n                            </Form.Control.Feedback>\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel className=\"mb-3\" controlId=\"userTel\" label={translate(\"ORDERS.ADDRESS_PHONE\")}>\r\n                            <Form.Control type=\"tel\" placeholder=\"...\" name=\"phone\" pattern=\"^05[0-9]{8}?$\" required />\r\n                            <Form.Control.Feedback type=\"invalid\">\r\n                                Please enter a valid phone number example 0568000000\r\n                            </Form.Control.Feedback>\r\n                        </FloatingLabel>\r\n\r\n                        {/* <Form.Select name=\"city\" required>\r\n                                {cities?.map?.((city) => {\r\n                                    return <option key={city.IdCity} value={city.IdCity === '0' ? \"\" : city.IdCity}>{city.Name}</option>\r\n                                })}\r\n                            </Form.Select> */}\r\n\r\n                        <Container fluid>\r\n                            <Row>\r\n                                <Col lg={3} className=\"mb-4\">\r\n                                    <Form.Label>{translate(\"TEMP.PROVINCES\")}:</Form.Label>\r\n                                    <Form.Select name=\"province\" required aria-label=\"Default select example\"\r\n                                    onClick={() => {\r\n                                        getProvences();\r\n                                    }}\r\n                                    onChange={(e) => {\r\n                                        updateSubLevel(\"governorates\", e.target.value)\r\n                                    }}>\r\n                                        <option value={\"\"} style={{ color: \"lightgray\" }}>Select Provice</option>\r\n                                        {\r\n                                            provinces.map((item, index) => {\r\n                                                return <option key={index} value={item.id}>{/* item.id + \" - \" +  */item.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </Col>\r\n                                <Col lg={3} className=\"mb-4\">\r\n                                    <Form.Label>{translate(\"TEMP.GOVERNORATES\")}:</Form.Label>\r\n                                    <Form.Select name=\"governorate\" required aria-label=\"Default select example\" onChange={(e) => {\r\n                                        updateSubLevel(\"cities\", e.target.value)\r\n                                    }}>\r\n                                        <option value={\"\"} style={{ color: \"lightgray\" }}>Select Governorate</option>\r\n                                        {\r\n                                            governorates.map((item, index) => {\r\n                                                return <option key={index} value={item.id}>{/* item.id + \" - \" +  */item.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </Col>\r\n                                <Col lg={3} className=\"mb-4\">\r\n                                    <Form.Label>{translate(\"TEMP.CITIES\")}:</Form.Label>\r\n                                    <Form.Select name=\"city\" required aria-label=\"Default select example\" onChange={(e) => {\r\n                                        updateSubLevel(\"areas\", e.target.value)\r\n                                    }}>\r\n                                        <option value={\"\"} style={{ color: \"lightgray\" }}>Select City</option>\r\n                                        {\r\n                                            cities.map((item, index) => {\r\n                                                return <option key={index} value={item.id}>{/* item.id + \" - \" +  */item.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </Col>\r\n                                <Col lg={3} className=\"mb-4\">\r\n                                    <Form.Label>{translate(\"TEMP.AREAS\")}:</Form.Label>\r\n                                    <Form.Select name=\"area\" /* required */ aria-label=\"Default select example\">\r\n                                        <option value={\"\"} style={{ color: \"lightgray\" }}>Select Area</option>\r\n                                        {\r\n                                            areas.map((item, index) => {\r\n                                                return <option key={index} value={item.id}>{/* item.id + \" - \" +  */item.name}</option>\r\n                                            })\r\n                                        }\r\n                                    </Form.Select>\r\n                                </Col>\r\n                            </Row>\r\n                        </Container>\r\n\r\n                        <FloatingLabel className=\"mb-3\" controlId=\"userAddress\" label={translate(\"ORDERS.ADDRESS\")}>\r\n                            <Form.Control type=\"text\" placeholder=\"...\" name=\"address\" />\r\n                        </FloatingLabel>\r\n\r\n                        <FloatingLabel className=\"mb-3\" controlId=\"addressInfo\" label={translate(\"ORDERS.ADDRESS_INFO\")}>\r\n                            <Form.Control type=\"text\" placeholder=\"...\" name=\"addressinfo\" />\r\n                        </FloatingLabel>\r\n                        {/* <Row>\r\n                            <Col md>\r\n                                <FloatingLabel className=\"mb-3\" controlId=\"addCountry\" label={translate(\"ORDERS.ADDRESS_COUNTRY\")}>\r\n                                    <Form.Control type=\"text\" placeholder=\"...\" name=\"country\" />\r\n                                </FloatingLabel>\r\n                            </Col>\r\n                            <Col>\r\n                                <FloatingLabel className=\"mb-3\" controlId=\"addressCode\" label={translate(\"ORDERS.ADDRESS_CODE\")}>\r\n                                    <Form.Control type=\"text\" placeholder=\"...\" name=\"zipcode\" />\r\n                                </FloatingLabel>\r\n                            </Col>\r\n                        </Row> */}\r\n\r\n                        <Form.Check\r\n                            type=\"switch\"\r\n                            id=\"custom-switch\"\r\n                            label={translate(\"ORDERS.ADDRESS_SHARED\")}\r\n                            name=\"isShared\"\r\n                        />\r\n\r\n                        <Button variant=\"outline-primary\" type=\"submit\">\r\n                            {loading && <Spinner size=\"sm\" className=\"me-1\" animation=\"border\" variant=\"light\" />}\r\n\r\n                            {translate(\"GENERAL.PROCEED\")}\r\n                        </Button>\r\n\r\n                        {/* edited (cancel button added) */}\r\n\r\n                        {\"  \"}\r\n                        <Button variant=\"danger\" onClick={handleClose}>\r\n                            {translate(\"GENERAL.CANCEL\")}\r\n                        </Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/defineProperty\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.StateProvider = StateProvider;\nexports.default = useTimekeeperState;\n\nvar _core = require(\"@emotion/core\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectSpread6 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _lodash = _interopRequireDefault(require(\"lodash.debounce\"));\n\nvar _time = require(\"../helpers/time\");\n\nvar _configContext = _interopRequireDefault(require(\"./config-context\"));\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _constants = require(\"../helpers/constants\");\n\nvar stateContext = (0, _react.createContext)({});\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'SET_TIME':\n      return (0, _objectSpread6.default)({}, state, {\n        time: action.time,\n        meridiem: action.meridiem || state.meridiem\n      });\n\n    case 'SET_MODE':\n      return (0, _objectSpread6.default)({}, state, {\n        mode: action.mode\n      });\n\n    case 'SET_MERIDIEM':\n      return (0, _objectSpread6.default)({}, state, {\n        meridiem: action.meridiem\n      });\n  }\n\n  return state;\n}\n\nfunction StateProvider(_ref) {\n  var onChange = _ref.onChange,\n      parentTime = _ref.time,\n      children = _ref.children;\n  var config = (0, _configContext.default)();\n\n  var _useReducer = (0, _react.useReducer)(reducer, null, function () {\n    return {\n      time: (0, _time.parseTime)(parentTime),\n      mode: config.hour24Mode ? _constants.MODE.HOURS_24 : _constants.MODE.HOURS_12,\n      // need meridiem for context when 12h mode, so can tell\n      // if user is changing hours before or after 12pm\n      meridiem: (0, _time.parseMeridiem)(parentTime)\n    };\n  }),\n      _useReducer2 = (0, _slicedToArray2.default)(_useReducer, 2),\n      state = _useReducer2[0],\n      dispatch = _useReducer2[1];\n\n  var mode = state.mode,\n      time = state.time,\n      meridiem = state.meridiem;\n  var refTime = (0, _react.useRef)(time); // handle time update if parent changes\n\n  (0, _react.useEffect)(function () {\n    if (parentTime == null) {\n      return;\n    }\n\n    var newTime = (0, _time.parseTime)(parentTime);\n\n    if ((0, _utils.isSameTime)(newTime, refTime.current)) {\n      return;\n    }\n\n    var action = {\n      type: 'SET_TIME',\n      time: (0, _time.parseTime)(parentTime)\n    };\n\n    if (!config.hour24Mode) {\n      action.meridiem = (0, _time.parseMeridiem)(parentTime);\n    }\n\n    dispatch(action);\n  }, [config.hour24Mode, parentTime]);\n  var getComposedTime = (0, _react.useCallback)(function () {\n    var time = refTime.current;\n    return (0, _time.composeTime)(time.hour, time.minute);\n  }, []); // debounced onChange function from parent\n\n  var debounceUpdateParent = (0, _react.useMemo)(function () {\n    if (typeof onChange === 'function') {\n      return (0, _lodash.default)(function () {\n        onChange(getComposedTime());\n      }, 80);\n    }\n\n    return function () {};\n  }, [getComposedTime, onChange]); // update 24 hour time on meridiem change\n\n  function updateMeridiem(newMeridiem) {\n    if (meridiem === newMeridiem) {\n      return;\n    }\n\n    var newTime = {\n      minute: time.minute,\n      hour: 0\n    };\n\n    if (newMeridiem === 'am') {\n      newTime.hour = time.hour - 12;\n    } else if (newMeridiem === 'pm') {\n      newTime.hour = time.hour + 12;\n    }\n\n    _actuallySetTime(newTime, newMeridiem);\n  } // update time on component and then on parent\n\n\n  function _actuallySetTime(newTime, meridiem) {\n    // update component global state\n    dispatch({\n      type: 'SET_TIME',\n      time: newTime,\n      meridiem: meridiem\n    });\n    refTime.current = newTime; // update time on parent\n\n    debounceUpdateParent();\n  } // this method is called only due to changes in clock actions\n\n\n  function updateTime(val) {\n    // account if minutes is 60 (eg: 59 rounded to 60)\n    val = val % 60; // account for max number being 12 during 12h mode\n\n    if (mode === _constants.MODE.HOURS_12 && meridiem === 'pm') {\n      val += 12;\n    } // generate new time and update timekeeper state\n\n\n    var unit = (0, _utils.isHourMode)(mode) ? 'hour' : 'minute'; // useful for same value when dragging between degrees in hours\n\n    if (refTime.current[unit] === val) {\n      return;\n    }\n\n    var newTime = (0, _objectSpread6.default)({}, time, _defineProperty({}, unit, val));\n\n    _actuallySetTime(newTime);\n  }\n\n  var setMode = (0, _react.useCallback)(function (mode) {\n    var m = mode;\n\n    if ((0, _utils.isHourMode)(mode)) {\n      m = config.hour24Mode ? _constants.MODE.HOURS_24 : _constants.MODE.HOURS_12;\n    }\n\n    dispatch({\n      type: 'SET_MODE',\n      mode: m\n    });\n  }, [config.hour24Mode]);\n  var value = {\n    time: time,\n    mode: mode,\n    updateTime: updateTime,\n    updateMeridiem: updateMeridiem,\n    setMode: setMode,\n    getComposedTime: getComposedTime\n  };\n  return (0, _core.jsx)(stateContext.Provider, {\n    value: value\n  }, children);\n}\n\nfunction useTimekeeperState() {\n  return (0, _react.useContext)(stateContext);\n}","map":null,"metadata":{},"sourceType":"script"}
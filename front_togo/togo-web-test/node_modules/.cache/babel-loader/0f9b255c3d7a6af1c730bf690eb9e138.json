{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport var FormLabel = /*#__PURE__*/forwardRef(function (passedProps, ref) {\n  var _field$getLabelProps;\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n  var children = props.children,\n    _props$requiredIndica = props.requiredIndicator,\n    requiredIndicator = _props$requiredIndica === void 0 ? /*#__PURE__*/React.createElement(RequiredIndicator, null) : _props$requiredIndica,\n    rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"requiredIndicator\"]);\n  var field = useFormControlContext();\n  var ownProps = (_field$getLabelProps = field == null ? void 0 : field.getLabelProps(rest, ref)) != null ? _field$getLabelProps : _extends({\n    ref: ref\n  }, rest);\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({}, ownProps, {\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"start\"\n    }, styles)\n  }), children, field != null && field.isRequired ? requiredIndicator : null);\n});\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function (props, ref) {\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field != null && field.isRequired)) return null;\n  var className = cx(\"chakra-form__required-indicator\", props.className);\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({}, field == null ? void 0 : field.getRequiredIndicatorProps(props, ref), {\n    __css: styles.requiredIndicator,\n    className: className\n  }));\n});\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}","map":{"version":3,"names":["chakra","forwardRef","omitThemingProps","useStyleConfig","useStyles","cx","__DEV__","React","useFormControlContext","FormLabel","passedProps","ref","_field$getLabelProps","styles","props","children","_props$requiredIndica","requiredIndicator","createElement","RequiredIndicator","rest","_objectWithoutPropertiesLoose","field","ownProps","getLabelProps","_extends","label","className","__css","display","textAlign","isRequired","displayName","span","getRequiredIndicatorProps"],"sources":["../../src/form-label.tsx"],"sourcesContent":["import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  useStyles,\n} from \"@chakra-ui/system\"\nimport { cx, __DEV__ } from \"@chakra-ui/utils\"\nimport * as React from \"react\"\nimport { useFormControlContext } from \"./form-control\"\n\nexport interface FormLabelProps\n  extends HTMLChakraProps<\"label\">,\n    ThemingProps<\"FormLabel\"> {\n  /**\n   * @type React.ReactElement\n   */\n  requiredIndicator?: React.ReactElement\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport const FormLabel = forwardRef<FormLabelProps, \"label\">(\n  (passedProps, ref) => {\n    const styles = useStyleConfig(\"FormLabel\", passedProps)\n    const props = omitThemingProps(passedProps)\n\n    const {\n      className,\n      children,\n      requiredIndicator = <RequiredIndicator />,\n      ...rest\n    } = props\n\n    const field = useFormControlContext()\n    const ownProps = field?.getLabelProps(rest, ref) ?? { ref, ...rest }\n\n    return (\n      <chakra.label\n        {...ownProps}\n        className={cx(\"chakra-form__label\", props.className)}\n        __css={{\n          display: \"block\",\n          textAlign: \"start\",\n          ...styles,\n        }}\n      >\n        {children}\n        {field?.isRequired ? requiredIndicator : null}\n      </chakra.label>\n    )\n  },\n)\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\"\n}\n\nexport interface RequiredIndicatorProps extends HTMLChakraProps<\"span\"> {}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport const RequiredIndicator = forwardRef<RequiredIndicatorProps, \"span\">(\n  (props, ref) => {\n    const field = useFormControlContext()\n    const styles = useStyles()\n\n    if (!field?.isRequired) return null\n\n    const className = cx(\"chakra-form__required-indicator\", props.className)\n\n    return (\n      <chakra.span\n        {...field?.getRequiredIndicatorProps(props, ref)}\n        __css={styles.requiredIndicator}\n        className={className}\n      />\n    )\n  },\n)\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\"\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SACEA,MADF,EAEEC,UAFF,EAIEC,gBAJF,EAMEC,cANF,EAOEC,SAPF,QAQO,mBARP;AASA,SAASC,EAAT,EAAaC,OAAb,QAA4B,kBAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,qBAAT,QAAsC,gBAAtC;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAMC,SAAS,gBAAGR,UAAU,CACjC,UAACS,WAAD,EAAcC,GAAd,EAAsB;EAAA,IAAAC,oBAAA;EACpB,IAAMC,MAAM,GAAGV,cAAc,CAAC,WAAD,EAAcO,WAAd,CAA7B;EACA,IAAMI,KAAK,GAAGZ,gBAAgB,CAACQ,WAAD,CAA9B;EAEA,IAEEK,QAFI,GAKFD,KALJ,CAEEC,QAFI;IAAAC,qBAAA,GAKFF,KALJ,CAGEG,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,2BAAGT,KAAA,CAAAW,aAAA,CAACC,iBAAD,UAAAH,qBAAA;IACjBI,IAJL,GAAAC,6BAAA,CAKIP,KALJ;EAOA,IAAMQ,KAAK,GAAGd,qBAAqB,EAAnC;EACA,IAAMe,QAAQ,IAAAX,oBAAA,GAAGU,KAAH,oBAAGA,KAAK,CAAEE,aAAP,CAAqBJ,IAArB,EAA2BT,GAA3B,CAAH,YAAAC,oBAAA,GAAAa,QAAA;IAAwCd,GAAA,EAAAA;EAAxC,GAAgDS,IAAhD,CAAd;EAEA,oBACEb,KAAA,CAAAW,aAAA,CAAClB,MAAD,CAAQ0B,KAAR,EAAAD,QAAA,KACMF,QADN;IAEEI,SAAS,EAAEtB,EAAE,CAAC,oBAAD,EAAuBS,KAAK,CAACa,SAA7B,CAFf;IAGEC,KAAK,EAAAH,QAAA;MACHI,OAAO,EAAE,OADN;MAEHC,SAAS,EAAE;IAFR,GAGAjB,MAHA;EAHP,IASGE,QATH,EAUGO,KAAK,QAAL,IAAAA,KAAK,CAAES,UAAP,GAAoBd,iBAApB,GAAwC,IAV3C,CADF;AAcD,CA7BgC,CAA5B;AAgCP,IAAIX,OAAJ,EAAa;EACXG,SAAS,CAACuB,WAAV,GAAwB,WAAxB;AACD;;AAID;AACA;AACA;AACA;AACA,OAAO,IAAMb,iBAAiB,gBAAGlB,UAAU,CACzC,UAACa,KAAD,EAAQH,GAAR,EAAgB;EACd,IAAMW,KAAK,GAAGd,qBAAqB,EAAnC;EACA,IAAMK,MAAM,GAAGT,SAAS,EAAxB;EAEA,IAAI,EAACkB,KAAD,YAACA,KAAK,CAAES,UAAR,CAAJ,EAAwB,OAAO,IAAP;EAExB,IAAMJ,SAAS,GAAGtB,EAAE,CAAC,iCAAD,EAAoCS,KAAK,CAACa,SAA1C,CAApB;EAEA,oBACEpB,KAAA,CAAAW,aAAA,CAAClB,MAAD,CAAQiC,IAAR,EAAAR,QAAA,KACMH,KADN,oBACMA,KAAK,CAAEY,yBAAP,CAAiCpB,KAAjC,EAAwCH,GAAxC,CADN;IAEEiB,KAAK,EAAEf,MAAM,CAACI,iBAFhB;IAGEU,SAAS,EAAEA;EAHb,GADF;AAOD,CAhBwC,CAApC;AAmBP,IAAIrB,OAAJ,EAAa;EACXa,iBAAiB,CAACa,WAAlB,GAAgC,mBAAhC;AACD"},"metadata":{},"sourceType":"module"}
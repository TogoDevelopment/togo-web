{"ast":null,"code":"import _slicedToArray from \"/home/system/togo-web-test/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx\";\n\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport './OrdersTabularView.css';\nimport translate from \"../../i18n/translate\";\nimport { Link } from \"react-router-dom\";\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\";\n/* edited (getOrderDetails imported) */\n\nexport var PackageTypes = {\n  \"1\": \"FOOD\",\n  \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\n  \"3\": \"MEDIUM_PACKAGE\",\n  \"4\": \"LARGE_PACKAGE\"\n};\nexport var DeliveryTypes = {\n  \"1\": \"DELIVERY\",\n  \"2\": \"COD\",\n  \"3\": \"PICKUP\",\n  \"4\": \"PAP\"\n};\nexport var deliverFormatter = function deliverFormatter(data) {\n  if (DeliveryTypes[parseInt(data.deliveryWay)]) {\n    // edited (old => data.DeliveryWays)\n    return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)]);\n  }\n\n  return \"\";\n};\nexport var packageFormatter = function packageFormatter(data) {\n  if (PackageTypes[parseInt(data.TypeLoad)]) {\n    // edited (old => data.PackageType)\n    return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)]);\n  }\n\n  return \"\";\n};\n/* edited (timeFormatter added) */\n\nexport var timeFormatter = function timeFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[1];\n  }\n\n  return \"\";\n};\n/* edited (dateFormatter added) */\n\nexport var dateFormatter = function dateFormatter(data) {\n  if (data.DateLoad) {\n    return data.DateLoad.split(\" \")[0];\n  }\n\n  return \"\";\n};\n/* edited (statusFormat added) */\n\nexport var statusFormat = function statusFormat(data) {\n  if (data.isAcceptDelivery === null) {\n    return \"Waiting for Bid\";\n  } else if (data.pickup_date === null && data.orderfinished === null) {\n    return \"Bid Accepted\";\n  } else if (data.pickup_date !== null && data.orderfinished === null) {\n    return \"Out for Delivery\";\n  } else if (data.orderfinished === \"1\" && data.IsDeleted === \"1\") {\n    return \"Deleted\";\n  } else if (data.orderfinished === \"1\" && data.deliveryWay === \"2\") {\n    return \"Delivered and Collected\";\n  } else if (data.orderfinished === \"1\" && data.deliveryWay === \"1\") {\n    return \"Deliveredd\";\n  }\n\n  return \"\";\n};\nexport var OrdersTabularView = function OrdersTabularView(_ref) {\n  var orders = _ref.orders,\n      currentPage = _ref.currentPage,\n      update = _ref.update;\n\n  // console.log(orders)\n  var _useState = useState(\"-\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      bidPrice = _useState2[0],\n      setBidPrice = _useState2[1];\n  /*const test = getOrderDetails(431).then((orderDetailsRes) => {\r\n          setBidPrice(orderDetailsRes.CostLoad);\r\n  })\r\n      console.log(test);*/\n\n  /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n          setOrderDetails(orderDetailsRes);\r\n            setReceiverAddress({\r\n              otherDetails: orderDetailsRes.OtherDetailsDes,\r\n              phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n              long: orderDetailsRes.LongReciver,\r\n              lat: orderDetailsRes.LatReciver\r\n          });\r\n  });*/\n  // console.log(orders);\n\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      columns = _useState4[0],\n      setColumns = _useState4[1];\n\n  var showDetailsButton = useCallback(function (orderId) {\n    return /*#__PURE__*/React.createElement(Link, {\n      to: {\n        pathname: \"/account/Order/\".concat(orderId),\n        state: {\n          currentPage: currentPage\n        }\n      },\n      style: {\n        paddingRight: \"20%\",\n        paddingLeft: \"20%\",\n        border: \"none\",\n        width: \"100%\",\n        textAlign: \"center\"\n      },\n      className: \"btn btn-primary btn-rounded btn-grad\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }\n    }, translate(\"ORDERS.SHOW\"));\n  }, [currentPage]);\n  useEffect(function () {\n    var newColumns = [];\n    /* edited (differ between transporter and client columns) */\n\n    if (isTransporter()) {\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"id\"\n      }, {\n        label: translate(\"ORDERS.DELIVERY_TYPE\"),\n        key: \"deliveryWay\",\n        format: deliverFormatter\n      }, {\n        label: translate(\"ORDERS.PACKAGE_TYPE\"),\n        key: \"TypeLoad\",\n        format: packageFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateLoad\",\n        format: dateFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_TIME\"),\n        key: \"DateLoad\",\n        format: timeFormatter\n      }, {\n        label: translate(\"ORDERS.FROM_CITY\"),\n        key: \"fromAddress\"\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"toAddress\"\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"isAcceptDelivery\",\n        format: statusFormat\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"id\",\n        format: function format(_ref2) {\n          var id = _ref2.id;\n          return showDetailsButton(id);\n        }\n      }];\n    } else {\n      newColumns = [{\n        label: translate(\"ORDERS.ORDER_NUM\"),\n        key: \"idOrder\"\n      }, {\n        label: translate(\"ORDERS.DELIVERY_TYPE\"),\n        key: \"DeliveryWays\",\n        format: deliverFormatter\n      }, {\n        label: translate(\"ORDERS.PACKAGE_TYPE\"),\n        key: \"PackageType\",\n        format: packageFormatter\n      }, {\n        label: translate(\"ORDERS.ORDER_DATE\"),\n        key: \"DateOrder\"\n      }, {\n        label: translate(\"ORDERS.ORDER_TIME\"),\n        key: \"TimeOrder\"\n      }, {\n        label: translate(\"ORDERS.FROM_CITY\"),\n        key: \"FromAddress\"\n      }, {\n        label: translate(\"ORDERS.TO_CITY\"),\n        key: \"ToAddress\"\n      }, {\n        label: translate(\"ORDERS.ORDER_STATUS\"),\n        key: \"OrderStatus\"\n      }, {\n        label: translate(\"ORDERS.FULL_DETAILS\"),\n        key: \"idOrder\",\n        format: function format(_ref3) {\n          var idOrder = _ref3.idOrder;\n          return showDetailsButton(idOrder);\n        }\n      }];\n    }\n    /* edited (comment bidPrice) */\n\n    /*if (isTransporter()) {\r\n        newColumns.splice(3, 0, {\r\n            label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n            key: \"bidPrice\",\r\n            format: ({idOrder}) => <p>{bidPrice}</p>\r\n        });\r\n    }*/\n\n\n    if (!isTransporter() && currentPage === \"all-orders\") {\n      newColumns.push({\n        label: \"\",\n        key: \"\",\n        format: function format(_ref4) {\n          var idOrder = _ref4.idOrder;\n          return /*#__PURE__*/React.createElement(CancelOrder, {\n            className: \"w-100\",\n            orderId: idOrder,\n            onSuccess: update,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 229,\n              columnNumber: 42\n            }\n          });\n        }\n      });\n    }\n    /* edited (add bidscount) */\n\n    /* if (currentPage === \"all-orders\" && !isTransporter()) {\r\n        newColumns.splice(7, 0, {\r\n            label: translate(\"ORDERS.BIDS_COUNT\"),\r\n            key: \"bidsCount\"\r\n        });\r\n    } */\n\n    /* edited (to display my bid as transporter) */\n\n    /* if (currentPage === \"all-orders\" && isTransporter()) {\r\n        newColumns.splice(7, 0, {\r\n            label: \"\",\r\n            key: \"\"\r\n        });\r\n    } */\n\n    /* edited (commented) */\n\n    /* if (currentPage === \"current-orders\") {\r\n        //TODO:: key to be changed\r\n          newColumns.splice(3, 0, {\r\n            label: translate(\"ORDERS.PRICE\"),\r\n            key: \"CostLoad\"\r\n        });\r\n        \r\n        if(isTransporterMaster()){\r\n            newColumns.splice(newColumns.length - 1, 0,{\r\n                label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                key: \"AssignedMemberName\",\r\n            });\r\n        }\r\n    } */\n\n    /* else if (currentPage === \"previous-orders\") {\r\n    newColumns.push({\r\n       label: translate(\"ORDERS.ORDER_STATUS\"),\r\n       key: \"idOrder\",\r\n       format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n    })\r\n    } */\n\n\n    setColumns(newColumns);\n  }, [currentPage, showDetailsButton]);\n  return /*#__PURE__*/React.createElement(DynamicTable, {\n    columns: columns,\n    data: orders,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 12\n    }\n  });\n};","map":{"version":3,"sources":["/home/system/togo-web-test/src/components/Orders/OrdersTabularView.jsx"],"names":["React","useCallback","useEffect","useState","translate","Link","CancelOrder","DynamicTable","isTransporter","isTransporterMaster","getOrderDetails","PackageTypes","DeliveryTypes","deliverFormatter","data","parseInt","deliveryWay","packageFormatter","TypeLoad","timeFormatter","DateLoad","split","dateFormatter","statusFormat","isAcceptDelivery","pickup_date","orderfinished","IsDeleted","OrdersTabularView","orders","currentPage","update","bidPrice","setBidPrice","columns","setColumns","showDetailsButton","orderId","pathname","state","paddingRight","paddingLeft","border","width","textAlign","newColumns","label","key","format","id","idOrder","push"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport './OrdersTabularView.css';\r\nimport translate from \"../../i18n/translate\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { CancelOrder } from \"../OrdersManager/CancelOrder\";\r\nimport DynamicTable from \"../DynamicTable/DynamicTable\";\r\nimport { isTransporter, isTransporterMaster } from \"../../Util\";\r\n\r\nimport { getOrderDetails } from \"../../APIs/OrdersAPIs\"; /* edited (getOrderDetails imported) */\r\n\r\nexport const PackageTypes = {\r\n    \"1\": \"FOOD\",\r\n    \"2\": \"SMALL_PACKAGE_AND_ENVELOPS\",\r\n    \"3\": \"MEDIUM_PACKAGE\",\r\n    \"4\": \"LARGE_PACKAGE\"\r\n};\r\n\r\nexport const DeliveryTypes = {\r\n    \"1\": \"DELIVERY\",\r\n    \"2\": \"COD\",\r\n    \"3\": \"PICKUP\",\r\n    \"4\": \"PAP\"\r\n};\r\n\r\nexport const deliverFormatter = (data) => {\r\n    if (DeliveryTypes[parseInt(data.deliveryWay)]) { // edited (old => data.DeliveryWays)\r\n        return translate(\"ORDERS.\" + DeliveryTypes[parseInt(data.deliveryWay)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const packageFormatter = (data) => {\r\n    if (PackageTypes[parseInt(data.TypeLoad)]) { // edited (old => data.PackageType)\r\n        return translate(\"ORDERS.\" + PackageTypes[parseInt(data.TypeLoad)])\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (timeFormatter added) */\r\nexport const timeFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[1];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (dateFormatter added) */\r\nexport const dateFormatter = (data) => {\r\n    if (data.DateLoad) {\r\n        return data.DateLoad.split(\" \")[0];\r\n    }\r\n    return \"\";\r\n}\r\n\r\n/* edited (statusFormat added) */\r\nexport const statusFormat = (data) => {\r\n    if (data.isAcceptDelivery === null) {\r\n        return \"Waiting for Bid\"\r\n    } else if (data.pickup_date === null && data.orderfinished === null) {\r\n        return \"Bid Accepted\"\r\n    } else if (data.pickup_date !== null && data.orderfinished === null) {\r\n        return \"Out for Delivery\"\r\n    } else if (data.orderfinished === \"1\" && data.IsDeleted === \"1\") {\r\n        return \"Deleted\"\r\n    } else if (data.orderfinished === \"1\" && data.deliveryWay === \"2\") {\r\n        return \"Delivered and Collected\"\r\n    } else if (data.orderfinished === \"1\" && data.deliveryWay === \"1\") {\r\n        return \"Deliveredd\"\r\n    }\r\n    return \"\";\r\n}\r\n\r\nexport const OrdersTabularView = ({ orders, currentPage, update }) => {\r\n\r\n    // console.log(orders)\r\n\r\n    const [bidPrice, setBidPrice] = useState(\"-\");\r\n\r\n\r\n    /*const test = getOrderDetails(431).then((orderDetailsRes) => {\r\n            setBidPrice(orderDetailsRes.CostLoad);\r\n    })\r\n\r\n\r\n    console.log(test);*/\r\n\r\n\r\n    /*getOrderDetails(orderId).then((orderDetailsRes) => {\r\n            setOrderDetails(orderDetailsRes);\r\n\r\n            setReceiverAddress({\r\n                otherDetails: orderDetailsRes.OtherDetailsDes,\r\n                phoneCustomer: orderDetailsRes.ReceiverAddressNum,\r\n                long: orderDetailsRes.LongReciver,\r\n                lat: orderDetailsRes.LatReciver\r\n            });\r\n    });*/\r\n\r\n    // console.log(orders);\r\n\r\n    const [columns, setColumns] = useState([]);\r\n\r\n    const showDetailsButton = useCallback((orderId) =>\r\n        <Link\r\n            to={{\r\n                pathname: `/account/Order/${orderId}`,\r\n                state: { currentPage: currentPage },\r\n            }}\r\n            style={{\r\n                paddingRight: \"20%\",\r\n                paddingLeft: \"20%\",\r\n                border: \"none\",\r\n                width: \"100%\",\r\n                textAlign: \"center\",\r\n            }}\r\n            className=\"btn btn-primary btn-rounded btn-grad\"\r\n        >\r\n            {translate(\"ORDERS.SHOW\")}\r\n        </Link>, [currentPage]);\r\n\r\n    useEffect(() => {\r\n\r\n        let newColumns = [];\r\n\r\n        /* edited (differ between transporter and client columns) */\r\n        if (isTransporter()) {\r\n\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"id\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"deliveryWay\",\r\n                    format: deliverFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"TypeLoad\",\r\n                    format: packageFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateLoad\",\r\n                    format: dateFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"DateLoad\",\r\n                    format: timeFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"fromAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"toAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"isAcceptDelivery\",\r\n                    format: statusFormat\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"id\",\r\n                    format: ({ id }) => showDetailsButton(id)\r\n                }\r\n            ];\r\n        } else {\r\n            newColumns = [\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_NUM\"),\r\n                    key: \"idOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.DELIVERY_TYPE\"),\r\n                    key: \"DeliveryWays\",\r\n                    format: deliverFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.PACKAGE_TYPE\"),\r\n                    key: \"PackageType\",\r\n                    format: packageFormatter\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_DATE\"),\r\n                    key: \"DateOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_TIME\"),\r\n                    key: \"TimeOrder\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FROM_CITY\"),\r\n                    key: \"FromAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.TO_CITY\"),\r\n                    key: \"ToAddress\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                    key: \"OrderStatus\"\r\n                },\r\n                {\r\n                    label: translate(\"ORDERS.FULL_DETAILS\"),\r\n                    key: \"idOrder\",\r\n                    format: ({ idOrder }) => showDetailsButton(idOrder)\r\n                }\r\n            ];\r\n        }\r\n\r\n        /* edited (comment bidPrice) */\r\n        /*if (isTransporter()) {\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDER_DETAILS.BID_PRICE\"),\r\n                key: \"bidPrice\",\r\n                format: ({idOrder}) => <p>{bidPrice}</p>\r\n            });\r\n        }*/\r\n\r\n        if (!isTransporter() && currentPage === \"all-orders\") {\r\n            newColumns.push({\r\n                label: \"\",\r\n                key: \"\",\r\n                format: ({ idOrder }) => <CancelOrder className=\"w-100\" orderId={idOrder} onSuccess={update} />\r\n            });\r\n        }\r\n\r\n        /* edited (add bidscount) */\r\n        /* if (currentPage === \"all-orders\" && !isTransporter()) {\r\n            newColumns.splice(7, 0, {\r\n                label: translate(\"ORDERS.BIDS_COUNT\"),\r\n                key: \"bidsCount\"\r\n            });\r\n        } */\r\n\r\n        /* edited (to display my bid as transporter) */\r\n        /* if (currentPage === \"all-orders\" && isTransporter()) {\r\n            newColumns.splice(7, 0, {\r\n                label: \"\",\r\n                key: \"\"\r\n            });\r\n        } */\r\n\r\n        /* edited (commented) */\r\n        /* if (currentPage === \"current-orders\") {\r\n            //TODO:: key to be changed\r\n\r\n            newColumns.splice(3, 0, {\r\n                label: translate(\"ORDERS.PRICE\"),\r\n                key: \"CostLoad\"\r\n            });\r\n            \r\n            if(isTransporterMaster()){\r\n                newColumns.splice(newColumns.length - 1, 0,{\r\n                    label: translate(\"ORDER_DETAILS.ASSIGNED\"),\r\n                    key: \"AssignedMemberName\",\r\n                });\r\n            }\r\n        } */ /* else if (currentPage === \"previous-orders\") {\r\n            newColumns.push({\r\n                label: translate(\"ORDERS.ORDER_STATUS\"),\r\n                key: \"idOrder\",\r\n                format: ({IsFinished, IsDeleted}) => IsFinished ? translate(\"ORDERS.COMPLETED\") : IsDeleted ? translate(\"ORDERS.CANCELED\") : null\r\n            })\r\n        } */\r\n\r\n        setColumns(newColumns);\r\n    }, [currentPage, showDetailsButton]);\r\n\r\n    return <DynamicTable columns={columns} data={orders} />;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
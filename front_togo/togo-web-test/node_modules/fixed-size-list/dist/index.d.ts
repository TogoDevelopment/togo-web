import EventEmitter from 'mitt';
export declare const eventCreated = "FixedSizeListCreated";
export declare const eventReset = "FixedSizeListReset";
export declare const eventNewItem = "FixedSizeListNewItem";
export declare const eventTruncate = "FixedSizeListTruncate";
export declare type FixedSizeListEvents = typeof eventCreated | typeof eventReset | typeof eventNewItem | typeof eventTruncate | '*';
declare type FixedSizeListEventEmitterCallback<T, E extends FixedSizeListEvents> = E extends typeof eventCreated ? (initialList: T[]) => void : E extends typeof eventNewItem ? (newEl: T) => void : E extends typeof eventTruncate ? (removedEls: T[]) => void : () => void;
export declare class FixedSizeList<T> {
    readonly maxSize: number;
    protected _list: T[];
    private readonly eventEmitter;
    constructor(maxSize: number, _list?: T[], eventEmitter?: EventEmitter.Emitter);
    add(newEl: T): number;
    reset(): void;
    on<E extends FixedSizeListEvents>(event: FixedSizeListEvents, cb: FixedSizeListEventEmitterCallback<T, E>): () => void;
    readonly data: readonly T[];
    readonly length: number;
    protected _truncate(): void;
}
export {};

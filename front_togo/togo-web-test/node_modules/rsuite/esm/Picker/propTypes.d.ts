import PropTypes from 'prop-types';
import { PickerAppearance, TypeAttributes } from '../@types/common';
export declare const pickerPropTypes: {
    classPrefix: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    locale: PropTypes.Requireable<any>;
    appearance: PropTypes.Requireable<string>;
    block: PropTypes.Requireable<boolean>;
    containerPadding: PropTypes.Requireable<number>;
    container: PropTypes.Requireable<any>;
    disabled: PropTypes.Requireable<boolean>;
    toggleAs: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    menuClassName: PropTypes.Requireable<string>;
    menuStyle: PropTypes.Requireable<object>;
    placeholder: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    placement: PropTypes.Requireable<any>;
    /**
     * Prevent floating element overflow
     */
    preventOverflow: PropTypes.Requireable<boolean>;
    open: PropTypes.Requireable<boolean>;
    defaultOpen: PropTypes.Requireable<boolean>;
    cleanable: PropTypes.Requireable<boolean>;
    renderExtraFooter: PropTypes.Requireable<(...args: any[]) => any>;
    renderValue: PropTypes.Requireable<(...args: any[]) => any>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    onClean: PropTypes.Requireable<(...args: any[]) => any>;
    onEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onEntering: PropTypes.Requireable<(...args: any[]) => any>;
    onEntered: PropTypes.Requireable<(...args: any[]) => any>;
    onExit: PropTypes.Requireable<(...args: any[]) => any>;
    onExiting: PropTypes.Requireable<(...args: any[]) => any>;
    onExited: PropTypes.Requireable<(...args: any[]) => any>;
};
export declare const listPickerPropTypes: {
    data: PropTypes.Requireable<any[]>;
    valueKey: PropTypes.Requireable<string>;
    labelKey: PropTypes.Requireable<string>;
    childrenKey: PropTypes.Requireable<string>;
    disabledItemValues: PropTypes.Requireable<any[]>;
    value: PropTypes.Requireable<any>;
    defaultValue: PropTypes.Requireable<any>;
    onChange: PropTypes.Requireable<(...args: any[]) => any>;
    classPrefix: PropTypes.Requireable<string>;
    className: PropTypes.Requireable<string>;
    style: PropTypes.Requireable<object>;
    locale: PropTypes.Requireable<any>;
    appearance: PropTypes.Requireable<string>;
    block: PropTypes.Requireable<boolean>;
    containerPadding: PropTypes.Requireable<number>;
    container: PropTypes.Requireable<any>;
    disabled: PropTypes.Requireable<boolean>;
    toggleAs: PropTypes.Requireable<PropTypes.ReactComponentLike>;
    menuClassName: PropTypes.Requireable<string>;
    menuStyle: PropTypes.Requireable<object>;
    placeholder: PropTypes.Requireable<PropTypes.ReactNodeLike>;
    placement: PropTypes.Requireable<any>;
    /**
     * Prevent floating element overflow
     */
    preventOverflow: PropTypes.Requireable<boolean>;
    open: PropTypes.Requireable<boolean>;
    defaultOpen: PropTypes.Requireable<boolean>;
    cleanable: PropTypes.Requireable<boolean>;
    renderExtraFooter: PropTypes.Requireable<(...args: any[]) => any>;
    renderValue: PropTypes.Requireable<(...args: any[]) => any>;
    onOpen: PropTypes.Requireable<(...args: any[]) => any>;
    onClose: PropTypes.Requireable<(...args: any[]) => any>;
    onClean: PropTypes.Requireable<(...args: any[]) => any>;
    onEnter: PropTypes.Requireable<(...args: any[]) => any>;
    onEntering: PropTypes.Requireable<(...args: any[]) => any>;
    onEntered: PropTypes.Requireable<(...args: any[]) => any>;
    onExit: PropTypes.Requireable<(...args: any[]) => any>;
    onExiting: PropTypes.Requireable<(...args: any[]) => any>;
    onExited: PropTypes.Requireable<(...args: any[]) => any>;
};
export declare const pickerDefaultProps: {
    cleanable: boolean;
    placement: TypeAttributes.Placement;
    appearance: PickerAppearance;
};
export declare const listPickerDefaultProps: {
    data: any[];
    disabledItemValues: any[];
    childrenKey: string;
    valueKey: string;
    labelKey: string;
    cleanable: boolean;
    placement: TypeAttributes.Placement;
    appearance: PickerAppearance;
};

import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/esm/objectWithoutPropertiesLoose";
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import NavItem from './NavItem';
import Dropdown from '../Dropdown';
import { useClassNames } from '../utils';
import { NavbarContext } from '../Navbar/Navbar';
import { SidenavContext } from '../Sidenav/Sidenav';
import NavContext from './NavContext';
import useEnsuredRef from '../utils/useEnsuredRef';
import Menubar from '../Menu/Menubar';
var defaultProps = {
  classPrefix: 'nav',
  appearance: 'default',
  as: 'div'
};
var Nav = /*#__PURE__*/React.forwardRef(function (props, ref) {
  var Component = props.as,
      classPrefix = props.classPrefix,
      appearance = props.appearance,
      vertical = props.vertical,
      justified = props.justified,
      reversed = props.reversed,
      pullRight = props.pullRight,
      className = props.className,
      children = props.children,
      activeKeyProp = props.activeKey,
      onSelectProp = props.onSelect,
      rest = _objectWithoutPropertiesLoose(props, ["as", "classPrefix", "appearance", "vertical", "justified", "reversed", "pullRight", "className", "children", "activeKey", "onSelect"]);

  var sidenav = useContext(SidenavContext); // Whether inside a <Navbar>

  var navbar = useContext(NavbarContext);
  var menubarRef = useEnsuredRef(ref);

  var _useClassNames = useClassNames(classPrefix),
      withClassPrefix = _useClassNames.withClassPrefix,
      merge = _useClassNames.merge,
      rootPrefix = _useClassNames.rootPrefix,
      prefix = _useClassNames.prefix;

  var classes = merge(className, rootPrefix({
    'navbar-nav': navbar,
    'navbar-right': pullRight,
    'sidenav-nav': sidenav
  }), withClassPrefix(appearance, {
    horizontal: navbar || !vertical && !sidenav,
    vertical: vertical || sidenav,
    justified: justified,
    reversed: reversed
  }));

  var _ref = sidenav || {},
      activeKeyFromSidenav = _ref.activeKey,
      _ref$onSelect = _ref.onSelect,
      onSelectFromSidenav = _ref$onSelect === void 0 ? onSelectProp : _ref$onSelect;

  var activeKey = activeKeyProp !== null && activeKeyProp !== void 0 ? activeKeyProp : activeKeyFromSidenav;

  if (sidenav !== null && sidenav !== void 0 && sidenav.expanded) {
    return /*#__PURE__*/React.createElement(NavContext.Provider, {
      value: {
        activeKey: activeKey,
        onSelect: onSelectProp !== null && onSelectProp !== void 0 ? onSelectProp : onSelectFromSidenav
      }
    }, /*#__PURE__*/React.createElement("ul", _extends({
      ref: ref,
      className: classes
    }, rest), children));
  }

  var hasWaterline = appearance !== 'default'; // If inside a collapsed <Sidenav>, render an ARIA `menubar` (vertical)

  if (sidenav) {
    return /*#__PURE__*/React.createElement(NavContext.Provider, {
      value: {
        activeKey: activeKey,
        onSelect: onSelectProp !== null && onSelectProp !== void 0 ? onSelectProp : onSelectFromSidenav
      }
    }, /*#__PURE__*/React.createElement(Menubar, {
      vertical: !!sidenav
    }, function (menubar, ref) {
      return /*#__PURE__*/React.createElement(Component, _extends({
        ref: ref
      }, rest, {
        className: classes
      }, menubar), children);
    }));
  }

  return /*#__PURE__*/React.createElement(NavContext.Provider, {
    value: {
      activeKey: activeKey,
      onSelect: onSelectProp !== null && onSelectProp !== void 0 ? onSelectProp : onSelectFromSidenav
    }
  }, /*#__PURE__*/React.createElement(Component, _extends({}, rest, {
    ref: menubarRef,
    className: classes
  }), children, hasWaterline && /*#__PURE__*/React.createElement("div", {
    className: prefix('bar')
  })));
});
Nav.Dropdown = Dropdown;
Nav.Item = NavItem;
Nav.displayName = 'Nav';
Nav.defaultProps = defaultProps;
Nav.propTypes = {
  classPrefix: PropTypes.string,
  className: PropTypes.string,
  children: PropTypes.node,
  appearance: PropTypes.oneOf(['default', 'subtle', 'tabs']),
  // Reverse Direction of tabs/subtle
  reversed: PropTypes.bool,
  justified: PropTypes.bool,
  vertical: PropTypes.bool,
  pullRight: PropTypes.bool,
  activeKey: PropTypes.any,
  onSelect: PropTypes.func
};
export default Nav;